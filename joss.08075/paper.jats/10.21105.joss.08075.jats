<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8075</article-id>
<article-id pub-id-type="doi">10.21105/joss.08075</article-id>
<title-group>
<article-title>KeepDelta: A Python Library for Human-Readable Data
Differencing</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0004-3387-4502</contrib-id>
<name>
<surname>Noorghasemi</surname>
<given-names>Aslan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5024-7701</contrib-id>
<name>
<surname>McComb</surname>
<given-names>Christopher</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Mechanical Engineering, Carnegie Mellon
University, USA</institution>
<institution-id institution-id-type="ROR">05x2bcf33</institution-id>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-04-01">
<day>1</day>
<month>4</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>110</issue>
<fpage>8075</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
<kwd>simulation</kwd>
<kwd>sensing</kwd>
<kwd>data structures</kwd>
<kwd>data differencing</kwd>
<kwd>delta encoding</kwd>
<kwd>delta compression</kwd>
<kwd>differential compression</kwd>
<kwd>change tracking</kwd>
<kwd>human-readable</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Efficiently managing evolving data is crucial in applications like
  computational simulations and sensing, where dynamic data tracking and
  processing are essential. In simulations, the traditional method known
  as full-state encoding stores the entire system state, including all
  nested data structures and variable values, at every timestep. While
  simple to implement, this approach is highly storage-intensive. On the
  other hand, recalculating states from scratch to avoid storage demands
  is computationally expensive. Similarly, in sensing, continuously
  transmitting full data snapshots is inefficient, leading to increased
  bandwidth consumption and latency. <italic>KeepDelta</italic>
  addresses this challenge by providing a lightweight Python library
  that captures and applies only the changes (deltas) between successive
  states of complex, nested Python data structures. Designed for clarity
  and ease of use, <monospace>KeepDelta</monospace> produces
  human-readable outputs, facilitating debugging and analysis in
  research applications.</p>
  <fig>
    <caption><p>KeepDelta logo</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/logo.png" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>High-frequency data sampling is fundamental in both scientific
  simulations and real-world sensing applications, where large volumes
  of evolving data must be efficiently managed. Both domains, whether
  generating synthetic data through computational models or collecting
  real-time measurements from physical sensors, face a common challenge:
  storing, transmitting, and processing dynamic data without excessive
  redundancy.</p>
  <p>First and foremost, <monospace>KeepDelta</monospace> applies to
  simulation. Simulation is a widely used methodology across all applied
  science disciplines, offering a flexible, powerful, and intuitive tool
  for designing processes or systems and maximizing their efficiency
  (<xref alt="Kleijnen, 2018" rid="ref-SimulationExperiments" ref-type="bibr">Kleijnen,
  2018</xref>). Specifically, computational simulations are invaluable
  tools for studying complex systems and their behaviors
  (<xref alt="Aumann, 2007" rid="ref-ComplexSystemsSimulation" ref-type="bibr">Aumann,
  2007</xref>). These studies often take the form of computer
  experiments, where data is generated through pseudo-random sampling
  from known probability distributions. This approach serves as an
  invaluable resource for research, particularly in evaluating new
  methods and comparing alternative approaches
  (<xref alt="Morris et al., 2019" rid="ref-SimulationStudies" ref-type="bibr">Morris
  et al., 2019</xref>).</p>
  <p>Secondly, <monospace>KeepDelta</monospace> also applies to sensing.
  Sensing technologies are employed across diverse scientific and
  engineering domains, enabling continuous monitoring and analysis of
  dynamic environments. It is common for these systems to utilize a set
  of sensors to capture real-time data, which is essential for studying
  systems behaviors, informed decision-making, and system optimization
  (<xref alt="Al-Qurabat et al., 2021" rid="ref-agricultureIoT" ref-type="bibr">Al-Qurabat
  et al., 2021</xref>;
  <xref alt="Felton et al., 2018" rid="ref-RemotePhysiologicalandEnvironmentalMonitoring" ref-type="bibr">Felton
  et al., 2018</xref>).</p>
  <p>Both simulations and sensing require mechanisms to track and store
  evolving states of data structures over time. In simulations, the
  naive approach of saving full snapshots at every timestep leads to
  excessive storage demands, while recalculating states from scratch is
  computationally expensive. Similarly, in sensing applications,
  continuously storing or transmitting full data snapshots is
  impractical, particularly in bandwidth-limited and remote
  environments. Instead of relying on these easy-to-implement but
  inefficient methods, <monospace>KeepDelta</monospace> introduces an
  optimized middle ground by saving only the <italic>deltas</italic>
  (changes) between states, significantly reducing storage and
  computation overhead. This Delta Encoding technique has been
  successfully applied in other domains where managing evolving data
  efficiently is critical, such as web development
  (<xref alt="Hoff et al., 2002" rid="ref-DeltaEncodingInHTTP" ref-type="bibr">Hoff
  et al., 2002</xref>) and software version management
  (<xref alt="Percival, 2003" rid="ref-NaiveDifferencesOfExecutableCode" ref-type="bibr">Percival,
  2003</xref>).</p>
  <fig>
    <caption><p>Comparison of data management approaches in evolving
    systems. Full-state encoding incurs high storage and bandwidth
    costs, while delta encoding saves only changes for efficiency.
    Rerunning reduces storage but increases computation and is often
    impractical for sensing real-world data. The bottom gradients
    illustrate trade-offs: storage/bandwidth decrease left to right,
    while data loading time increases.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/comparison.png" />
  </fig>
  <p>Human-readability is crucial for debugging and development in both
  simulation and sensing projects, and <monospace>KeepDelta</monospace>
  is tailored specifically for this purpose. It is lightweight and has
  no dependencies, supports native Python data structures, and generates
  results that are easy to interpret. This makes it an ideal tool for
  Python developers and researchers seeking a simple yet powerful
  solution for change management. By providing clear, human-readable
  output, <monospace>KeepDelta</monospace> enhances both the development
  process and debugging efficiency, making it easier to track and manage
  changes in complex projects involving both computational models and
  real-world sensing systems.</p>
  <fig>
    <caption><p>An example of human-readable change tracking with
    KeepDelta. (a) Previous smart-home state. (b) State after updates to
    temperature, lights, door lock, schedule, and alerts. (c) Delta
    produced by KeepDelta, which records only the changes including
    numeric adjustments, boolean toggles, a tuple insertion, and a new
    set element, offering a concise, easily interpretable
    summary.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/example.png" />
  </fig>
</sec>
<sec id="comparison-to-existing-tools">
  <title>Comparison to Existing Tools</title>
  <p>In the landscape of Python libraries designed for delta encoding,
  several notable tools have emerged, each with distinct features and
  applications.</p>
  <p><monospace>xdelta3</monospace>
  (<xref alt="Colvin, 2017" rid="ref-xdelta3" ref-type="bibr">Colvin,
  2017</xref>) and its predecessor, <monospace>xdelta</monospace>
  (<xref alt="MacDonald, 2016" rid="ref-xdelta" ref-type="bibr">MacDonald,
  2016</xref>), are tools that perform delta encoding at the binary
  level. These utilities are particularly effective for binary file
  differencing and are widely used in version control systems and data
  synchronization tasks. However, both are considered outdated and are
  no longer actively maintained. Their operation at the binary level
  results in outputs that are not human-readable, and they are not
  tailored for Python data structures, limiting their applicability in
  Python-centric workflows.</p>
  <p><monospace>detools</monospace>
  (<xref alt="Moqvist, 2023" rid="ref-detools" ref-type="bibr">Moqvist,
  2023</xref>) is a Python package that focuses on applying and
  generating binary patches using a custom delta algorithm optimized for
  embedded systems. While it is efficient and actively maintained,
  <monospace>detools</monospace> operates strictly at the binary level,
  producing outputs that are not human-readable and lacking support for
  native Python data structures. As such, it is more suitable for
  firmware and embedded development than for Python-centric simulation
  or data analysis workflows.</p>
  <p><monospace>difflib</monospace> is part of the Python Standard
  Library and requires no external dependencies. It provides unified-
  and context‑style text diffs for strings and lists, making it readily
  available but limited to sequence comparison rather than structured
  data differencing. It does not expose a programmatic delta object, so
  you cannot save its diff output as a delta for later state
  reconstruction.</p>
  <p><monospace>DataDiff</monospace>
  (<xref alt="Brondsema &amp; R. Coombs, 2023" rid="ref-datadiff" ref-type="bibr">Brondsema
  &amp; R. Coombs, 2023</xref>) offers human-readable, unified-diff
  style comparisons of Python objects, including nested dictionaries,
  sequences, sets, and multi-line strings, and integrates with testing
  frameworks via nose-assert. Similar to <monospace>difflib</monospace>,
  it produces text-based diffs, but unlike
  <monospace>difflib</monospace>, it handles arbitrary Python objects
  rather than only strings or lists. However, like
  <monospace>difflib</monospace>, <monospace>DataDiff</monospace> only
  generates one-off diffs and does not expose a programmatic delta
  object for incremental change tracking or later state
  reconstruction.</p>
  <p><monospace>DeepDiff</monospace>
  (<xref alt="Dehpour, 2025" rid="ref-deepdiff" ref-type="bibr">Dehpour,
  2025</xref>) is a contemporary library that facilitates the
  identification of differences between complex Python data structures,
  including dictionaries, lists, and sets. It extends support to
  external libraries like <monospace>NumPy</monospace>
  (<xref alt="Harris et al., 2020" rid="ref-numpy" ref-type="bibr">Harris
  et al., 2020</xref>), enhancing its versatility.
  <monospace>DeepDiff</monospace> also offers a range of configuration
  options, such as ignoring iterable order, controlling
  significant‐digit precision in numeric comparisons, and custom
  comparator functions which make it highly flexible but add complexity
  and dependencies. Moreover, this extensibility can lead to outputs
  that are less human-readable compared to
  <monospace>KeepDelta</monospace>, and the added dependencies may not
  be necessary for all projects.</p>
  <p>In contrast to these alternatives, <monospace>KeepDelta</monospace>
  is a lightweight Python library tailored for simulations and sensing,
  focusing on efficient delta management for built-in Python data
  structures. It produces human-readable outputs that facilitate
  debugging and research workflows. Written entirely in Python and free
  of external dependencies, <monospace>KeepDelta</monospace> integrates
  seamlessly into Python-centric workflows, including simulation,
  sensing, and data analysis pipelines.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-DeltaEncodingInHTTP">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hoff</surname><given-names>Arthur van</given-names></name>
        <name><surname>Douglis</surname><given-names>Fred</given-names></name>
        <name><surname>Krishnamurthy</surname><given-names>Balachander</given-names></name>
        <name><surname>Goland</surname><given-names>Yaron Y.</given-names></name>
        <name><surname>Hellerstein</surname><given-names>Daniel M.</given-names></name>
        <name><surname>Feldmann</surname><given-names>Anja</given-names></name>
        <name><surname>Mogul</surname><given-names>Jeffrey</given-names></name>
      </person-group>
      <article-title>Delta encoding in HTTP</article-title>
      <publisher-name>RFC 3229; RFC Editor</publisher-name>
      <year iso-8601-date="2002-01">2002</year><month>01</month>
      <uri>https://www.rfc-editor.org/info/rfc3229</uri>
      <pub-id pub-id-type="doi">10.17487/RFC3229</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-NaiveDifferencesOfExecutableCode">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Percival</surname><given-names>Colin</given-names></name>
      </person-group>
      <article-title>Naive differences of executable code</article-title>
      <publisher-name>Citeseer</publisher-name>
      <year iso-8601-date="2003">2003</year>
      <uri>https://www.daemonology.net/bsdiff/</uri>
    </element-citation>
  </ref>
  <ref id="ref-deepdiff">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Dehpour</surname><given-names>Sep</given-names></name>
      </person-group>
      <article-title>DeepDiff</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2025">2025</year>
      <uri>https://github.com/seperman/deepdiff</uri>
    </element-citation>
  </ref>
  <ref id="ref-xdelta3">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Colvin</surname><given-names>Samuel</given-names></name>
      </person-group>
      <article-title>xdelta3</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <uri>https://github.com/samuelcolvin/xdelta3-python</uri>
    </element-citation>
  </ref>
  <ref id="ref-xdelta">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>MacDonald</surname><given-names>Joshua</given-names></name>
      </person-group>
      <article-title>xdelta</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <uri>https://github.com/jmacd/xdelta</uri>
    </element-citation>
  </ref>
  <ref id="ref-datadiff">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Brondsema</surname><given-names>Dave</given-names></name>
        <name><surname>R. Coombs</surname><given-names>Jason</given-names></name>
      </person-group>
      <article-title>DataDiff</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://pypi.org/project/datadiff/</uri>
    </element-citation>
  </ref>
  <ref id="ref-detools">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Moqvist</surname><given-names>Erik</given-names></name>
      </person-group>
      <article-title>detools</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/eerimoq/detools</uri>
    </element-citation>
  </ref>
  <ref id="ref-numpy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SimulationStudies">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Morris</surname><given-names>Tim P.</given-names></name>
        <name><surname>White</surname><given-names>Ian R.</given-names></name>
        <name><surname>Crowther</surname><given-names>Michael J.</given-names></name>
      </person-group>
      <article-title>Using simulation studies to evaluate statistical methods</article-title>
      <source>Statistics in Medicine</source>
      <year iso-8601-date="2019">2019</year>
      <volume>38</volume>
      <issue>11</issue>
      <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.8086</uri>
      <pub-id pub-id-type="doi">10.1002/sim.8086</pub-id>
      <fpage>2074</fpage>
      <lpage>2102</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SimulationExperiments">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kleijnen</surname><given-names>Jack P. C.</given-names></name>
      </person-group>
      <article-title>Design and analysis of simulation experiments</article-title>
      <source>Statistics and simulation</source>
      <person-group person-group-type="editor">
        <name><surname>Pilz</surname><given-names>Jürgen</given-names></name>
        <name><surname>Rasch</surname><given-names>Dieter</given-names></name>
        <name><surname>Melas</surname><given-names>Viatcheslav B.</given-names></name>
        <name><surname>Moder</surname><given-names>Karl</given-names></name>
      </person-group>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2018">2018</year>
      <isbn>978-3-319-76035-3</isbn>
      <fpage>3</fpage>
      <lpage>22</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ComplexSystemsSimulation">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Aumann</surname><given-names>Craig A.</given-names></name>
      </person-group>
      <article-title>A methodology for developing simulation models of complex systems</article-title>
      <source>Ecological Modelling</source>
      <year iso-8601-date="2007">2007</year>
      <volume>202</volume>
      <issue>3</issue>
      <issn>0304-3800</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0304380006005400</uri>
      <pub-id pub-id-type="doi">10.1016/j.ecolmodel.2006.11.005</pub-id>
      <fpage>385</fpage>
      <lpage>396</lpage>
    </element-citation>
  </ref>
  <ref id="ref-RemotePhysiologicalandEnvironmentalMonitoring">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Felton</surname><given-names>Christopher L.</given-names></name>
        <name><surname>Gilbert</surname><given-names>Barry K.</given-names></name>
        <name><surname>Haider</surname><given-names>Clifton R.</given-names></name>
      </person-group>
      <article-title>Data compression via low complexity delta transition lossless encoding for remote physiological and environmental monitoring</article-title>
      <source>2018 40th annual international conference of the IEEE engineering in medicine and biology society (EMBC)</source>
      <year iso-8601-date="2018">2018</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/EMBC.2018.8513277</pub-id>
      <fpage>4379</fpage>
      <lpage>4384</lpage>
    </element-citation>
  </ref>
  <ref id="ref-agricultureIoT">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Al-Qurabat</surname><given-names>Ali Kadhum M</given-names></name>
        <name><surname>Mohammed</surname><given-names>Zahraa A</given-names></name>
        <name><surname>Hussein</surname><given-names>Zahraa Jabbar</given-names></name>
      </person-group>
      <article-title>Data traffic management based on compression and MDL techniques for smart agriculture in IoT</article-title>
      <source>Wirel. Pers. Commun.</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <volume>120</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1007/s11277-021-08563-4</pub-id>
      <fpage>2227</fpage>
      <lpage>2258</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
