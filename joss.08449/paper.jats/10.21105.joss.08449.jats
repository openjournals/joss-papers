<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8449</article-id>
<article-id pub-id-type="doi">10.21105/joss.08449</article-id>
<title-group>
<article-title>MAFw: A Modular Analysis Framework for Streamlining and
Optimizing Data Analysis Workflows</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7988-2090</contrib-id>
<name>
<surname>Bulgheroni</surname>
<given-names>Antonio</given-names>
</name>
<email>antonio.bulgheroni@ec.europa.eu</email>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0509-8951</contrib-id>
<name>
<surname>Krachler</surname>
<given-names>Michael</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>European Commission - Joint Research Centre (JRC) -
Karlsruhe - Germany</institution>
<institution-id institution-id-type="ROR">02ptz5951</institution-id>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email>antonio.bulgheroni@ec.europa.eu</email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-04-11">
<day>11</day>
<month>4</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>114</issue>
<fpage>8449</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>data analysis</kwd>
<kwd>python</kwd>
<kwd>relational databases</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Modular Analysis Framework (MAFw) is a versatile platform
  engineered to streamline the development of sophisticated data
  analysis pipelines. Featuring a flexible and extensible architecture,
  MAFw enables users to easily define, customize, and chain multiple
  processing steps, fostering efficient and reproducible analyses.</p>
  <p>The idea behind MAFw is well described in the use case study
  presented in the
  <ext-link ext-link-type="uri" xlink:href="https://mafw-e8abfd.pages.code.europa.eu/doc/doc_tutorial.html">documentation</ext-link>.
  The researcher needs to break down their analysis strategy in simple,
  self-contained steps (data import, conversion, filtering and
  aggregation, just to name a few examples) to be coded in a subclass of
  the MAFw basic unit, the Processor. Processors can be dasy-chained to
  make a pipeline via steering files and then executed by the built-in
  execution engine.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>In recent years, the volume and complexity of data generated across
  diverse scientific disciplines have grown exponentially. Consequently,
  robust data analysis has become a vital element of modern scientific
  research, demanding efficient and adaptable tools capable of managing
  and processing large-scale datasets.</p>
  <p>MAFw addresses this challenge by offering a flexible, modular
  framework designed to empower data scientists to execute complex
  analytical tasks within a well-structured environment. Currently,
  researchers often juggle multiple steps — such as data ingestion,
  processing, and visualization — using disparate tools, which can be
  time-consuming, error-prone, and hinder code reusability across
  different projects.</p>
  <p>By providing a customizable, component-based platform, MAFw
  streamlines the entire analysis workflow. It enables each analytical
  step to be executed reproducibly within a unified environment,
  supported by a centralized database that stores intermediate results
  and guides the progression of analyses.</p>
  <p>This design not only enhances efficiency and reproducibility, but
  also facilitates collaboration and knowledge sharing among
  researchers, ultimately advancing scientific discovery through more
  reliable and adaptable data analysis practices.</p>
</sec>
<sec id="mafw-conceptual-design">
  <title>MAFw conceptual design</title>
  <sec id="historical-roots-and-other-similar-libraries">
    <title>Historical roots and other similar libraries</title>
    <p>MAFw draws inspiration from
    <bold><ext-link ext-link-type="uri" xlink:href="https://ilcsoft.desy.de/portal/software_packages/marlin/">MARLIN</ext-link></bold>
    (<xref alt="Aplin et al., 2012" rid="ref-lcio" ref-type="bibr">Aplin
    et al., 2012</xref>;
    <xref alt="Gaede, 2006" rid="ref-GAEDE2006177" ref-type="bibr">Gaede,
    2006</xref>), an object-oriented C++ application framework for
    particle physicists. The authors transitioned from C++ to Python to
    streamline onboarding for data scientists and leverage the extensive
    array of available analytical tools.</p>
    <p>Apart from MarlinMT
    (<xref alt="Ete, Remi et al., 2020" rid="ref-marlinmt" ref-type="bibr">Ete,
    Remi et al., 2020</xref>), the evolution of Marlin including
    multi-threading and parallel processing, another commonly-used
    package performing similar tasks is
    <bold><ext-link ext-link-type="uri" xlink:href="https://gaudi.web.cern.ch/gaudi/">GAUDI</ext-link></bold>
    (<xref alt="Barrand et al., 2001" rid="ref-BARRAND200145" ref-type="bibr">Barrand
    et al., 2001</xref>), developed and widely adopted by the
    high-energy physics (HEP) community. Compared to GAUDI, MAFw is
    surely lighter weight and not bound to other software libraries
    typical of the HEP sector, making MAFw potentially more accessible
    to a wider user base.</p>
    <p>MAFw was initially developed and successfully used for analyzing
    autoradiography images
    (<xref alt="Krachler et al., 2024" rid="ref-KRACHLER2024111448" ref-type="bibr">Krachler
    et al., 2024</xref>,
    <xref alt="2025" rid="ref-KRACHLER2025344073" ref-type="bibr">2025</xref>);
    later was expanded with enhanced database interfaces and plugin
    systems for broader applicability.</p>
  </sec>
  <sec id="the-three-pillars-behind-mafw">
    <title>The three pillars behind MAFw</title>
    <p>The three primary driving forces behind MAFw are:</p>
    <list list-type="order">
      <list-item>
        <p><bold>Modularity</bold>: Complex analytical tasks are
        decomposed into self-contained operations within the Processor
        container, which scientists can subclass to implement
        sophisticated operations tailored to specific needs.</p>
      </list-item>
      <list-item>
        <p><bold>Enhanced Ease of Handling Large Datasets</bold>: MAFw
        leverages database-assisted I/O for better scalability and
        efficiency, enabling quick access to parameters and efficient
        selection of data subsets for analysis.</p>
      </list-item>
      <list-item>
        <p><bold>Pipelines and Scalability</bold>: The framework offers
        a flexible execution engine that enables the definition of
        comprehensive analysis pipelines through text files,
        facilitating seamless deployment within container orchestration
        environments.</p>
      </list-item>
    </list>
  </sec>
  <sec id="the-processor-mafw-core-element">
    <title>The <monospace>Processor</monospace>: MAFw core
    element</title>
    <p>The Processor is a self-contained execution unit performing tasks
    such as data filtering and transformation. Designed for reusability,
    Processors can be combined to form complex pipelines. Each Processor
    includes methods for initialization, processing, and finalizing
    tasks, with flexible looping modes enhancing its adaptability for
    specific applications.</p>
    <p>The Processor execution logic schematic flowchart is shown in
    <xref alt="[processor-diagram]" rid="processor-diagram">[processor-diagram]</xref>,
    where the elements with colored background are available to the user
    for customization via subclassing. A more detailed description on
    how to create a processor subclass is available in the general
    documentation of
    <ext-link ext-link-type="uri" xlink:href="https://mafw-e8abfd.pages.code.europa.eu/doc/">MAFw</ext-link>.</p>
    <fig>
      <caption><p>The flowchart of the processor execution logic.
      Elements with colored background are available to the user for
      customization.
      <styled-content id="processor-diagram"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="processor.png" />
    </fig>
  </sec>
  <sec id="extensibility-via-a-simple-plugin-mechanism">
    <title>Extensibility via a simple plugin mechanism</title>
    <p>MAFw supports user-developed custom processors through a plugin
    system based on
    <ext-link ext-link-type="uri" xlink:href="https://pluggy.readthedocs.io/en/stable/">pluggy</ext-link>,
    enabling seamless integration of specialized functionality and
    fostering a collaborative community where plugin libraries can be
    shared and compared.</p>
  </sec>
  <sec id="modularity-and-pipelines">
    <title>Modularity and pipelines</title>
    <p>MAFw achieves modularity through Processors combined into complex
    data processing pipelines configured via
    <ext-link ext-link-type="uri" xlink:href="https://toml.io/en/">TOML</ext-link>
    steering files. This approach eliminates the need for dedicated
    scripts, as the built-in execution engine automatically interprets
    the steering file to run the pipeline. Moreover, the pipeline
    execution can be seamlessly performed on a high-throughput computer
    system.</p>
  </sec>
  <sec id="a-database-as-io-support">
    <title>A database as I/O support</title>
    <p>MAFw provides a database interface built on the
    <ext-link ext-link-type="uri" xlink:href="https://docs.peewee-orm.com/en/latest/">Peewee</ext-link>
    Object-Relational Mapping (ORM) system, supporting multiple database
    backends
    (<ext-link ext-link-type="uri" xlink:href="https://www.mysql.com/">MySQL</ext-link>,
    <ext-link ext-link-type="uri" xlink:href="https://www.postgresql.org/">PostgreSQL</ext-link>,
    <ext-link ext-link-type="uri" xlink:href="https://www.sqlite.org/">SQLite</ext-link>).
    This ORM abstraction simplifies database interactions, allowing
    users to define data models and execute queries directly in
    Python.</p>
    <p>The database component plays a crucial role in storing
    intermediate results and guiding analyses, with support for filters
    and triggers to automate pipeline execution.</p>
  </sec>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>MAFw offers a versatile and highly customizable platform that
  empowers data scientists to execute complex analytical tasks with
  ease. Its modular architecture, robust plugin system, and seamless
  database integration position it as an ideal solution for researchers
  with diverse analytical requirements.</p>
  <p>By delivering a comprehensive framework for data analysis, MAFw
  simplifies workflow management, allowing researchers to concentrate on
  their core research questions rather than the technical complexities
  of data processing.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>The authors would like to thank the JRC.T.4 and JRC.T.6 units for
  providing the essential tools necessary for code development and
  deployment.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-GAEDE2006177">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gaede</surname><given-names>F.</given-names></name>
      </person-group>
      <article-title>Marlin and LCCD—software tools for the ILC</article-title>
      <source>Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment</source>
      <year iso-8601-date="2006">2006</year>
      <volume>559</volume>
      <issue>1</issue>
      <issn>0168-9002</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0168900205022643</uri>
      <pub-id pub-id-type="doi">10.1016/j.nima.2005.11.138</pub-id>
      <fpage>177</fpage>
      <lpage>180</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lcio">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Aplin</surname><given-names>Steve</given-names></name>
        <name><surname>Engels</surname><given-names>Jan</given-names></name>
        <name><surname>Gaede</surname><given-names>Frank</given-names></name>
        <name><surname>Graf</surname><given-names>Norman A.</given-names></name>
        <name><surname>Johnson</surname><given-names>Tony</given-names></name>
        <name><surname>McCormick</surname><given-names>Jeremy</given-names></name>
      </person-group>
      <article-title>LCIO: A persistency framework and event data model for HEP</article-title>
      <source>2012 IEEE nuclear science symposium and medical imaging conference record (NSS/MIC)</source>
      <year iso-8601-date="2012">2012</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/NSSMIC.2012.6551478</pub-id>
      <fpage>2075</fpage>
      <lpage>2079</lpage>
    </element-citation>
  </ref>
  <ref id="ref-KRACHLER2024111448">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Krachler</surname><given-names>Michael</given-names></name>
        <name><surname>Martinez Ferri</surname><given-names>Ana Isabel</given-names></name>
        <name><surname>Bulgheroni</surname><given-names>Antonio</given-names></name>
      </person-group>
      <article-title>Potential of digital autoradiography for characterization of uranium materials</article-title>
      <source>Microchemical Journal</source>
      <year iso-8601-date="2024">2024</year>
      <volume>206</volume>
      <issn>0026-265X</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0026265X24015601</uri>
      <pub-id pub-id-type="doi">10.1016/j.microc.2024.111448</pub-id>
      <fpage>111448</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-KRACHLER2025344073">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Krachler</surname><given-names>Michael</given-names></name>
        <name><surname>Martinez Ferri</surname><given-names>Ana Isabel</given-names></name>
        <name><surname>Bulgheroni</surname><given-names>Antonio</given-names></name>
      </person-group>
      <article-title>Assessing uranium enrichment levels using digital autoradiography</article-title>
      <source>Analytica Chimica Acta</source>
      <year iso-8601-date="2025">2025</year>
      <issn>0003-2670</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0003267025004672</uri>
      <pub-id pub-id-type="doi">10.1016/j.aca.2025.344073</pub-id>
      <fpage>344073</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-marlinmt">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <string-name>Ete, Remi</string-name>
        <string-name>Gaede, Frank</string-name>
        <string-name>Benda, Julian</string-name>
        <string-name>Grasland, Hadrian</string-name>
      </person-group>
      <article-title>MarlinMT - parallelising the marlin framework</article-title>
      <source>EPJ Web Conf.</source>
      <year iso-8601-date="2020">2020</year>
      <volume>245</volume>
      <uri>https://doi.org/10.1051/epjconf/202024505022</uri>
      <pub-id pub-id-type="doi">10.1051/epjconf/202024505022</pub-id>
      <fpage>05022</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-BARRAND200145">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Barrand</surname><given-names>G.</given-names></name>
        <name><surname>Belyaev</surname><given-names>I.</given-names></name>
        <name><surname>Binko</surname><given-names>P.</given-names></name>
        <name><surname>Cattaneo</surname><given-names>M.</given-names></name>
        <name><surname>Chytracek</surname><given-names>R.</given-names></name>
        <name><surname>Corti</surname><given-names>G.</given-names></name>
        <name><surname>Frank</surname><given-names>M.</given-names></name>
        <name><surname>Gracia</surname><given-names>G.</given-names></name>
        <name><surname>Harvey</surname><given-names>J.</given-names></name>
        <name><surname>Herwijnen</surname><given-names>E.van</given-names></name>
        <name><surname>Maley</surname><given-names>P.</given-names></name>
        <name><surname>Mato</surname><given-names>P.</given-names></name>
        <name><surname>Probst</surname><given-names>S.</given-names></name>
        <name><surname>Ranjard</surname><given-names>F.</given-names></name>
      </person-group>
      <article-title>GAUDI — a software architecture and framework for building HEP data processing applications</article-title>
      <source>Computer Physics Communications</source>
      <year iso-8601-date="2001">2001</year>
      <volume>140</volume>
      <issue>1</issue>
      <issn>0010-4655</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0010465501002545</uri>
      <pub-id pub-id-type="doi">10.1016/S0010-4655(01)00254-5</pub-id>
      <fpage>45</fpage>
      <lpage>55</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
