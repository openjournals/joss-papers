<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4752</article-id>
<article-id pub-id-type="doi">10.21105/joss.04752</article-id>
<title-group>
<article-title>SwiftVISA: Controlling Instrumentation with a Swift-based
Implementation of the VISA Communication Protocol</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Barnes</surname>
<given-names>Connor</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Henke</surname>
<given-names>Luke</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Henke</surname>
<given-names>Lorena</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Krukov</surname>
<given-names>Ivan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5358-9080</contrib-id>
<name>
<surname>Hildreth</surname>
<given-names>Owen</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Colorado School of Mines</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Consolidated Analysis Center, Incorporated</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-10-20">
<day>20</day>
<month>10</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>83</issue>
<fpage>4752</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Swift</kwd>
<kwd>VISA</kwd>
<kwd>instrument control</kwd>
<kwd>instrumentation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Virtual Instrument Software Architecture (VISA)
  (<xref alt="National Instruments, 2021" rid="ref-NI-VISA_download" ref-type="bibr">National
  Instruments, 2021</xref>,
  <xref alt="2022c" rid="ref-GH_VISA_overview" ref-type="bibr">2022c</xref>;
  <xref alt="Wikipedia Contributors, 2021" rid="ref-wiki_VISA" ref-type="bibr">Wikipedia
  Contributors, 2021</xref>) is a simple Application Programming
  Interface (API) to communicate with test and measurement
  instrumentation from a computer. VISA includes specifications for
  communicating with resources or instruments over GPIB (General Purpose
  Interface Bus, IEEE-488) and VXI (VME eXtensions for instrumentation),
  which are test and measurement specific I/O interfaces along with
  providing protocols for communicating over PC-Standard I/O standards,
  such as VXI-11 (over TCP/IP), UCSBTMC (USBTest and Measurement Class,
  over USB), HiSLIP (High Speed LAN Instrument Protocol)
  (<xref alt="Wikipedia Contributors, 2021" rid="ref-wiki_VISA" ref-type="bibr">Wikipedia
  Contributors, 2021</xref>). VISA’s ability to communicate with a wide
  variety of instruments over a broad range of I/O’s using a common set
  of APIs makes it an attractive communication API for scientists and
  equipment manufacturers to write equipment control software with.</p>
  <p>Over the years, VISA has been wrapped or ported to other languages
  in an effort to make it easier to write programs to control
  instruments and analyze their data in real time. This paper introduces
  <monospace>SwiftVISASwift</monospace>
  (<xref alt="Barnes, 2021d" rid="ref-GH_SwiftVISASwift" ref-type="bibr">Barnes,
  2021d</xref>), a pure Swift-based VISA implementation for use on both
  x86 and ARM-based processors. <monospace>SwiftVISASwift</monospace>
  allows scientists and engineers to write full-featured, native iOS and
  macOS applications while leveraging standardized SCPI commands to
  control their instrumentations. Unlike other VISA implementations,
  such as <monospace>PyVISA</monospace>,
  <monospace>SwiftVISASwift</monospace> provides native access to
  standard iOS and macOS APIs and works well with asynchronous
  programming methodologies. This paper details the design and basic use
  of packages and frameworks in the SwiftVISA project.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>The VISA framework is a key backbone for many research instruments.
  Its syntax is versatile, easy to learn, and adaptable to low and high
  throughput data streams. It’s original C implementation makes it easy
  to wrap a pre-compiled framework (such as
  <monospace>NI-VISA</monospace>) in different languages.
  <monospace>PyVISA</monospace> is a good example of this and is one of
  the most widely known and used implementations of this strategy
  (<xref alt="Dartiailh, 2014a" rid="ref-PyVISA" ref-type="bibr">Dartiailh,
  2014a</xref>). <monospace>PyVISA</monospace> is highly portable
  between operating systems and python itself is relatively easy to
  learn. However, wrapping the VISA framework comes with the limitations
  associated with any wrapper. For example, the VISA framework hasn’t
  been compiled for ARM processors and <monospace>PyVISA</monospace>
  (and other wrappers) are limited to x86 processors. Additionally,
  pre-compiled frameworks aren’t as portable as packaged-based
  distribution methods. <monospace>PyVISA-py</monospace> has worked to
  address some of these issues by re-implementing VISA entirely in
  Python
  (<xref alt="Dartiailh, 2014b" rid="ref-GH_PyVISApy" ref-type="bibr">Dartiailh,
  2014b</xref>). However, <monospace>PyVISA-py</monospace> still doesn’t
  have native access to the Operating System’s APIs.</p>
  <p>Inspired by <monospace>PyVISA</monospace> and
  <monospace>PyVISA-py</monospace>, we have developed a collection of
  Swift-based wrappers, services, and packages to control VISA-compliant
  instruments using applications written in Swift for computers running
  macOS.</p>
  <p><monospace>SwiftVISASwift</monospace> as a Swift-based VISA package
  that doesn’t require a pre-compiled VISA framework. This package
  allows developers to write full featured macOS and iOS applications to
  control their instruments. Since <monospace>SwiftVISASwift</monospace>
  is delivered as a package instead of a framework, it can be compiled
  against a wide range of hardware platforms and supports x86 and ARM
  processors and can be used in Universal Binaries. This manuscript will
  summarize <monospace>SwiftVISASwift</monospace> and example some
  simple code examples.</p>
</sec>
<sec id="visa-overview">
  <title>VISA Overview</title>
  <p>This section provides a brief overview of VISA to better understand
  the purpose of this project and some of the key terminology used
  throughout this publication
  (<xref alt="National Instruments, 2022a" rid="ref-GH_VISA_Background" ref-type="bibr">National
  Instruments, 2022a</xref>,
  <xref alt="2022b" rid="ref-GH_VISA_Terminology_Resource" ref-type="bibr">2022b</xref>).
  VISA is a Test and Measurement (T&amp;M) communication protocol
  originally standardized through the VXIplug&amp;play alliance and is
  currently maintained by the IVI Foundation
  (<xref alt="Wikipedia Contributors, 2021" rid="ref-wiki_VISA" ref-type="bibr">Wikipedia
  Contributors, 2021</xref>). This specification is implemented by a
  number of large T&amp;M equipment manufacturers, including National
  Instruments (NI), Keysight, Tektronik, and Rohde &amp; Schwarz
  (R&amp;S) to name a few. It provides a standard which allows to
  abstract, in most cases, the interface bus used to interface with the
  instrument. Also while this is not part of the VISA standard, the
  interface provided for devices of similar types is often close. For
  example, a programmer should be able use the same, or at least
  similar, code to control multimeters made by different manufacturers
  (assuming the instruments’ capabilities are the same). Additionally,
  even if the capabilities are different, the API to control similar
  aspects of different instruments is often the same.</p>
  <p>It is important to understand some of VISA’s Resource terminology
  since <monospace>SwiftVISA</monospace> and
  <monospace>SwiftVISASwift</monospace> don’t support all the
  capabilities specified in the VISA protocol
  (<xref alt="National Instruments, 2022b" rid="ref-GH_VISA_Terminology_Resource" ref-type="bibr">National
  Instruments, 2022b</xref>). A <monospace>Resource</monospace> is an
  instrument connected to your system and the
  <monospace>Resource</monospace> provides a complete description of the
  set of capabilities for the instrument. There are several types of
  VISA resources: <monospace>INSTR</monospace>,
  <monospace>MEMACC</monospace>, <monospace>INTFC</monospace>,
  <monospace>BACKPLANE</monospace>, <monospace>SERVANT</monospace>, and
  <monospace>SOCKET</monospace>. According to the National Instruments
  VISA Resources page, most VISA applications and instrument drivers use
  only the INSTR resource
  (<xref alt="National Instruments, 2022b" rid="ref-GH_VISA_Terminology_Resource" ref-type="bibr">National
  Instruments, 2022b</xref>). The Resource’s Interface often describes a
  concatenation of the communication protocol with the Resource Type.
  For example, a resource communicating over USB using the Instrument
  Type would be called a <monospace>USB::INSTR</monospace>.
  Communicating over TCP/IP using a Socket type would be
  <monospace>TCPIP::SOCKET</monospace>. <monospace>SwiftVISA</monospace>
  currently supports communication over
  <monospace>USB:INSTR</monospace>, <monospace>TCPIP::INSTR</monospace>,
  and <monospace>TCPIP::SOCKET</monospace> while
  <monospace>SwiftVISASwift</monospace> is currently limited to
  communication of <monospace>TCPIP::SOCKET</monospace>.</p>
  <p>VISA is a standard for a library allowing for communication with
  conforming T&amp;M instruments. A programmer needs an implementation
  of the VISA standard to actually communicate between devices and the
  computer. The implementation often consists of a library (on macOS
  this could be a pre-compiled Framework or a Swift Package) to expose a
  VISA-compliant API for the programmer to use. It might often include
  drivers to establish a connection between the computer and the device
  (for example, macOS requires dedicated drivers to communicate with
  USB-connected devices, but not TCP/IP-connected devices). This is
  often handled using a pre-compiled library and driver set, such as
  those supplied by the National Instruments NI-VISA Framework
  (<xref alt="National Instruments, 2021" rid="ref-NI-VISA_download" ref-type="bibr">National
  Instruments, 2021</xref>) and Rohde &amp; Schwarz R&amp;S VISA
  framework
  (<xref alt="Rohde &amp; Schwarz USA, Inc., 2022" rid="ref-GH_RS-VISA" ref-type="bibr">Rohde
  &amp; Schwarz USA, Inc., 2022</xref>). Since the VISA standard is
  based on C, these manufacturers expose a C interface that can
  communicate with a wide range of instrument types using a number of
  communication protocols. However, writing GUI-based software in C is
  harder than using more modern programming languages, such as python,
  C++, Swift, etc. As a result, there is a large community of
  programmers and scientists writing wrappers around pre-existing
  implementations
  (<xref alt="Barnes, 2019" rid="ref-GH_SwiftVISA" ref-type="bibr">Barnes,
  2019</xref>;
  <xref alt="Dartiailh, 2014a" rid="ref-PyVISA" ref-type="bibr">Dartiailh,
  2014a</xref>;
  <xref alt="Painter, 2019" rid="ref-GH_JuliaWrapper" ref-type="bibr">Painter,
  2019</xref>;
  <xref alt="Poirier, 2018" rid="ref-GH_GOwrapper" ref-type="bibr">Poirier,
  2018</xref>) or writing their own VISA implementation
  (<xref alt="Barnes, 2021d" rid="ref-GH_SwiftVISASwift" ref-type="bibr">Barnes,
  2021d</xref>;
  <xref alt="Dartiailh, 2014b" rid="ref-GH_PyVISApy" ref-type="bibr">Dartiailh,
  2014b</xref>) in their preferred language. This allows developers to
  write instrumentation control software using a modern language with
  access modern GUI and system-level APIs.</p>
</sec>
<sec id="swiftvisaswift-overview">
  <title>SwiftVISASwift Overview</title>
  <p><monospace>SwiftVISASwift</monospace> has evolved over the years
  from <monospace>SwiftVISA</monospace>, a <monospace>PyVISA</monospace>
  inspired wrapper around the pre-compiled
  <monospace>NI-VISA</monospace> C-framework, to an intermediate backend
  service combined with higher level APIs implemented as a Swift
  Package, and finally to a pure Swift implementation.</p>
  <p>The ‘SwiftVISA’ Project is broken into four sub-implementations to
  provide developers with the widest design freedoms. These are:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>CoreSwiftVISA</monospace>
      (<xref alt="Barnes, 2021a" rid="ref-GH_CoreSwiftVISA" ref-type="bibr">Barnes,
      2021a</xref>)</p>
    </list-item>
    <list-item>
      <p><monospace>SwiftVISASwift</monospace>
      (<xref alt="Barnes, 2021d" rid="ref-GH_SwiftVISASwift" ref-type="bibr">Barnes,
      2021d</xref>)</p>
    </list-item>
    <list-item>
      <p><monospace>NISwiftVISA</monospace>
      (<xref alt="Barnes, 2021b" rid="ref-GH_NISwiftVISA" ref-type="bibr">Barnes,
      2021b</xref>)</p>
    </list-item>
    <list-item>
      <p><monospace>SwiftVISA</monospace> (deprecated)
      (<xref alt="Barnes, 2019" rid="ref-GH_SwiftVISA" ref-type="bibr">Barnes,
      2019</xref>)</p>
    </list-item>
  </list>
  <p>The figure below shows how these implementations work together and
  provide options to developers based upon their needs.
  <monospace>SwiftVISA</monospace> and
  <monospace>NISwiftVISA</monospace> still depend on the pre-compiled
  <monospace>NI-VISA</monospace> framework and provides access to
  GPIB::INSTR, USB::INSTR, and TCPIP::INSTR and TCPIP:SOCKET
  communication. However, since they ultimately rely on
  <monospace>NI-VISA</monospace>, they are limited to x86 systems and,
  at the time of this writing, to macOS 11 and below (National
  Instruments hasn’t yet released <monospace>NI-VISA</monospace> that
  works on macOS 12 yet. The <monospace>SwiftVISASwift</monospace>
  package uses the underlying <monospace>CoreSwiftVISA</monospace>
  package to provide a pure Swift implementation that works on x86 and
  ARM processors and is compatible with macOS 12. However, only TCP/IP
  communication as TCPIP::SOCKET instruments has been implemented for
  <monospace>SwiftVISASwift</monospace>. USB instruments were not
  implemented due Apples restrictions placed on the kernel extensions
  (kext) needed to communicate with USB devices starting with macOS 12.
  Also, as of this time, getting access to the entitlements required to
  use the newer DriverKIT API to communicate with USB devices is limited
  to original equipment manufacturers and it doesn’t appear that one can
  write a general set of drivers that works for multiple manufacturers
  at this time. For this reason, SwiftVISASwift is limited to
  communicating over TCP/IP.</p>
  <fig>
    <caption><p>Schematic showing how the implementations integrate
    together<styled-content id="figU003Aexample"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="media/Figures_SwiftVISA/Organization.jpg" />
  </fig>
  <p><monospace>CoreSwiftVISA</monospace> is a low-level package that
  provides a base, underlying implementation of SwiftVISA, excluding the
  communication implementation portion (i.e. TCI/IP, USB, etc.). This
  includes defining base types and protocols.
  <monospace>CoreSwiftVISA</monospace> isn’t directly used, instead, it
  is used by higher-level packages, such as
  <monospace>SwiftVISASwift</monospace> and
  <monospace>NISwiftVISA</monospace>. Breaking the core components out
  into a separate package makes it simpler to abstract away
  implementation details. This can be used to create custom backends for
  SCPI-compliant instruments or other types of instruments.</p>
  <p><monospace>SwiftVISASwift</monospace> uses
  <monospace>CoreSwiftVISA</monospace> types and protocols and
  implements communication over TCI/IP instruments. This is a pure
  Swift, native backend that does not require installation of the VISA
  or NI-VISA frameworks. <monospace>SwiftVISASwift</monospace> is
  currently limited to communicating with TCI/IP instruments using the
  IPAddress:SOCKET configuration. It does not yet implement VX11. While
  we are working on implementing USB support, progress is slow because
  communication on iOS and macOS devices now requires signed drivers.
  While it is possible to use older USB drivers, macOS has started
  restricting kexts and breaking out the implementation into those that
  did and didn’t require signed drivers was considered more
  future-proof.</p>
  <p><monospace>NISwiftVISA</monospace> allows for communicating over
  USB instruments. This implementation does use the
  <monospace>NI-VISA C</monospace> backend and requires that users have
  <monospace>NI-VISA</monospace> 20.0 or later installed. Additionally,
  users must install <monospace>NISwiftVISAService</monospace>
  (<xref alt="Barnes, 2021c" rid="ref-GH_NISwiftVISAService" ref-type="bibr">Barnes,
  2021c</xref>). The <monospace>NISwiftVISAService</monospace> is a
  process that runs in the background that allows the NISwiftVISA
  framework to communicate with <monospace>NI-VISA</monospace>’s
  <monospace>C</monospace> framework. This service is necessary because
  NI only distributes pre-compiled binaries of its NI-VISA framework
  and, at the time we wrote NISwiftVISA, Swift Packages did not support
  dependencies on pre-compiled binaries within a package. While Swift
  5.3 introduced dependencies for binary dependencies, they were limited
  to XCFrameworks. NI-VISA is not an XCFramework. To circumvent this
  requirement, the <monospace>NISwiftVISA</monospace> uses inter-process
  communication that calls the
  <monospace>NISwiftVISAService</monospace>, which handles all
  communicates to the instruments. <monospace>NISwiftVISA</monospace>
  works well on macOS systems, but is not compatible with iOS systems.
  Additionally, unless the NI-VISA framework is updated to a universal
  framework, it will run under ARM systems (e.g. Apple Silicon) through
  Apple’s Rosetta 2 dynamic binary translator. Just as Apple’s Rosetta 1
  translator was eventually Obsolete and unavailable, we can expect
  Rosetta 2 to also be phased out eventually.</p>
  <p><monospace>SwiftVISA</monospace> was our original implementation
  and is simply a wrapper, like <monospace>PyVISA</monospace>, around
  the <monospace>NI-VISA</monospace> framework. This requires that
  <monospace>NI-VISA</monospace> framework is installed and is limited
  to macOS devices. <monospace>SwiftVISA</monospace> is considered
  deprecated at this point and we do not expect to provide any future
  updates. Even though it is deprecated,
  <monospace>SwiftVISA</monospace> still functions and we have tested it
  up to macOS 11.1 (if SIPS is disabled). It does not work on ARM
  processors and doesn’t work on macOS 12 at this time.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p><monospace>SwiftVISASwift</monospace> allows direct communication
  with <monospace>SCPI</monospace>-compliant devices in an easy, and
  accessible manner. The <monospace>SwiftVISASwift</monospace>
  implementation requires no external frameworks for TCI/IP devices
  while the <monospace>NISwiftVISA</monospace> implementation allows for
  communication with USB and GPIB (along with TCI/IP) devices while
  using the <monospace>NISwiftVISAService</monospace> background process
  to bypass the need for importing the <monospace>NI-VISA</monospace>
  framework directly into your package or application. Additionally,
  <monospace>SwiftVISASwift</monospace> is compatible with Swift 5.5’s
  new built-in support for writing asynchronous and parallel code in a
  structured way. This includes concurrency features such as
  <monospace>async-await</monospace>, <monospace>actor</monospace>,
  <monospace>Task</monospace>. As a result, it is easy to define
  instrument controllers as Actors and ensure that sending commands and
  collecting data from the instrument doesn’t tie up the main thread or
  GUI.</p>
  <p>The following example demonstrates some basic functionalities. A
  complete example demonstrating a typical workflow using the
  <monospace>SwiftVISASwift</monospace> package with a TCI/IP compatible
  device.</p>
  <p><monospace>SwiftVISASwift</monospace> is first imported as a
  package through Swift Package Manager. To use
  <monospace>SwiftVISASwift</monospace> in your project, include the
  following dependency in your <monospace>Package.swift</monospace>
  file.</p>
  <preformat>dependencies: [.package(url: 
   &quot;https://github.com/SwiftVISA/SwiftVISASwift.git&quot;, 
   .upToNextMinor(from: &quot;0.1.0&quot;)) ]</preformat>
  <p>To create a connection to an instrument over TCP/IP, pass the
  network details to
  <monospace>InstrumentManager.shared.instrumentAt(address:port:)</monospace>.
  Since this operation can throw an error if it fails you can either use
  a <monospace>do-catch</monospace> statement to handle the error or
  have the calling function throw the error up your chain.</p>
  <preformat>do {
    // Pass the IPv4 or IPv6 address of the instrument
    // to &quot;address&quot; and the instrument's port to &quot;port&quot;.
    let instrument = try InstrumentManager.shared
       .instrumentAt(address: &quot;10.0.0.1&quot;, port: 5025)
} catch {
    // Could not connect to instrument
    // Handle the error
}</preformat>
  <p>To write to the instrument, call <monospace>write(_:)</monospace>
  on the instrument:</p>
  <preformat>do {
    // Pass the command as a string.    
    try instrument.write(&quot;OUTPUT ON&quot;)
} catch {
    // Could not write to instrument
    // Handle the error
}</preformat>
  <p>To read from the instrument, call <monospace>read()</monospace> on
  the instrument:</p>
  <preformat>do {
    try instrument.write(&quot;VOLTAGE?&quot;)
    let voltage = try instrument.read() 
    // read() returns a String
} catch {
    // Could not read from (or write to) instrument
    // Handle the error
}</preformat>
  <p>The <monospace>actor</monospace> branch of
  <monospace>SwiftVISASwift</monospace> is designed to support Swift
  5.5’s concurrency features. This allows users to easily send connect
  and communicate with instruments without blocking the main thread. For
  example, the code below creating a new Message Based Instrument is
  asynchronous because the underlying
  <monospace>TCPIPSession</monospace> in
  <monospace>SwiftVISASwift</monospace> is marked as an
  <monospace>actor</monospace> and all instrument creation ultimately
  uses a <monospace>TCPIPSession</monospace> to setup the communication
  between the application and the device. This small, easy to implement
  change, reduces a lot of UI hang-ups if the device isn’t connected or
  configured correctly. The code shows how to asynchronously instantiate
  a new Message Based Instrument. Doing this asynchronously means that
  the main thread will not be tied up during the timeout period if, for
  instance, the device wasn’t connected or powered on or configured
  properly.</p>
  <preformat>func makeInstrument() async throws -&gt; MessageBasedInstrument {
    var instrument = try await InstrumentManager.shared
       .instrumentAt(
          address: address,
          port: port,
          timeout: timeout
       )
    instrument.attributes = attributes
    return instrument
  }</preformat>
  <p>Extending this asynchronous behavior to your own custom instrument
  controllers is also simply a matter of marking your controllers as an
  <monospace>actor</monospace> instead of a class. Using a waveform
  generator as and example, the code below creates a
  <monospace>WaveformController</monospace> marked as a
  <monospace>public actor</monospace> and then an extension is added to
  read and set the waveform generator’s voltage. Using an actor instead
  of a class ensures that communicating with the instrument does not
  block the main thread.</p>
  <preformat>public actor WaveformController {
  var instrument: MessageBasedInstrument
  
  init(instrument: MessageBasedInstrument) {
    self.instrument = instrument
  }
}


extension WaveformController {
  var rawVoltage: Double {
    get async throws {
      try await instrument.query(&quot;VOLT?&quot;, as: Double.self)
    }
  }

  func setRawVoltage(to voltage: Double) async throws {
    try await instrument.write(&quot;VOLT \(voltage)&quot;)
  }
}</preformat>
</sec>
<sec id="example-applications">
  <title>Example Applications</title>
  <p>Internally, we’ve been using <monospace>SwiftVISA</monospace> and
  <monospace>SwiftVISASwift</monospace> for a few years now to control
  various laboratory hardware. Resistivity Utility is an example
  application written with <monospace>SwiftVISA</monospace> to control
  an Agilent Nanovolt meter connected to a custom 4-point probe station.
  This simple application lets us document our measurements, apply the
  appropriate geometry corrections for resistivity calculations, and
  export both the raw and summarized data to csv files
  (<xref alt="Barnes, 2020" rid="ref-GH_resistiv" ref-type="bibr">Barnes,
  2020</xref>).</p>
  <fig>
    <caption><p>Screenshot of Resistivity Utility</p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="media/Figures_SwiftVISA/Resitivity_1.jpg" />
  </fig>
  <fig>
    <caption><p>Screenshot of Resistivity Utility</p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="media/Figures_SwiftVISA/Resitivity_2.jpg" />
  </fig>
  <fig>
    <caption><p>Screenshot of Resistivity Utility</p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="media/Figures_SwiftVISA/Resitivity_3.jpg" />
  </fig>
</sec>
<sec id="current-limitations-and-future-work">
  <title>Current Limitations and Future Work</title>
  <p><monospace>SwiftVISA</monospace> and
  <monospace>NISwiftVISA</monospace> have many of the features available
  to <monospace>PyVISA</monospace> and NI-VISA, with the following known
  exceptions:</p>
  <list list-type="bullet">
    <list-item>
      <p>The <monospace>list_resources</monospace> function available in
      <monospace>PyVISA</monospace> is currently not supported</p>
    </list-item>
    <list-item>
      <p>There is not plan to implement direct GPIB connections</p>
    </list-item>
    <list-item>
      <p>Communication using HiSLIP has not been tested or confirmed</p>
    </list-item>
  </list>
  <p>Since <monospace>SwiftVISASwift</monospace> is still a young effort
  and currently only works with <monospace>TCPIP::SOCKET</monospace>. In
  the near future, we plan to:</p>
  <list list-type="bullet">
    <list-item>
      <p>Implement USB communication</p>
    </list-item>
    <list-item>
      <p>Implement a <monospace>listResources</monospace> function
      equivalent to PyVISA’s <monospace>list_resources</monospace>
      function</p>
    </list-item>
    <list-item>
      <p>Implement VXI-11 communication and resource addresses</p>
    </list-item>
  </list>
  <p>The long-term plans listed below would require help from the
  broader community.</p>
  <list list-type="bullet">
    <list-item>
      <p>Testing HiSLIP communication</p>
    </list-item>
    <list-item>
      <p>Support <monospace>PXIInstrument</monospace></p>
    </list-item>
    <list-item>
      <p>Support <monospace>VXIInstrument</monospace></p>
    </list-item>
  </list>
  <p>We are planning to host an additional Computer Science Field
  Session Project at Colorado School of Mines in 2023 to expand either
  <monospace>SwiftVISA</monospace> or
  <monospace>SwiftVISASwift</monospace> to a Swift-supported Linux
  platform.</p>
  <p>We currently have no plans to update the
  <monospace>SwiftVISA</monospace> repositories to directly support
  <monospace>GPIBInstrument</monospace> or
  <monospace>FirewireInstrument</monospace>; however, contributors are
  welcome to submit pull-requests to add this functionality. For our own
  projects, we use GPIB-to-USB and GPIB-to-TCP/IP
  adapters(<xref alt="Prologix, LLC., 2022" rid="ref-prologix" ref-type="bibr">Prologix,
  LLC., 2022</xref>) by Prologix to control our instruments with
  <monospace>SwiftVISA</monospace> and
  <monospace>SwiftVISASwift</monospace>. These adapters work well with
  <monospace>SwiftVISA</monospace> and
  <monospace>SwiftVISASwift</monospace> because they don’t require
  installation of additional drivers and because the adapter internally
  translates the GPIB commands for you.</p>
</sec>
<sec id="contributions">
  <title>Contributions</title>
  <p>Connor Barnes, Luke Henke, Lorena Henke, and Ivan Krukov wrote the
  original SwiftVISA framework
  (<xref alt="Barnes, 2019" rid="ref-GH_SwiftVISA" ref-type="bibr">Barnes,
  2019</xref>) wrapping the pre-compiled NI-VISA framework
  (<xref alt="National Instruments, 2021" rid="ref-NI-VISA_download" ref-type="bibr">National
  Instruments, 2021</xref>) with Owen Hildreth supervising their work.
  Connor Barnes continued to work and develop the rest of the
  frameworks, services, and Swift packages in the SwiftVISA
  organization. Owen Hildreth continues to supervise the work and
  maintain the repositories.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to acknowledge the financial support we received from
  the National Science Foundation (Award #: CAREER 401756).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-GH_RS-VISA">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Rohde &amp; Schwarz USA, Inc.</string-name>
      </person-group>
      <article-title>Rohde &amp; schwarz VISA information page</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.rohde-schwarz.com/us/applications/r-s-visa-application-note_56280-148812.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_JuliaWrapper">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Painter</surname><given-names>Oskar</given-names></name>
      </person-group>
      <article-title>VISA wrapper for julia</article-title>
      <year iso-8601-date="2019-05">2019</year><month>05</month>
      <uri>https://github.com/PainterQubits/VISA.jl</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_GOwrapper">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Poirier</surname><given-names>Joseph</given-names></name>
      </person-group>
      <article-title>A go wrapper around national instruments virtual instrument software architecture (VISA) drive</article-title>
      <year iso-8601-date="2018-10">2018</year><month>10</month>
      <uri>https://github.com/jpoirier/visa</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_VISA_Background">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>National Instruments</string-name>
      </person-group>
      <article-title>NI-VISA: background</article-title>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <uri>https://www.ni.com/docs/en-US/bundle/ni-visa/page/ni-visa/visaoverviewbackground.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_VISA_Terminology_Resource">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>National Instruments</string-name>
      </person-group>
      <article-title>VISA resource types</article-title>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <uri>https://www.ni.com/docs/en-US/bundle/ni-visa/page/ni-visa/visa_resource_types.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_VISA_overview">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>National Instruments</string-name>
      </person-group>
      <article-title>NI-VISA overview</article-title>
      <year iso-8601-date="2022-10">2022</year><month>10</month>
      <uri>https://www.ni.com/en-us/support/documentation/supplemental/06/ni-visa-overview.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-prologix">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Prologix, LLC.</string-name>
      </person-group>
      <article-title>Manufacturer of GBIP-to-USB and GPIB-to-ethernet adapters</article-title>
      <year iso-8601-date="2022-10">2022</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022">2022</year></date-in-citation>
      <uri>http://prologix.biz</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_PyVISApy">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dartiailh</surname><given-names>Matthieu</given-names></name>
      </person-group>
      <article-title>Documentation page for PyVISA-py</article-title>
      <year iso-8601-date="2014">2014</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2014-01-01">2014</year><month>01</month><day>01</day></date-in-citation>
      <uri>https://pyvisa.readthedocs.io/projects/pyvisa-py/en/latest/</uri>
    </element-citation>
  </ref>
  <ref id="ref-PyVISA">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dartiailh</surname><given-names>Matthieu</given-names></name>
      </person-group>
      <article-title>Documentation page for PyVISA</article-title>
      <year iso-8601-date="2014">2014</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2014-01-01">2014</year><month>01</month><day>01</day></date-in-citation>
      <uri>https://pyvisa.readthedocs.io/en/latest/</uri>
    </element-citation>
  </ref>
  <ref id="ref-wiki_VISA">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Wikipedia Contributors</string-name>
      </person-group>
      <article-title>Wikipedia page on VISA</article-title>
      <year iso-8601-date="2021">2021</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-12-16">2021</year><month>12</month><day>16</day></date-in-citation>
      <uri>https://en.wikipedia.org/wiki/Virtual_instrument_software_architecture</uri>
    </element-citation>
  </ref>
  <ref id="ref-NI-VISA_download">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>National Instruments</string-name>
      </person-group>
      <article-title>Download wepage for NI-VISA</article-title>
      <year iso-8601-date="2021-07">2021</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-12-16">2021</year><month>12</month><day>16</day></date-in-citation>
      <uri>https://www.ni.com/en-us/support/downloads/drivers/download.ni-visa.html#409839</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_NISwiftVISAService">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnes</surname><given-names>Connor</given-names></name>
      </person-group>
      <article-title>Source code and readme for NISwiftVISAService</article-title>
      <year iso-8601-date="2021-01">2021</year><month>01</month>
      <uri>https://github.com/SwiftVISA/NISwiftVISAService</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_NISwiftVISA">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnes</surname><given-names>Connor</given-names></name>
      </person-group>
      <article-title>Source code and readme for NISwiftVISA</article-title>
      <year iso-8601-date="2021-01">2021</year><month>01</month>
      <uri>https://github.com/SwiftVISA/NISwiftVISA</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_SwiftVISASwift">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnes</surname><given-names>Connor</given-names></name>
      </person-group>
      <article-title>Source code and readme for SwiftVISASwift</article-title>
      <year iso-8601-date="2021-01">2021</year><month>01</month>
      <uri>https://github.com/SwiftVISA/SwiftVISASwift</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_CoreSwiftVISA">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnes</surname><given-names>Connor</given-names></name>
      </person-group>
      <article-title>Source code and readme for CoreSwiftVISA</article-title>
      <year iso-8601-date="2021-01">2021</year><month>01</month>
      <uri>https://github.com/SwiftVISA/CoreSwiftVISA</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_SwiftVISA">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnes</surname><given-names>Connor</given-names></name>
      </person-group>
      <article-title>Source code and readme for SwiftVISA</article-title>
      <year iso-8601-date="2019-01">2019</year><month>01</month>
      <uri>https://github.com/SwiftVISA/SwiftVISA</uri>
    </element-citation>
  </ref>
  <ref id="ref-GH_resistiv">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnes</surname><given-names>Connor</given-names></name>
      </person-group>
      <article-title>Source code and readme for resistivity utility</article-title>
      <year iso-8601-date="2020-08">2020</year><month>08</month>
      <uri>https://github.com/seeaya/Resistivity-Utility</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
