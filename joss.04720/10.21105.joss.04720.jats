<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4720</article-id>
<article-id pub-id-type="doi">10.21105/joss.04720</article-id>
<title-group>
<article-title>btllib: A C++ library with Python interface for efficient
genomic sequence processing</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0002-2992-9935</contrib-id>
<name>
<surname>Nikolić</surname>
<given-names>Vladimir</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Kazemi</surname>
<given-names>Parham</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7518-2326</contrib-id>
<name>
<surname>Coombe</surname>
<given-names>Lauren</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Wong</surname>
<given-names>Johnathan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6875-4939</contrib-id>
<name>
<surname>Afshinfard</surname>
<given-names>Amirhossein</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Chu</surname>
<given-names>Justin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9890-2293</contrib-id>
<name>
<surname>Warren</surname>
<given-names>René L.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0950-7839</contrib-id>
<name>
<surname>Birol</surname>
<given-names>Inanç</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Canada’s Michael Smith Genome Sciences Centre at BC Cancer,
Vancouver, BC, Canada</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Bioinformatics Graduate Program, The University of British
Columbia, Vancouver, BC, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-07-31">
<day>31</day>
<month>7</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>79</issue>
<fpage>4720</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>Python</kwd>
<kwd>bioinformatics</kwd>
<kwd>algorithms</kwd>
<kwd>data structures</kwd>
<kwd>genome</kwd>
<kwd>bloom filter</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Bioinformaticians often do not have software engineering training
  or background, and software quality is not the top priority of
  research groups due to limited time and funding
  (<xref alt="Georgeson et al., 2019" rid="ref-10.1093U002FgigascienceU002Fgiz109" ref-type="bibr">Georgeson
  et al., 2019</xref>). Additionally, one-off scripts or code is
  frequently written to perform a specific task instead of reusing
  existing code. This could be because the pre-existing computer
  programming code is either not well written, not widely available,
  insufficiently documented, inefficient, or not general enough. This
  practice leads to lower quality and non-reusable code. As
  bioinformatics analyses are increasingly complex and deal with ever
  more data, high quality code is needed to handle the complexities of
  the analyses reliably and productively. The solution to this is well
  designed and documented libraries. For example, SeqAn
  (<xref alt="Reinert et al., 2017" rid="ref-fu_mi_publications2103" ref-type="bibr">Reinert
  et al., 2017</xref>) is a C++ library that implements algorithms and
  data structures commonly used in bioinformatics. Not all programmers
  are well versed in C++, so for users of widely used and accessible
  higher level programming languages such as Python, Biopython
  (<xref alt="Cock et al., 2009" rid="ref-10.1093U002FbioinformaticsU002Fbtp163" ref-type="bibr">Cock
  et al., 2009</xref>) is available as a set of Python modules with
  implementations of commonly needed algorithms. Here, we present the
  btllib library as an addition to this ecosystem with the goal of
  providing highly eﬀicient, scalable, and ergonomic implementations of
  bioinformatics algorithms and data structures.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>btllib is implemented in C++ with Python bindings available for a
  high level interface and ease of use. What sets it apart from other
  libraries is its focus on specialized algorithms with efficiency and
  scalability in mind as its origins are sequence processing for large
  genomes. The goal of btllib is not to compete, but to complement other
  available libraries.</p>
  <p>btllib has helped enable bioinformatics scientific publications,
  including ntJoin
  (<xref alt="Coombe et al., 2020" rid="ref-10.1093U002FbioinformaticsU002Fbtaa253" ref-type="bibr">Coombe
  et al., 2020</xref>) and LongStitch
  (<xref alt="Coombe et al., 2021" rid="ref-Coombe2021" ref-type="bibr">Coombe
  et al., 2021</xref>). Thanks to its focus on scalable algorithms and
  efficient implementation, btllib is a valuable tool for genomic
  applications, especially in the context of large genomes.</p>
</sec>
<sec id="design-implementation">
  <title>Design &amp; implementation</title>
  <p>The library has the implementation of the following algorithms and
  data structures:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>ntHash</bold> A very efficient DNA/RNA rolling hash
      function, an order of magnitude faster than the best performing
      alternatives in typical use cases. The implementation includes
      hashing sequences with spaced seeds as well as feeding arbitrary
      nucleotides for implicit hash-based graph traversal. Code adapted
      from the ntHash publication
      (<xref alt="Mohamadi et al., 2016" rid="ref-10.1093U002FbioinformaticsU002Fbtw397" ref-type="bibr">Mohamadi
      et al., 2016</xref>). The following example produces 4 hashes per
      6-mer for the <monospace>seq</monospace> sequence:</p>
    </list-item>
  </list>
  <preformat>    std::string seq = &quot;ACTAGCTATGC&quot;;
    int hash_num = 4;
    int k = 6;
    btllib::NtHash nthash(seq, hash_num, k);
    while (nthash.roll()) {
        for (int i = 0; i &lt; hash_num; i++) {
            std::cout &lt;&lt; nthash.hashes()[i] &lt;&lt; '\n';
        }
    }</preformat>
  <list list-type="bullet">
    <list-item>
      <p><bold>Bloom filter</bold> A generic Bloom filter data
      structure. Thread safe and allows insertion of an array of hash
      values per element. Allows saving to disk with the associated
      metadata.</p>
    </list-item>
    <list-item>
      <p><bold>Counting Bloom filter</bold> A Bloom filter data
      structure that allows counting the number of times an element has
      been inserted. Allows multithreaded insertion of elements while
      minimizing the effect of race conditions and preserving data
      integrity at a statistical level. This design was motivated by the
      need to maximize performance, as a fully thread safe counting
      Bloom filter would be unnecessarily slow.
      <xref alt="Figure 1" rid="figU003Ascalability">Figure 1</xref> A)
      shows the effect of race condition mitigation. Allows saving to
      disk with the associated metadata. The following example stores
      all 6-mers from <monospace>seq</monospace> into the counting Bloom
      filter and then checks for their presence:</p>
    </list-item>
  </list>
  <preformat>    std::string seq = &quot;ACTAGCTATGC&quot;;
    int hash_num = 4;
    int k = 6;
    int bytes = 1024;
    btllib::KmerCountingBloomFilter8 kcbf(bytes, hash_num, k);
    kcbf.insert(seq);
    assert(kcbf.contains(seq) == seq.size() - k + 1);</preformat>
  <list list-type="bullet">
    <list-item>
      <p><bold>Multi-index Bloom filter</bold> A Bloom filter data
      structure that associates integer indices/IDs with the inserted
      elements. Like the counting Bloom filter, the race conditions are
      minimized for multithreaded insertion. Code adapted from the
      Multi-index Bloom filter publication
      (<xref alt="Chu et al., 2020" rid="ref-doiU003A10.1073U002Fpnas.1903436117" ref-type="bibr">Chu
      et al., 2020</xref>).</p>
    </list-item>
    <list-item>
      <p><bold>Indexlr</bold> An optimized and versatile minimizer
      calculator. For a given sequence file, Indexlr produces minimizer
      hash values given a k-mer size and a window size. Optionally
      outputs minimizer sequence, sequence length, position, and strand.
      The library also includes an indexlr executable that produces
      minimizers from a given sequence file. Code adapted from the
      Physlr publication
      (<xref alt="Afshinfard et al., 2022" rid="ref-dna2020009" ref-type="bibr">Afshinfard
      et al., 2022</xref>).</p>
    </list-item>
    <list-item>
      <p><bold>Sequence I/O</bold> SeqReader and SeqWriter classes
      provide efficient and flexible I/O for sequence files. SeqReader
      is capable of reading sequences in different formats such as FASTA
      and FASTQ including multiline, and SAM format. The format is
      automatically detected even without file extension or if the data
      is piped. SeqReader also supports multiple threads to read in
      parallel, each thread receiving a copy of the sequence that can be
      modified as well as ad-hoc compression and decompression of the
      data in common formats (gzip, bzip2, xz, lrzip, zip, 7zip).
      <xref alt="Figure 1" rid="figU003Ascalability">Figure 1</xref> B)
      shows the scalability of using multiple threads to load and
      process sequences. The following example demonstrates the ease of
      use of SeqReader in a multithreaded environment using OpenMP. The
      sequences are loaded from <monospace>my_reads.fq.gz</monospace> in
      a mode optimized for long reads:</p>
    </list-item>
  </list>
  <preformat>    int flags = btllib::SeqReader::Flag::LONG_MODE;
    btllib::SeqReader reader(&quot;my_reads.fq.gz&quot;, flags);
    #pragma omp parallel
    for (const auto record : reader) {
        std::cout &lt;&lt; record.seq &lt;&lt; '\n';
    }</preformat>
  <list list-type="bullet">
    <list-item>
      <p><bold>Utility functions</bold> Various functions for common
      tasks such as reverse complementation, string manipulation, and
      logging.</p>
    </list-item>
  </list>
  <fig>
    <caption><p><bold>A)</bold> The average counter difference between
    3GiB Counting Bloom Filters with single threaded and multithreaded
    insertion of k-mers of 50,000 long reads. The single threaded
    version does not suffer from race conditions and thus has the ground
    truth. The more threads we add the more visible is the effect of
    race conditions, but thanks to the mitigation mechanism, the
    differences are small. <bold>B)</bold> Wall-clock time it takes to
    read in and run a simulated workload of 2ms per read on 250,000 long
    reads. The blue data points use efficient sequence reading code,
    kseq (<xref alt="Li, 2016" rid="ref-kseq" ref-type="bibr">Li,
    2016</xref>), surrounded by a naive implementation of a critical
    section, while the orange data points use SeqReader. Unlike the
    critical section implementation which plateaus after a number of
    threads, SeqReader scales well and keeps benefitting even from
    higher number of threads. SeqReader performs particularly well if
    used by multiple threads when loading long reads, as their length
    increases the time spent in I/O and thus in the critical section as
    well.<styled-content id="figU003Ascalability"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/scalability.png" xlink:title="" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work was supported by Genome BC and Genome Canada [281ANV];
  the National Institutes of Health [2R01HG007182-04A1]; the Canadian
  Institutes of Health Research (CIHR) [PJT-183608]; and the Natural
  Sciences and Engineering Research Council of Canada. The content of
  this paper is solely the responsibility of the authors, and does not
  necessarily represent the official views of the funding
  organizations.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-fu_mi_publications2103">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Reinert</surname><given-names>Knut</given-names></name>
        <name><surname>Dadi</surname><given-names>Temesgen Hailemariam</given-names></name>
        <name><surname>Ehrhardt</surname><given-names>Marcel</given-names></name>
        <name><surname>Hauswedell</surname><given-names>Hannes</given-names></name>
        <name><surname>Mehringer</surname><given-names>Svenja</given-names></name>
        <name><surname>Rahn</surname><given-names>René</given-names></name>
        <name><surname>Kim</surname><given-names>Jongkyu</given-names></name>
        <name><surname>Pockrandt</surname><given-names>Christopher</given-names></name>
        <name><surname>Winkler</surname><given-names>Jörg</given-names></name>
        <name><surname>Siragusa</surname><given-names>Enrico</given-names></name>
        <name><surname>Urgese</surname><given-names>Gianvito</given-names></name>
        <name><surname>Weese</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>The SeqAn c++ template library for efficient sequence analysis: A resource for programmers</article-title>
      <source>Journal of Biotechnology</source>
      <publisher-name>ELSEVIER</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>261</volume>
      <uri>http://doi.org/10.1016/j.jbiotec.2017.07.017</uri>
      <pub-id pub-id-type="doi">10.1016/j.jbiotec.2017.07.017</pub-id>
      <fpage>157</fpage>
      <lpage>168</lpage>
    </element-citation>
  </ref>
  <ref id="ref-10.1093U002FbioinformaticsU002Fbtp163">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cock</surname><given-names>Peter J. A.</given-names></name>
        <name><surname>Antao</surname><given-names>Tiago</given-names></name>
        <name><surname>Chang</surname><given-names>Jeffrey T.</given-names></name>
        <name><surname>Chapman</surname><given-names>Brad A.</given-names></name>
        <name><surname>Cox</surname><given-names>Cymon J.</given-names></name>
        <name><surname>Dalke</surname><given-names>Andrew</given-names></name>
        <name><surname>Friedberg</surname><given-names>Iddo</given-names></name>
        <name><surname>Hamelryck</surname><given-names>Thomas</given-names></name>
        <name><surname>Kauff</surname><given-names>Frank</given-names></name>
        <name><surname>Wilczynski</surname><given-names>Bartek</given-names></name>
        <name><surname>Hoon</surname><given-names>Michiel J. L. de</given-names></name>
      </person-group>
      <article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2009-03">2009</year><month>03</month>
      <volume>25</volume>
      <issue>11</issue>
      <issn>1367-4803</issn>
      <uri>https://doi.org/10.1093/bioinformatics/btp163</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id>
      <fpage>1422</fpage>
      <lpage>1423</lpage>
    </element-citation>
  </ref>
  <ref id="ref-10.1093U002FbioinformaticsU002Fbtw397">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mohamadi</surname><given-names>Hamid</given-names></name>
        <name><surname>Chu</surname><given-names>Justin</given-names></name>
        <name><surname>Vandervalk</surname><given-names>Benjamin P.</given-names></name>
        <name><surname>Birol</surname><given-names>Inanc</given-names></name>
      </person-group>
      <article-title>ntHash: recursive nucleotide hashing</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2016-07">2016</year><month>07</month>
      <volume>32</volume>
      <issue>22</issue>
      <issn>1367-4803</issn>
      <uri>https://doi.org/10.1093/bioinformatics/btw397</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btw397</pub-id>
      <fpage>3492</fpage>
      <lpage>3494</lpage>
    </element-citation>
  </ref>
  <ref id="ref-doiU003A10.1073U002Fpnas.1903436117">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chu</surname><given-names>Justin</given-names></name>
        <name><surname>Mohamadi</surname><given-names>Hamid</given-names></name>
        <name><surname>Erhan</surname><given-names>Emre</given-names></name>
        <name><surname>Tse</surname><given-names>Jeffery</given-names></name>
        <name><surname>Chiu</surname><given-names>Readman</given-names></name>
        <name><surname>Yeo</surname><given-names>Sarah</given-names></name>
        <name><surname>Birol</surname><given-names>Inanc</given-names></name>
      </person-group>
      <article-title>Mismatch-tolerant, alignment-free sequence classification using multiple spaced seeds and multiindex bloom filters</article-title>
      <source>Proceedings of the National Academy of Sciences</source>
      <year iso-8601-date="2020">2020</year>
      <volume>117</volume>
      <issue>29</issue>
      <uri>https://www.pnas.org/doi/abs/10.1073/pnas.1903436117</uri>
      <pub-id pub-id-type="doi">10.1073/pnas.1903436117</pub-id>
      <fpage>16961</fpage>
      <lpage>16968</lpage>
    </element-citation>
  </ref>
  <ref id="ref-10.1093U002FbioinformaticsU002Fbtaa253">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coombe</surname><given-names>Lauren</given-names></name>
        <name><surname>Nikolić</surname><given-names>Vladimir</given-names></name>
        <name><surname>Chu</surname><given-names>Justin</given-names></name>
        <name><surname>Birol</surname><given-names>Inanc</given-names></name>
        <name><surname>Warren</surname><given-names>René L</given-names></name>
      </person-group>
      <article-title>ntJoin: Fast and lightweight assembly-guided scaffolding using minimizer graphs</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2020-04">2020</year><month>04</month>
      <volume>36</volume>
      <issue>12</issue>
      <issn>1367-4803</issn>
      <uri>https://doi.org/10.1093/bioinformatics/btaa253</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa253</pub-id>
      <fpage>3885</fpage>
      <lpage>3887</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Coombe2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coombe</surname><given-names>Lauren</given-names></name>
        <name><surname>Li</surname><given-names>Janet X.</given-names></name>
        <name><surname>Lo</surname><given-names>Theodora</given-names></name>
        <name><surname>Wong</surname><given-names>Johnathan</given-names></name>
        <name><surname>Nikolic</surname><given-names>Vladimir</given-names></name>
        <name><surname>Warren</surname><given-names>René L.</given-names></name>
        <name><surname>Birol</surname><given-names>Inanc</given-names></name>
      </person-group>
      <article-title>LongStitch: High-quality genome assembly correction and scaffolding using long reads</article-title>
      <source>BMC Bioinformatics</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <volume>22</volume>
      <issue>1</issue>
      <uri>https://doi.org/10.1186/s12859-021-04451-7</uri>
      <pub-id pub-id-type="doi">10.1186/s12859-021-04451-7</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-dna2020009">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Afshinfard</surname><given-names>Amirhossein</given-names></name>
        <name><surname>Jackman</surname><given-names>Shaun D.</given-names></name>
        <name><surname>Wong</surname><given-names>Johnathan</given-names></name>
        <name><surname>Coombe</surname><given-names>Lauren</given-names></name>
        <name><surname>Chu</surname><given-names>Justin</given-names></name>
        <name><surname>Nikolic</surname><given-names>Vladimir</given-names></name>
        <name><surname>Dilek</surname><given-names>Gokce</given-names></name>
        <name><surname>Malkoç</surname><given-names>Yaman</given-names></name>
        <name><surname>Warren</surname><given-names>René L.</given-names></name>
        <name><surname>Birol</surname><given-names>Inanc</given-names></name>
      </person-group>
      <article-title>Physlr: Next-generation physical maps</article-title>
      <source>DNA</source>
      <year iso-8601-date="2022">2022</year>
      <volume>2</volume>
      <issue>2</issue>
      <issn>2673-8856</issn>
      <uri>https://www.mdpi.com/2673-8856/2/2/9</uri>
      <pub-id pub-id-type="doi">10.3390/dna2020009</pub-id>
      <fpage>116</fpage>
      <lpage>130</lpage>
    </element-citation>
  </ref>
  <ref id="ref-10.1093U002FgigascienceU002Fgiz109">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Georgeson</surname><given-names>Peter</given-names></name>
        <name><surname>Syme</surname><given-names>Anna</given-names></name>
        <name><surname>Sloggett</surname><given-names>Clare</given-names></name>
        <name><surname>Chung</surname><given-names>Jessica</given-names></name>
        <name><surname>Dashnow</surname><given-names>Harriet</given-names></name>
        <name><surname>Milton</surname><given-names>Michael</given-names></name>
        <name><surname>Lonsdale</surname><given-names>Andrew</given-names></name>
        <name><surname>Powell</surname><given-names>David</given-names></name>
        <name><surname>Seemann</surname><given-names>Torsten</given-names></name>
        <name><surname>Pope</surname><given-names>Bernard</given-names></name>
      </person-group>
      <article-title>Bionitio: demonstrating and facilitating best practices for bioinformatics command-line software</article-title>
      <source>GigaScience</source>
      <year iso-8601-date="2019-09">2019</year><month>09</month>
      <volume>8</volume>
      <issue>9</issue>
      <issn>2047-217X</issn>
      <uri>https://doi.org/10.1093/gigascience/giz109</uri>
      <pub-id pub-id-type="doi">10.1093/gigascience/giz109</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kseq">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Li</surname><given-names>Heng</given-names></name>
      </person-group>
      <article-title>Seqtk</article-title>
      <publisher-name>https://github.com/lh3/seqtk</publisher-name>
      <year iso-8601-date="2016">2016</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
