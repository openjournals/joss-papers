<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4654</article-id>
<article-id pub-id-type="doi">10.21105/joss.04654</article-id>
<title-group>
<article-title>Nanomesh: A Python workflow tool for generating meshes
from image data</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0002-5413-9038</contrib-id>
<name>
<surname>Smeets</surname>
<given-names>Stef</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9589-2694</contrib-id>
<name>
<surname>Renaud</surname>
<given-names>Nicolas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6554-1527</contrib-id>
<name>
<surname>van Willenswaard</surname>
<given-names>Lars J. Corbijn</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Netherlands eScience Center, The Netherlands</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of Twente, The Netherlands</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-05-09">
<day>9</day>
<month>5</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>78</issue>
<fpage>4654</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>finite-element-methods</kwd>
<kwd>microscopy</kwd>
<kwd>meshing</kwd>
<kwd>image-processing</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>Nanomesh</monospace> is a Python library that allows
  users to quickly and easily create 2D and 3D meshes directly from
  images of the object they wish to mesh. The automated workflow can
  preprocess and segment the picture to extract different regions and
  create conforming meshes of the objects. Analysis tools allow
  evaluating the quality of the resuting mesh and the detection of
  problematic regions. The resulting meshes can be exported to a variety
  of popular formats so that they can be used in finite element
  simulations. <monospace>Nanomesh</monospace> can be used as python
  library for example in Jupyter notebooks, or through dedicated online
  dashboards.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Simulations based on finite element methods (FEM) often require the
  creation of a unstructured mesh that represents the topology and
  physical properties of the object under examination. Many meshing
  libraries exist and allow the creation of such meshes. Several of
  these are proprietary with sometimes a substantial fee due to the
  level of certification required by their application domains
  (<xref alt="CENTAUR Software, n.d." rid="ref-centaur" ref-type="bibr"><italic>CENTAUR
  Software</italic>, n.d.</xref>;
  <xref alt="Simpleware, n.d." rid="ref-scanip" ref-type="bibr">Simpleware,
  n.d.</xref>). Some open source libraries do exist but often create
  meshes from a CAD design or well defined primitive
  (<xref alt="Geuzaine, Christophe and Remacle, Jean-Francois, 2020" rid="ref-gmsh" ref-type="bibr">Geuzaine,
  Christophe and Remacle, Jean-Francois, 2020</xref>;
  <xref alt="The CGAL Project, 2013" rid="ref-cgal" ref-type="bibr">The
  CGAL Project, 2013</xref>). While these meshing libraries are
  invaluably useful for the study of idealized systems they do not allow
  the mesh to account for potential defects in the underlying topology
  of the object.</p>
  <p>For example, the calculation of the optical properties of
  nanocrystals is usually performed with an ideal nano-structure as
  substrate for the propagation of the Maxwell equations
  (<xref alt="Hughes et al., 2005" rid="ref-Hughes2005" ref-type="bibr">Hughes
  et al., 2005</xref>;
  <xref alt="Koenderink et al., 2005" rid="ref-Koenderink2005" ref-type="bibr">Koenderink
  et al., 2005</xref>). Such simulations provide very valuable insight
  but ignore the effect that manufacturing imprecision of the
  nanometer-sized pores can have on the overall properties of the
  crystal. To resolve such structure-property relationship, meshes
  conforming to experimental images of real nanocrystals are needed. The
  subsequent simulation of wave propagation through these meshes using
  any FEM solver leads to a better understanding of the impact that
  imperfections may have on the overall properties. Similar use cases in
  different fields of material science and beyond are expected. The
  direct FEM simulations on real device topology might bring very
  valuable insights. Through its user friendliness, code qualitiy,
  <monospace>nanomesh</monospace> will enable scientist running advanced
  simulations on meshes that accurately represent the devices that are
  manufactured experimentally.</p>
</sec>
<sec id="workflow-and-class-hierarchy">
  <title>Workflow and class hierarchy</title>
  <p>A large part of the work of generating a mesh is to pre-process,
  filter, and segment the image data to generate a contour that
  accurately describes the objects of interest.</p>
  <p><xref alt="Figure 1" rid="figU003Aflowchart">Figure 1</xref> shows
  the <monospace>Nanomesh</monospace> workflow from left to right. The
  input data are read from a 2D or 3D <monospace>numpy</monospace> array
  (<xref alt="Harris et al., 2020" rid="ref-numpy" ref-type="bibr">Harris
  et al., 2020</xref>) into an <monospace>Image</monospace> object.
  <monospace>Nanomesh</monospace> has dedicated classes
  (<monospace>Mesher</monospace>s) to generate contours and triangulate
  or tetrahedralize the image data.</p>
  <p>Meshes are stored in <monospace>MeshContainer</monospace>s; this is
  an overarching data class that contains a single set of coordinates
  with multiple cell types. This is useful for storing the output from
  triangulation as well as the contour obtained after segmentation and
  the object boundaries. Dedicated <monospace>Mesh</monospace> types
  contain methods to work with the underlying data structure
  directly.</p>
  <fig>
    <caption><p>Flowchart and class hierarchy for
    Nanomesh.<styled-content id="figU003Aflowchart"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/flowchart.png" xlink:title="" />
  </fig>
</sec>
<sec id="example">
  <title>Example</title>
  <p>To illustrate how to use <monospace>Nanomesh</monospace>, we
  present an example to create 2D and 3D meshes of nanopores etched in a
  silicon matrix. These nanopores are very often used in the creation of
  optical crystals and the study of their properties is therefore
  crucial.</p>
  <p><monospace>Nanomesh</monospace> works with
  <monospace>numpy</monospace> arrays. The following snippet uses some
  sample data included with <monospace>Nanomesh</monospace> and loads it
  into an <monospace>Image</monospace> object.
  <xref alt="Figure 2" rid="figU003Amesh_plots">Figure 2</xref> shows
  the input image as output by the snippet below.</p>
  <code language="python">from nanomesh import Image, data

image_array = data.nanopores()
plane = Image(image_array)
plane.show()</code>
  <sec id="filter-and-segment-the-data">
    <title>Filter and segment the data</title>
    <p>Image segmentation is a way to label the pixels of different
    regions of interest in an image. In this example, we are interested
    in separating the silicon bulk material (bright) from the nanopores
    (dark).</p>
    <p>Common filters and image operations like Gaussian filter are
    available as a method on the <monospace>Image</monospace> object
    directly. <monospace>Nanomesh</monospace> uses
    <monospace>scikit-image</monospace>
    (<xref alt="Van der Walt et al., 2014" rid="ref-skimage" ref-type="bibr">Van
    der Walt et al., 2014</xref>) for image operations. Other image
    operations can be applied using the <monospace>.apply()</monospace>
    method, which guarantees an object of the same type will be
    returned. For example, the code below is essentially short-hand for
    <monospace>plane_gauss = plane.apply(skimage.filters.gaussian, sigma=5)</monospace>.</p>
    <code language="python">plane_gauss = plane.gaussian(sigma=5)</code>
    <p>The next step is to segment the image using a threshold method.
    In this case, we use the <monospace>li</monospace> algorithm
    (<xref alt="Li &amp; Lee, 1993" rid="ref-Li1993" ref-type="bibr">Li
    &amp; Lee, 1993</xref>), because it appears to give good
    separation.</p>
    <code language="python">thresh = plane_gauss.threshold('li')
segmented = plane_gauss.digitize(bins=[thresh])</code>
    <fig>
      <caption><p>(left) Input image, (middle) Gaussian-filtered image
      with contour, (right) and generated triangle mesh where orange
      represents the features (pores) and blue the background (bulk
      material).<styled-content id="figU003Amesh_plots"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/meshing_plots.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="generate-mesh">
    <title>Generate mesh</title>
    <p>Meshes are generated using the <monospace>Mesher</monospace>
    class. Meshing consists of two steps: contour finding and
    triangulation. Contour finding uses the marching cubes algorithm
    implemented in <monospace>scikit-image</monospace>
    (<xref alt="Van der Walt et al., 2014" rid="ref-skimage" ref-type="bibr">Van
    der Walt et al., 2014</xref>) to wrap all the pores in a polygon.
    <monospace>max_edge_dist=5</monospace> redefines straight edges to
    have points no more than 5 pixels apart. Sometimes an edge is
    defined by (too) many points, which can result in unnessecarily fine
    meshes, because the meshing algorithm will not remove these points.
    <monospace>level</monospace> specifies the level at which the
    contour is generated. Here, we set it to the threshold value
    determined above. The code below creates the contour around the
    features in the gaussian filtered image.</p>
    <code language="python">from nanomesh import Mesher

mesher = Mesher(plane_gauss)
mesher.generate_contour(max_edge_dist=5, level=thresh)
mesher.plot_contour()</code>
    <p><xref alt="Figure 2" rid="figU003Amesh_plots">Figure 2</xref>
    shows the output of <monospace>mesh.plot_contour()</monospace>, a
    comparison of the gaussian filtered image with the contours.</p>
    <p>The contours are used as a starting point for triangulation. The
    triangulation itself is performed by the
    <monospace>triangle</monospace> library
    (<xref alt="Shewchuk, 1996" rid="ref-triangle" ref-type="bibr">Shewchuk,
    1996</xref>). Options can be specified through the
    <monospace>opts</monospace> keyword argument. This example uses
    <monospace>q30</monospace> to generate a quality mesh with angles
    &gt; 30°, and <monospace>a100</monospace> to set a maximum triangle
    size of 100 pixels.</p>
    <code language="python">mesh = mesher.triangulate(opts='q30a100')</code>
    <p>Triangulation returns a <monospace>MeshContainer</monospace>
    dataclass that can be used for various operations, for example
    comparing it with the original image:</p>
    <code language="python">plane.compare_with_mesh(mesh)</code>
  </sec>
  <sec id="metrics">
    <title>Metrics</title>
    <p><monospace>Nanomesh</monospace> contains a metrics module, which
    can calculate several common mesh quality indicators, such as the
    minimum/maximum angle distributions, ratio of radii, shape
    paramaters, area, et cetera. The snippet below illustrates how such
    plots can be generated
    (<xref alt="Figure 3" rid="figU003Amesh_metrics">Figure 3</xref>).</p>
    <code language="python">from nanomesh import metrics

triangle_mesh = mesh.get('triangle')
metrics.histogram(triangle_mesh, metric='max_angle')
metrics.plot2d(triangle_mesh, metric='max_angle')</code>
    <fig>
      <caption><p>(left) Histogram and (right) 2D plot of maximum angle
      distribution.<styled-content id="figU003Amesh_metrics"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/mesh_metrics.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="exporting-the-data">
    <title>Exporting the data</title>
    <p>Data can be exported to various formats. This uses
    <monospace>meshio</monospace>
    (<xref alt="Schlömer, n.d." rid="ref-meshio" ref-type="bibr">Schlömer,
    n.d.</xref>), a library for reading, writing and converting between
    unstructured mesh formats.</p>
    <code language="python">mesh.write('out.msh', file_format='gmsh22', binary=False)</code>
  </sec>
</sec>
<sec id="d-volumes">
  <title>3D volumes</title>
  <p>The workflow for 3D data volumes is similar, although the
  underlying implementation is different. Instead of a line mesh, a 3D
  (triangle) surface mesh wraps the segmented volume. Tetrahedralization
  is performed using <monospace>tetgen</monospace>
  (<xref alt="Si, 2015" rid="ref-tetgen" ref-type="bibr">Si,
  2015</xref>) as the underlying library.
  <xref alt="Figure 4" rid="figU003Amesh3d">Figure 4</xref> shows an
  example of 3D cell data, which were meshed using
  <monospace>Nanomesh</monospace> and vizualized using
  <monospace>PyVista</monospace>
  (<xref alt="Sullivan &amp; Kaszynski, 2019" rid="ref-pyvista" ref-type="bibr">Sullivan
  &amp; Kaszynski, 2019</xref>).</p>
  <fig>
    <caption><p>(left) Slice of the input data, and (right) cut through
    the 3D mesh generated where yellow correspond to the cells and
    purple to the background
    volume.<styled-content id="figU003Amesh3d"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/mesh3d.png" xlink:title="" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge contributions from Jaap van der Vegt, Matthias
  Schlottbom and Willem Vos for scientific input and helpful discussions
  guiding the development of Nanomesh.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-centaur">
    <element-citation publication-type="book">
      <source>CENTAUR software</source>
      <uri>https://centaursoft.com</uri>
      <pub-id pub-id-type="doi"></pub-id>
    </element-citation>
  </ref>
  <ref id="ref-scanip">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Simpleware</surname></name>
      </person-group>
      <source>Simpleware ScanIP</source>
      <uri>https://www.synopsys.com/simpleware/software/scanip.html</uri>
      <pub-id pub-id-type="doi"></pub-id>
    </element-citation>
  </ref>
  <ref id="ref-gmsh">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>Geuzaine, Christophe and Remacle, Jean-Francois</string-name>
      </person-group>
      <source>Gmsh</source>
      <year iso-8601-date="2020-06-22">2020</year><month>06</month><day>22</day>
      <uri>http://http://gmsh.info/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cgal">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>The CGAL Project</string-name>
      </person-group>
      <source>CGAL user and reference manual</source>
      <publisher-name>CGAL Editorial Board</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <edition>4.3</edition>
      <uri>http://doc.cgal.org/4.3/Manual/packages.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-tetgen">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Si</surname><given-names>Hang</given-names></name>
      </person-group>
      <article-title>TetGen, a delaunay-based quality tetrahedral mesh generator</article-title>
      <source>ACM Trans. Math. Softw.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2015-02">2015</year><month>02</month>
      <volume>41</volume>
      <issue>2</issue>
      <issn>0098-3500</issn>
      <uri>https://doi.org/10.1145/2629697</uri>
      <pub-id pub-id-type="doi">10.1145/2629697</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pyvista">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sullivan</surname><given-names>C. Bane</given-names></name>
        <name><surname>Kaszynski</surname><given-names>Alexander</given-names></name>
      </person-group>
      <article-title>PyVista: 3D plotting and mesh analysis through a streamlined interface for the visualization toolkit (VTK)</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2019-05">2019</year><month>05</month>
      <volume>4</volume>
      <issue>37</issue>
      <uri>https://doi.org/10.21105/joss.01450</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01450</pub-id>
      <fpage>1450</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-triangle">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Shewchuk</surname><given-names>Jonathan Richard</given-names></name>
      </person-group>
      <article-title>Triangle: Engineering a 2D quality mesh generator and delaunay triangulator</article-title>
      <source>Applied computational geometry towards geometric engineering</source>
      <person-group person-group-type="editor">
        <name><surname>Lin</surname><given-names>Ming C.</given-names></name>
        <name><surname>Manocha</surname><given-names>Dinesh</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="1996">1996</year>
      <isbn>978-3-540-70680-9</isbn>
      <uri>https://doi.org/10.1007/bfb0014497</uri>
      <pub-id pub-id-type="doi">10.1007/bfb0014497</pub-id>
      <fpage>203</fpage>
      <lpage>222</lpage>
    </element-citation>
  </ref>
  <ref id="ref-meshio">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Schlömer</surname><given-names>Nico</given-names></name>
      </person-group>
      <source>meshio: Tools for mesh files</source>
      <uri>https://github.com/nschloe/meshio</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.1173115</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-numpy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-skimage">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Van der Walt</surname><given-names>Stefan</given-names></name>
        <name><surname>Schönberger</surname><given-names>Johannes L</given-names></name>
        <name><surname>Nunez-Iglesias</surname><given-names>Juan</given-names></name>
        <name><surname>Boulogne</surname><given-names>François</given-names></name>
        <name><surname>Warner</surname><given-names>Joshua D</given-names></name>
        <name><surname>Yager</surname><given-names>Neil</given-names></name>
        <name><surname>Gouillart</surname><given-names>Emmanuelle</given-names></name>
        <name><surname>Yu</surname><given-names>Tony</given-names></name>
      </person-group>
      <article-title>Scikit-image: Image processing in python</article-title>
      <source>PeerJ</source>
      <publisher-name>PeerJ Inc.</publisher-name>
      <year iso-8601-date="2014">2014</year>
      <volume>2</volume>
      <uri>https://doi.org/10.7717/peerj.453</uri>
      <pub-id pub-id-type="doi">10.7717/peerj.453</pub-id>
      <fpage>e453</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hughes2005">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hughes</surname><given-names>S.</given-names></name>
        <name><surname>Ramunno</surname><given-names>L.</given-names></name>
        <name><surname>Young</surname><given-names>Jeff F.</given-names></name>
        <name><surname>Sipe</surname><given-names>J. E.</given-names></name>
      </person-group>
      <article-title>Extrinsic optical scattering loss in photonic crystal waveguides: Role of fabrication disorder and photon group velocity</article-title>
      <source>Phys. Rev. Lett.</source>
      <publisher-name>American Physical Society</publisher-name>
      <year iso-8601-date="2005-01">2005</year><month>01</month>
      <volume>94</volume>
      <uri>https://link.aps.org/doi/10.1103/PhysRevLett.94.033903</uri>
      <pub-id pub-id-type="doi">10.1103/PhysRevLett.94.033903</pub-id>
      <fpage>033903</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Koenderink2005">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Koenderink</surname><given-names>A. Femius</given-names></name>
        <name><surname>Lagendijk</surname><given-names>Ad</given-names></name>
        <name><surname>Vos</surname><given-names>Willem L.</given-names></name>
      </person-group>
      <article-title>Optical extinction due to intrinsic structural variations of photonic crystals</article-title>
      <source>Phys. Rev. B</source>
      <publisher-name>American Physical Society</publisher-name>
      <year iso-8601-date="2005-10">2005</year><month>10</month>
      <volume>72</volume>
      <uri>https://link.aps.org/doi/10.1103/PhysRevB.72.153102</uri>
      <pub-id pub-id-type="doi">10.1103/PhysRevB.72.153102</pub-id>
      <fpage>153102</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Li1993">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Li</surname><given-names>C. H.</given-names></name>
        <name><surname>Lee</surname><given-names>C. K.</given-names></name>
      </person-group>
      <article-title>Minimum cross entropy thresholding</article-title>
      <source>Pattern Recognition</source>
      <year iso-8601-date="1993">1993</year>
      <volume>26</volume>
      <issue>4</issue>
      <issn>0031-3203</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/003132039390115D</uri>
      <pub-id pub-id-type="doi">10.1016/0031-3203(93)90115-D</pub-id>
      <fpage>617</fpage>
      <lpage>625</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
