<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4468</article-id>
<article-id pub-id-type="doi">10.21105/joss.04468</article-id>
<title-group>
<article-title>ParMOO: A Python library for parallel multiobjective
simulation optimization</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9541-7041</contrib-id>
<name>
<surname>Chang</surname>
<given-names>Tyler H.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6099-2772</contrib-id>
<name>
<surname>Wild</surname>
<given-names>Stefan M.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Mathematics and Computer Science Division, Argonne National
Laboratory, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Applied Mathematics and Computational Research Division,
Lawrence Berkeley National Laboratory, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>NAISE, Northwestern University, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-01-26">
<day>26</day>
<month>1</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>82</issue>
<fpage>4468</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>numerical optimization</kwd>
<kwd>multiobjective optimization</kwd>
<kwd>response surface methodology</kwd>
<kwd>parallel simulations</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>A multiobjective optimization problem (MOOP) is an optimization
  problem in which multiple objectives are optimized simultaneously. The
  goal of a MOOP is to find solutions that describe the tradeoff between
  these (potentially conflicting) objectives. Such a tradeoff surface is
  called the Pareto front. Real-world MOOPs may also involve constraints
  – additional hard rules that every solution must adhere to. In a
  multiobjective <italic>simulation</italic> optimization problem, the
  objectives are derived from the outputs of one or more computationally
  expensive simulations. Such problems are ubiquitous in science and
  engineering.</p>
  <p>ParMOO is a Python framework and library of solver components for
  building and deploying highly customized multiobjective simulation
  optimization solvers. ParMOO is designed to help engineers,
  practitioners, and optimization experts exploit available structures
  in how simulation outputs are used to formulate the objectives for a
  MOOP. We elaborate on these structures and provide two examples in
  future sections.</p>
  <p>Additionally, ParMOO is:</p>
  <list list-type="bullet">
    <list-item>
      <p>an open-source project on
      <ext-link ext-link-type="uri" xlink:href="https://github.com/parmoo/parmoo">GitHub</ext-link>,</p>
    </list-item>
    <list-item>
      <p><monospace>pip</monospace>-installable via
      <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/parmoo">PyPI</ext-link>
      or <monospace>conda</monospace>-installable via
      <ext-link ext-link-type="uri" xlink:href="https://anaconda.org/conda-forge/parmoo">conda-forge</ext-link>,
      and</p>
    </list-item>
    <list-item>
      <p>fully
      <ext-link ext-link-type="uri" xlink:href="https://parmoo.readthedocs.io">documented</ext-link>.</p>
    </list-item>
  </list>
</sec>
<sec id="multiobjective-simulation-optimization-software">
  <title>Multiobjective Simulation Optimization Software</title>
  <p>Existing open source, actively maintained Python packages for
  solving multiobjective simulation optimization problems include
  <monospace>pymoo</monospace>
  (<xref alt="Blank &amp; Deb, 2020" rid="ref-pymoo" ref-type="bibr">Blank
  &amp; Deb, 2020</xref>), <monospace>pymoso</monospace>
  (<xref alt="Cooper &amp; Hunter, 2020" rid="ref-pymoso" ref-type="bibr">Cooper
  &amp; Hunter, 2020</xref>), <monospace>Dragonfly</monospace>
  (<xref alt="Kandasamy et al., 2020" rid="ref-dragonfly" ref-type="bibr">Kandasamy
  et al., 2020</xref>), <monospace>Playtpus</monospace>
  (<xref alt="Hadka, 2015" rid="ref-platypus" ref-type="bibr">Hadka,
  2015</xref>), <monospace>jMetalPy</monospace>
  (<xref alt="Benítez-Hidalgo et al., 2019" rid="ref-jMetalPy" ref-type="bibr">Benítez-Hidalgo
  et al., 2019</xref>), and <monospace>pygmo</monospace>
  (<xref alt="Biscani &amp; Izzo, 2020" rid="ref-pygmo" ref-type="bibr">Biscani
  &amp; Izzo, 2020</xref>). Non-multiobjective-optimization-specific
  Python packages that are often used for implementing multiobjective
  optimization solvers include <monospace>BoTorch</monospace>
  (<xref alt="Balandat et al., 2020" rid="ref-botorch" ref-type="bibr">Balandat
  et al., 2020</xref>) and <monospace>DEAP</monospace>
  (<xref alt="Fortin et al., 2012" rid="ref-deap" ref-type="bibr">Fortin
  et al., 2012</xref>). Other non-Python packages include the Fortran
  solvers <monospace>MODIR</monospace>
  (<xref alt="Campana et al., 2018" rid="ref-modir" ref-type="bibr">Campana
  et al., 2018</xref>) and <monospace>VTMOP</monospace>
  (<xref alt="Chang et al., 2022" rid="ref-vtmop" ref-type="bibr">Chang
  et al., 2022</xref>), and the Matlab toolboxes
  <monospace>PlatEMO</monospace>
  (<xref alt="Tian et al., 2017" rid="ref-platemo" ref-type="bibr">Tian
  et al., 2017</xref>) and <monospace>BoostDFO</monospace>
  (<xref alt="Tavares et al., 2022" rid="ref-boostdfo" ref-type="bibr">Tavares
  et al., 2022</xref>).</p>
  <p>The above-listed software packages:</p>
  <list list-type="alpha-lower">
    <list-item>
      <label>a)</label>
      <p>are not restricted to a particular MOOP application,</p>
    </list-item>
    <list-item>
      <label>b)</label>
      <p>have source code publicly available for download,</p>
    </list-item>
    <list-item>
      <label>c)</label>
      <p>are suitable for or contain sub-modules for solving a general
      form of the multiobjective simulation optimization problem,
      and</p>
    </list-item>
    <list-item>
      <label>d)</label>
      <p>provide sufficient documentation for a new user to get started
      without requiring counsel from the authors.</p>
    </list-item>
  </list>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>All of the previously mentioned software packages are high-quality
  and/or feature-complete in some sense. However, ParMOO is distinct for
  the following reasons:</p>
  <list list-type="order">
    <list-item>
      <label>1)</label>
      <p>ParMOO is designed to be flexible enough to support diverse
      scientific workflows and solve a wide variety of real-world
      problem types.</p>
    </list-item>
    <list-item>
      <label>2)</label>
      <p>ParMOO provides interfaces and solver techniques that are
      suitable for both introductory and expert users.</p>
    </list-item>
    <list-item>
      <label>3)</label>
      <p>ParMOO provides bells and whistles that are required in
      production-quality solvers, such as checkpointing and logging.</p>
    </list-item>
    <list-item>
      <label>4)</label>
      <p>By layering on top of libEnsemble
      (<xref alt="Hudson et al., 2022" rid="ref-libensemble" ref-type="bibr">Hudson
      et al., 2022</xref>), ParMOO provides an easy-to-use interface for
      distributing expensive simulation calculations over high
      performance computing (HPC) resources.</p>
    </list-item>
    <list-item>
      <label>5)</label>
      <p>ParMOO provides complete documentation, including instructions
      for potential contributors.</p>
    </list-item>
    <list-item>
      <label>6)</label>
      <p>ParMOO is designed around extensibility and continuous
      integration, with the intention of adding support for new
      features, solvers, techniques, and problem types, some of which
      may be beyond what we originally envisioned.</p>
    </list-item>
    <list-item>
      <label>7)</label>
      <p>In situations where there is an exploitable structure in how
      the simulation outputs are used to define the objectives and/or
      constraints, ParMOO can exploit this structure by modeling
      simulation outputs independently.</p>
    </list-item>
  </list>
  <p>While many existing solvers provide one or more of properties 1-5,
  at this time, no other solver has <italic>all</italic> of these
  properties at once. Additionally, to our knowledge, properties 6 and 7
  are unique to ParMOO.</p>
  <p>The target audience for ParMOO includes scientists, engineers,
  optimizers, and other practitioners, who are looking to build or use
  custom solvers for simulation- or experimentation-based MOOPs.</p>
</sec>
<sec id="our-methodology">
  <title>Our Methodology</title>
  <p>In our <italic>statement of need</italic>, we outlined the
  properties that make ParMOO unique. In this section, we outline our
  strategy for achieving these goals. In particular, properties 1, 6,
  and 7 are nontrivial.</p>
  <p>First, in order to achieve flexibility and customizability without
  sacrificing ease of use, we have focused on implementing a
  multiobjective response surface methodology (RSM) framework, which
  encompasses a wide range of existing techniques. Using the RSM
  framework, we decompose multiobjective simulation optimization
  problems into four central components: i) an initial search/design of
  experiments, used to generate the initial data set; ii) multiple
  surrogates, used to model the simulation outputs based on existing
  data; iii) one or more families of acquisition functions, used to
  scalarize the problem and guide the optimization solver to multiple
  distinct solutions; and iv) a single-objective optimization solver,
  used to solve the scalarized surrogate problems, in order to produce
  batches of candidate solution points.</p>
  <p>In order to achieve property 1, we provide a customizable embedding
  layer, which can be used to embed categorical, integer,
  mixed-variable, and other input types into a continuous latent space,
  where the above components can be easily applied. We also support
  nonlinear relaxable constraints, by using a multiobjective progressive
  barrier method.</p>
  <p>In order to achieve property 6, we use an object-oriented design,
  where our <monospace>MOOP</monospace> class references abstract base
  classes (ABCs) for each of the above components i–iv, in order to
  solve a MOOP via RSM. This allows us to quickly customize solver
  components in a modular fashion, by extending their existing
  interface. In unforeseen circumstances, we can even extend the
  <monospace>MOOP</monospace> class itself in order to achieve a
  completely new behavior or customize our method for distributing
  simulation evaluations based on a novel scientific workflow.</p>
  <p>Finally, for property 7, we are the first RSM solver to model
  simulation outputs separately from objective and constraint functions.
  This is useful in situations where the objectives are structured
  algebraic functions of the simulation outputs (e.g., a sum-of-squared
  outputs), or where one or more objectives does not depend on the
  simulations at all. In these situations, the additional structure that
  is available in exactly how the simulation outputs are being used to
  formulate the problem is made available to ParMOO’s solvers, and can
  be exploited to improve approximation bounds and convergence rates,
  and to reduce the need for expensive simulation evaluations.</p>
</sec>
<sec id="example-problems">
  <title>Example Problems</title>
  <p>To demonstrate the utility of ParMOO and the importance of property
  7, we describe two current applications.</p>
  <p>First, ParMOO is currently being used to calibrate energy density
  functional (EDF) models, by minimizing the error between expensive
  simulation outputs and experimental data. Let
  <inline-formula><alternatives>
  <tex-math><![CDATA[R_1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[\ldots]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>…</mml:mi></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[R_m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>R</mml:mi><mml:mi>m</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  denote the <inline-formula><alternatives>
  <tex-math><![CDATA[m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>m</mml:mi></mml:math></alternatives></inline-formula>
  deviations between <inline-formula><alternatives>
  <tex-math><![CDATA[m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>m</mml:mi></mml:math></alternatives></inline-formula>-dimensional
  experimental data <inline-formula><alternatives>
  <tex-math><![CDATA[D]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>D</mml:mi></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>m</mml:mi></mml:math></alternatives></inline-formula>-dimensional
  outputs of an EDF model <inline-formula><alternatives>
  <tex-math><![CDATA[S]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>S</mml:mi></mml:math></alternatives></inline-formula>.
  Then, we want to calibrate <inline-formula><alternatives>
  <tex-math><![CDATA[S]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>S</mml:mi></mml:math></alternatives></inline-formula>
  by solving the multiobjective problem <disp-formula><alternatives>
  <tex-math><![CDATA[
  \min_{x \in [0,1]^n} \big(\sum_{i\in C_1} R_i^2, \sum_{j\in C_2} R_j^2, \sum_{k\in C_3} R_k^2\big)
  ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:munder><mml:mo>min</mml:mo><mml:mrow><mml:mi>x</mml:mi><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msup></mml:mrow></mml:munder><mml:mo minsize="1.2" maxsize="1.2" stretchy="false" form="prefix">(</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:munder><mml:msubsup><mml:mi>R</mml:mi><mml:mi>i</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>,</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:munder><mml:msubsup><mml:mi>R</mml:mi><mml:mi>j</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>,</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:mrow></mml:munder><mml:msubsup><mml:mi>R</mml:mi><mml:mi>k</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo minsize="1.2" maxsize="1.2" stretchy="false" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[C_1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>C</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[C_2]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>C</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>,
  and <inline-formula><alternatives>
  <tex-math><![CDATA[C_3]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>C</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
  are a partitioning of the indices <inline-formula><alternatives>
  <tex-math><![CDATA[1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>1</mml:mn></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[\ldots]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>…</mml:mi></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>m</mml:mi></mml:math></alternatives></inline-formula>
  into three observable classes, each with different observation and
  measurement errors; and where <inline-formula><alternatives>
  <tex-math><![CDATA[x]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>x</mml:mi></mml:math></alternatives></inline-formula>
  is a set of <inline-formula><alternatives>
  <tex-math><![CDATA[n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>
  unknown modeling parameters for <inline-formula><alternatives>
  <tex-math><![CDATA[S]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>S</mml:mi></mml:math></alternatives></inline-formula>,
  normalized to lie in the unit hypercube. In this context, the
  simulation-based structure comes from the known sum-of-squares
  equation of the empirical loss function. By modeling, the
  <inline-formula><alternatives>
  <tex-math><![CDATA[m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>m</mml:mi></mml:math></alternatives></inline-formula>
  simulation outputs in <inline-formula><alternatives>
  <tex-math><![CDATA[S]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>S</mml:mi></mml:math></alternatives></inline-formula>
  separately from the three objectives, ParMOO is able to exploit this
  sum-of-squares structure, similarly as in the single-objective
  software <monospace>POUNDERS</monospace>
  (<xref alt="Wild, 2017" rid="ref-pounders" ref-type="bibr">Wild,
  2017</xref>). This example also illustrates ParMOO’s ability to
  utilize parallel resources (property 4), since the expensive EDF
  simulations are being distributed over HPC resources using
  libEnsemble.</p>
  <p>Second, ParMOO is being used to automate material design and
  manufacturing in a wet lab-based environment, where each “simulation
  evaluation” corresponds to the experimental synthesis and
  characterization of a particular material. In this example, the goal
  is to maximize the yield and minimize the byproduct of an experimental
  chemical synthesis, which is carried out in a continuous-flow reactor
  and characterized using nuclear magnetic resonance spectroscopy, while
  also maximizing the reaction temperature, which is a directly
  controllable variable. The simulation-based structure in this problem
  comes from the known dependence between the directly controllable
  objective (the reaction temperature), while still accounting for the
  two experimental “blackbox” objectives (the total material yield and
  byproduct). This example also demonstrates how ParMOO is able to
  easily integrate with the material scientists’ tools and workflow
  (property 1), which had to be facilitated using third-party libraries
  since the interface to the physical experiment could not be wrapped in
  a simple callable Python function.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank Jeffrey Larson, Stephen Hudson, and
  John-Luke Navarro for their advice on documentation, automated
  testing, and package setup.</p>
  <p>This work was supported in part by the U.S. Department of Energy,
  Office of Science, Office of Advanced Scientific Computing Research,
  Scientific Discovery through Advanced Computing (SciDAC) program
  through the FASTMath Institute under Contract No. DE-AC02-06CH11357.
  This work was supported by the National Science Foundation CSSI
  program under award number OAC-2004601 (BAND Collaboration).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-pymoo">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Blank</surname><given-names>J.</given-names></name>
        <name><surname>Deb</surname><given-names>K.</given-names></name>
      </person-group>
      <article-title>pymoo: Multi-objective optimization in Python</article-title>
      <source>IEEE Access</source>
      <year iso-8601-date="2020">2020</year>
      <volume>8</volume>
      <pub-id pub-id-type="doi">10.1109/ACCESS.2020.2990567</pub-id>
      <fpage>89497</fpage>
      <lpage>89509</lpage>
    </element-citation>
  </ref>
  <ref id="ref-modir">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Campana</surname><given-names>E. F.</given-names></name>
        <name><surname>Diez</surname><given-names>M.</given-names></name>
        <name><surname>Liuzzi</surname><given-names>G.</given-names></name>
        <name><surname>Lucidi</surname><given-names>S.</given-names></name>
        <name><surname>Pellegrini</surname><given-names>R.</given-names></name>
        <name><surname>Piccialli</surname><given-names>V.</given-names></name>
        <name><surname>Rinaldi</surname><given-names>F.</given-names></name>
        <name><surname>Serani</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>A multi-objective DIRECT algorithm for ship hull optimization</article-title>
      <source>Computational Optimization and Applications</source>
      <year iso-8601-date="2018">2018</year>
      <volume>71</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1007/s10589-017-9955-0</pub-id>
      <fpage>53</fpage>
      <lpage>72</lpage>
    </element-citation>
  </ref>
  <ref id="ref-vtmop">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chang</surname><given-names>T. H.</given-names></name>
        <name><surname>Watson</surname><given-names>L. T.</given-names></name>
        <name><surname>Larson</surname><given-names>J.</given-names></name>
        <name><surname>Neveu</surname><given-names>N.</given-names></name>
        <name><surname>Thacker</surname><given-names>W. I.</given-names></name>
        <name><surname>Deshpande</surname><given-names>S.</given-names></name>
        <name><surname>Lux</surname><given-names>T. C. H.</given-names></name>
      </person-group>
      <article-title>Algorithm 1028: VTMOP: Solver for blackbox multiobjective optimization problems</article-title>
      <source>ACM Transactions on Mathematical Software</source>
      <year iso-8601-date="2022">2022</year>
      <volume>48</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1145/3529258</pub-id>
      <fpage>36:1</fpage>
      <lpage>34</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pymoso">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cooper</surname><given-names>K.</given-names></name>
        <name><surname>Hunter</surname><given-names>S. R.</given-names></name>
      </person-group>
      <article-title>PyMOSO: Software for multi-objective simulation optimization with R-PERLE and R-MinRLE</article-title>
      <source>INFORMS Journal on Computing</source>
      <year iso-8601-date="2020">2020</year>
      <volume>32</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1287/ijoc.2019.0902</pub-id>
      <fpage>1101</fpage>
      <lpage>1108</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dragonfly">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kandasamy</surname><given-names>K.</given-names></name>
        <name><surname>Vysyaraju</surname><given-names>K. R.</given-names></name>
        <name><surname>Neiswanger</surname><given-names>W.</given-names></name>
        <name><surname>Paria</surname><given-names>B.</given-names></name>
        <name><surname>Collins</surname><given-names>C. R.</given-names></name>
        <name><surname>Schneider</surname><given-names>J.</given-names></name>
        <name><surname>Poczos</surname><given-names>B.</given-names></name>
        <name><surname>Xing</surname><given-names>E. P.</given-names></name>
      </person-group>
      <article-title>Tuning hyperparameters without grad students: Scalable and robust Bayesian optimisation with Dragonfly</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2020">2020</year>
      <volume>21</volume>
      <issue>81</issue>
      <uri>http://jmlr.org/papers/v21/18-223.html</uri>
      <fpage>1</fpage>
      <lpage>27</lpage>
    </element-citation>
  </ref>
  <ref id="ref-boostdfo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Tavares</surname><given-names>S.</given-names></name>
        <name><surname>Brás</surname><given-names>C. P.</given-names></name>
        <name><surname>Custódio</surname><given-names>A. L.</given-names></name>
        <name><surname>Duarte</surname><given-names>V.</given-names></name>
        <name><surname>Medeiros</surname><given-names>P.</given-names></name>
      </person-group>
      <article-title>Parallel strategies for direct multisearch</article-title>
      <source>Numerical Algorithms</source>
      <year iso-8601-date="2022">2022</year>
      <volume>Online first</volume>
      <pub-id pub-id-type="doi">10.1007/s11075-022-01364-1</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-libensemble">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hudson</surname><given-names>S.</given-names></name>
        <name><surname>Larson</surname><given-names>J.</given-names></name>
        <name><surname>Navarro</surname><given-names>J.-L.</given-names></name>
        <name><surname>Wild</surname><given-names>S.</given-names></name>
      </person-group>
      <article-title>libEnsemble: A library to coordinate the concurrent evaluation of dynamic ensembles of calculations</article-title>
      <source>IEEE Transactions on Parallel and Distributed Systems</source>
      <year iso-8601-date="2022">2022</year>
      <volume>33</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/tpds.2021.3082815</pub-id>
      <fpage>977</fpage>
      <lpage>988</lpage>
    </element-citation>
  </ref>
  <ref id="ref-platypus">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Hadka</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>Platypus - multiobjective optimization in Python</article-title>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <uri>https://platypus.readthedocs.io/en/latest</uri>
    </element-citation>
  </ref>
  <ref id="ref-jMetalPy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Benítez-Hidalgo</surname><given-names>Antonio</given-names></name>
        <name><surname>Nebro</surname><given-names>Antonio J.</given-names></name>
        <name><surname>García-Nieto</surname><given-names>José</given-names></name>
        <name><surname>Oregi</surname><given-names>Izaskun</given-names></name>
        <name><surname>Del Ser</surname><given-names>Javier</given-names></name>
      </person-group>
      <article-title>jMetalPy: A Python framework for multi-objective optimization with metaheuristics</article-title>
      <source>Swarm and Evolutionary Computation</source>
      <year iso-8601-date="2019">2019</year>
      <volume>51</volume>
      <pub-id pub-id-type="doi">10.1016/j.swevo.2019.100598</pub-id>
      <fpage>100598</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pygmo">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Biscani</surname><given-names>Francesco</given-names></name>
        <name><surname>Izzo</surname><given-names>Dario</given-names></name>
      </person-group>
      <article-title>A parallel global multiobjective framework for optimization: pagmo</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>53</issue>
      <pub-id pub-id-type="doi">10.21105/joss.02338</pub-id>
      <fpage>2338</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-botorch">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Balandat</surname><given-names>Maximilian</given-names></name>
        <name><surname>Karrer</surname><given-names>Brian</given-names></name>
        <name><surname>Jiang</surname><given-names>Daniel</given-names></name>
        <name><surname>Daulton</surname><given-names>Samuel</given-names></name>
        <name><surname>Letham</surname><given-names>Ben</given-names></name>
        <name><surname>Wilson</surname><given-names>Andrew G</given-names></name>
        <name><surname>Bakshy</surname><given-names>Eytan</given-names></name>
      </person-group>
      <article-title>BoTorch: A framework for efficient Monte-Carlo Bayesian optimization</article-title>
      <source>Advances in Neural Information Processing Systems</source>
      <person-group person-group-type="editor">
        <name><surname>Larochelle</surname><given-names>H.</given-names></name>
        <name><surname>Ranzato</surname><given-names>M.</given-names></name>
        <name><surname>Hadsell</surname><given-names>R.</given-names></name>
        <name><surname>Balcan</surname><given-names>M. F.</given-names></name>
        <name><surname>Lin</surname><given-names>H.</given-names></name>
      </person-group>
      <publisher-name>Curran Associates, Inc.</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>33</volume>
      <uri>https://proceedings.neurips.cc/paper/2020/file/f5b1b89d98b7286673128a5fb112cb9a-Paper.pdf</uri>
      <fpage>21524</fpage>
      <lpage>21538</lpage>
    </element-citation>
  </ref>
  <ref id="ref-deap">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fortin</surname><given-names>Félix-Antoine</given-names></name>
        <name><surname>De Rainville</surname><given-names>François-Michel</given-names></name>
        <name><surname>Gardner</surname><given-names>Marc-André</given-names></name>
        <name><surname>Parizeau</surname><given-names>Marc</given-names></name>
        <name><surname>Gagné</surname><given-names>Christian</given-names></name>
      </person-group>
      <article-title>DEAP: Evolutionary algorithms made easy</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2012">2012</year>
      <volume>13</volume>
      <issue>1</issue>
      <uri>https://www.jmlr.org/papers/v13/fortin12a.html</uri>
      <fpage>2171</fpage>
      <lpage>2175</lpage>
    </element-citation>
  </ref>
  <ref id="ref-platemo">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tian</surname><given-names>Ye</given-names></name>
        <name><surname>Cheng</surname><given-names>Ran</given-names></name>
        <name><surname>Zhang</surname><given-names>Xingyi</given-names></name>
        <name><surname>Jin</surname><given-names>Yaochu</given-names></name>
      </person-group>
      <article-title>PlatEMO: A MATLAB platform for evolutionary multi-objective optimization [educational forum]</article-title>
      <source>IEEE Computational Intelligence Magazine</source>
      <year iso-8601-date="2017">2017</year>
      <volume>12</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/MCI.2017.2742868</pub-id>
      <fpage>73</fpage>
      <lpage>87</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pounders">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Wild</surname><given-names>Stefan M.</given-names></name>
      </person-group>
      <article-title>Solving derivative-free nonlinear least squares problems with POUNDERS</article-title>
      <source>Advances and Trends in Optimization with Engineering Applications</source>
      <person-group person-group-type="editor">
        <name><surname>Terlaky</surname><given-names>Tamas</given-names></name>
        <name><surname>Anjos</surname><given-names>Miguel F.</given-names></name>
        <name><surname>Ahmed</surname><given-names>Shabbir</given-names></name>
      </person-group>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <pub-id pub-id-type="doi">10.1137/1.9781611974683.ch40</pub-id>
      <fpage>529</fpage>
      <lpage>540</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
