<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4953</article-id>
<article-id pub-id-type="doi">10.21105/joss.04953</article-id>
<title-group>
<article-title>tpcp: Tiny Pipelines for Complex Problems - A set of
framework independent helpers for algorithms development and
evaluation</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5686-281X</contrib-id>
<name>
<surname>Küderle</surname>
<given-names>Arne</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0272-5403</contrib-id>
<name>
<surname>Richer</surname>
<given-names>Robert</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0455-0168</contrib-id>
<name>
<surname>Sîmpetru</surname>
<given-names>Raul C.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0417-0336</contrib-id>
<name>
<surname>Eskofier</surname>
<given-names>Bjoern M.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Machine Learning and Data Analytics Lab (MaD Lab),
Department Artificial Intelligence in Biomedical Engineering (AIBE),
Friedrich-Alexander-Universität Erlangen-Nürnberg (FAU)</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Neuromuscular Physiology and Neural Interfacing (N-squared)
Laboratory, Department Artificial Intelligence in Biomedical Engineering
(AIBE), Friedrich-Alexander-Universität Erlangen-Nürnberg
(FAU)</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-08-10">
<day>10</day>
<month>8</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>82</issue>
<fpage>4953</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Machine Learning</kwd>
<kwd>Data Analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>During algorithm development and analysis researchers regularly use
  software libraries developed for their specific domain. With such
  libraries, complex analysis tasks can often be reduced to a couple of
  lines of code. This not only reduces the amount of implementation
  required but also prevents errors.</p>
  <p>The best developer experience is usually achieved when the entire
  analysis can be represented with the tools provided by a single
  library. For example, when an entire machine learning pipeline is
  represented by a <monospace>scikit-learn</monospace> pipeline
  (<xref alt="Pedregosa et al., 2018" rid="ref-Pedregosa2018" ref-type="bibr">Pedregosa
  et al., 2018</xref>), it is extremely easy to switch out and train
  algorithms. Furthermore, train/test leaks and other methodological
  errors at various stages in the analysis are automatically prevented –
  even if the user might not be aware of these issue.</p>
  <p>However, if the performed analysis gets too complex, too specific
  to an application domain, or requires the use of tooling and
  algorithms from multiple frameworks, developers lose a lot of the
  benefits provided by individual libraries. In turn, the required skill
  level and the chance of methodological errors rise.</p>
  <p>With <monospace>tpcp</monospace> we attempt to overcome the issue
  by providing higher-level tooling and structure for algorithm
  development and evaluation that is independent of the frameworks
  required for the algorithm implementation.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>To better understand the need for <monospace>tpcp</monospace>, we
  want to provide two examples from application fields:</p>
  <p>The first example is a comparison of different algorithms for
  sleep/wake detection based on wearable sensor data. These algorithms
  can either be heuristic/rule-based algorithms, “traditional” machine
  learning (ML) algorithms, or deep learning (DL) approaches
  (<xref alt="Palotti et al., 2019" rid="ref-Palotti2019" ref-type="bibr">Palotti
  et al., 2019</xref>). When one attempts to compare multiple
  algorithms, it is not possible to use just a single high-level
  framework to implement and run all of them. Heuristic algorithms will
  most likely be implemented without specific frameworks, ML approaches
  are most likely based on
  <ext-link ext-link-type="uri" xlink:href="https://scikit-learn.org/stable/"><monospace>scikit-learn</monospace></ext-link>
  (<xref alt="Pedregosa et al., 2018" rid="ref-Pedregosa2018" ref-type="bibr">Pedregosa
  et al., 2018</xref>), and Deep Learning approaches based on
  <ext-link ext-link-type="uri" xlink:href="https://www.tensorflow.org/"><monospace>tensorflow</monospace></ext-link>
  (<xref alt="Abadi et al., 2015" rid="ref-tensorflow2015-whitepaper" ref-type="bibr">Abadi
  et al., 2015</xref>) or
  <ext-link ext-link-type="uri" xlink:href="https://pytorch.org/"><monospace>PyTorch</monospace></ext-link>
  (<xref alt="Paszke et al., 2019" rid="ref-Paske2019" ref-type="bibr">Paszke
  et al., 2019</xref>). Further, the required data are usually
  multimodal time series (e.g., motion and cardiac data)
  (<xref alt="Zhai et al., 2020" rid="ref-Zhai2020a" ref-type="bibr">Zhai
  et al., 2020</xref>). Some algorithms might just require a subset of
  these modalities, which further complicates the overall data handling
  and potential cross-validations for algorithms evaluation.
  Additionally, a window-wise prediction of sleep and wake is
  desired.</p>
  <p>Without <monospace>tpcp</monospace>, researchers would most likely
  develop their own set of helper functions to load and handle the data,
  to split data in train and test sets, and to perform cross-validation.
  Afterwards, they would need to create their own wrapper to define a
  unified interface for all algorithms so that they can compare all of
  them in a similar manner. All of this requires a profound
  understanding of machine learning to implement the train-test split
  and cross-validation, as well as extensive experience in the
  programming language of choice to design and implement an algorithm
  interface.</p>
  <p>The second example is a comparison of stride detection algorithms
  based on IMU data recently published by Roth et al.
  (<xref alt="2021" rid="ref-Roth2021a" ref-type="bibr">2021</xref>).
  The authors compared a custom Hidden Markov Model implemented using
  <ext-link ext-link-type="uri" xlink:href="https://pomegranate.readthedocs.io/en/latest/"><monospace>pomegranate</monospace></ext-link>
  (<xref alt="Schreiber, 2017" rid="ref-Schreiber2017" ref-type="bibr">Schreiber,
  2017</xref>) with an implementation of a template matching algorithm
  based on Barth et al.
  (<xref alt="2013" rid="ref-Barth2013" ref-type="bibr">2013</xref>). In
  their data, two recordings were available per participant – one in a
  controlled lab setting and one from an unsupervised recording at home.
  As part of their analysis, the authors wanted to show that it is
  sufficient to train algorithms based on the lab data without labeled
  data from the home environment required. The overall approach leads to
  a set of challenges: Neither algorithm fit in the realm of the typical
  ML frameworks, that would provide suitable helper for validation.
  Thus, custom helpers were required again to come up with uniform
  interfaces for training and running the algorithms. Further, the
  requirements for which data were used during training and testing is
  something that cannot be easily abstracted by any of the existing
  frameworks, even if all algorithms could be implemented in it.</p>
  <p>While both examples could be (and have been) solved using
  additional custom tooling, the loss of a framework to support and
  guide the implementation raises the required software engineering
  skill and required understanding of the evaluation procedure. Further,
  developing custom algorithm interfaces and tooling for each analysis
  makes it difficult to reuse algorithms and pipelines across projects,
  as interfaces are likely to differ. With <monospace>tpcp</monospace>,
  we provide opinionated helpers to support data handling and evaluation
  via cross-validation, as well as interfaces that can guide the
  development of custom data analysis pipelines, independent of the
  underlying algorithms. This should ensure a more straightforward
  software development process and should simplify the reuse of tooling
  and algorithms across projects.</p>
  <p>However, compared to a more specialized framework
  (e.g. <monospace>scikit-learn</monospace>),
  <monospace>tpcp</monospace> will always require more implementation
  from the developer side and can never provide an interface that is
  equally simple. This means, if an analysis could be done in the
  context of an already existing specialized library, this library
  should be used over <monospace>tpcp</monospace>. However, if an
  analysis spans multiple domains or requires flexibility that
  specialized frameworks cannot provide, <monospace>tpcp</monospace>
  provides an alternative that should be considered before switching to
  fully custom tooling.</p>
</sec>
<sec id="provided-functionality">
  <title>Provided Functionality</title>
  <p>The package <monospace>tpcp</monospace> provides three things:</p>
  <list list-type="order">
    <list-item>
      <p>Helper to create object-oriented <bold>dataset</bold>
      accessors</p>
    </list-item>
    <list-item>
      <p>Helper to implement own <bold>algorithms</bold> and
      <bold>pipelines</bold> in an object-oriented fashion</p>
    </list-item>
    <list-item>
      <p>Tools for <bold>parameter optimization</bold> and
      <bold>algorithm evaluation</bold> that work with the other
      structures</p>
    </list-item>
  </list>
  <p>Beyond that, the documentation of <monospace>tpcp</monospace>
  attempts to provide fundamental information and recipes on how to
  approach algorithm development and algorithm evaluation.</p>
  <sec id="datasets">
    <title>Datasets</title>
    <p>In cases where data points cannot be expressed by a simple
    feature vector, data loading and handling require non-negligible
    code complexity. Data is usually spread over multiple files and
    databases and requires data transformations during the loading
    process. Therefore, the resulting data structures are unlikely to be
    compatible with existing algorithms. Hence, researchers need to
    implement code abstractions of their datasets, often in the form of
    helper functions. With the <monospace>tpcp.Dataset</monospace>
    implementation, we suggest an alternative interface to diverse data
    structures by implementing data access using Python classes.
    Inspired by <monospace>pytorch</monospace> datasets, they provide a
    common interface and their structure can be iterated, filtered, and
    split. These datasets are compatible with other tooling provided in
    <monospace>tpcp</monospace> and allow to pass complex data
    structures through a cross-validations or gridsearch.</p>
  </sec>
  <sec id="algorithms">
    <title>Algorithms</title>
    <p>In <monospace>tpcp</monospace>, we do not provide any specific
    algorithm implementations, but only simple base classes to build
    algorithms with a <monospace>scikit-learn</monospace> inspired
    interface. Using this object-oriented interface to implement
    algorithms ensures comparable interfaces for similar algorithms.
    Using this part of <monospace>tpcp</monospace> is completely
    optional (i.e., all other features are completely independent of the
    algorithm implementation), but following our recommendations can
    simplify the integration with other parts of
    <monospace>tpcp</monospace>.</p>
  </sec>
  <sec id="pipelines">
    <title>Pipelines</title>
    <p>For any analysis, we need to bring the data together with the
    algorithms. In <monospace>tpcp</monospace>, we call this “gluing
    code” Pipelines. Many specialized frameworks are able to completely
    remove any of this gluing code as the data structures and the
    algorithm interfaces are strictly defined and, hence, algorithms can
    directly interface with the data. In <monospace>tpcp</monospace> we
    allow more flexibility to have different data and algorithm
    interfaces depending on the application and algorithm types.
    Therefore, we need Pipelines to connect the reusable Dataset and
    Algorithm interfaces for a specific analysis
    (<xref alt="Figure 1" rid="figU003Aalgo_simple">Figure 1</xref>,
    <xref alt="Figure 2" rid="figU003Aalgo_complex">Figure 2</xref>).
    Pipelines also provide a fixed and unified interface that utility
    methods in <monospace>tpcp</monospace> can use.</p>
    <fig>
      <caption><p>Simple case with a single Pipeline: The Pipeline can
      interface between all available Datasets and all Algorithms
      because they share a common interface.
      <styled-content id="figU003Aalgo_simple"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/img/algos_simple.pdf" xlink:title="" />
    </fig>
    <fig>
      <caption><p>A more complex case: Pipelines act as gluing code for
      one Dataset interface with one or multiple Algorithm interfaces to
      perform one specific analysis.
      <styled-content id="figU003Aalgo_complex"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/img/algos_complex.pdf" xlink:title="" />
    </fig>
  </sec>
  <sec id="parameter-optimization-and-evaluation-tools">
    <title>Parameter Optimization and Evaluation Tools</title>
    <p>To handle the often complex task of evaluation and Parameter
    Optimization, <monospace>tpcp</monospace> provides a
    re-implementation of the core evaluation
    (<monospace>cross_validate</monospace>) and parameter optimization
    (<monospace>GridSearch</monospace>,
    <monospace>GridSearchCV</monospace>) methods of
    <monospace>scikit-learn</monospace> that work with
    <monospace>Pipeline</monospace> and <monospace>Dataset</monospace>
    objects. Further we provide a generic wrapper for
    <ext-link ext-link-type="uri" xlink:href="https://optuna.org">Optuna</ext-link>
    based optimization algorithms
    (<xref alt="Akiba et al., 2019" rid="ref-Akiba2019" ref-type="bibr">Akiba
    et al., 2019</xref>) and documentation to implement custom parameter
    optimizers. This means that independent of the frameworks required
    for the algorithms, reliable tooling for these critical parts of
    most data-analysis pipelines can be used.</p>
  </sec>
</sec>
<sec id="availability">
  <title>Availability</title>
  <p>The software is available as a pip installable package
  (<monospace>pip install tpcp</monospace>) and via
  <ext-link ext-link-type="uri" xlink:href="https://github.com/mad-lab-fau/tpcp">GitHub</ext-link>.
  Documentation can be found via
  <ext-link ext-link-type="uri" xlink:href="https://tpcp.readthedocs.io">Read
  the Docs</ext-link>.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>Most of <monospace>tpcp</monospace> was created in reaction to
  problems and issues we ran into during our day-to-day work at the
  Machine Learning and Data Analytics Lab (MaD Lab) of
  Friedrich-Alexander-Universität Erlangen-Nürnberg and teaching signal
  analysis and machine learning to our students. Therefore, we would
  like to thank all students and MaD Lab members that engaged in our
  various discussions and brainstorming sessions about evaluation
  approaches for obscure algorithms and design for the algorithm
  interface.</p>
  <p>Bjoern M. Eskofier gratefully acknowledges the support of the
  German Research Foundation (DFG) within the framework of the
  Heisenberg professorship programme (grant number ES 434/8-1). Further,
  this work was partly funded by the Deutsche Forschungsgemeinschaft
  (DFG, German Research Foundation) – SFB 1483 – Project-ID 442419336,
  EmpkinS and by the Mobilise-D project that has received funding from
  the Innovative Medicines Initiative 2 Joint Undertaking (JU) under
  grant agreement No. 820820. This JU receives support from the European
  Union’s Horizon 2020 research and innovation program and the European
  Federation of Pharmaceutical Industries and Associations (EFPIA).
  Content in this publication reflects the authors’ view and neither IMI
  nor the European Union, EFPIA, or any Associated Partners are
  responsible for any use that may be made of the information contained
  herein.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Akiba2019">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Akiba</surname><given-names>Takuya</given-names></name>
        <name><surname>Sano</surname><given-names>Shotaro</given-names></name>
        <name><surname>Yanase</surname><given-names>Toshihiko</given-names></name>
        <name><surname>Ohta</surname><given-names>Takeru</given-names></name>
        <name><surname>Koyama</surname><given-names>Masanori</given-names></name>
      </person-group>
      <article-title>Optuna: A Next-generation Hyperparameter Optimization Framework</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2019-07">2019</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-08-10">2022</year><month>08</month><day>10</day></date-in-citation>
      <uri>http://arxiv.org/abs/1907.10902</uri>
    </element-citation>
  </ref>
  <ref id="ref-Barth2013">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Barth</surname><given-names>Jens</given-names></name>
        <name><surname>Oberndorfer</surname><given-names>Cacilia</given-names></name>
        <name><surname>Kugler</surname><given-names>Patrick</given-names></name>
        <name><surname>Schuldhaus</surname><given-names>Dominik</given-names></name>
        <name><surname>Winkler</surname><given-names>Jurgen</given-names></name>
        <name><surname>Klucken</surname><given-names>Jochen</given-names></name>
        <name><surname>Eskofier</surname><given-names>Bjorn</given-names></name>
      </person-group>
      <article-title>Subsequence dynamic time warping as a method for robust step segmentation using gyroscope signals of daily life activities</article-title>
      <source>Proceedings of the Annual International Conference of the IEEE Engineering in Medicine and Biology Society, EMBS</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2013-07">2013</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2018-03-05">2018</year><month>03</month><day>05</day></date-in-citation>
      <isbn>978-1-4577-0216-7</isbn>
      <uri>http://ieeexplore.ieee.org/document/6611104/</uri>
      <pub-id pub-id-type="doi">10.1109/EMBC.2013.6611104</pub-id>
      <pub-id pub-id-type="pmid">24111291</pub-id>
      <fpage>6744</fpage>
      <lpage>6747</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Palotti2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Palotti</surname><given-names>Joao</given-names></name>
        <name><surname>Mall</surname><given-names>Raghvendra</given-names></name>
        <name><surname>Aupetit</surname><given-names>Michael</given-names></name>
        <name><surname>Rueschman</surname><given-names>Michael</given-names></name>
        <name><surname>Singh</surname><given-names>Meghna</given-names></name>
        <name><surname>Sathyanarayana</surname><given-names>Aarti</given-names></name>
        <name><surname>Taheri</surname><given-names>Shahrad</given-names></name>
        <name><surname>Fernandez-Luque</surname><given-names>Luis</given-names></name>
      </person-group>
      <article-title>Benchmark on a large cohort for sleep-wake classification with machine learning techniques</article-title>
      <source>npj Digital Medicine</source>
      <year iso-8601-date="2019-12">2019</year><month>12</month>
      <volume>2</volume>
      <issue>1</issue>
      <issn>2398-6352</issn>
      <pub-id pub-id-type="doi">10.1038/s41746-019-0126-9</pub-id>
      <fpage>50</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Paske2019">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>Gross</surname><given-names>Sam</given-names></name>
        <name><surname>Massa</surname><given-names>Francisco</given-names></name>
        <name><surname>Lerer</surname><given-names>Adam</given-names></name>
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Chanan</surname><given-names>Gregory</given-names></name>
        <name><surname>Killeen</surname><given-names>Trevor</given-names></name>
        <name><surname>Lin</surname><given-names>Zeming</given-names></name>
        <name><surname>Gimelshein</surname><given-names>Natalia</given-names></name>
        <name><surname>Antiga</surname><given-names>Luca</given-names></name>
        <name><surname>Desmaison</surname><given-names>Alban</given-names></name>
        <name><surname>Kopf</surname><given-names>Andreas</given-names></name>
        <name><surname>Yang</surname><given-names>Edward</given-names></name>
        <name><surname>DeVito</surname><given-names>Zachary</given-names></name>
        <name><surname>Raison</surname><given-names>Martin</given-names></name>
        <name><surname>Tejani</surname><given-names>Alykhan</given-names></name>
        <name><surname>Chilamkurthy</surname><given-names>Sasank</given-names></name>
        <name><surname>Steiner</surname><given-names>Benoit</given-names></name>
        <name><surname>Fang</surname><given-names>Lu</given-names></name>
        <name><surname>Bai</surname><given-names>Junjie</given-names></name>
        <name><surname>Chintala</surname><given-names>Soumith</given-names></name>
      </person-group>
      <article-title>PyTorch: An imperative style, high-performance deep learning library</article-title>
      <source>Advances in neural information processing systems</source>
      <person-group person-group-type="editor">
        <name><surname>Wallach</surname><given-names>H.</given-names></name>
        <name><surname>Larochelle</surname><given-names>H.</given-names></name>
        <name><surname>Beygelzimer</surname><given-names>A.</given-names></name>
        <name><surname>dAlché-Buc</surname><given-names>F.</given-names></name>
        <name><surname>Fox</surname><given-names>E.</given-names></name>
        <name><surname>Garnett</surname><given-names>R.</given-names></name>
      </person-group>
      <publisher-name>Curran Associates, Inc.</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>32</volume>
    </element-citation>
  </ref>
  <ref id="ref-Pedregosa2018">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Gramfort</surname><given-names>Alexandre</given-names></name>
        <name><surname>Michel</surname><given-names>Vincent</given-names></name>
        <name><surname>Thirion</surname><given-names>Bertrand</given-names></name>
        <name><surname>Grisel</surname><given-names>Olivier</given-names></name>
        <name><surname>Blondel</surname><given-names>Mathieu</given-names></name>
        <name><surname>Müller</surname><given-names>Andreas</given-names></name>
        <name><surname>Nothman</surname><given-names>Joel</given-names></name>
        <name><surname>Louppe</surname><given-names>Gilles</given-names></name>
        <name><surname>Prettenhofer</surname><given-names>Peter</given-names></name>
        <name><surname>Weiss</surname><given-names>Ron</given-names></name>
        <name><surname>Dubourg</surname><given-names>Vincent</given-names></name>
        <name><surname>Vanderplas</surname><given-names>Jake</given-names></name>
        <name><surname>Passos</surname><given-names>Alexandre</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Brucher</surname><given-names>Matthieu</given-names></name>
        <name><surname>Perrot</surname><given-names>Matthieu</given-names></name>
        <name><surname>Duchesnay</surname><given-names>Édouard</given-names></name>
      </person-group>
      <article-title>Scikit-learn: Machine Learning in Python</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2018-06">2018</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-08-11">2022</year><month>08</month><day>11</day></date-in-citation>
      <uri>http://arxiv.org/abs/1201.0490</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.1201.0490</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Roth2021a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Roth</surname><given-names>Nils</given-names></name>
        <name><surname>Küderle</surname><given-names>Arne</given-names></name>
        <name><surname>Ullrich</surname><given-names>Martin</given-names></name>
        <name><surname>Gladow</surname><given-names>Till</given-names></name>
        <name><surname>Marxreiter</surname><given-names>Franz</given-names></name>
        <name><surname>Klucken</surname><given-names>Jochen</given-names></name>
        <name><surname>Eskofier</surname><given-names>Bjoern M.</given-names></name>
        <name><surname>Kluge</surname><given-names>Felix</given-names></name>
      </person-group>
      <article-title>Hidden Markov Model based stride segmentation on unsupervised free-living gait data in Parkinson’s disease patients</article-title>
      <source>Journal of NeuroEngineering and Rehabilitation</source>
      <year iso-8601-date="2021-12">2021</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-12-25">2021</year><month>12</month><day>25</day></date-in-citation>
      <volume>18</volume>
      <issue>1</issue>
      <issn>1743-0003</issn>
      <uri>https://jneuroengrehab.biomedcentral.com/articles/10.1186/s12984-021-00883-7</uri>
      <pub-id pub-id-type="doi">10.1186/s12984-021-00883-7</pub-id>
      <fpage>93</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Schreiber2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schreiber</surname><given-names>Jacob</given-names></name>
      </person-group>
      <article-title>Pomegranate: Fast and flexible probabilistic modeling in python</article-title>
      <source>Journal of Machine Learning Research</source>
      <publisher-name>JMLR.org</publisher-name>
      <year iso-8601-date="2017-01">2017</year><month>01</month>
      <volume>18</volume>
      <issue>1</issue>
      <issn>1532-4435</issn>
      <fpage>5992</fpage>
      <lpage>5997</lpage>
    </element-citation>
  </ref>
  <ref id="ref-tensorflow2015-whitepaper">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Abadi</surname><given-names>Martín</given-names></name>
        <name><surname>Agarwal</surname><given-names>Ashish</given-names></name>
        <name><surname>Barham</surname><given-names>Paul</given-names></name>
        <name><surname>Brevdo</surname><given-names>Eugene</given-names></name>
        <name><surname>Chen</surname><given-names>Zhifeng</given-names></name>
        <name><surname>Citro</surname><given-names>Craig</given-names></name>
        <name><surname>Corrado</surname><given-names>Greg S.</given-names></name>
        <name><surname>Davis</surname><given-names>Andy</given-names></name>
        <name><surname>Dean</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Devin</surname><given-names>Matthieu</given-names></name>
        <name><surname>Ghemawat</surname><given-names>Sanjay</given-names></name>
        <name><surname>Goodfellow</surname><given-names>Ian</given-names></name>
        <name><surname>Harp</surname><given-names>Andrew</given-names></name>
        <name><surname>Irving</surname><given-names>Geoffrey</given-names></name>
        <name><surname>Isard</surname><given-names>Michael</given-names></name>
        <name><surname>Jia</surname><given-names>Yangqing</given-names></name>
        <name><surname>Jozefowicz</surname><given-names>Rafal</given-names></name>
        <name><surname>Kaiser</surname><given-names>Lukasz</given-names></name>
        <name><surname>Kudlur</surname><given-names>Manjunath</given-names></name>
        <name><surname>Levenberg</surname><given-names>Josh</given-names></name>
        <name><surname>Mané</surname><given-names>Dandelion</given-names></name>
        <name><surname>Monga</surname><given-names>Rajat</given-names></name>
        <name><surname>Moore</surname><given-names>Sherry</given-names></name>
        <name><surname>Murray</surname><given-names>Derek</given-names></name>
        <name><surname>Olah</surname><given-names>Chris</given-names></name>
        <name><surname>Schuster</surname><given-names>Mike</given-names></name>
        <name><surname>Shlens</surname><given-names>Jonathon</given-names></name>
        <name><surname>Steiner</surname><given-names>Benoit</given-names></name>
        <name><surname>Sutskever</surname><given-names>Ilya</given-names></name>
        <name><surname>Talwar</surname><given-names>Kunal</given-names></name>
        <name><surname>Tucker</surname><given-names>Paul</given-names></name>
        <name><surname>Vanhoucke</surname><given-names>Vincent</given-names></name>
        <name><surname>Vasudevan</surname><given-names>Vijay</given-names></name>
        <name><surname>Viégas</surname><given-names>Fernanda</given-names></name>
        <name><surname>Vinyals</surname><given-names>Oriol</given-names></name>
        <name><surname>Warden</surname><given-names>Pete</given-names></name>
        <name><surname>Wattenberg</surname><given-names>Martin</given-names></name>
        <name><surname>Wicke</surname><given-names>Martin</given-names></name>
        <name><surname>Yu</surname><given-names>Yuan</given-names></name>
        <name><surname>Zheng</surname><given-names>Xiaoqiang</given-names></name>
      </person-group>
      <article-title>TensorFlow: Large-scale machine learning on heterogeneous systems</article-title>
      <year iso-8601-date="2015">2015</year>
      <uri>https://www.tensorflow.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-Zhai2020a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhai</surname><given-names>Bing</given-names></name>
        <name><surname>Perez-Pozuelo</surname><given-names>Ignacio</given-names></name>
        <name><surname>Clifton</surname><given-names>Emma A. D.</given-names></name>
        <name><surname>Palotti</surname><given-names>Joao</given-names></name>
        <name><surname>Guan</surname><given-names>Yu</given-names></name>
      </person-group>
      <article-title>Making Sense of Sleep: Multimodal Sleep Stage Classification in a Large, Diverse Population Using Movement and Cardiac Sensing</article-title>
      <source>Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies</source>
      <year iso-8601-date="2020-06">2020</year><month>06</month>
      <volume>4</volume>
      <issue>2</issue>
      <issn>2474-9567</issn>
      <pub-id pub-id-type="doi">10.1145/3397325</pub-id>
      <fpage>1</fpage>
      <lpage>33</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
