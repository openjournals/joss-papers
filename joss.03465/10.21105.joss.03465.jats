<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3465</article-id>
<article-id pub-id-type="doi">10.21105/joss.03465</article-id>
<title-group>
<article-title><monospace>nnde</monospace>: A Python package for solving
differential equations using neural networks</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5226-2107</contrib-id>
<name>
<surname>Winter</surname>
<given-names>Eric</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9521-5228</contrib-id>
<name>
<surname>Weigel</surname>
<given-names>R. S.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Physics and Astronomy, George Mason
University, Fairfax, Virginia, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-02-14">
<day>14</day>
<month>2</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>70</issue>
<fpage>3465</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>neural networks</kwd>
<kwd>differential equations</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Neural networks have been shown to have the ability to solve
  differential equations
  (<xref alt="Chakraverty &amp; Mall, 2017" rid="ref-ChakravertyU003A2017" ref-type="bibr">Chakraverty
  &amp; Mall, 2017</xref>;
  <xref alt="Yadav et al., 2015" rid="ref-YadavU003A2015" ref-type="bibr">Yadav
  et al., 2015</xref>). <monospace>nnde</monospace> is a pure-Python
  package for the solution of ordinary and partial differential
  equations of up to second order. We present the results of sample runs
  showing the effectiveness of the software in solving the
  two-dimensional diffusion problem.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The <monospace>nnde</monospace> package provides a pure-Python
  implementation of one of the earliest approaches to using neural
  networks to solve differential equations - the trial function method
  (<xref alt="Lagaris et al., 1998" rid="ref-LagarisU003A1998" ref-type="bibr">Lagaris
  et al., 1998</xref>). The <monospace>nnde</monospace> package was
  initially developed as a vehicle for understanding the internal
  workings of feedforward neural networks, without the constraints
  imposed by an existing neural network framework. It has since been
  enhanced to provide the capability to solve differential equations of
  scientific interest, such as the diffusion equation described here.
  The ultimate goal of the package is to provide the capability to solve
  systems of coupled partial differential equations, such as the
  equations of magnetohydrodynamics.</p>
  <p>Development of the <monospace>nnde</monospace> package began before
  the widespread adoption of modern neural network software frameworks.
  In the Python ecosystem, the most popular packages are TensorFlow
  (<monospace>https://tensorflow.org</monospace>) and PyTorch
  (<monospace>https://pytorch.org</monospace>). These frameworks are
  designed to be application-neutral - they can be used to develop
  neural networks with arbitrary architectures for arbitrary learning
  objectives. The primary advantages of these frameworks are
  autodifferentiation and distributed computing. By recording the
  sequence of mathematical operations performed in the forward pass
  through the network, autodifferentiation can automatically compute the
  gradients of the loss function with respect to each of the network
  parameters, as well as the network inputs. The latter capability is
  central to solving differential equations. Autodifferentiation also
  greatly reduces the volume of code that must be developed to solve a
  given problem. The distributed computing capability allows a network
  to take advantage of GPU-enabled hardware, and multiple compute nodes,
  to speed the calculation, with little or no code changes required. The
  <monospace>nnde</monospace> package uses a more direct method -
  precomputed derivative functions for the components of the
  differential equations of interest and the trial solution. This code
  is typically faster than TensorFlow or PyTorch, but requires more
  hand-crafted code to solve a given problem.</p>
  <p>The most commonly used methods for solving differential equations
  are the Finite Element Method (FEM) and Finite Difference Method
  (FDM). However, these methods can be difficult to parallelize due to
  the need for communication between computational elements at the
  boundaries of the allocated subgrids. These models can also have large
  storage requirements for model outputs. The neural network method is
  straightforward to parallelize due to the independent characteristics
  of the computational nodes in each network layer. Additionally, the
  trained network solution is more compact than an FDM or FEM solution
  because storage of only the network weights and biases is required.
  The neural network solution is mesh-free and does not require
  interpolation to retrieve the solution at a non-grid point, as is the
  case with FDM or FEM. Once the network is trained, computing a
  solution at any spatial or temporal scale requires only a series of
  matrix multiplications, one per network layer. The trained solution is
  a sum of arbitrary differentiable basis functions, and therefore the
  trained solution is also differentiable, which is particularly useful
  when computing derived quantities such as gradients and fluxes. This
  approach has led to several different classes of methods for solving
  ODEs and PDEs with neural networks. The recent surge in interest in
  “physics-informed neural networks”
  (<xref alt="Raissi et al., 2019" rid="ref-RaissiU003A2019" ref-type="bibr">Raissi
  et al., 2019</xref>) is an indication of the dynamic nature of the
  field.</p>
</sec>
<sec id="description">
  <title>Description</title>
  <p><monospace>nnde</monospace> implements a version of the trial
  function algorithm described by Lagaris et al.
  (<xref alt="1998" rid="ref-LagarisU003A1998" ref-type="bibr">1998</xref>).
  This software also incorporates a modification of the trial function
  algorithm to automatically incorporate arbitrary Dirichlet boundary
  conditions of the problem directly into the neural network
  solution.</p>
  <p>As a concrete example of the sort of problem that can be solved
  using <monospace>nnde</monospace>, consider the diffusion equation in
  two dimensions:</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[\frac {\partial \psi} {\partial t} - D \left( \frac {\partial^2 \psi} {\partial x^2} + \frac {\partial^2 \psi} {\partial y^2} \right) = 0]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>∂</mml:mi><mml:mi>ψ</mml:mi></mml:mrow><mml:mrow><mml:mi>∂</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>−</mml:mo><mml:mi>D</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mi>∂</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mi>ψ</mml:mi></mml:mrow><mml:mrow><mml:mi>∂</mml:mi><mml:msup><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mi>∂</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mi>ψ</mml:mi></mml:mrow><mml:mrow><mml:mi>∂</mml:mi><mml:msup><mml:mi>y</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:mfrac><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>With all boundaries fixed at <inline-formula><alternatives>
  <tex-math><![CDATA[0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>0</mml:mn></mml:math></alternatives></inline-formula>
  and with an initial condition of</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[\psi(x,y,0) = \sin(\pi x) \sin(\pi y)]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>sin</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>π</mml:mi><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>sin</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>π</mml:mi><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>the analytical solution is</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[\psi_a(x,y,t) = e^{-2\pi^2 D t} \sin(\pi x) \sin(\pi y)]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>ψ</mml:mi><mml:mi>a</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msup><mml:mi>e</mml:mi><mml:mrow><mml:mo>−</mml:mo><mml:mn>2</mml:mn><mml:msup><mml:mi>π</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mi>D</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msup><mml:mo>sin</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>π</mml:mi><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>sin</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>π</mml:mi><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>The <monospace>nnde</monospace> package was used to create a neural
  network with a single hidden layer and 10 hidden nodes and trained to
  solve this problem. The error in the trained solution for the case of
  <inline-formula><alternatives>
  <tex-math><![CDATA[D=0.1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>D</mml:mi><mml:mo>=</mml:mo><mml:mn>0.1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  is shown as a function of time in
  <xref alt="Figure 1" rid="figU003Adiff2d_error">Figure 1</xref>.</p>
  <fig>
    <caption><p>Difference between the trained neural network solution
    <inline-formula><alternatives>
    <tex-math><![CDATA[\psi_t(x,y,t)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>ψ</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    and the analytical solution <inline-formula><alternatives>
    <tex-math><![CDATA[\psi_a(x,y,t)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>ψ</mml:mi><mml:mi>a</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    of the diffusion problem in 2 spatial dimensions using
    <monospace>nnde</monospace> with 10
    nodes.<styled-content id="figU003Adiff2d_error"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figures/Y_e.png" xlink:title="" />
  </fig>
</sec>
<sec id="software-repository">
  <title>Software repository</title>
  <p>The <monospace>nnde</monospace> software is available at
  https://github.com/elwinter/nnde.</p>
  <p>A collection of example python scripts using
  <monospace>nnde</monospace> is available at
  https://github.com/elwinter/nnde_demos.</p>
  <p>A collection of example Jupyter notebooks using
  <monospace>nnde</monospace> is available at
  https://github.com/elwinter/nnde_notebooks.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-ChakravertyU003A2017">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Chakraverty</surname><given-names>S.</given-names></name>
        <name><surname>Mall</surname><given-names>Susmita</given-names></name>
      </person-group>
      <source>Artificial neural networks for engineers and scientists: Solving ordinary differential equations</source>
      <publisher-name>CRC Press</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <isbn>1498781381</isbn>
    </element-citation>
  </ref>
  <ref id="ref-LagarisU003A1998">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lagaris</surname><given-names>I. E.</given-names></name>
        <name><surname>Likas</surname><given-names>A.</given-names></name>
        <name><surname>Fotiadis</surname><given-names>D. I.</given-names></name>
      </person-group>
      <article-title>Artificial neural networks for solving ordinary and partial differential equations</article-title>
      <source>IEEE Transactions on Neural Networks</source>
      <publisher-name>Institute of Electrical; Electronics Engineers (IEEE)</publisher-name>
      <year iso-8601-date="1998">1998</year>
      <volume>9</volume>
      <issue>5</issue>
      <pub-id pub-id-type="doi">10.1109/72.712178</pub-id>
      <fpage>987</fpage>
      <lpage>1000</lpage>
    </element-citation>
  </ref>
  <ref id="ref-RaissiU003A2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Raissi</surname><given-names>M.</given-names></name>
        <name><surname>Perdikaris</surname><given-names>P.</given-names></name>
        <name><surname>Karniadakis</surname><given-names>G. E.</given-names></name>
      </person-group>
      <article-title>Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations</article-title>
      <source>Journal of Computational Physics</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>378</volume>
      <issue></issue>
      <pub-id pub-id-type="doi">10.1016/j.jcp.2018.10.045</pub-id>
      <fpage>686</fpage>
      <lpage>707</lpage>
    </element-citation>
  </ref>
  <ref id="ref-YadavU003A2015">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Yadav</surname><given-names>Neha</given-names></name>
        <name><surname>Yadav</surname><given-names>Anupam</given-names></name>
        <name><surname>Kumar</surname><given-names>Manoj</given-names></name>
      </person-group>
      <source>An introduction to neural network methods for differential equations</source>
      <publisher-name>Springer Netherlands</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <pub-id pub-id-type="doi">10.1007/978-94-017-9816-7</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
