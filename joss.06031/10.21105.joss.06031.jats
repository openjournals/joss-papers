<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6031</article-id>
<article-id pub-id-type="doi">10.21105/joss.06031</article-id>
<title-group>
<article-title>libEnsemble: A complete Python toolkit for dynamic
ensembles of calculations</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7500-6138</contrib-id>
<name>
<surname>Hudson</surname>
<given-names>Stephen</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9924-2082</contrib-id>
<name>
<surname>Larson</surname>
<given-names>Jeffrey</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9916-9038</contrib-id>
<name>
<surname>Navarro</surname>
<given-names>John-Luke</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6099-2772</contrib-id>
<name>
<surname>Wild</surname>
<given-names>Stefan M.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Mathematics and Computer Science Division, Argonne National
Laboratory, Lemont, IL, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>AMCR Division, Lawrence Berkeley National Laboratory,
Berkeley, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Industrial Engineering and Management Sciences,
Northwestern University, Evanston, IL, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-10-31">
<day>31</day>
<month>10</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>92</issue>
<fpage>6031</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>ensemble workflows</kwd>
<kwd>optimization and learning</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Almost all science and engineering applications eventually stop
  scaling: their runtime no longer decreases as available computational
  resources increase. Therefore, many applications will struggle to
  efficiently use emerging extreme-scale high-performance, parallel, and
  distributed systems. libEnsemble is a complete Python toolkit and
  workflow system for intelligently driving <italic>ensembles</italic>
  of experiments or simulations at massive scales. It enables and
  encourages multidisciplinary design, decision, and inference studies
  portably running on laptops, clusters, and supercomputers.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>While a growing number of packages are aimed at workflows,
  relatively few focus on running dynamic ensembles of calculations on
  clusters and supercomputers. Dynamic ensembles are workflows of
  computations that are defined and steered based on intermediate
  results. Examples include determining simulation parameters using
  numerical optimization methods, machine learning techniques, or
  statistical calibration tools. In each of these examples, the ensemble
  members are typically simulations that use different parameters or
  data. Additional examples of applications that have used libEnsemble
  are surveyed in the
  <xref alt="Representative libEnsemble Use Cases" rid="my-anchor">Representative
  libEnsemble Use Cases</xref> section below.</p>
  <p>The target audience for libEnsemble includes scientists, engineers,
  and other researchers who stand to benefit from such dynamic
  workflows.</p>
  <p>Key considerations for packages running dynamic ensembles include
  the following:</p>
  <list list-type="bullet">
    <list-item>
      <p>Ease of use – whether the software requires a complex setup</p>
    </list-item>
    <list-item>
      <p>Portability – running on diverse machines with different
      schedulers, hardware, and communication modes (e.g., MPI runners)
      with minimal modification to user scripts</p>
    </list-item>
    <list-item>
      <p>Scalability – working efficiently with large-scale and/or many
      concurrent simulations</p>
    </list-item>
    <list-item>
      <p>Interoperability – the modularity of the package and the
      ability to interoperate with other packages</p>
    </list-item>
    <list-item>
      <p>Adaptive resource management – the ability to adjust resources
      given to each simulation throughout the ensemble</p>
    </list-item>
    <list-item>
      <p>Efficient resource utilization – including the ability to
      cancel simulations on the fly</p>
    </list-item>
  </list>
  <p>libEnsemble seeks to satisfy the above criteria using a
  generator–simulator–allocator model. libEnsemble’s generators,
  simulators, and allocators – commonly referred to as user functions –
  are simply Python functions that accept and return NumPy
  (<xref alt="Harris et al., 2020" rid="ref-harris2020array" ref-type="bibr">Harris
  et al., 2020</xref>) structured arrays. Generators produce input for
  simulators, simulators evaluate those inputs, and allocators decide
  whether and when a simulator or generator should be called; any level
  of complexity is supported. Multiple concurrent instances (an
  “ensemble”) of user functions are coordinated by libEnsemble’s worker
  processes. Workers are typically assigned/reassigned compute
  resources; within user functions, workers can launch applications,
  evaluate intermediate results, and communicate via the manager.</p>
  <sec id="related-work">
    <title>Related Work</title>
    <p>Other packages for managing workflows and ensembles include
    Colmena
    (<xref alt="Ward et al., 2021" rid="ref-colmena21" ref-type="bibr">Ward
    et al., 2021</xref>) and the RADICAL-Ensemble Toolkit
    (<xref alt="Balasubramanian et al., 2016" rid="ref-ensembletoolkit16" ref-type="bibr">Balasubramanian
    et al., 2016</xref>) as well as packages such as Parsl
    (<xref alt="Babuji et al., 2019" rid="ref-parsl" ref-type="bibr">Babuji
    et al., 2019</xref>) and Balsam
    (<xref alt="Salim et al., 2019" rid="ref-Salim2019" ref-type="bibr">Salim
    et al., 2019</xref>) that provide backend dispatch and
    execution.</p>
    <p>libEnsemble’s unique generator–simulator–allocator paradigm
    eliminates the need for users to explicitly define task
    dependencies. Instead, it emphasizes data dependencies between these
    customizable Python user functions. This modular design also lends
    itself to exploiting the large library of example user functions
    provided with libEnsemble or available from the community (e.g.,
    libEnsemble Community
    (<xref alt="2023" rid="ref-libEnsembleCommunityExamples" ref-type="bibr">2023</xref>)),
    maximizing code reuse. For instance, users can readily choose an
    existing generator function and tailor a simulator function to their
    particular needs.</p>
    <p>libEnsemble takes the philosophy of minimizing required
    dependencies while supporting various backend mechanisms when
    needed. In contrast to other packages that cover only a subset of
    such a workflow, libEnsemble is a complete toolkit that includes
    generator-in-the-loop and backend mechanisms. For example, Colmena
    uses frontend components to create and coordinate tasks while using
    Parsl to dispatch simulations.</p>
    <p>For example, the vast majority of current use cases do not
    require a database or special runtime environment. For use cases
    that have such requirements, Balsam can be used on the backend by
    substituting the regular MPI executor for the Balsam executor. This
    approach simplifies the user experience and reduces the initial
    setup and adoption costs when using libEnsemble.</p>
  </sec>
  <sec id="libensemble-functionality">
    <title>libEnsemble Functionality</title>
    <p>libEnsemble communicates between a manager and multiple workers
    using either Python’s built-in multiprocessing, MPI (via mpi4py
    (<xref alt="Dalcín et al., 2008" rid="ref-Dalcin2008" ref-type="bibr">Dalcín
    et al., 2008</xref>)), or TCP.</p>
    <p>To achieve portability, libEnsemble detects runtime setup
    information not commonly detected by other packages: It detects
    crucial system information such as scheduler details, MPI runners,
    core counts, and GPU counts (for different types of GPUs) and uses
    these to produce run-lines and GPU settings for these systems,
    without the user having to alter scripts. For example, on a system
    that uses Slurm’s <monospace>srun</monospace>, libEnsemble will use
    <monospace>srun</monospace> options to assign GPUs, while on other
    systems it will assign GPUs via the appropriate environment
    variables such as <monospace>ROCR_VISIBLE_DEVICES</monospace> or
    <monospace>CUDA_VISIBLE_DEVICES</monospace>, allowing the user to
    simply state the number of GPUs needed for each simulation. For
    cases where autodetection is insufficient, the user can supply
    platform information or the name of a known system via scripts or an
    environment variable. This makes it simple to transfer user scripts
    between platforms.</p>
    <p>By default, libEnsemble equally divides available compute
    resources among workers. When simulation parameters are created,
    however, the number of processes and GPUs can also be specified for
    each simulation. The close coupling between the libEnsemble
    generators and simulators enables a generator to perform tasks such
    as asynchronously receiving results, updating models, and canceling
    previously initiated simulations. Simulations that are already
    running can be terminated and resources recovered. This approach is
    more flexible compared with other packages, where the generation of
    simulations is external to the dispatch of a batch of
    simulations.</p>
    <p>libEnsemble also supports “persistent user functions” that
    maintain their state while running on workers. This prevents the
    need to store and reload data as is done by other ensemble packages
    that support only a fire-and-forget approach to ensemble
    components.</p>
  </sec>
</sec>
<sec id="my-anchor">
  <title>Representative libEnsemble Use Cases</title>
  <p>Examples of libEnsemble applications in science and engineering
  include the following:</p>
  <list list-type="bullet">
    <list-item>
      <p>Optimization of variational algorithms on quantum computers
      (<xref alt="Liu et al., 2022" rid="ref-Liu2022layer" ref-type="bibr">Liu
      et al., 2022</xref>)</p>
    </list-item>
    <list-item>
      <p>Parallelization of the ParMOO solver for multiobjective
      simulation optimization problems
      (<xref alt="Chang &amp; Wild, 2023" rid="ref-ParMOODesign23" ref-type="bibr">Chang
      &amp; Wild, 2023</xref>)</p>
    </list-item>
    <list-item>
      <p>Design of particle accelerators
      (<xref alt="A. Ferran Pousa et al., 2022" rid="ref-Pousa22" ref-type="bibr">A.
      Ferran Pousa et al., 2022</xref>;
      <xref alt="A. Ferran Pousa et al., 2023" rid="ref-PhysRevAccelBeams.26.084601" ref-type="bibr">A.
      Ferran Pousa et al., 2023</xref>;
      <xref alt="Neveu et al., 2023" rid="ref-Neveu2023" ref-type="bibr">Neveu
      et al., 2023</xref>)</p>
    </list-item>
    <list-item>
      <p>Sequential Bayesian experimental design
      (<xref alt="Sürer et al., 2023" rid="ref-Surer2023" ref-type="bibr">Sürer
      et al., 2023</xref>) and Bayesian calibration
      (<xref alt="Chan et al., 2023" rid="ref-MCMPSW2022" ref-type="bibr">Chan
      et al., 2023</xref>)</p>
    </list-item>
  </list>
  <p>A selection of community-provided libEnsemble functions and
  workflows that users can build off is maintained in libEnsemble
  Community
  (<xref alt="2023" rid="ref-libEnsembleCommunityExamples" ref-type="bibr">2023</xref>).</p>
  <p>Additional details on the parallel features and scalability of
  libEnsemble can be found in Hudson et al.
  (<xref alt="2022" rid="ref-Hudson2022" ref-type="bibr">2022</xref>)
  and Hudson et al.
  (<xref alt="2023" rid="ref-libensemble-man" ref-type="bibr">2023</xref>).</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>We acknowledge contributions from David Bindel. This article was
  supported in part by the PETSc/TAO activity within the U.S. Department
  of Energy’s (DOE’s) Exascale Computing Project (17-SC-20-SC) and by
  the CAMPA, ComPASS, and NUCLEI SciDAC projects within DOE’s Office of
  Science, Advanced Scientific Computing Research under contract numbers
  DE-AC02-06CH11357 and DE-AC02-05CH11231.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Hudson2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hudson</surname><given-names>Stephen</given-names></name>
        <name><surname>Larson</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Navarro</surname><given-names>John-Luke</given-names></name>
        <name><surname>Wild</surname><given-names>Stefan M.</given-names></name>
      </person-group>
      <article-title>libEnsemble: A library to coordinate the concurrent evaluation of dynamic ensembles of calculations</article-title>
      <source>IEEE Transactions on Parallel and Distributed Systems</source>
      <year iso-8601-date="2022">2022</year>
      <volume>33</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/TPDS.2021.3082815</pub-id>
      <fpage>977</fpage>
      <lpage>988</lpage>
    </element-citation>
  </ref>
  <ref id="ref-libensemble-man">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Hudson</surname><given-names>Stephen</given-names></name>
        <name><surname>Larson</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Wild</surname><given-names>Stefan M.</given-names></name>
        <name><surname>Bindel</surname><given-names>David</given-names></name>
        <name><surname>Navarro</surname><given-names>John-Luke</given-names></name>
      </person-group>
      <article-title>libEnsemble user manual, version 1.0.0</article-title>
      <publisher-name>Argonne National Laboratory</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://libensemble.readthedocs.io</uri>
    </element-citation>
  </ref>
  <ref id="ref-Liu2022layer">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Liu</surname><given-names>Xiaoyuan</given-names></name>
        <name><surname>Angone</surname><given-names>Anthony</given-names></name>
        <name><surname>Shaydulin</surname><given-names>Ruslan</given-names></name>
        <name><surname>Safro</surname><given-names>Ilya</given-names></name>
        <name><surname>Alexeev</surname><given-names>Yuri</given-names></name>
        <name><surname>Cincio</surname><given-names>Lukasz</given-names></name>
      </person-group>
      <article-title>Layer VQE: A variational approach for combinatorial optimization on noisy quantum computers</article-title>
      <source>IEEE Transactions on Quantum Engineering</source>
      <year iso-8601-date="2022">2022</year>
      <volume>3</volume>
      <pub-id pub-id-type="doi">10.1109/TQE.2021.3140190</pub-id>
      <fpage>1</fpage>
      <lpage>20</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Neveu2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Neveu</surname><given-names>Nicole</given-names></name>
        <name><surname>Chang</surname><given-names>Tyler H.</given-names></name>
        <name><surname>Franz</surname><given-names>Paris</given-names></name>
        <name><surname>Hudson</surname><given-names>Stephen</given-names></name>
        <name><surname>Larson</surname><given-names>Jeffrey</given-names></name>
      </person-group>
      <article-title>Comparison of multiobjective optimization methods for the LCLS-II photoinjector</article-title>
      <source>Computer Physics Communications</source>
      <year iso-8601-date="2023">2023</year>
      <volume>283</volume>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2022.108566</pub-id>
      <fpage>108566</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-MCMPSW2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chan</surname><given-names>Moses Y-H.</given-names></name>
        <name><surname>Plumlee</surname><given-names>Matthew</given-names></name>
        <name><surname>Wild</surname><given-names>Stefan M.</given-names></name>
      </person-group>
      <article-title>Constructing a simulation surrogate with partially observed output</article-title>
      <source>Technometrics</source>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.1080/00401706.2023.2210170</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Surer2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sürer</surname><given-names>Özge</given-names></name>
        <name><surname>Plumlee</surname><given-names>Matthew</given-names></name>
        <name><surname>Wild</surname><given-names>Stefan M.</given-names></name>
      </person-group>
      <article-title>Sequential Bayesian experimental design for calibration of expensive simulation models</article-title>
      <source>Technometrics</source>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.1080/00401706.2023.2246157</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ParMOODesign23">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Chang</surname><given-names>Tyler H.</given-names></name>
        <name><surname>Wild</surname><given-names>Stefan M.</given-names></name>
      </person-group>
      <article-title>Designing a framework for solving multiobjective simulation optimization problems</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2304.06881</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-PhysRevAccelBeams.26.084601">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ferran Pousa</surname><given-names>A.</given-names></name>
        <name><surname>Jalas</surname><given-names>S.</given-names></name>
        <name><surname>Kirchen</surname><given-names>M.</given-names></name>
        <name><surname>Martinez de la Ossa</surname><given-names>A.</given-names></name>
        <name><surname>Thévenet</surname><given-names>M.</given-names></name>
        <name><surname>Hudson</surname><given-names>S.</given-names></name>
        <name><surname>Larson</surname><given-names>J.</given-names></name>
        <name><surname>Huebl</surname><given-names>A.</given-names></name>
        <name><surname>Vay</surname><given-names>J.-L.</given-names></name>
        <name><surname>Lehe</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>Bayesian optimization of laser-plasma accelerators assisted by reduced physical models</article-title>
      <source>Physical Review Accelerators and Beams</source>
      <publisher-name>American Physical Society</publisher-name>
      <year iso-8601-date="2023-08">2023</year><month>08</month>
      <volume>26</volume>
      <uri>https://link.aps.org/doi/10.1103/PhysRevAccelBeams.26.084601</uri>
      <pub-id pub-id-type="doi">10.1103/PhysRevAccelBeams.26.084601</pub-id>
      <fpage>084601</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Pousa22">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ferran Pousa</surname><given-names>A</given-names></name>
        <name><surname>Jalas</surname><given-names>S.</given-names></name>
        <name><surname>Kirchen</surname><given-names>M.</given-names></name>
        <name><surname>Martinez de la Ossa</surname><given-names>A.</given-names></name>
        <name><surname>Thévenet</surname><given-names>M.</given-names></name>
        <name><surname>Hudson</surname><given-names>S.</given-names></name>
        <name><surname>Larson</surname><given-names>J.</given-names></name>
        <name><surname>Huebl</surname><given-names>A.</given-names></name>
        <name><surname>Vay</surname><given-names>J.-L.</given-names></name>
        <name><surname>Lehe</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>Multitask optimization of laser-plasma accelerators using simulation codes with different fidelities</article-title>
      <source>Proceedings of the 13th International Particle Accelerator Conference</source>
      <publisher-name>JACoW Publishing, Geneva, Switzerland</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <issue>13</issue>
      <uri>https://accelconf.web.cern.ch/ipac2022/papers/wepost030.pdf</uri>
      <pub-id pub-id-type="doi">10.18429/JACoW-IPAC2022-WEPOST030</pub-id>
      <fpage>1761</fpage>
      <lpage>1764</lpage>
    </element-citation>
  </ref>
  <ref id="ref-colmena21">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ward</surname><given-names>Logan</given-names></name>
        <name><surname>Sivaraman</surname><given-names>Ganesh</given-names></name>
        <name><surname>Pauloski</surname><given-names>J. Gregory</given-names></name>
        <name><surname>Babuji</surname><given-names>Yadu</given-names></name>
        <name><surname>Chard</surname><given-names>Ryan</given-names></name>
        <name><surname>Dandu</surname><given-names>Naveen</given-names></name>
        <name><surname>Redfern</surname><given-names>Paul C.</given-names></name>
        <name><surname>Assary</surname><given-names>Rajeev S.</given-names></name>
        <name><surname>Chard</surname><given-names>Kyle</given-names></name>
        <name><surname>Curtiss</surname><given-names>Larry A.</given-names></name>
        <name><surname>Thakur</surname><given-names>Rajeev</given-names></name>
        <name><surname>Foster</surname><given-names>Ian</given-names></name>
      </person-group>
      <article-title>Colmena: Scalable machine-learning-based steering of ensemble simulations for high performance computing</article-title>
      <source>Workshop on machine learning in high performance computing environments</source>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.1109/MLHPC54614.2021.00007</pub-id>
      <fpage>9</fpage>
      <lpage>20</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ensembletoolkit16">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Balasubramanian</surname><given-names>Vivekanandan</given-names></name>
        <name><surname>Treikalis</surname><given-names>Antons</given-names></name>
        <name><surname>Weidner</surname><given-names>Ole</given-names></name>
        <name><surname>Jha</surname><given-names>Shantenu</given-names></name>
      </person-group>
      <article-title>Ensemble toolkit: Scalable and flexible execution of ensembles of tasks</article-title>
      <source>International conference on parallel processing</source>
      <year iso-8601-date="2016">2016</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ICPP.2016.59</pub-id>
      <fpage>458</fpage>
      <lpage>463</lpage>
    </element-citation>
  </ref>
  <ref id="ref-parsl">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Babuji</surname><given-names>Yadu</given-names></name>
        <name><surname>Woodard</surname><given-names>Anna</given-names></name>
        <name><surname>Li</surname><given-names>Zhuozhao</given-names></name>
        <name><surname>Katz</surname><given-names>Daniel S.</given-names></name>
        <name><surname>Clifford</surname><given-names>Ben</given-names></name>
        <name><surname>Kumar</surname><given-names>Rohan</given-names></name>
        <name><surname>Lacinski</surname><given-names>Lukasz</given-names></name>
        <name><surname>Chard</surname><given-names>Ryan</given-names></name>
        <name><surname>Wozniak</surname><given-names>Justin</given-names></name>
        <name><surname>Foster</surname><given-names>Ian</given-names></name>
        <name><surname>Wilde</surname><given-names>Mike</given-names></name>
        <name><surname>Chard</surname><given-names>Kyle</given-names></name>
      </person-group>
      <article-title>Parsl: Pervasive parallel programming in Python</article-title>
      <source>Proceedings of the 28th international symposium on high-performance parallel and distributed computing</source>
      <year iso-8601-date="2019">2019</year>
      <pub-id pub-id-type="doi">10.1145/3307681.3325400</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Salim2019">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Salim</surname><given-names>Michael</given-names></name>
        <name><surname>Uram</surname><given-names>Thomas</given-names></name>
        <name><surname>Childers</surname><given-names>J. Taylor</given-names></name>
        <name><surname>Vishwanath</surname><given-names>Venkatram</given-names></name>
        <name><surname>Papka</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>Balsam: Near real-time experimental data analysis on supercomputers</article-title>
      <source>1st annual workshop on large-scale experiment-in-the-loop computing</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <pub-id pub-id-type="doi">10.1109/xloop49562.2019.00010</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-libEnsembleCommunityExamples">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>libEnsemble Community</string-name>
      </person-group>
      <article-title>A selection of libEnsemble functions and complete workflows from the community</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/Libensemble/libe-community-examples</uri>
    </element-citation>
  </ref>
  <ref id="ref-Dalcin2008">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dalcín</surname><given-names>Lisandro</given-names></name>
        <name><surname>Paz</surname><given-names>Rodrigo</given-names></name>
        <name><surname>Storti</surname><given-names>Mario</given-names></name>
        <name><surname>D’Elía</surname><given-names>Jorge</given-names></name>
      </person-group>
      <article-title>MPI for Python: Performance improvements and MPI-2 extensions</article-title>
      <source>Journal of Parallel and Distributed Computing</source>
      <year iso-8601-date="2008">2008</year>
      <volume>68</volume>
      <issue>5</issue>
      <pub-id pub-id-type="doi">10.1016/j.jpdc.2007.09.005</pub-id>
      <fpage>655</fpage>
      <lpage>662</lpage>
    </element-citation>
  </ref>
  <ref id="ref-harris2020array">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
