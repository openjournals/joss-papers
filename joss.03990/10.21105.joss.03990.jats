<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3990</article-id>
<article-id pub-id-type="doi">10.21105/joss.03990</article-id>
<title-group>
<article-title>ViMMS 2.0: A framework to develop, test and optimise
fragmentation strategies in LC-MS metabolomics</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3068-4664</contrib-id>
<name>
<surname>Wandy</surname>
<given-names>Joe</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1896-8936</contrib-id>
<name>
<surname>Davies</surname>
<given-names>Vinny</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0032-9506</contrib-id>
<name>
<surname>McBride</surname>
<given-names>Ross</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Weidt</surname>
<given-names>Stefan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-3578-4477</contrib-id>
<name>
<surname>Rogers</surname>
<given-names>Simon</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1275-6820</contrib-id>
<name>
<surname>Daly</surname>
<given-names>Rónán</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Glasgow Polyomics, University of Glasgow, United
Kingdom</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>School of Mathematics and Statistics, University of
Glasgow, United Kingdom</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>School of Computing Science, University of Glasgow, United
Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-10-26">
<day>26</day>
<month>10</month>
<year>2021</year>
</pub-date>
<volume>7</volume>
<issue>71</issue>
<fpage>3990</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>mass spectrometry</kwd>
<kwd>fragmentation</kwd>
<kwd>simulation</kwd>
<kwd>metabolomics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The choice of fragmentation strategies used during
  mass-spectrometry-based data acquisition directly affects the quality
  and coverage of subsequent structural identification – a crucial step
  in untargeted metabolomics data analysis. However, developing novel
  fragmentation strategies is challenging due to the high experimental
  cost of running an actual mass spectrometry instrument and the lack of
  a programmable simulation environment to support their development.
  ViMMS 2.0 is a software framework that can be used to develop new
  fragmentation strategies in metabolomics completely
  <italic>in-silico</italic> as well as on mass spectrometry
  instruments. The framework allows users to generate chemical objects
  (produced synthetically or extracted from existing mzML files) and
  simulate a tandem mass spectrometry process, where different
  fragmentation strategies can be rapidly implemented, tested and
  evaluated. In this paper, we present ViMMS 2.0, highlighting the
  software design choices of the framework and illustrate with an
  example how a new fragmentation strategy could be implemented in ViMMS
  2.0.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Metabolomics is the study of small molecules that participate in
  important cellular processes of an organism. Being the closest to the
  phenotype, changes to metabolite levels are often expressed as a
  response to genetic or environmental changes
  (<xref alt="Guijas et al., 2018" rid="ref-guijas2018metabolomics" ref-type="bibr">Guijas
  et al., 2018</xref>). Liquid chromatography (LC) coupled to mass
  spectrometry (MS) is commonly used to identify small molecules in
  untargeted experiments, where the identities of molecules of interests
  are not known in advance
  (<xref alt="Smith et al., 2014" rid="ref-smith2014proteomics" ref-type="bibr">Smith
  et al., 2014</xref>). In this setup, molecules elute through the LC
  column at different retention times (RTs) before being presented to
  the MS instrument. In tandem mass spectrometry, selected ions produced
  from survey scans (MS1; typically measurements of the intact ions) are
  isolated for fragmentation in a second MS instrument (MS2), resulting
  in a spectral fingerprint for each isolated ion that is often used for
  structural identification.</p>
  <p>Typically the raw LC-MS/MS measurements are processed in a data
  pre-processing pipeline to produce a list of chromatographic MS1 peaks
  characterised by their mass-to-charge (m/z), RT and intensity values.
  During identification, molecular annotations are assigned to MS1 peaks
  through matching with internal standard compounds (having known m/z
  and RT values) or by searching spectral databases with the MS2 spectra
  associated with MS1 peaks. An important factor that determines how
  many molecules can be annotated with spectral databases using
  fragmentation data is the quality of the MS2 spectra acquired, and the
  coverage (for how many of the MS1 peaks were MS2 spectra collected).
  Good MS2 fragmentation strategies aim to produce spectra for as many
  unknown ions in the sample as possible, but also produce high quality
  spectra which can be reliably evaluated.</p>
  <p>A common challenge faced by computational researchers with an
  interest in improving fragmentation strategies in
  tandem-mass-spectrometry-based metabolomics is the lack of access to
  and the high cost of running MS instruments. This issue is
  particularly relevant as developing and optimising novel fragmentation
  strategies tends to be conducted iteratively, requiring many
  measurements to be run to optimise the strategy until the desired
  performance level is reached. To lower this barrier, we present
  <bold>Vi</bold>rtual <bold>M</bold>etabolomics <bold>M</bold>ass
  <bold>S</bold>pectrometer (ViMMS) 2.0, a programmable and modular
  framework that simulates the chemical generation process and the
  execution of fragmentation strategies in LC-MS/MS-based metabolomics.
  A notable feature of the ViMMS framework is the ability to design
  strategies that can respond, in real time, to the data being
  produced.</p>
</sec>
<sec id="related-works">
  <title>Related works</title>
  <p>Existing mass spectrometry simulators are ill-fitted to support the
  rapid development of fragmentation strategies that respond to incoming
  scans in real time. This is primarily due to the limited ways users
  can incorporate new strategies within existing simulator codebases.
  Currently available simulators such as as Mspire-Simulator
  (<xref alt="Noyce et al., 2013" rid="ref-noyce2013mspire" ref-type="bibr">Noyce
  et al., 2013</xref>), JAMSS
  (<xref alt="Smith &amp; Prince, 2015" rid="ref-smith2015jamss" ref-type="bibr">Smith
  &amp; Prince, 2015</xref>), OpenMS-Simulator
  (<xref alt="Wang et al., 2015" rid="ref-wang2015openms" ref-type="bibr">Wang
  et al., 2015</xref>), MSAcquisitionSimulator
  (<xref alt="Goldfarb et al., 2016" rid="ref-goldfarb2016msacquisitionsimulator" ref-type="bibr">Goldfarb
  et al., 2016</xref>) and SMITER
  (<xref alt="Kösters et al., 2021" rid="ref-kosters2021smiter" ref-type="bibr">Kösters
  et al., 2021</xref>) exist as stand-alone programs or GUI
  applications, and are not easily scriptable or programmable.</p>
  <p>Additionally the above-highlighted simulators have been developed
  to simulate the generation of proteomics data. In principle they could
  be extended to support metabolomics data, but this is not a trivial
  change. Our work in ViMMS 1.0
  (<xref alt="Wandy et al., 2019" rid="ref-Wandy2019-ok" ref-type="bibr">Wandy
  et al., 2019</xref>) was the first simulator that allowed for a
  metabolomics-based simulation environment. However ViMMS 1.0 suffered
  from several weaknesses: its codebase was monolithic, and the tight
  coupling between modules made it difficult to instantiate input from
  different sources or to introduce different extensions to the base
  functionalities, including adding new fragmentation strategies. The
  focus of ViMMS 1.0 was on simulating a complete tandem mass
  spectrometry run in metabolomics, rather than enabling the development
  of new strategies.</p>
</sec>
<sec id="the-vimms-2.0-framework">
  <title>The ViMMS 2.0 Framework</title>
  <p>In ViMMS 2.0 we significantly improved the simulator framework
  architecture with the goal of supporting fragmentation strategy
  development and validation. An overview of the overall architecture is
  given in <xref alt="Figure 1" rid="diagram">Figure 1</xref>. The
  simulator framework consists of two core functionalities: the
  generation of chemicals from multiple sources, and the execution of
  fragmentation strategies, implemented as controller classes. The
  improved modularity in ViMMS 2.0 allows many aspects of the framework
  to be swapped out with alternative implementations, including classes
  that generate various aspects of chemicals (e.g. measured m/z, RT,
  intensity) for simulation
  (<xref alt="Figure 1" rid="diagram">Figure 1</xref>A), mass
  spectrometry simulation
  (<xref alt="Figure 1" rid="diagram">Figure 1</xref>B), controllers
  that implement different fragmentation strategies
  (<xref alt="Figure 1" rid="diagram">Figure 1</xref>C), as well as the
  environmental context to run them all
  (<xref alt="Figure 1" rid="diagram">Figure 1</xref>D). Different
  evaluation methods are also provided to compare different controllers’
  performance.</p>
  <fig>
    <caption><p>Overall ViMMS 2.0 System
    Architecture.<styled-content id="diagram"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/figure.pdf" xlink:title="" />
  </fig>
  <sec id="generating-input-chemicals">
    <title>Generating Input Chemicals</title>
    <p>Chemicals are input objects to the simulation process in ViMMS
    2.0, and can be generated in different ways: either in a purely
    synthetic manner (e.g. sampling their properties from databases or
    fixed statistical distributions) or by construction from existing
    data (mzML files) via the extraction of RoI traces. The framework
    allows users to plug in modular classes that specify parameters of
    chemicals, such as the distribution of their m/z values, RT,
    intensities, chromatographic shapes and associated MS2 spectra
    (<xref alt="Figure 1" rid="diagram">Figure 1</xref>A).</p>
    <p>Chemicals can be generated in single-sample or multi-sample
    settings. When generating multi-sample data, ViMMS allows users to
    specify how chemicals vary across samples. Given a list of base
    chemicals (chemicals that are shared) across samples, users can
    indicate in what proportion of extracts chemicals should appear
    (dropout rate) or how chemical intensities should vary across a
    case-control experiment.</p>
  </sec>
  <sec id="executing-fragmentation-strategies">
    <title>Executing Fragmentation Strategies</title>
    <p>Once chemical objects have been prepared (whether for single- or
    multi-sample settings), different fragmentation strategies can be
    run. Fragmentation strategies are implemented as controllers that
    extend from the base <monospace>Controller</monospace> class.
    Controllers are executed in the context of an environment bringing
    together input chemicals, mass spectrometer and controllers as a
    single context
    (<xref alt="Figure 1" rid="diagram">Figure 1</xref>D). Note that the
    modularity of the mass spectrometry and environment classes means it
    is possible to swap purely simulated MS and environment
    implementation with alternatives that control an actual MS
    instrument while other aspects remain unchanged. In other work, we
    demonstrated the practicality of this idea by building alternative
    implementations of these classes that use the Thermo Fisher IAPI
    (<xref alt="Thermo Fisher Scientific, n.d." rid="ref-Thermo_Fisher_Scientific_undated-ny" ref-type="bibr">Thermo
    Fisher Scientific, n.d.</xref>) for bridging, making it possible for
    fragmentation strategies to be executed in simulation as well as
    unchanged on Thermo Tribrid Fusion instruments
    (<xref alt="Davies et al., 2021" rid="ref-davies21_smartroi" ref-type="bibr">Davies
    et al., 2021</xref>).</p>
  </sec>
  <sec id="implementing-a-new-controller">
    <title>Implementing a New Controller</title>
    <p>To illustrate how new strategies could be built on top of ViMMS
    2.0, an example is given here of a Top-N controller that selects the
    <italic>N</italic> most intense precursor ions for fragmentation.
    This strategy is common in real-world data-dependent acquisition
    (DDA) experiments and is included to demonstrate how straightforward
    its implementation is within the framework.</p>
    <p>In this implementation, the controller
    <monospace>SimpleTopNController</monospace> extends from a base
    <monospace>Controller</monospace> that provides base methods to
    handle various scan interactions with the mass spectrometer. This
    implementation overrides the <monospace>_process_scan</monospace>
    method, which determines how precursor ions in an incoming MS1 scan
    are prioritised for fragmentation. Information on what the mass
    spectrometer should do next is stored as a list of
    <monospace>ScanParameters</monospace>, which is returned from the
    controller to the mass spectrometer object by
    <monospace>_process_scan</monospace>.</p>
    <p>Scan parameters control, for example, whether a controller
    flexibly targets a single precursor ion for fragmentation, in what
    is commonly known as data-dependent acquisition (DDA), or whether it
    instead covers a range of m/z values, potentially fragmenting many
    precursor ions (data-independent acquisition; DIA). Although not
    shown in this example, other methods in the parent
    <monospace>Controller</monospace> could also be overridden for
    different purposes, such as responding when an acquisition has been
    started or stopped.</p>
    <code language="python">import numpy as np
from vimms.Controller.base import Controller


class SimpleTopNController(Controller):

    def _process_scan(self, scan):
        new_tasks = []

        # If the controller has received an MS1 scan to process        
        if self.scan_to_process is not None:

            # Extract m/z and intensity values in this MS1 scan
            mzs = self.scan_to_process.mzs
            intensities = self.scan_to_process.intensities

            # Select only the Top-N precursors, sorted by intensities descending
            idx = np.argsort(intensities)[::-1]
            idx = idx[0:self.N]

            # Loop over the Top-N precursors and target them for fragmentation
            for i in idx:
                mz, intensity = mzs[i], intensities[i]

                # Schedule a new MS2 scan targeting the selected precursor ion
                dda_scan_params = self.get_ms2_scan_params(mz, intensity, ...)
                new_tasks.append(dda_scan_params)
                self.current_task_id += 1

            # Schedule the next survey MS1 scan after doing N MS2 scans
            ms1_scan_params = self.get_ms1_scan_params()
            new_tasks.append(ms1_scan_params)
            self.current_task_id += 1

            # Set this MS1 scan as has been processed
            # and indicate what is the next MS1 scan id to process
            self.scan_to_process = None
            self.next_processed_scan_id = self.current_task_id

        # Return all the scheduled tasks to be executed by the mass spec
        return new_tasks</code>
    <p>The simple Top-N scheme above could be enhanced to incorporate
    dynamic exclusion windows to prevent the same precursors from being
    fragmented repeatedly, or to incorporate different schemes
    prioritising which of the precursor ions to fragment. We have
    included a more complete Top-N strategy as the baseline controller
    in ViMMS 2.0 against which other strategies can be benchmarked. Two
    enhanced DDA controllers (named <bold>SmartROI</bold> and
    <bold>WeightedDEW</bold>, outlined by Davies et al.
    (<xref alt="2021" rid="ref-davies21_smartroi" ref-type="bibr">2021</xref>))
    are also provided that demonstrate how novel fragmentation
    strategies could be rapidly implemented and validated in ViMMS 2.0.
    SmartROI accomplishes this by tracking regions-of-interest in
    real-time and targeting those for fragmentation, while WeightedDEW
    implements a weighted dynamic exclusion scheme to decide
    prioritisation of precursor ions for fragmentation. Code is provided
    to compute various evaluation metrics, such as coverage and
    intensities of fragmented precursors. This allows users to benchmark
    different controller implementations comparatively.</p>
  </sec>
  <sec id="software-requirements">
    <title>Software requirements</title>
    <p>ViMMS 2.0 is distributed as a Python package that can be easily
    installed using pip. We require Python 3.0 or higher to run the
    framework. It depends on common packages such as numpy, scipy and
    pandas. Automated unit tests are available in Python, as well as
    continuous integration that build and run those unit tests in our
    code repository. Our codebase is stored in GitHub and we welcome
    contributions from researchers with interest in developing novel
    fragmentation strategies in both data-dependent and data-independent
    acquisitions.</p>
  </sec>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>in this paper, we have introduced ViMMS 2.0, an extension of the
  simulator framework in ViMMS 1.0. ViMMS 2.0 is modular, extensible and
  can be used in Python to simulate fragmentation strategies for
  untargeted metabolomics studies. In other work
  (<xref alt="Davies et al., 2021" rid="ref-davies21_smartroi" ref-type="bibr">Davies
  et al., 2021</xref>), the utility of ViMMS 2.0 has been validated
  through additional bridging code that allows simulated controllers to
  run unchanged on both the simulator and actual mass spectrometers. It
  is our hope that the work outlined here will be used to advance the
  development of novel fragmentation strategies in untargeted
  metabolomics.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Joe Wandy, Vinny Davies, Stefan Weidt, Simon Rogers and Rónán Daly
  acknowledge EPSRC project EP/R018634/1 on ‘Closed-loop data science
  for complex, computationally and data-intensive analytics’.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-guijas2018metabolomics">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Guijas</surname><given-names>Carlos</given-names></name>
          <name><surname>Montenegro-Burke</surname><given-names>J Rafael</given-names></name>
          <name><surname>Warth</surname><given-names>Benedikt</given-names></name>
          <name><surname>Spilker</surname><given-names>Mary E</given-names></name>
          <name><surname>Siuzdak</surname><given-names>Gary</given-names></name>
        </person-group>
        <article-title>Metabolomics activity screening for identifying metabolites that modulate phenotype</article-title>
        <source>Nature biotechnology</source>
        <publisher-name>Nature Publishing Group</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <volume>36</volume>
        <issue>4</issue>
        <pub-id pub-id-type="doi">10.1038/nbt.4101</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-smith2014proteomics">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Smith</surname><given-names>Rob</given-names></name>
          <name><surname>Mathis</surname><given-names>Andrew D</given-names></name>
          <name><surname>Ventura</surname><given-names>Dan</given-names></name>
          <name><surname>Prince</surname><given-names>John T</given-names></name>
        </person-group>
        <article-title>Proteomics, lipidomics, metabolomics: A mass spectrometry tutorial from a computer scientist’s point of view</article-title>
        <source>BMC bioinformatics</source>
        <publisher-name>BioMed Central</publisher-name>
        <year iso-8601-date="2014">2014</year>
        <volume>15</volume>
        <issue>7</issue>
        <pub-id pub-id-type="doi">10.1186/1471-2105-15-s7-s9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Wandy2019-ok">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wandy</surname><given-names>Joe</given-names></name>
          <name><surname>Davies</surname><given-names>Vinny</given-names></name>
          <name><surname>J J van der Hooft</surname><given-names>Justin</given-names></name>
          <name><surname>Weidt</surname><given-names>Stefan</given-names></name>
          <name><surname>Daly</surname><given-names>Rónán</given-names></name>
          <name><surname>Rogers</surname><given-names>Simon</given-names></name>
        </person-group>
        <article-title>In silico optimization of mass spectrometry fragmentation strategies in metabolomics</article-title>
        <source>Metabolites</source>
        <publisher-name>Multidisciplinary Digital Publishing Institute</publisher-name>
        <year iso-8601-date="2019-10">2019</year><month>10</month>
        <volume>9</volume>
        <issue>10</issue>
        <pub-id pub-id-type="doi">10.1101/744227</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-davies21_smartroi">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Davies</surname><given-names>Vinny</given-names></name>
          <name><surname>Wandy</surname><given-names>Joe</given-names></name>
          <name><surname>Weidt</surname><given-names>Stefan</given-names></name>
          <name><surname>J J van der Hooft</surname><given-names>Justin</given-names></name>
          <name><surname>Miller</surname><given-names>Alice</given-names></name>
          <name><surname>Daly</surname><given-names>Rónán</given-names></name>
          <name><surname>Rogers</surname><given-names>Simon</given-names></name>
        </person-group>
        <article-title>Rapid development of improved data-dependent acquisition strategies</article-title>
        <source>Analytical chemistry</source>
        <publisher-name>American Chemical Society</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <volume>93</volume>
        <issue>14</issue>
        <pub-id pub-id-type="doi">10.1021/acs.analchem.0c03895</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-smith2015jamss">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Smith</surname><given-names>Rob</given-names></name>
          <name><surname>Prince</surname><given-names>John T</given-names></name>
        </person-group>
        <article-title>JAMSS: Proteomics mass spectrometry simulation in Java</article-title>
        <source>Bioinformatics</source>
        <publisher-name>Oxford University Press</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>31</volume>
        <issue>5</issue>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu729</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-noyce2013mspire">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Noyce</surname><given-names>Andrew B</given-names></name>
          <name><surname>Smith</surname><given-names>Rob</given-names></name>
          <name><surname>Dalgleish</surname><given-names>James</given-names></name>
          <name><surname>Taylor</surname><given-names>Ryan M</given-names></name>
          <name><surname>Erb</surname><given-names>KC</given-names></name>
          <name><surname>Okuda</surname><given-names>Nozomu</given-names></name>
          <name><surname>Prince</surname><given-names>John T</given-names></name>
        </person-group>
        <article-title>Mspire-Simulator: LC-MS shotgun proteomic simulator for creating realistic gold standard data</article-title>
        <source>Journal of proteome research</source>
        <publisher-name>ACS Publications</publisher-name>
        <year iso-8601-date="2013">2013</year>
        <volume>12</volume>
        <issue>12</issue>
        <pub-id pub-id-type="doi">10.1021/pr400727e</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-goldfarb2016msacquisitionsimulator">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Goldfarb</surname><given-names>Dennis</given-names></name>
          <name><surname>Wang</surname><given-names>Wei</given-names></name>
          <name><surname>Major</surname><given-names>Michael B</given-names></name>
        </person-group>
        <article-title>MSAcquisitionSimulator: Data-dependent acquisition simulator for LC-MS shotgun proteomics</article-title>
        <source>Bioinformatics</source>
        <publisher-name>Oxford University Press</publisher-name>
        <year iso-8601-date="2016">2016</year>
        <volume>32</volume>
        <issue>8</issue>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv745</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-kosters2021smiter">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kösters</surname><given-names>Manuel</given-names></name>
          <name><surname>Leufken</surname><given-names>Johannes</given-names></name>
          <name><surname>Leidel</surname><given-names>Sebastian A</given-names></name>
        </person-group>
        <article-title>SMITER—a Python library for the simulation of LC-MS/MS experiments</article-title>
        <source>Genes</source>
        <publisher-name>Multidisciplinary Digital Publishing Institute</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <volume>12</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.3390/genes12030396</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wang2015openms">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wang</surname><given-names>Yaojun</given-names></name>
          <name><surname>Yang</surname><given-names>Fei</given-names></name>
          <name><surname>Wu</surname><given-names>Peng</given-names></name>
          <name><surname>Bu</surname><given-names>Dongbo</given-names></name>
          <name><surname>Sun</surname><given-names>Shiwei</given-names></name>
        </person-group>
        <article-title>OpenMS-Simulator: An open-source software for theoretical tandem mass spectrum prediction</article-title>
        <source>BMC bioinformatics</source>
        <publisher-name>BioMed Central</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>16</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1186/s12859-015-0540-1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Thermo_Fisher_Scientific_undated-ny">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Thermo Fisher Scientific</string-name>
        </person-group>
        <article-title>Thermo Fisher Application Programming Interface</article-title>
        <publisher-name>https://github.com/thermofisherlsms/iapi</publisher-name>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>
