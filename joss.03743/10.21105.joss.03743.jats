<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3743</article-id>
<article-id pub-id-type="doi">10.21105/joss.03743</article-id>
<title-group>
<article-title>SPbLA: The Library of GPGPU-powered Sparse Boolean Linear
Algebra Operations</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0424-4059</contrib-id>
<name>
<surname>Orachev</surname>
<given-names>Egor</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Karpenko</surname>
<given-names>Maria</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Alimov</surname>
<given-names>Pavel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7966-0698</contrib-id>
<name>
<surname>Grigorev</surname>
<given-names>Semyon</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Saint Petersburg State University</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>ITMO University</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>JetBrains Research</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-09-05">
<day>5</day>
<month>9</month>
<year>2021</year>
</pub-date>
<volume>7</volume>
<issue>76</issue>
<fpage>3743</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>C</kwd>
<kwd>C++</kwd>
<kwd>sparse-matrix</kwd>
<kwd>linear-algebra</kwd>
<kwd>graph-analysis</kwd>
<kwd>graph-algorithms</kwd>
<kwd>nvidia-cuda</kwd>
<kwd>opencl</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>SPbLA</monospace> is a sparse Boolean linear algebra
  primitives and operations for GPGPU computations. It comes as a
  stand-alone self-sufficient library with C API for high-performance
  computing with multiple backends for Nvidia Cuda, OpenCL and CPU-only
  platforms. The library has PyPI <monospace>pyspbla</monospace> package
  (<xref alt="Orachev et al., 2021" rid="ref-pyspbla" ref-type="bibr">Orachev
  et al., 2021</xref>) for work within a Python runtime. The primary
  library primitive is a sparse matrix of Boolean values. The library
  provides the most popular operations for matrix manipulation, such as
  construction from values, transpose, sub-matrix extraction,
  matrix-to-vector reduce, matrix-matrix element-wise addition,
  multiplication and Kronecker product.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Answering research questions in data analysis often involves
  expressing the solution in terms of matrix/vector operations. This way
  it is possible to leverage a set of powerful sparse linear algebra
  libraries.
  <monospace>GraphBLAS API</monospace> provides a set of unified linear
  algebra based building blocks for reducing analysis algorithms to
  sparse linear algebra operations. While GPGPU utilization for
  high-performance linear algebra is common, the high complexity of
  GPGPU programming makes the implementation of the complete set of
  sparse operations on GPGPU challenging. Thus, it is worth addressing
  this problem by focusing on a basic but still important case — sparse
  Boolean algebra.</p>
  <p>The primary goal of the <monospace>SPbLA</monospace> is to provide
  a base for the implementation, testing and profiling high-performance
  algorithms for solving data analysis problems, such as RDF analysis
  (<xref alt="X. Zhang et al., 2015" rid="ref-articleU003Acfpq_and_rdf_analysis" ref-type="bibr">X.
  Zhang et al., 2015</xref>), RNA secondary structure analysis
  (<xref alt="Anderson et al., 2013" rid="ref-articleU003Arna_prediction" ref-type="bibr">Anderson
  et al., 2013</xref>), static code analysis (such as points-to or alias
  analysis)
  (<xref alt="Q. Zhang et al., 2013" rid="ref-articleU003Adyck_cfl_code_analysis" ref-type="bibr">Q.
  Zhang et al., 2013</xref>) and evaluation of regular and
  CFL-reachability queries
  (<xref alt="Azimov &amp; Grigorev, 2018" rid="ref-inproceedingsU003Amatrix_cfpq" ref-type="bibr">Azimov
  &amp; Grigorev, 2018</xref>;
  <xref alt="Orachev et al., 2020" rid="ref-inbookU003Akronecker_cfpq_adbis" ref-type="bibr">Orachev
  et al., 2020</xref>).</p>
  <p>Thus, we can offload different language-constrained path querying
  related problems, and other problems that can be reduced to
  manipulation of Boolean matrices, to GPGPU uniformly.</p>
  <p>Moreover, real world data analysis leads to huge matrix processing
  that can not be efficiently handled on a single GPGPU. The creation of
  the library which supports multi-GPU and out-of-VRAM computations
  helps to create an efficient solution for a wide range of applied
  problems. The creation of such a solution is an open problem while
  ad-hoc solutions exist in specific areas. We propose an
  <monospace>SPbLA</monospace> as a base for such a solution.</p>
  <p>Also, we hope that the library is a small step to move the
  implementation of the fully-featured sparse linear algebra as
  specified in <monospace>GraphBLAS</monospace> forward multi-GPU
  computations.</p>
</sec>
<sec id="related-tools">
  <title>Related tools</title>
  <p><monospace>GraphBLAS API</monospace>
  (<xref alt="Kepner et al., 2016" rid="ref-paperU003Agraphblas_foundations" ref-type="bibr">Kepner
  et al., 2016</xref>) is one of the first standards that formalize the
  mathematical building blocks in the form of the programming interface
  for implementing algorithms in the language of linear algebra.
  <monospace>SuiteSparse</monospace>
  (<xref alt="T. A. Davis, 2019" rid="ref-articleU003Asuite_sparse_for_graph_problems" ref-type="bibr">T.
  A. Davis, 2019</xref>) is a reference implementation of the
  <monospace>GraphBLAS API</monospace> for CPU computation. It is a
  mature and fully featured library with a number of bindings for other
  programming languages, such as <monospace>pygraphblas</monospace>
  (<xref alt="Pygraphblas, 2021" rid="ref-pygraphblas" ref-type="bibr"><italic>Pygraphblas</italic>,
  2021</xref>) for Python programming.</p>
  <p>GPGPU’s utilization for data analysis and for linear algebra
  operations is a promising way to high-performance data analysis
  because GPGPU is much more powerful in parallel data processing.
  However, GPGPU programming is still challenging. To the best of our
  knowledge, there is no complete <monospace>GraphBLAS API</monospace>
  implementation for GPGPU computations, except
  <monospace>GraphBLAST</monospace>
  (<xref alt="Yang et al., 2019" rid="ref-yang2019graphblast" ref-type="bibr">Yang
  et al., 2019</xref>), which is currently in active development. Some
  work is also done to move <monospace>SuiteSparse</monospace> forward
  GPGPU computations.</p>
  <p>However, the sparsity of data introduces issues with load
  balancing, irregular data access, thus sparsity complicates the
  implementation of high-performance algorithms for sparse linear
  algebra on GPGPU. There are a number of open-source and proprietary
  libraries, which implement independently different sparse formats and
  operations. Thus, there is no single solid sparse linear algebra
  framework. Libraries such as <monospace>cuSPARSE</monospace>
  (<xref alt="Sparse Matrix Library in Cuda, n.d." rid="ref-netU003Acusparse_docs" ref-type="bibr"><italic>Sparse
  Matrix Library in Cuda</italic>, n.d.</xref>),
  <monospace>bhSPARSE</monospace>
  (<xref alt="Liu &amp; Vinter, 2015" rid="ref-10.1016U002Fj.jpdc.2015.06.010" ref-type="bibr">Liu
  &amp; Vinter, 2015</xref>), <monospace>clSPARSE</monospace>
  (<xref alt="Greathouse et al., 2016" rid="ref-10.1145U002F2909437.2909442" ref-type="bibr">Greathouse
  et al., 2016</xref>) and <monospace>CUSP</monospace>
  (<xref alt="Dalton et al., 2014" rid="ref-netU003Acusplibrary" ref-type="bibr">Dalton
  et al., 2014</xref>) have limited type and operators customization
  features with major focus on numerical types only.</p>
</sec>
<sec id="performance">
  <title>Performance</title>
  <p>We evaluate the utility of the proposed library for some real-world
  matrix data. The experiment itself is designed as a computational
  task, which arises as a stand-alone or intermediate step in the
  solving of practical problems. Results of the evaluation compared to
  CPU <monospace>SuiteSparse</monospace> and existing GPU sparse linear
  algebra libraries. The comparison is not entirely fair, since there
  are still no Boolean linear algebra libraries for GPU
  computations.</p>
  <p>Machine for performance evaluation has the following configuration:
  PC with OS Ubuntu 20.04 installed, Intel Core i7-6700 3.4Hz CPU, 64Gb
  DDR4 RAM, GeForce GTX 1070 GPU with 8Gb VRAM.</p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="13%" />
        <col width="17%" />
        <col width="17%" />
        <col width="17%" />
        <col width="17%" />
        <col width="17%" />
      </colgroup>
      <thead>
        <tr>
          <th>Matrix name</th>
          <th align="right"># Rows</th>
          <th align="right">Nnz M</th>
          <th align="right">Nnz/row</th>
          <th align="right">Max Nnz/row</th>
          <th align="right">Nnz M^2</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>amazon0312</td>
          <td align="right">400,727</td>
          <td align="right">3,200,440</td>
          <td align="right">7.9</td>
          <td align="right">10</td>
          <td align="right">14,390,544</td>
        </tr>
        <tr>
          <td>amazon-2008</td>
          <td align="right">735,323</td>
          <td align="right">5,158,388</td>
          <td align="right">7.0</td>
          <td align="right">10</td>
          <td align="right">25,366,745</td>
        </tr>
        <tr>
          <td>web-Google</td>
          <td align="right">916,428</td>
          <td align="right">5,105,039</td>
          <td align="right">5.5</td>
          <td align="right">456</td>
          <td align="right">29,710,164</td>
        </tr>
        <tr>
          <td>roadNet-PA</td>
          <td align="right">1,090,920</td>
          <td align="right">3,083,796</td>
          <td align="right">2.8</td>
          <td align="right">9</td>
          <td align="right">7,238,920</td>
        </tr>
        <tr>
          <td>roadNet-TX</td>
          <td align="right">1,393,383</td>
          <td align="right">3,843,320</td>
          <td align="right">2.7</td>
          <td align="right">12</td>
          <td align="right">8,903,897</td>
        </tr>
        <tr>
          <td>roadNet-CA</td>
          <td align="right">1,971,281</td>
          <td align="right">5,533,214</td>
          <td align="right">2.8</td>
          <td align="right">12</td>
          <td align="right">12,908,450</td>
        </tr>
        <tr>
          <td>netherlands_osm</td>
          <td align="right">2,216,688</td>
          <td align="right">4,882,476</td>
          <td align="right">2.2</td>
          <td align="right">7</td>
          <td align="right">8,755,758</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p>For evaluation, we selected a number of square real-world matrices,
  widely applicable for sparse matrices benchmarks, from the Sparse
  Matrix Collection at University of Florida
  (<xref alt="T. Davis, n.d." rid="ref-dataU003Asuitesparse_matrix_collection" ref-type="bibr">T.
  Davis, n.d.</xref>). Information about matrices summarized above.
  Table contains matrix name, number of rows in the matrix (the same as
  number of columns), number of non-zero elements (Nnz) in the matrix,
  average and maximum nnz in row, nnz in the result matrix.</p>
  <p>The experiment is intended to measure the performance of
  matrix-matrix multiplication as <inline-formula><alternatives>
  <tex-math><![CDATA[M \times M]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>M</mml:mi><mml:mo>×</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.
  Results of the evaluation presented in
  <xref alt="Figure 1" rid="figU003Aperftime">Figure 1</xref> and
  <xref alt="Figure 2" rid="figU003Aperfmem">Figure 2</xref>. Results
  averaged among 10 runs. The deviation of results does not exceed 10%.
  Best and worst results highlighted. Extra warm-up run, required for
  initialization and kernels compilation, is excluded from
  measurements.</p>
  <p><monospace>SPbLA</monospace> library shows the best performance
  among competitors for both OpenCL and Nvidia Cuda backends.
  <monospace>CUSP</monospace> and <monospace>cuSPARSE</monospace> show
  good performance as well. However, they have significant memory
  consumption in some cases, which can be a critical limitation in
  practical analysis tasks. <monospace>SuiteSparse</monospace> library
  on CPU has acceptable performance characteristics, and it is still a
  good alternative for CPU-only computations.</p>
  <fig>
    <caption><p>Matrix-matrix multiplication time consumption. Time in
    milliseconds. Lower is
    better.<styled-content id="figU003Aperftime"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/perf-time.png" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Matrix-matrix multiplication memory consumption. Memory
    in megabytes. Lower is
    better.<styled-content id="figU003Aperfmem"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/perf-mem.png" xlink:title="" />
  </fig>
</sec>
<sec id="future-research">
  <title>Future research</title>
  <p>First direction of the future research is library extension to
  multi-GPU environment support. This step introduces a number of
  issues, such as memory management among computational units as well as
  proper workload dispatch and granularity of parallel tasks. A
  potential solution is to use a hybrid sparse matrix format, such as
  quadtree or blocked storage, and utilize virtual memory. It is
  necessary to expose more control over expressions evaluations to the
  user in order to support matrix and expression level granularity among
  computational units.</p>
  <p>Finally, we plan to generalize computational kernels and primitives
  in order to support arbitrary types and operations, defined by the
  user. This step will allow defining custom elements and functions,
  which will be executed on GPU similarly as it is done for predefined
  Boolean values.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Work on the <monospace>SPbLA</monospace> project was supported by a
  grant from JetBrains Research.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-pyspbla">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orachev</surname><given-names>Egor</given-names></name>
        <name><surname>Karpenko</surname><given-names>Maria</given-names></name>
        <name><surname>Alimov</surname><given-names>Pavel</given-names></name>
        <name><surname>Grigorev</surname><given-names>Semyon</given-names></name>
      </person-group>
      <article-title>SPbLA: Sparse boolean linear algebra for CPU, cuda and OpenCL computations</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://pypi.org/project/pyspbla/</uri>
    </element-citation>
  </ref>
  <ref id="ref-articleU003Acfpq_and_rdf_analysis">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Xiaowang</given-names></name>
        <name><surname>Feng</surname><given-names>Zhiyong</given-names></name>
        <name><surname>Wang</surname><given-names>Xin</given-names></name>
        <name><surname>Rao</surname><given-names>Guozheng</given-names></name>
        <name><surname>Wu</surname><given-names>Wenrui</given-names></name>
      </person-group>
      <article-title>Context-free path queries on RDF graphs</article-title>
      <source>CoRR</source>
      <year iso-8601-date="2015">2015</year>
      <volume>abs/1506.00743</volume>
      <uri>http://arxiv.org/abs/1506.00743</uri>
      <pub-id pub-id-type="doi">10.1007/978-3-319-46523-4_38</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-articleU003Arna_prediction">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Anderson</surname><given-names>James</given-names></name>
        <name><surname>Novák</surname><given-names>Adám</given-names></name>
        <name><surname>Sükösd</surname><given-names>Zsuzsanna</given-names></name>
        <name><surname>Golden</surname><given-names>Michael</given-names></name>
        <name><surname>Arunapuram</surname><given-names>Preeti</given-names></name>
        <name><surname>Edvardsson</surname><given-names>Ingolfur</given-names></name>
        <name><surname>Hein</surname><given-names>Jotun</given-names></name>
      </person-group>
      <article-title>Quantifying variances in comparative RNA secondary structure prediction</article-title>
      <source>BMC bioinformatics</source>
      <year iso-8601-date="2013-05">2013</year><month>05</month>
      <volume>14</volume>
      <pub-id pub-id-type="doi">10.1186/1471-2105-14-149</pub-id>
      <fpage>149</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-articleU003Adyck_cfl_code_analysis">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Qirun</given-names></name>
        <name><surname>Lyu</surname><given-names>Michael R.</given-names></name>
        <name><surname>Yuan</surname><given-names>Hao</given-names></name>
        <name><surname>Su</surname><given-names>Zhendong</given-names></name>
      </person-group>
      <article-title>Fast algorithms for dyck-CFL-reachability with applications to alias analysis</article-title>
      <source>SIGPLAN Not.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2013-06">2013</year><month>06</month>
      <volume>48</volume>
      <issue>6</issue>
      <issn>0362-1340</issn>
      <uri>https://doi.org/10.1145/2499370.2462159</uri>
      <pub-id pub-id-type="doi">10.1145/2499370.2462159</pub-id>
      <fpage>435</fpage>
      <lpage>446</lpage>
    </element-citation>
  </ref>
  <ref id="ref-inproceedingsU003Amatrix_cfpq">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Azimov</surname><given-names>Rustam</given-names></name>
        <name><surname>Grigorev</surname><given-names>Semyon</given-names></name>
      </person-group>
      <article-title>Context-free path querying by matrix multiplication</article-title>
      <year iso-8601-date="2018-06">2018</year><month>06</month>
      <pub-id pub-id-type="doi">10.1145/3210259.3210264</pub-id>
      <fpage>1</fpage>
      <lpage>10</lpage>
    </element-citation>
  </ref>
  <ref id="ref-inbookU003Akronecker_cfpq_adbis">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Orachev</surname><given-names>Egor</given-names></name>
        <name><surname>Epelbaum</surname><given-names>Ilya</given-names></name>
        <name><surname>Azimov</surname><given-names>Rustam</given-names></name>
        <name><surname>Grigorev</surname><given-names>Semyon</given-names></name>
      </person-group>
      <article-title>Context-free path querying by kronecker product</article-title>
      <year iso-8601-date="2020-08">2020</year><month>08</month>
      <isbn>978-3-030-54831-5</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-030-54832-2_6</pub-id>
      <fpage>49</fpage>
      <lpage>59</lpage>
    </element-citation>
  </ref>
  <ref id="ref-articleU003Asuite_sparse_for_graph_problems">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Davis</surname><given-names>Timothy A.</given-names></name>
      </person-group>
      <article-title>Algorithm 1000: SuiteSparse:GraphBLAS: Graph algorithms in the language of sparse linear algebra</article-title>
      <source>ACM Trans. Math. Softw.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2019-12">2019</year><month>12</month>
      <volume>45</volume>
      <issue>4</issue>
      <issn>0098-3500</issn>
      <uri>https://doi.org/10.1145/3322125</uri>
      <pub-id pub-id-type="doi">10.1145/3322125</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pygraphblas">
    <element-citation>
      <article-title>Pygraphblas: A python wrapper around the GraphBLAS API</article-title>
      <publisher-name>Github</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/Graphegon/pygraphblas</uri>
    </element-citation>
  </ref>
  <ref id="ref-netU003Acusparse_docs">
    <element-citation>
      <article-title>Sparse matrix library in cuda</article-title>
      <uri>https://docs.nvidia.com/cuda/cusparse/</uri>
    </element-citation>
  </ref>
  <ref id="ref-10.1016U002Fj.jpdc.2015.06.010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Liu</surname><given-names>Weifeng</given-names></name>
        <name><surname>Vinter</surname><given-names>Brian</given-names></name>
      </person-group>
      <article-title>A framework for general sparse matrix-matrix multiplication on GPUs and heterogeneous processors</article-title>
      <source>J. Parallel Distrib. Comput.</source>
      <publisher-name>Academic Press, Inc.</publisher-name>
      <publisher-loc>USA</publisher-loc>
      <year iso-8601-date="2015-11">2015</year><month>11</month>
      <volume>85</volume>
      <issue>C</issue>
      <issn>0743-7315</issn>
      <uri>https://doi.org/10.1016/j.jpdc.2015.06.010</uri>
      <pub-id pub-id-type="doi">10.1016/j.jpdc.2015.06.010</pub-id>
      <fpage>47</fpage>
      <lpage>61</lpage>
    </element-citation>
  </ref>
  <ref id="ref-yang2019graphblast">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yang</surname><given-names>Carl</given-names></name>
        <name><surname>Buluç</surname><given-names>Aydın</given-names></name>
        <name><surname>Owens</surname><given-names>John D.</given-names></name>
      </person-group>
      <article-title>GraphBLAST: A high-performance linear algebra-based graph framework on the GPU</article-title>
      <source>arXiv preprint</source>
      <year iso-8601-date="2019">2019</year>
      <pub-id pub-id-type="doi">10.48550/ARXIV.1908.01407</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-netU003Acusplibrary">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dalton</surname><given-names>Steven</given-names></name>
        <name><surname>Bell</surname><given-names>Nathan</given-names></name>
        <name><surname>Olson</surname><given-names>Luke</given-names></name>
        <name><surname>Garland</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>Cusp: Generic parallel algorithms for sparse matrix and graph computations</article-title>
      <year iso-8601-date="2014">2014</year>
      <uri>http://cusplibrary.github.io/</uri>
    </element-citation>
  </ref>
  <ref id="ref-10.1145U002F2909437.2909442">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Greathouse</surname><given-names>Joseph L.</given-names></name>
        <name><surname>Knox</surname><given-names>Kent</given-names></name>
        <name><surname>Poła</surname><given-names>Jakub</given-names></name>
        <name><surname>Varaganti</surname><given-names>Kiran</given-names></name>
        <name><surname>Daga</surname><given-names>Mayank</given-names></name>
      </person-group>
      <article-title>ClSPARSE: A vendor-optimized open-source sparse BLAS library</article-title>
      <source>Proceedings of the 4th international workshop on OpenCL</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2016">2016</year>
      <isbn>9781450343381</isbn>
      <uri>https://doi.org/10.1145/2909437.2909442</uri>
      <pub-id pub-id-type="doi">10.1145/2909437.2909442</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-paperU003Agraphblas_foundations">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kepner</surname><given-names>J.</given-names></name>
        <name><surname>Aaltonen</surname><given-names>P.</given-names></name>
        <name><surname>Bader</surname><given-names>D.</given-names></name>
        <name><surname>Buluc</surname><given-names>A.</given-names></name>
        <name><surname>Franchetti</surname><given-names>F.</given-names></name>
        <name><surname>Gilbert</surname><given-names>J.</given-names></name>
        <name><surname>Hutchison</surname><given-names>D.</given-names></name>
        <name><surname>Kumar</surname><given-names>M.</given-names></name>
        <name><surname>Lumsdaine</surname><given-names>A.</given-names></name>
        <name><surname>Meyerhenke</surname><given-names>H.</given-names></name>
        <name><surname>McMillan</surname><given-names>S.</given-names></name>
        <name><surname>Yang</surname><given-names>C.</given-names></name>
        <name><surname>Owens</surname><given-names>J. D.</given-names></name>
        <name><surname>Zalewski</surname><given-names>M.</given-names></name>
        <name><surname>Mattson</surname><given-names>T.</given-names></name>
        <name><surname>Moreira</surname><given-names>J.</given-names></name>
      </person-group>
      <article-title>Mathematical foundations of the GraphBLAS</article-title>
      <source>2016 IEEE high performance extreme computing conference (HPEC)</source>
      <year iso-8601-date="2016">2016</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/HPEC.2016.7761646</pub-id>
      <fpage>1</fpage>
      <lpage>9</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dataU003Asuitesparse_matrix_collection">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Davis</surname><given-names>T.</given-names></name>
      </person-group>
      <article-title>SuiteSparse matrix collection (the university of florida sparse matrix collection)</article-title>
      <uri>https://sparse.tamu.edu/</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
