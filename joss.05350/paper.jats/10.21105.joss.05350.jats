<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5350</article-id>
<article-id pub-id-type="doi">10.21105/joss.05350</article-id>
<title-group>
<article-title>omni-fig: Unleashing Project Configuration and
Organization in Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3127-5707</contrib-id>
<name>
<surname>Leeb</surname>
<given-names>Felix</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Max Planck Institute for Intelligent Systems, Tübingen,
Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-01-25">
<day>25</day>
<month>1</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>98</issue>
<fpage>5350</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Configuration</kwd>
<kwd>Organization</kwd>
<kwd>Abstraction</kwd>
<kwd>Management</kwd>
<kwd>Transparency</kwd>
<kwd>Reproducibility</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="abstract">
  <title>Abstract</title>
  <p>We present a lightweight package to take care of the configuration
  and organization of all your Python projects. Although
  <monospace>omni-fig</monospace> is well suited for projects of
  virtually any size or complexity, it is specifically designed for
  research projects where a small development team doesn’t want to waste
  time on boilerplate code or a bespoke user interface. Nevertheless,
  the intuitive project structure encourages developers to good design
  practices making it easier for collaborators and prospective users to
  rapidly find and understand the core contributions they need. The
  feature-rich configuration system completely abstracts the
  implementation from the specification of parameters, so the developer
  can focus entirely on creating new functionality, while the user can
  quickly and precisely specify the desired functionality by composing
  modular config files, through the command line interface, or even in
  an interactive environment like Jupyter.
  <monospace>omni-fig</monospace> transforms the project organization
  and configuration from a bothersome distraction into a joy, thereby
  improving clarity while also accelerating development.</p>
</sec>
<sec id="introduction">
  <title>Introduction</title>
  <p>One particularly promising trend in computational research,
  especially in machine learning, is that releasing the code associated
  with projects is becoming increasingly common
  (<xref alt="Pineau et al., 2021" rid="ref-pineau2021improving" ref-type="bibr">Pineau
  et al., 2021</xref>). Not only is this crucial for reproducibility
  (<xref alt="Guyon, n.d." rid="ref-guyonartificial" ref-type="bibr">Guyon,
  n.d.</xref>), but this also fosters interdisciplinary research and
  progress in industry
  (<xref alt="Aho et al., 2020" rid="ref-aho2020demystifying" ref-type="bibr">Aho
  et al., 2020</xref>).</p>
  <p>However, the needs of developers differ significantly from those of
  potential users. <italic>Developers</italic> (and especially
  researchers) prefer flexible, open-ended tools tailored for
  extensibility to prototype and synthesize novel methods. Meanwhile,
  <italic>users</italic> prefer tools that automate details and provide
  a simple interface that is digestible and directly applicable to some
  downstream problem. Even fellow researchers exploring new methods want
  to quickly understand the essence of the contribution rather than
  getting bogged down in some idiosyncrasies of a project. For example,
  in machine learning, this has given rise to a variety of development
  practices
  (<xref alt="Ebert et al., 2016" rid="ref-ebert2016devops" ref-type="bibr">Ebert
  et al., 2016</xref>;
  <xref alt="Treveil et al., 2020" rid="ref-treveil2020introducing" ref-type="bibr">Treveil
  et al., 2020</xref>) and AutoML packages
  (<xref alt="He et al., 2021" rid="ref-he2021automl" ref-type="bibr">He
  et al., 2021</xref>) to make cutting edge methods more highly
  accessible for a variety of real-world applications. However, the
  opaque rigid interfaces and product-oriented focus cater more to the
  end-user, thereby increasing friction in design and synthesis for
  developers.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Project organization and configuration is an important albeit
  unglamorous part of every project. Neglecting this aspect can
  significantly impede prototyping and development as well as making the
  project less understandable and useable for any potential user or
  collaborator. Consequently, quite a few packages already exist to help
  with this task.</p>
  <p>Perhaps the most similar to our proposed
  <monospace>omni-fig</monospace> is <monospace>hydra</monospace>
  (<xref alt="Yadan, 2019" rid="ref-hydra" ref-type="bibr">Yadan,
  2019</xref>), which is a popular configuration framework that provides
  a feature-rich user interface, even including composing config files
  to some extent. However, from the developer’s perspective, the project
  structure of <monospace>hydra</monospace> is more constrained and the
  configuration system is built on top of
  <monospace>OmegaConf</monospace>
  (<xref alt="OmegaConf - Flexible Python Configuration System, 2012" rid="ref-omegaconf" ref-type="bibr"><italic>OmegaConf
  - Flexible Python Configuration System</italic>, 2012</xref>), making
  more advanced features such as automatic instantiation of objects
  nonexistent or more cumbersome. Packages such as
  <monospace>OmegaConf</monospace> or <monospace>pydantic</monospace>
  (<xref alt="Colvin, 2019" rid="ref-pydantic" ref-type="bibr">Colvin,
  2019</xref>), on the other hand, focus more on integrations and
  performance but lack high-level features and a user-friendly
  interface. Slightly less comparable are a variety of packages designed
  for more specific applications with fixed project structures, such as
  <monospace>dynaconf</monospace>
  (<xref alt="Rocha, 2018" rid="ref-dynaconf" ref-type="bibr">Rocha,
  2018</xref>), <monospace>gin-config</monospace>
  (<xref alt="Holtmann-Rice et al., 2018" rid="ref-ginconfig" ref-type="bibr">Holtmann-Rice
  et al., 2018</xref>), and <monospace>confr</monospace>
  (<xref alt="Arro, 2022" rid="ref-arro2022confr" ref-type="bibr">Arro,
  2022</xref>). Finally, there are some built-in libraries that are
  commonly used for the command-line interface and configuration, such
  as <monospace>argparse</monospace>
  (<xref alt="Argparse - Parser for Command-Line Options, Arguments and Sub-Commands, n.d." rid="ref-argparse" ref-type="bibr"><italic>Argparse
  - Parser for Command-Line Options, Arguments and
  Sub-Commands</italic>, n.d.</xref>) and
  <monospace>configparser</monospace>
  (<xref alt="Configparser - Configuration File Parser, n.d." rid="ref-configparser" ref-type="bibr"><italic>Configparser
  - Configuration File Parser</italic>, n.d.</xref>). However, these
  provide minimal features and scale poorly to more complex, evolving
  projects.</p>
  <p>All too often, the trade-off between power and simplicity results
  in software (particularly research projects) containing cutting-edge
  features barely perceptible behind a limited or even nonexistent user
  interface. Here, a good project configuration framework can bridge the
  gap between developers and users. The user wants to select
  functionality in a concise and intuitive way while still allowing
  fine-grained control when needed. Meanwhile, the developer first and
  foremost wants the configuration system to seamlessly provide the
  necessary parameters without interfering with the broader design and
  implementation of the functionality.</p>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p>Here <monospace>omni-fig</monospace> strikes a favorable balance in
  that it was designed from the ground up to cater specifically to the
  needs of both the <italic>developer</italic> and the
  <italic>user</italic>.</p>
  <p>The primary way the <italic>developer</italic> interacts with
  <monospace>omni-fig</monospace> is by registering any functionality as
  a <monospace>script</monospace> (for functions),
  <monospace>component</monospace> (for classes), or
  <monospace>modifier</monospace> (for mixins), creating config files as
  needed, and then accessing config parameters using the config object
  at runtime. Once registered, the objects can be accessed anywhere in
  the project through the config object, thereby incentivizing the
  developer to register any functionality that can be customized by
  configuration. Meanwhile, since config files can easily be composed,
  the developer is incentivized to separate configuration in a modular
  way. Finally, at runtime, the developer doesn’t have to worry about
  how the config parameters are specified (e.g., as a command line
  argument or in a config file), but can simply access them through the
  config object. This abstraction allows arbitrarily complex objects,
  even including mix-ins added dynamically at runtime (see
  <monospace>modifier</monospace>), to be instantiated
  automatically.</p>
  <p>From the user’s perspective, the modular config files and explicit
  registration of top-level functionality greatly improve the
  transparency of the project. For example, just running
  <monospace>fig -h</monospace> returns a custom help message displaying
  all registered scripts in the project. Then the high-level modularity
  of the config files allows the developer to effortlessly create demos
  by composing existing config files to showcase the key features of the
  project.</p>
  <p>For more information, check out the
  <ext-link ext-link-type="uri" xlink:href="https://omnifig.readthedocs.io/en/latest/">documentation</ext-link>
  which includes an
  <ext-link ext-link-type="uri" xlink:href="https://omnifig.readthedocs.io/en/latest/highlights.html">overview</ext-link>
  of the key features with examples. We are also continuously working on
  new features such as adding integrations and improving error messages.
  In any case, contributions and feedback are always very welcome!</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>This work was supported by the German Federal Ministry of Education
  and Research (BMBF): Tübingen AI Center, FKZ: 01IS18039B, and by the
  Machine Learning Cluster of Excellence, EXC number 2064/1 – Project
  number 390727645. The authors thank the International Max Planck
  Research School for Intelligent Systems (IMPRS-IS) for supporting
  Felix Leeb. The authors would also like to thank Vincent Berenz for
  his feedback and suggestions, and Amanda Leeb for designing the
  omni-fig logo.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-guyonartificial">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Guyon</surname><given-names>Isabelle</given-names></name>
      </person-group>
      <article-title>Artificial intelligence for all</article-title>
    </element-citation>
  </ref>
  <ref id="ref-hydra">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Yadan</surname><given-names>Omry</given-names></name>
      </person-group>
      <article-title>Hydra - a framework for elegantly configuring complex applications</article-title>
      <publisher-name>Github</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <uri>https://github.com/facebookresearch/hydra</uri>
    </element-citation>
  </ref>
  <ref id="ref-ginconfig">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Holtmann-Rice</surname><given-names>Dan</given-names></name>
        <name><surname>Guadarrama</surname><given-names>Sergio</given-names></name>
        <name><surname>Silberman</surname><given-names>Nathan</given-names></name>
      </person-group>
      <article-title>Gin config - provides a lightweight configuration framework for Python</article-title>
      <publisher-name>Github</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <uri>https://github.com/google/gin-config</uri>
    </element-citation>
  </ref>
  <ref id="ref-pydantic">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Colvin</surname><given-names>Samuel</given-names></name>
      </person-group>
      <article-title>Pydantic - data parsing and validation using Python type hints</article-title>
      <publisher-name>Github</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <uri>https://github.com/pydantic/pydantic</uri>
    </element-citation>
  </ref>
  <ref id="ref-omegaconf">
    <element-citation>
      <article-title>OmegaConf - flexible Python configuration system</article-title>
      <publisher-name>Github</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <uri>https://github.com/omry/omegaconf</uri>
    </element-citation>
  </ref>
  <ref id="ref-dynaconf">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Rocha</surname><given-names>Bruno</given-names></name>
      </person-group>
      <article-title>Dynaconf - configuration management for Python</article-title>
      <publisher-name>Github</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <uri>https://github.com/dynaconf/dynaconf</uri>
    </element-citation>
  </ref>
  <ref id="ref-configparser">
    <element-citation>
      <article-title>Configparser - configuration file parser</article-title>
      <uri>https://docs.python.org/3/library/configparser.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-argparse">
    <element-citation>
      <article-title>Argparse - parser for command-line options, arguments and sub-commands</article-title>
      <uri>https://docs.python.org/3/library/argparse.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-arro2022confr">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Arro</surname><given-names>Mattias</given-names></name>
      </person-group>
      <article-title>Confr–a configuration system for machine learning projects</article-title>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-ebert2016devops">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ebert</surname><given-names>Christof</given-names></name>
        <name><surname>Gallardo</surname><given-names>Gorka</given-names></name>
        <name><surname>Hernantes</surname><given-names>Josune</given-names></name>
        <name><surname>Serrano</surname><given-names>Nicolas</given-names></name>
      </person-group>
      <article-title>DevOps</article-title>
      <source>IEEE Software</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>33</volume>
      <issue>3</issue>
      <fpage>94</fpage>
      <lpage>100</lpage>
    </element-citation>
  </ref>
  <ref id="ref-treveil2020introducing">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Treveil</surname><given-names>Mark</given-names></name>
        <name><surname>Omont</surname><given-names>Nicolas</given-names></name>
        <name><surname>Stenac</surname><given-names>Clément</given-names></name>
        <name><surname>Lefevre</surname><given-names>Kenji</given-names></name>
        <name><surname>Phan</surname><given-names>Du</given-names></name>
        <name><surname>Zentici</surname><given-names>Joachim</given-names></name>
        <name><surname>Lavoillotte</surname><given-names>Adrien</given-names></name>
        <name><surname>Miyazaki</surname><given-names>Makoto</given-names></name>
        <name><surname>Heidmann</surname><given-names>Lynn</given-names></name>
      </person-group>
      <source>Introducing MLOps</source>
      <publisher-name>O’Reilly Media</publisher-name>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
  <ref id="ref-pineau2021improving">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pineau</surname><given-names>Joelle</given-names></name>
        <name><surname>Vincent-Lamarre</surname><given-names>Philippe</given-names></name>
        <name><surname>Sinha</surname><given-names>Koustuv</given-names></name>
        <name><surname>Larivière</surname><given-names>Vincent</given-names></name>
        <name><surname>Beygelzimer</surname><given-names>Alina</given-names></name>
        <name><surname>d’Alché-Buc</surname><given-names>Florence</given-names></name>
        <name><surname>Fox</surname><given-names>Emily</given-names></name>
        <name><surname>Larochelle</surname><given-names>Hugo</given-names></name>
      </person-group>
      <article-title>Improving reproducibility in machine learning research: A report from the NeurIPS 2019 reproducibility program</article-title>
      <source>Journal of Machine Learning Research</source>
      <publisher-name>Microtome Publishing</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>22</volume>
    </element-citation>
  </ref>
  <ref id="ref-aho2020demystifying">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Aho</surname><given-names>Timo</given-names></name>
        <name><surname>Sievi-Korte</surname><given-names>Outi</given-names></name>
        <name><surname>Kilamo</surname><given-names>Terhi</given-names></name>
        <name><surname>Yaman</surname><given-names>Sezin</given-names></name>
        <name><surname>Mikkonen</surname><given-names>Tommi</given-names></name>
      </person-group>
      <article-title>Demystifying data science projects: A look on the people and process of data science today</article-title>
      <source>International conference on product-focused software process improvement</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.1007/978-3-030-64148-1_10</pub-id>
      <fpage>153</fpage>
      <lpage>167</lpage>
    </element-citation>
  </ref>
  <ref id="ref-he2021automl">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>He</surname><given-names>Xin</given-names></name>
        <name><surname>Zhao</surname><given-names>Kaiyong</given-names></name>
        <name><surname>Chu</surname><given-names>Xiaowen</given-names></name>
      </person-group>
      <article-title>AutoML: A survey of the state-of-the-art</article-title>
      <source>Knowledge-Based Systems</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>212</volume>
      <pub-id pub-id-type="doi">10.1016/j.knosys.2020.106622</pub-id>
      <fpage>106622</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
