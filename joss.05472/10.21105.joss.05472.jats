<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5472</article-id>
<article-id pub-id-type="doi">10.21105/joss.05472</article-id>
<title-group>
<article-title>QMCTorch: a PyTorch Implementation of Real-Space Quantum
Monte Carlo Simulations of Molecular Systems</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9589-2694</contrib-id>
<name>
<surname>Renaud</surname>
<given-names>Nicolas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Netherlands eScience Center, Science Park 402, 1098 XH
Amsterdam, The Netherlands</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-04-11">
<day>11</day>
<month>4</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>91</issue>
<fpage>5472</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Deep Learning</kwd>
<kwd>Quantum Chemistry</kwd>
<kwd>Monte Carlo</kwd>
<kwd>Molecular Systems</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Quantum Monte-Carlo (QMC) simulations allow to compute the
  electronic structure of quantum systems with high accuracy and can be
  parallelized over large compute resources. QMC relies on the
  variational principle and optimize a wave function ansatz to minimize
  the total energy of the quantum system.
  <monospace>QMCTorch</monospace> expresses this optimization process as
  a machine learning problem where the wave function ansatz is encoded
  in a physically-motivated neural network. The use of
  <monospace>PyTorch</monospace> as a backend to perform the
  optimization, allows leveraging automatic differentiation and GPU
  computing to accelerate the development and deployment of QMC
  simulations. <monospace>QMCTorch</monospace> supports the use of both
  Gaussian and Slater type orbitals via interface to popular quantum
  chemistry packages <monospace>pyscf</monospace> and
  <monospace>ADF</monospace>.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>QMCTorch</monospace> is a Python package using
  <monospace>PyTorch</monospace>
  (<xref alt="Paszke et al., 2019" rid="ref-pytorch" ref-type="bibr">Paszke
  et al., 2019</xref>) as a backend to perform Quantum Monte-Carlo (QMC)
  simulations, namely Variational Monte-Carlo, of molecular systems.
  Many software such as
  <monospace>QMCPack</monospace>(<xref alt="Kim et al., 2018" rid="ref-qmcpack" ref-type="bibr">Kim
  et al., 2018</xref>), <monospace>QMC=Chem</monospace>
  (<xref alt="Scemama et al., 2013" rid="ref-qmcchem" ref-type="bibr">Scemama
  et al., 2013</xref>), <monospace>CHAMP</monospace>
  (<xref alt="C. Filippi, 2019" rid="ref-champ" ref-type="bibr">C.
  Filippi, 2019</xref>) provide high-quality implementation of advanced
  QMC methodologies in low-level languages (C++/Fortran). Python
  implementations of QMC such as <monospace>PAUXY</monospace>
  (<xref alt="Fionn Malone, n.d." rid="ref-pauxy" ref-type="bibr">Fionn
  Malone, n.d.</xref>) and <monospace>PyQMC</monospace>
  (<xref alt="Wheeler et al., 2023" rid="ref-pyqmc" ref-type="bibr">Wheeler
  et al., 2023</xref>) have also been proposed to facilitate the use and
  development of QMC techniques. Large efforts have been made to
  leverage recent development of deep learning techniques for QMC
  simulations with for example the creation of neural-network based
  wave-function ansatz
  (<xref alt="Choo et al., 2020" rid="ref-choo_fermionic_2020" ref-type="bibr">Choo
  et al., 2020</xref>;
  <xref alt="Han et al., 2019" rid="ref-HAN2019108929" ref-type="bibr">Han
  et al., 2019</xref>;
  <xref alt="Hermann et al., 2020" rid="ref-paulinet" ref-type="bibr">Hermann
  et al., 2020</xref>;
  <xref alt="Inui et al., 2021" rid="ref-detfree_nn" ref-type="bibr">Inui
  et al., 2021</xref>;
  <xref alt="Kessler et al., 2021" rid="ref-ANN_QMC" ref-type="bibr">Kessler
  et al., 2021</xref>;
  <xref alt="Lin et al., 2023" rid="ref-Lin_2023" ref-type="bibr">Lin et
  al., 2023</xref>;
  <xref alt="Pfau et al., 2020" rid="ref-ferminet" ref-type="bibr">Pfau
  et al., 2020</xref>;
  <xref alt="Schätzle et al., 2021" rid="ref-fixed_node" ref-type="bibr">Schätzle
  et al., 2021</xref>;
  <xref alt="Yang et al., 2020" rid="ref-ANN_WF" ref-type="bibr">Yang et
  al., 2020</xref>) that have lead to very interesting results.
  <monospace>QMCTorch</monospace> allows to perform QMC simulations
  using physically motivated neural network architectures that closely
  follow the wave function ansatz used by QMC practitioners. Its
  architecture allows to rapidly explore new functional forms of some
  key elements of the wave function ansatz. Users do not need to derive
  analytical expressions for the gradients of the total energy w.r.t.
  the variational parameters, that are simply obtained via automatic
  differentiation. This includes for example the parameters of the
  atomic orbitals that can be variationally optimized and the atomic
  coordinates that allows <monospace>QMCTorch</monospace> to perform
  geometry optimization of molecular structures. In addition, the GPU
  capabilities offered by <monospace>PyTorch</monospace> combined with
  the parallelization over multiple computing nodes obtained via
  <monospace>Horovod</monospace>
  (<xref alt="Sergeev &amp; Balso, 2018" rid="ref-horovod" ref-type="bibr">Sergeev
  &amp; Balso, 2018</xref>), allow to deploy the simulations on large
  heterogeneous computing architectures. In summary,
  <monospace>QMCTorch</monospace> provides QMC practitioners a framework
  to rapidly prototype new ideas and to test them using modern computing
  resources.</p>
</sec>
<sec id="wave-function-ansatz">
  <title>Wave Function Ansatz</title>
  <fig>
    <caption><p>General architecture of the neural network used by
    <monospace>QMCTorch</monospace> to encode the wave function ansatz.
    The neural network computes and assembles the different elements of
    the wave function ansatz and can be used to compute the electronic
    density required for the sampling and the total energy of the system
    required for the wave function
    optimization.<styled-content id="figU003Aarch"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/qmctorch2.png" />
  </fig>
  <p>The neural network used to encode the wave-function ansatz used in
  <monospace>QMCTorch</monospace> is shown in Fig.
  <xref alt="[fig:arch]" rid="figU003Aarch">[fig:arch]</xref>. As common
  in QMC simulations, the wave function is given by the product of a
  Jastrow factor, <inline-formula><alternatives>
  <tex-math><![CDATA[J(r)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>J</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>r</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  that accounts for electronic correlations and a sum of Slater
  determinants, <inline-formula><alternatives>
  <tex-math><![CDATA[D^\updownarrow(r_\updownarrow)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msup><mml:mi>D</mml:mi><mml:mo>↕</mml:mo></mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mo>↕</mml:mo></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  built over the molecular orbitals of the spin up and down electrons:
  <inline-formula><alternatives>
  <tex-math><![CDATA[\Psi(r) = J(r)\sum_n c_n D_n^\uparrow(r_\uparrow)D_n^\downarrow(r_\downarrow)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>Ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>r</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>J</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>r</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:msub><mml:mo>∑</mml:mo><mml:mi>n</mml:mi></mml:msub><mml:msub><mml:mi>c</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:msubsup><mml:mi>D</mml:mi><mml:mi>n</mml:mi><mml:mo>↑</mml:mo></mml:msubsup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mo>↑</mml:mo></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:msubsup><mml:mi>D</mml:mi><mml:mi>n</mml:mi><mml:mo>↓</mml:mo></mml:msubsup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mo>↓</mml:mo></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  <p><bold>Jastrow Factor</bold> The <monospace>Jastrow</monospace>
  layer computes the sum of three components: an electron-electron term
  <inline-formula><alternatives>
  <tex-math><![CDATA[K_{ee}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>;
  an electron-nuclei term <inline-formula><alternatives>
  <tex-math><![CDATA[K_{en}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>;
  and a three body electron-electron-nuclei term
  <inline-formula><alternatives>
  <tex-math><![CDATA[K_{een}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>.
  The sum is then exponentiated to give the Jastrow factor:
  <inline-formula><alternatives>
  <tex-math><![CDATA[J(r_{ee}, r_{en}) = \exp\left( K_{ee}(r_{ee})+K_{en}(r_{en}) + K_{een}(r_{ee},r_{en})\right)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>J</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>exp</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[r_{ee}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[r_{en}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  are the electron-electron and electron-nuclei distances. Several
  well-known Jastrow factor functional forms, as for example the
  electron-electron Pade-Jastrow: <inline-formula><alternatives>
  <tex-math><![CDATA[K(r_{ee}) = \frac{\omega_0 r_{ee}}{1 + \omega r_{ee}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>K</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mi>ω</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mi>ω</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:math></alternatives></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\omega]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ω</mml:mi></mml:math></alternatives></inline-formula>
  is a variational parameter, are already implemented and available for
  use. Users can also define their own functional forms for the
  different kernel functions, <inline-formula><alternatives>
  <tex-math><![CDATA[K]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>K</mml:mi></mml:math></alternatives></inline-formula>,
  and explore their effects on the resulting optimization.</p>
  <p><bold>Backflow Transformation</bold> The backflow transformation
  layer, <monospace>BF</monospace>, creates quasi-particles by mixing
  the electronic positions of the electrons:
  <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{q}_i = \mathbf{r}_i + \sum_{i\neq j} K_{BF}(r_{ij})(\mathbf{r}_i-\mathbf{r}_j)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>𝐪</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>𝐫</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>≠</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mi>F</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>𝐫</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>𝐫</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  (<xref alt="Holzmann &amp; Moroni, 2019" rid="ref-backflow" ref-type="bibr">Holzmann
  &amp; Moroni, 2019</xref>;
  <xref alt="Schmidt et al., 1981" rid="ref-backflow_1981" ref-type="bibr">Schmidt
  et al., 1981</xref>). Well-known transformations such as:
  <inline-formula><alternatives>
  <tex-math><![CDATA[K_{BF} = \frac{\mu}{r_{ij}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mi>F</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mi>μ</mml:mi><mml:msub><mml:mi>r</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mfrac></mml:mrow></mml:math></alternatives></inline-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>μ</mml:mi></mml:math></alternatives></inline-formula>
  is a variational parameter, are already implemented and ready to use.
  Users can also easily specify the kernel of the backflow
  transformation, <inline-formula><alternatives>
  <tex-math><![CDATA[K_{BF}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mi>F</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  to explore its impact on the wave function optimization.</p>
  <p><bold>Atomic Orbitals</bold> The Atomic Orbital layer
  <monospace>AO</monospace> computes the values of the different atomic
  orbitals of the system at all the positions
  <inline-formula><alternatives>
  <tex-math><![CDATA[q_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>q</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>.
  Both Slater type orbitals (STOs) and Gaussian type orbitals (GTOs) are
  supported. The initial parameters of the AOs are extracted from
  popular quantum chemistry codes, <monospace>pyscf</monospace>
  (<xref alt="Sun et al., 2017" rid="ref-pyscf" ref-type="bibr">Sun et
  al., 2017</xref>) and <monospace>ADF</monospace>
  (<xref alt="Velde et al., 2001" rid="ref-adf" ref-type="bibr">Velde et
  al., 2001</xref>). During the optimization, the parameters of the AOs
  (exponents, coefficients) are variational parameters that can be
  optimized to minimize the total energy. Since GTOs can introduce a
  significant amount of noise in the QMC simulations,
  <monospace>QMCTorch</monospace> offers the possibility to fit GTOs to
  single exponent STOs.</p>
  <p><bold>Molecular Orbitals</bold> The Molecular Orbital layer,
  <monospace>MO</monospace>, computes the values of all the MOs at the
  positions of the quasi particles. The MO layer is a simple linear
  transformation defined by
  <inline-formula><tex-math><![CDATA[\textnormal{MO} = \textnormal{AO} \cdot W^T_{SCF}]]></tex-math></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[W^T_{SCF}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msubsup><mml:mi>W</mml:mi><mml:mrow><mml:mi>S</mml:mi><mml:mi>C</mml:mi><mml:mi>F</mml:mi></mml:mrow><mml:mi>T</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula>
  is the matrix of the MOs coefficients on the AOs. The initial values
  of these coefficients are obtained from a Hartree-Fock (HF) or Density
  Functional Theory (DFT) calculation of the system via
  <monospace>pyscf</monospace> or <monospace>ADF</monospace>. These
  coefficients are then variational parameters that can be optimized to
  minimize the total energy of the system.</p>
  <p><bold>Slater Determinants</bold> The Slater determinants layer,
  <monospace>SD</monospace>, extracts the spin up/down matrices of the
  different electronic configurations specified by the user. Users can
  freely define the number of electrons as well as the number and types
  of excitations they want to include in the definition of their wave
  function ansatz. The <monospace>SD</monospace> layer will extract the
  corresponding matrices, multiply their determinants and sum all the
  terms. The <monospace>CI</monospace> coefficients of the sum can be
  freely initialized and optimized to minimize the total energy.</p>
  <p>The Jastrow factor and the sum of Slater determinants are then
  multiplied to yield the final value of the wave function calculated
  for the electronic and atomic positions <inline-formula><alternatives>
  <tex-math><![CDATA[\Psi(R)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>Ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>R</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  with <inline-formula><alternatives>
  <tex-math><![CDATA[R = \{r_e, R_{at}\}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>R</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>r</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false" form="postfix">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.
  Note that the backflow transformation and Jastrow factor are optional
  and can be individually removed from the definition of the wave
  function ansatz.</p>
</sec>
<sec id="sampling-cost-function-optimization">
  <title>Sampling, Cost Function &amp; Optimization</title>
  <p>QMC simulations use samples of the electronic density to
  approximate the total energy of the system. In
  <monospace>QMCTorch</monospace>, Markov-Chain Monte-Carlo (MCMC)
  techniques, namely Metropolis-Hasting and Hamiltonian Monte-Carlo, are
  used to obtained those sample. Each sample,
  <inline-formula><alternatives>
  <tex-math><![CDATA[R_i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></alternatives></inline-formula>,
  contains the positions of all the electrons contained in the system.
  MCMC techniques require the calculation of the density for a given
  positions of the electrons: <inline-formula><alternatives>
  <tex-math><![CDATA[\Pi(R_i) = |\Psi(R_i)|^2]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>Π</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>Ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>
  that can simply obtained by squaring the result of a forward pass of
  the network described above.</p>
  <p>The value of local energy of the system is then computed at each
  sampling point and these values are summed up to compute the total
  energy of the system: <inline-formula><alternatives>
  <tex-math><![CDATA[E = \sum_i \frac{H\Psi(R_i)}{\Psi(R_i)}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>E</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mo>∑</mml:mo><mml:mi>i</mml:mi></mml:msub><mml:mfrac><mml:mrow><mml:mi>H</mml:mi><mml:mi>Ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>Ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mrow></mml:math></alternatives></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[H]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>H</mml:mi></mml:math></alternatives></inline-formula>
  is the Hamiltonian of the molecular system:
  <inline-formula><alternatives>
  <tex-math><![CDATA[H = -\frac{1}{2}\sum_i \Delta_i + V_{ee} + V_{en}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>H</mml:mi><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:mfrac><mml:msub><mml:mo>∑</mml:mo><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>Δ</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>,
  with <inline-formula><alternatives>
  <tex-math><![CDATA[\Delta_i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>Δ</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  the Laplacian w.r.t the i-th electron, <inline-formula><alternatives>
  <tex-math><![CDATA[V_{ee}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>e</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  the coulomb potential between the electrons and
  <inline-formula><alternatives>
  <tex-math><![CDATA[V_{en}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  the electron-nuclei potential. In <monospace>QMCTorch</monospace>, the
  calculation of the Laplacian of the Slater determinants can be
  performed using automatic differentiation but analytical expressions
  have also been implemented as they are computationally more robust and
  less expensive
  (<xref alt="Claudia Filippi et al., 2016" rid="ref-jacobi_trace" ref-type="bibr">Claudia
  Filippi et al., 2016</xref>). The gradients of the total energy w.r.t
  the variational parameters of the wave function,
  i.e. <inline-formula><alternatives>
  <tex-math><![CDATA[\frac{\partial E}{\partial \theta_i}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:mi>∂</mml:mi><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>∂</mml:mi><mml:msub><mml:mi>θ</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>
  are simply obtained via automatic differentiation. Thanks to this
  automatic differentiation, users can define new kernels for the
  backflow transformation and Jastrow factor without having to derive
  analytical expressions of the energy gradients.</p>
  <p>Any optimizer included in <monospace>PyTorch</monospace> (or
  compatible with it) can then used to optimize the wave function. This
  gives users access to a wide range of optimization techniques that
  they can freely explore for their own use cases. Users can also decide
  to freeze certain variational parameters or defined different learning
  rates for different layers. Note that the positions of atoms are also
  variational parameters, and therefore one can perform geometry
  optimization using <monospace>QMCTorch</monospace>. At the end of the
  optimization, all the information relative to the simulations are
  dumped in a dedicated HDF5 file to enhance reproducibility of the
  simulations.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <code language="python">from torch import optim
from qmctorch.scf import Molecule
from qmctorch.wavefunction import SlaterJastrow
from qmctorch.solver import Solver
from qmctorch.sampler import Metropolis

# define the molecule
mol = Molecule(atom='H 0 0 -0.69; H 0 0 0.69', calculator='pyscf', basis='sto-3g')

# define the wave function ansatz
wf = SlaterJastrow(mol, configs='single_double(2,2)').gto2sto()

# define a Metroplos Hasting Sampler
sampler = Metropolis(nwalkers=5000, nstep=200, nelec=wf.nelec, init=mol.domain('atomic'))

# define the optimizer
opt = optim.Adam(wf.parmaters(), lr=1E-3)

# define the solver
solver = Solver(wf=wf, sampler=sampler, optimizer=opt)

# optimize the wave function
obs = solver.run(50)</code>
  <fig>
    <caption><p>Result of the optimization of the wave function of LiH
    and NH3 using atomic orbitals provided by
    <monospace>pyscf</monospace>, <monospace>ADF</monospace> and also a
    STO fit of the <monospace>pyscf</monospace> atomic orbitals. The
    vertical axis shows the difference between the variational energy
    and the true groud state energy. The horizontal dashed line indicate
    the Hartree-Fock energy.
    <styled-content id="figU003Aresults"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/qmctorch_results.png" />
  </fig>
  <p>The snippet of code above shows a typical example of
  <monospace>QMCTorch</monospace> script. A
  <monospace>Molecule</monospace> object is first created by specifying
  the atomic positions and the calculator required to run the HF or DFT
  calculations (here <monospace>pyscf</monospace> using a
  <monospace>sto-3g</monospace> basis set). This molecule is then used
  to create a <monospace>SlaterJastrow</monospace> wave function ansatz.
  Other options, such as the required Jastrow kernel, active space, and
  the use of GPUs can also be specified here. A sampler and optimizer
  are then defined that are then used with the wave function to
  instantiate the solver. This solver can then be used to optimize the
  variational parameters, that is done here through 50 epochs.</p>
  <p>Fig.
  <xref alt="[fig:results]" rid="figU003Aresults">[fig:results]</xref>
  shows typical optimization runs for two different molecular
  structures, LiH and NH3 using atomic orbitals provided by
  <monospace>pyscf</monospace>, <monospace>ADF</monospace> and also a
  STO fit of the <monospace>pyscf</monospace> atomic orbitals. As seen
  in this figure, the variance of the local energy values obtained with
  the GTOs provided by <monospace>pyscf</monospace> is a limiting factor
  for the optimization. A simple STO fit of these atomic orbitals leads
  to variance comparable to those obtained with the STOs of
  <monospace>ADF</monospace>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge contributions from Felipe Zapata, Matthijs de Witt
  and guidance from Claudia Filippi. The development of the code was
  done during the project “A Light in the Dark: quantum Monte-Carlo
  meets energy conversion” from the Joint CSER and eScience program for
  Energy Research (JCER2017) funded by the Nederlandse Organisatie voor
  Wetenschappelijk Onderzoek (NWO) and the Netherlands eScience Center,
  project number CSER.JCER.022</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-pytorch">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>Gross</surname><given-names>Sam</given-names></name>
        <name><surname>Massa</surname><given-names>Francisco</given-names></name>
        <name><surname>Lerer</surname><given-names>Adam</given-names></name>
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Chanan</surname><given-names>Gregory</given-names></name>
        <name><surname>Killeen</surname><given-names>Trevor</given-names></name>
        <name><surname>Lin</surname><given-names>Zeming</given-names></name>
        <name><surname>Gimelshein</surname><given-names>Natalia</given-names></name>
        <name><surname>Antiga</surname><given-names>Luca</given-names></name>
        <name><surname>Desmaison</surname><given-names>Alban</given-names></name>
        <name><surname>Köpf</surname><given-names>Andreas</given-names></name>
        <name><surname>Yang</surname><given-names>Edward</given-names></name>
        <name><surname>DeVito</surname><given-names>Zach</given-names></name>
        <name><surname>Raison</surname><given-names>Martin</given-names></name>
        <name><surname>Tejani</surname><given-names>Alykhan</given-names></name>
        <name><surname>Chilamkurthy</surname><given-names>Sasank</given-names></name>
        <name><surname>Steiner</surname><given-names>Benoit</given-names></name>
        <name><surname>Fang</surname><given-names>Lu</given-names></name>
        <name><surname>Bai</surname><given-names>Junjie</given-names></name>
        <name><surname>Chintala</surname><given-names>Soumith</given-names></name>
      </person-group>
      <article-title>PyTorch: An imperative style, high-performance deep learning library</article-title>
      <year iso-8601-date="2019">2019</year>
      <uri>https://arxiv.org/abs/1912.01703</uri>
    </element-citation>
  </ref>
  <ref id="ref-horovod">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Sergeev</surname><given-names>Alexander</given-names></name>
        <name><surname>Balso</surname><given-names>Mike Del</given-names></name>
      </person-group>
      <article-title>Horovod: Fast and easy distributed deep learning in TensorFlow</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://arxiv.org/abs/1802.05799</uri>
    </element-citation>
  </ref>
  <ref id="ref-backflow">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Holzmann</surname><given-names>Markus</given-names></name>
        <name><surname>Moroni</surname><given-names>Saverio</given-names></name>
      </person-group>
      <article-title>Orbital-dependent backflow wave functions for real-space quantum monte carlo</article-title>
      <source>Physical Review B</source>
      <publisher-name>American Physical Society (APS)</publisher-name>
      <year iso-8601-date="2019-02">2019</year><month>02</month>
      <volume>99</volume>
      <issue>8</issue>
      <uri>https://doi.org/10.1103%2Fphysrevb.99.085121</uri>
      <pub-id pub-id-type="doi">10.1103/physrevb.99.085121</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-qmcpack">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kim</surname><given-names>Jeongnim</given-names></name>
        <name><surname>Baczewski</surname><given-names>Andrew D</given-names></name>
        <name><surname>Beaudet</surname><given-names>Todd D</given-names></name>
        <name><surname>Benali</surname><given-names>Anouar</given-names></name>
        <name><surname>Bennett</surname><given-names>M Chandler</given-names></name>
        <name><surname>Berrill</surname><given-names>Mark A</given-names></name>
        <name><surname>Blunt</surname><given-names>Nick S</given-names></name>
        <name><surname>Borda</surname><given-names>Edgar Josué Landinez</given-names></name>
        <name><surname>Casula</surname><given-names>Michele</given-names></name>
        <name><surname>Ceperley</surname><given-names>David M</given-names></name>
        <name><surname>Chiesa</surname><given-names>Simone</given-names></name>
        <name><surname>Clark</surname><given-names>Bryan K</given-names></name>
        <name><surname>Clay</surname><given-names>Raymond C</given-names></name>
        <name><surname>Delaney</surname><given-names>Kris T</given-names></name>
        <name><surname>Dewing</surname><given-names>Mark</given-names></name>
        <name><surname>Esler</surname><given-names>Kenneth P</given-names></name>
        <name><surname>Hao</surname><given-names>Hongxia</given-names></name>
        <name><surname>Heinonen</surname><given-names>Olle</given-names></name>
        <name><surname>Kent</surname><given-names>Paul R C</given-names></name>
        <name><surname>Krogel</surname><given-names>Jaron T</given-names></name>
        <name><surname>Kylänpää</surname><given-names>Ilkka</given-names></name>
        <name><surname>Li</surname><given-names>Ying Wai</given-names></name>
        <name><surname>Lopez</surname><given-names>M Graham</given-names></name>
        <name><surname>Luo</surname><given-names>Ye</given-names></name>
        <name><surname>Malone</surname><given-names>Fionn D</given-names></name>
        <name><surname>Martin</surname><given-names>Richard M</given-names></name>
        <name><surname>Mathuriya</surname><given-names>Amrita</given-names></name>
        <name><surname>McMinis</surname><given-names>Jeremy</given-names></name>
        <name><surname>Melton</surname><given-names>Cody A</given-names></name>
        <name><surname>Mitas</surname><given-names>Lubos</given-names></name>
        <name><surname>Morales</surname><given-names>Miguel A</given-names></name>
        <name><surname>Neuscamman</surname><given-names>Eric</given-names></name>
        <name><surname>Parker</surname><given-names>William D</given-names></name>
        <name><surname>Flores</surname><given-names>Sergio D Pineda</given-names></name>
        <name><surname>Romero</surname><given-names>Nichols A</given-names></name>
        <name><surname>Rubenstein</surname><given-names>Brenda M</given-names></name>
        <name><surname>Shea</surname><given-names>Jacqueline A R</given-names></name>
        <name><surname>Shin</surname><given-names>Hyeondeok</given-names></name>
        <name><surname>Shulenburger</surname><given-names>Luke</given-names></name>
        <name><surname>Tillack</surname><given-names>Andreas F</given-names></name>
        <name><surname>Townsend</surname><given-names>Joshua P</given-names></name>
        <name><surname>Tubman</surname><given-names>Norm M</given-names></name>
        <name><surname>Goetz</surname><given-names>Brett Van Der</given-names></name>
        <name><surname>Vincent</surname><given-names>Jordan E</given-names></name>
        <name><surname>Yang</surname><given-names>D ChangMo</given-names></name>
        <name><surname>Yang</surname><given-names>Yubo</given-names></name>
        <name><surname>Zhang</surname><given-names>Shuai</given-names></name>
        <name><surname>Zhao</surname><given-names>Luning</given-names></name>
      </person-group>
      <article-title>QMCPACK: An open source ab initio quantum monte carlo package for the electronic structure of atoms, molecules and solids</article-title>
      <source>Journal of Physics: Condensed Matter</source>
      <publisher-name>IOP Publishing</publisher-name>
      <year iso-8601-date="2018-04">2018</year><month>04</month>
      <volume>30</volume>
      <issue>19</issue>
      <uri>https://dx.doi.org/10.1088/1361-648X/aab9c3</uri>
      <pub-id pub-id-type="doi">10.1088/1361-648X/aab9c3</pub-id>
      <fpage>195901</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-qmcchem">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Scemama</surname><given-names>Anthony</given-names></name>
        <name><surname>Caffarel</surname><given-names>Michel</given-names></name>
        <name><surname>Oseret</surname><given-names>Emmanuel</given-names></name>
        <name><surname>Jalby</surname><given-names>William</given-names></name>
      </person-group>
      <article-title>QMC=chem: A quantum monte carlo program for large-scale simulations in chemistry at the petascale level and beyond</article-title>
      <source>High performance computing for computational science - VECPAR 2012</source>
      <person-group person-group-type="editor">
        <name><surname>Dayde</surname><given-names>Michel</given-names></name>
        <name><surname>Marques</surname><given-names>Osni</given-names></name>
        <name><surname>Nakajima</surname><given-names>Kengo</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2013">2013</year>
      <isbn>978-3-642-38718-0</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-642-38718-0_14</pub-id>
      <fpage>118</fpage>
      <lpage>127</lpage>
    </element-citation>
  </ref>
  <ref id="ref-champ">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Filippi</surname><given-names>C.</given-names></name>
      </person-group>
      <article-title>CHAMP</article-title>
      <year iso-8601-date="2019">2019</year>
      <uri>https://github.com/filippi-claudia/champ</uri>
    </element-citation>
  </ref>
  <ref id="ref-pauxy">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Fionn Malone</surname><given-names>Jarvist Moore Frost</given-names><suffix>Joohno Lee</suffix></name>
      </person-group>
      <article-title>PAUXY</article-title>
      <uri>https://github.com/pauxy-qmc/pauxy</uri>
    </element-citation>
  </ref>
  <ref id="ref-pyqmc">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wheeler</surname><given-names>William A.</given-names></name>
        <name><surname>Pathak</surname><given-names>Shivesh</given-names></name>
        <name><surname>Kleiner</surname><given-names>Kevin G.</given-names></name>
        <name><surname>Yuan</surname><given-names>Shunyue</given-names></name>
        <name><surname>Rodrigues</surname><given-names>Joã o N. B.</given-names></name>
        <name><surname>Lorsung</surname><given-names>Cooper</given-names></name>
        <name><surname>Krongchon</surname><given-names>Kittithat</given-names></name>
        <name><surname>Chang</surname><given-names>Yueqing</given-names></name>
        <name><surname>Zhou</surname><given-names>Yiqing</given-names></name>
        <name><surname>Busemeyer</surname><given-names>Brian</given-names></name>
        <name><surname>Williams</surname><given-names>Kiel T.</given-names></name>
        <name><surname>Muñoz</surname><given-names>Alexander</given-names></name>
        <name><surname>Chow</surname><given-names>Chun Yu</given-names></name>
        <name><surname>Wagner</surname><given-names>Lucas K.</given-names></name>
      </person-group>
      <article-title>PyQMC: An all-python real-space quantum monte carlo module in PySCF</article-title>
      <source>The Journal of Chemical Physics</source>
      <publisher-name>AIP Publishing</publisher-name>
      <year iso-8601-date="2023-03">2023</year><month>03</month>
      <volume>158</volume>
      <issue>11</issue>
      <uri>https://doi.org/10.1063%2F5.0139024</uri>
      <pub-id pub-id-type="doi">10.1063/5.0139024</pub-id>
      <fpage>114801</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ferminet">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pfau</surname><given-names>D.</given-names></name>
        <name><surname>Spencer</surname><given-names>J. S.</given-names></name>
        <name><surname>G. Matthews</surname><given-names>A. G. de</given-names></name>
        <name><surname>Foulkes</surname><given-names>W. M. C.</given-names></name>
      </person-group>
      <article-title>Ab-initio solution of the many-electron schrödinger equation with deep neural networks</article-title>
      <source>Phys. Rev. Research</source>
      <year iso-8601-date="2020">2020</year>
      <volume>2</volume>
      <uri>https://link.aps.org/doi/10.1103/PhysRevResearch.2.033429</uri>
      <pub-id pub-id-type="doi">10.1103/PhysRevResearch.2.033429</pub-id>
      <fpage>033429</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-paulinet">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hermann</surname><given-names>Jan</given-names></name>
        <name><surname>Schätzle</surname><given-names>Zeno</given-names></name>
        <name><surname>Noé</surname><given-names>Frank</given-names></name>
      </person-group>
      <article-title>Deep-neural-network solution of the electronic schrödinger equation</article-title>
      <source>Nature Chemistry</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>12</volume>
      <issue>10</issue>
      <uri>https://doi.org/10.1038%2Fs41557-020-0544-y</uri>
      <pub-id pub-id-type="doi">10.1038/s41557-020-0544-y</pub-id>
      <fpage>891</fpage>
      <lpage>897</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pyscf">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Sun</surname><given-names>Qiming</given-names></name>
        <name><surname>Berkelbach</surname><given-names>Timothy C.</given-names></name>
        <name><surname>Blunt</surname><given-names>Nick S.</given-names></name>
        <name><surname>Booth</surname><given-names>George H.</given-names></name>
        <name><surname>Guo</surname><given-names>Sheng</given-names></name>
        <name><surname>Li</surname><given-names>Zhendong</given-names></name>
        <name><surname>Liu</surname><given-names>Junzi</given-names></name>
        <name><surname>McClain</surname><given-names>James</given-names></name>
        <name><surname>Sayfutyarova</surname><given-names>Elvira R.</given-names></name>
        <name><surname>Sharma</surname><given-names>Sandeep</given-names></name>
        <name><surname>Wouters</surname><given-names>Sebastian</given-names></name>
        <name><surname>Chan</surname><given-names>Garnet Kin-Lic</given-names></name>
      </person-group>
      <article-title>The python-based simulations of chemistry framework (PySCF)</article-title>
      <year iso-8601-date="2017">2017</year>
      <uri>https://arxiv.org/abs/1701.08223</uri>
    </element-citation>
  </ref>
  <ref id="ref-adf">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Velde</surname><given-names>G. te</given-names></name>
        <name><surname>Bickelhaupt</surname><given-names>F. M.</given-names></name>
        <name><surname>Baerends</surname><given-names>E. J.</given-names></name>
        <name><surname>Fonseca Guerra</surname><given-names>C.</given-names></name>
        <name><surname>Gisbergen</surname><given-names>S. J. A. van</given-names></name>
        <name><surname>Snijders</surname><given-names>J. G.</given-names></name>
        <name><surname>Ziegler</surname><given-names>T.</given-names></name>
      </person-group>
      <article-title>Chemistry with ADF</article-title>
      <source>J. Comput. Chem.</source>
      <publisher-name>John Wiley &amp; Sons, Inc.</publisher-name>
      <year iso-8601-date="2001">2001</year>
      <volume>22</volume>
      <issue>9</issue>
      <issn>1096-987X</issn>
      <uri>http://dx.doi.org/10.1002/jcc.1056</uri>
      <pub-id pub-id-type="doi">10.1002/jcc.1056</pub-id>
      <fpage>931</fpage>
      <lpage>967</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ANN_WF">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yang</surname><given-names>Peng-Jian</given-names></name>
        <name><surname>Sugiyama</surname><given-names>Mahito</given-names></name>
        <name><surname>Tsuda</surname><given-names>Koji</given-names></name>
        <name><surname>Yanai</surname><given-names>Takeshi</given-names></name>
      </person-group>
      <article-title>Artificial neural networks applied as molecular wave function solvers</article-title>
      <source>Journal of Chemical Theory and Computation</source>
      <year iso-8601-date="2020">2020</year>
      <volume>16</volume>
      <issue>6</issue>
      <uri> https://doi.org/10.1021/acs.jctc.9b01132</uri>
      <pub-id pub-id-type="doi">10.1021/acs.jctc.9b01132</pub-id>
      <fpage>3513</fpage>
      <lpage>3529</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Lin_2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lin</surname><given-names>Jeffmin</given-names></name>
        <name><surname>Goldshlager</surname><given-names>Gil</given-names></name>
        <name><surname>Lin</surname><given-names>Lin</given-names></name>
      </person-group>
      <article-title>Explicitly antisymmetrized neural network layers for variational monte carlo simulation</article-title>
      <source>Journal of Computational Physics</source>
      <publisher-name>Elsevier BV</publisher-name>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <volume>474</volume>
      <uri>https://doi.org/10.1016%2Fj.jcp.2022.111765</uri>
      <pub-id pub-id-type="doi">10.1016/j.jcp.2022.111765</pub-id>
      <fpage>111765</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-fixed_node">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schätzle</surname><given-names>Z.</given-names></name>
        <name><surname>Hermann</surname><given-names>J.</given-names></name>
        <name><surname>Noé</surname><given-names>F.</given-names></name>
      </person-group>
      <article-title>Convergence to the fixed-node limit in deep variational Monte Carlo</article-title>
      <source>The Journal of Chemical Physics</source>
      <year iso-8601-date="2021-03">2021</year><month>03</month>
      <volume>154</volume>
      <issue>12</issue>
      <issn>0021-9606</issn>
      <uri>https://doi.org/10.1063/5.0032836</uri>
      <pub-id pub-id-type="doi">10.1063/5.0032836</pub-id>
      <fpage>124108</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-detfree_nn">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Inui</surname><given-names>Koji</given-names></name>
        <name><surname>Kato</surname><given-names>Yasuyuki</given-names></name>
        <name><surname>Motome</surname><given-names>Yukitoshi</given-names></name>
      </person-group>
      <article-title>Determinant-free fermionic wave function using feed-forward neural networks</article-title>
      <source>Phys. Rev. Res.</source>
      <publisher-name>American Physical Society</publisher-name>
      <year iso-8601-date="2021-11">2021</year><month>11</month>
      <volume>3</volume>
      <uri>https://link.aps.org/doi/10.1103/PhysRevResearch.3.043126</uri>
      <pub-id pub-id-type="doi">10.1103/PhysRevResearch.3.043126</pub-id>
      <fpage>043126</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ANN_QMC">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kessler</surname><given-names>Jan</given-names></name>
        <name><surname>Calcavecchia</surname><given-names>Francesco</given-names></name>
        <name><surname>Kühne</surname><given-names>Thomas D.</given-names></name>
      </person-group>
      <article-title>Artificial neural networks as trial wave functions for quantum monte carlo</article-title>
      <source>Advanced Theory and Simulations</source>
      <year iso-8601-date="2021">2021</year>
      <volume>4</volume>
      <issue>4</issue>
      <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/adts.202000269</uri>
      <pub-id pub-id-type="doi">10.1002/adts.202000269</pub-id>
      <fpage>2000269</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-HAN2019108929">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Han</surname><given-names>Jiequn</given-names></name>
        <name><surname>Zhang</surname><given-names>Linfeng</given-names></name>
        <name><surname>E</surname><given-names>Weinan</given-names></name>
      </person-group>
      <article-title>Solving many-electron schrödinger equation using deep neural networks</article-title>
      <source>Journal of Computational Physics</source>
      <year iso-8601-date="2019">2019</year>
      <volume>399</volume>
      <issn>0021-9991</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0021999119306345</uri>
      <pub-id pub-id-type="doi">10.1016/j.jcp.2019.108929</pub-id>
      <fpage>108929</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-choo_fermionic_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Choo</surname><given-names>Kenny</given-names></name>
        <name><surname>Mezzacapo</surname><given-names>Antonio</given-names></name>
        <name><surname>Carleo</surname><given-names>Giuseppe</given-names></name>
      </person-group>
      <article-title>Fermionic neural-network states for ab-initio electronic structure</article-title>
      <source>Nature Communications</source>
      <year iso-8601-date="2020-05">2020</year><month>05</month>
      <volume>11</volume>
      <issue>1</issue>
      <issn>2041-1723</issn>
      <uri>https://doi.org/10.1038/s41467-020-15724-9</uri>
      <pub-id pub-id-type="doi">10.1038/s41467-020-15724-9</pub-id>
      <fpage>2368</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-backflow_1981">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schmidt</surname><given-names>K. E.</given-names></name>
        <name><surname>Lee</surname><given-names>Michael A.</given-names></name>
        <name><surname>Kalos</surname><given-names>M. H.</given-names></name>
        <name><surname>Chester</surname><given-names>G. V.</given-names></name>
      </person-group>
      <article-title>Structure of the ground state of a fermion fluid</article-title>
      <source>Phys. Rev. Lett.</source>
      <publisher-name>American Physical Society</publisher-name>
      <year iso-8601-date="1981-09">1981</year><month>09</month>
      <volume>47</volume>
      <uri>https://link.aps.org/doi/10.1103/PhysRevLett.47.807</uri>
      <pub-id pub-id-type="doi">10.1103/PhysRevLett.47.807</pub-id>
      <fpage>807</fpage>
      <lpage>810</lpage>
    </element-citation>
  </ref>
  <ref id="ref-jacobi_trace">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Filippi</surname><given-names>Claudia</given-names></name>
        <name><surname>Assaraf</surname><given-names>Roland</given-names></name>
        <name><surname>Moroni</surname><given-names>Saverio</given-names></name>
      </person-group>
      <article-title>Simple formalism for efficient derivatives and multi-determinant expansions in quantum monte carlo</article-title>
      <source>The Journal of Chemical Physics</source>
      <year iso-8601-date="2016">2016</year>
      <volume>144</volume>
      <issue>19</issue>
      <uri> 
              https://doi.org/10.1063/1.4948778
          
      </uri>
      <pub-id pub-id-type="doi">10.1063/1.4948778</pub-id>
      <fpage>194105</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
