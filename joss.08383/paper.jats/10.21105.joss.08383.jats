<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8383</article-id>
<article-id pub-id-type="doi">10.21105/joss.08383</article-id>
<title-group>
<article-title>GraphCalc: A Python Package for Computing Graph
Invariants in Automated Conjecturing Systems</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0471-8744</contrib-id>
<name>
<surname>Davila</surname>
<given-names>Randy</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>RelationalAI, United States</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Computational Applied Mathematics &amp;
Operations Research,Rice University, United States</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-08-20">
<day>20</day>
<month>8</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>112</issue>
<fpage>8383</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>graph theory</kwd>
<kwd>graph invariants</kwd>
<kwd>optimization</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>GraphCalc</monospace> is a Python library for computing
  an extensive collection of graph-theoretic invariants, designed to
  support research in combinatorics, network science, and automated
  reasoning. It implements more than 100 exact functions, covering
  classical measures (e.g., independence number, chromatic number,
  spectral radius) and many lesser-known invariants central to extremal
  graph theory and domination theory.</p>
  <p>Originally developed as the invariant engine for the automated
  conjecturing system <italic>TxGraffiti</italic>
  (<xref alt="Davila, 2025a" rid="ref-TxGraffiti" ref-type="bibr">Davila,
  2025a</xref>), <monospace>GraphCalc</monospace> has grown into a
  general-purpose research tool for constructing large, structured
  datasets of graph invariants. These datasets—often organized into
  tabular <italic>knowledge tables</italic>—enable symbolic pattern
  mining, hypothesis generation, and automated conjecture discovery. For
  example:</p>
  <code language="python">&gt;&gt;&gt; import graphcalc as gc
&gt;&gt;&gt; graphs = [gc.cube_graph(), gc.octahedron_graph()]
&gt;&gt;&gt; functions = [&quot;order&quot;, &quot;size&quot;, &quot;spectral_radius&quot;, &quot;independence_number&quot;]
&gt;&gt;&gt; gc.compute_knowledge_table(functions, graphs)
   order  size  spectral_radius  independence_number
0      8    12              3.0                    4
1      6    12              4.0                    2</code>
  <p>While general-purpose libraries like
  <monospace>NetworkX</monospace>
  (<xref alt="Hagberg et al., 2008" rid="ref-osti_960616" ref-type="bibr">Hagberg
  et al., 2008</xref>), <monospace>igraph</monospace>
  (<xref alt="Csárdi &amp; Nepusz, 2006" rid="ref-csardi2006igraph" ref-type="bibr">Csárdi
  &amp; Nepusz, 2006</xref>), and <monospace>SageMath</monospace>
  (<xref alt="The Sage Developers, 2020" rid="ref-sagemath" ref-type="bibr">The
  Sage Developers, 2020</xref>) provide broad graph functionality, they
  rarely support the wide range of nonstandard invariants used in
  combinatorics. GraphCalc fills this gap by offering exact
  implementations of many parameters unavailable elsewhere. All
  functions are implemented exactly using integer programming,
  enumeration, or symbolic methods. For NP-hard invariants (e.g.,
  independence number, chromatic number, domination variants),
  <monospace>GraphCalc</monospace> relies on mixed-integer programming
  models via <monospace>PuLP</monospace>
  (<xref alt="Mitchell et al., 2011" rid="ref-mitchell2011pulp" ref-type="bibr">Mitchell
  et al., 2011</xref>) and solvers such as
  <monospace>COIN-OR CBC</monospace>, ensuring exactness for small- to
  medium-sized graphs where symbolic relationships are most visible.</p>
  <p>By enabling high-resolution invariant datasets,
  <monospace>GraphCalc</monospace> complements automated conjecturing
  systems like <italic>TxGraffiti</italic> and the
  <italic>Optimist</italic>
  (<xref alt="Davila, 2025b" rid="ref-optimist" ref-type="bibr">Davila,
  2025b</xref>). These systems analyze numerical patterns in
  <monospace>GraphCalc</monospace>’s output to generate new conjectures,
  many of which have already been proven as theorems.
  <monospace>GraphCalc</monospace> serves as both a comprehensive
  toolkit for graph theorists and a foundational component for symbolic
  discovery in modern mathematics.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p><monospace>GraphCalc</monospace> offers a robust suite of tools for
  computing, analyzing, and visualizing graph-theoretic invariants. It
  combines an intuitive Python interface with solver-enhanced backends
  and supports both <monospace>NetworkX</monospace> graph objects and
  internal <monospace>SimpleGraph</monospace> and related types—making
  it versatile for everyday use, educational settings, and advanced
  mathematical experimentation. Key features include:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Extensive invariant coverage:</bold> Compute a broad
      range of exact graph invariants, including classical quantities
      such as chromatic, clique, vertex cover, and independence numbers,
      as well as structural and degree-based invariants like residue,
      Slater number, and annihilation number.</p>
    </list-item>
    <list-item>
      <p><bold>Domination and forcing variants:</bold> Includes over a
      dozen domination-type parameters (e.g., total, Roman, double
      Roman, restrained, outer-connected) and propagation-based
      parameters such as zero forcing, positive semidefinite zero
      forcing, and k-power domination. All are computed exactly using
      integer programming or exhaustive search.</p>
    </list-item>
    <list-item>
      <p><bold>Spectral and structural analysis:</bold> Supports
      spectral computations, including adjacency and Laplacian
      eigenvalues, spectral radius, and algebraic connectivity, along
      with Boolean predicates for structural properties such as
      planarity, claw-freeness, triangle-freeness, and subcubicity.</p>
    </list-item>
    <list-item>
      <p><bold>Graph and polytope generators:</bold> Provides built-in
      generators for classical graphs and convex 3D polytopes (e.g.,
      tetrahedra, cubes, fullerenes)—useful for visualization, testing,
      and conjecture exploration.</p>
    </list-item>
    <list-item>
      <p><bold>Batch evaluation and knowledge tables:</bold> Enables the
      evaluation of multiple invariants across entire graph collections
      using <monospace>compute_knowledge_table</monospace> (see previous
      section) or <monospace>all_properties</monospace>.</p>
    </list-item>
    <list-item>
      <p><bold>Visualization and user experience:</bold> Offers built-in
      rendering for graphs and polytopes, fully type-annotated
      functions, extensive test coverage, and online documentation
      designed to support both research and instructional use.</p>
    </list-item>
  </list>
</sec>
<sec id="example-usage">
  <title>Example Usage</title>
  <p>The <monospace>GraphCalc</monospace> package supports both
  single-graph queries and batch evaluation over collections of graphs
  and polytopes (see the previous section). Below is a basic example
  using the <italic>Petersen graph</italic>:</p>
  <code language="python">&gt;&gt;&gt; import graphcalc as gc
&gt;&gt;&gt; # Create the Petersen graph
&gt;&gt;&gt; G = gc.petersen_graph()
&gt;&gt;&gt; # Compute selected invariants
&gt;&gt;&gt; gc.independence_number(G)
4
&gt;&gt;&gt; gc.residue(G)
3
&gt;&gt;&gt; gc.claw_free(G)
False</code>
</sec>
<sec id="relevance-to-automated-discovery">
  <title>Relevance to Automated Discovery</title>
  <p>Automated mathematical discovery has a rich history, dating back to
  symbolic logic programs like Wang’s <italic>Program II</italic> in the
  1950s
  (<xref alt="Wang, 1960" rid="ref-wang1960mechanical" ref-type="bibr">Wang,
  1960</xref>), and advancing significantly with systems such as
  Fajtlowicz’s <italic>Graffiti</italic>
  (<xref alt="Fajtlowicz, 1988" rid="ref-Fajtlowicz1988" ref-type="bibr">Fajtlowicz,
  1988</xref>) and DeLaViña’s <italic>Graffiti.pc</italic>
  (<xref alt="DeLaViña, 2005" rid="ref-DeLaVina2005" ref-type="bibr">DeLaViña,
  2005</xref>) in the 1980s and 1990s. These pioneering systems
  demonstrated that computers could do more than verify known
  mathematics—they could help <italic>generate</italic> it, particularly
  by formulating conjectures grounded in patterns among graph
  invariants. Notably, <italic>Graffiti</italic> included its own
  embedded module for computing such invariants, a design decision that
  enabled the system to generate over 60 published conjectures, many
  appearing in top mathematical journals.</p>
  <p><monospace>GraphCalc</monospace> continues this lineage. Originally
  developed as the internal invariant engine for the
  <italic>TxGraffiti</italic> system, it served for years as a private
  computational backend before being released as an open-source Python
  package. This decision was motivated by the growing interest in
  AI-assisted mathematical reasoning and the desire to make a
  high-quality, extensible invariant engine available for others to
  experiment with.</p>
  <p>Today, <monospace>GraphCalc</monospace> powers the latest version
  of <italic>TxGraffiti</italic> and its agentic counterpart the
  <italic>Optimist</italic>
  (<xref alt="Brimkov et al., 2024" rid="ref-TxGraffiti2023" ref-type="bibr">Brimkov
  et al., 2024</xref>;
  <xref alt="Davila, 2025b" rid="ref-optimist" ref-type="bibr">Davila,
  2025b</xref>), which analyze large families of graphs and polytopes to
  discover symbolic conjectures. While not optimized for massive-scale
  network analysis, <monospace>GraphCalc</monospace> excels in the
  domain where most mathematical conjectures are formed: <italic>small
  to medium-sized graphs</italic> that are easily visualized and
  reasoned about. This design philosophy echoes the foundational
  principles of Fajtlowicz’s original system, which emphasized working
  with “small but interesting” graphs as fertile ground for discovery.
  By transforming these structures into structured numerical profiles,
  <monospace>GraphCalc</monospace> enables automated systems to detect
  symbolic patterns and formulate conjectures that are both novel and
  mathematically meaningful.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors thank David Amos and Boris Brimkov for their
  foundational support during the development of
  <monospace>GraphCalc</monospace> and its predecessors. We also thank
  the referees for their valuable feedback, which greatly improved the
  clarity, functionality, and overall quality of both the library and
  this paper.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-optimist">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Davila</surname><given-names>Randy</given-names></name>
      </person-group>
      <article-title>The optimist: Towards fully automated graph theory research</article-title>
      <year iso-8601-date="2025">2025</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2411.09158</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-TxGraffiti2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brimkov</surname><given-names>Boris</given-names></name>
        <name><surname>Davila</surname><given-names>Randy</given-names></name>
        <name><surname>Schuerger</surname><given-names>Houston</given-names></name>
        <name><surname>Young</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>On a conjecture of TxGraffiti: Relating zero forcing and vertex covers in graphs</article-title>
      <source>Discret. Appl. Math.</source>
      <year iso-8601-date="2024">2024</year>
      <volume>359</volume>
      <pub-id pub-id-type="doi">10.1016/j.dam.2024.08.006</pub-id>
      <fpage>290</fpage>
      <lpage>302</lpage>
    </element-citation>
  </ref>
  <ref id="ref-TxGraffiti">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Davila</surname><given-names>Randy</given-names></name>
      </person-group>
      <article-title>Automated conjecturing in mathematics with TxGraffiti</article-title>
      <year iso-8601-date="2025">2025</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2409.19379</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-osti_960616">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hagberg</surname><given-names>Aric A.</given-names></name>
        <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
        <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
      </person-group>
      <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
      <source>Proceedings of the 7th python in science conference (SciPy2008)</source>
      <person-group person-group-type="editor">
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Vaught</surname><given-names>Travis</given-names></name>
        <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
      </person-group>
      <year iso-8601-date="2008">2008</year>
      <pub-id pub-id-type="doi">10.25080/TCWV9851</pub-id>
      <fpage>11</fpage>
      <lpage>15</lpage>
    </element-citation>
  </ref>
  <ref id="ref-csardi2006igraph">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Csárdi</surname><given-names>Gábor</given-names></name>
        <name><surname>Nepusz</surname><given-names>Tamás</given-names></name>
      </person-group>
      <article-title>The igraph software package for complex network research</article-title>
      <source>InterJournal Complex Systems</source>
      <year iso-8601-date="2006">2006</year>
      <volume>1695</volume>
      <uri>https://igraph.org</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3630268</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-sagemath">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>The Sage Developers</string-name>
      </person-group>
      <source>SageMath, the Sage Mathematics Software System (Version 9.1)</source>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.5281/zenodo.4066866</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mitchell2011pulp">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mitchell</surname><given-names>Stuart</given-names></name>
        <name><surname>Dunning</surname><given-names>Iain</given-names></name>
        <name><surname>O’Sullivan</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>PuLP: A linear programming toolkit for python</article-title>
      <source>Optimization Online</source>
      <year iso-8601-date="2011-09-22">2011</year><month>09</month><day>22</day>
      <uri>https://optimization-online.org/2011/09/3178/</uri>
    </element-citation>
  </ref>
  <ref id="ref-Fajtlowicz1988">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fajtlowicz</surname><given-names>Siemion</given-names></name>
      </person-group>
      <article-title>On conjectures of Graffiti</article-title>
      <source>Discrete Mathematics</source>
      <year iso-8601-date="1988">1988</year>
      <volume>72</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1016/0012-365X(88)90199-9</pub-id>
      <fpage>113</fpage>
      <lpage>118</lpage>
    </element-citation>
  </ref>
  <ref id="ref-DeLaVina2005">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>DeLaViña</surname><given-names>Ermelinda</given-names></name>
      </person-group>
      <article-title>Graffiti.pc: A Variant of Graffiti</article-title>
      <source>Graphs and discovery</source>
      <publisher-name>American Mathematical Society</publisher-name>
      <year iso-8601-date="2005">2005</year>
      <volume>69</volume>
      <pub-id pub-id-type="doi">10.1090/dimacs/069/05</pub-id>
      <fpage>71</fpage>
      <lpage>88</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wang1960mechanical">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wang</surname><given-names>Hao</given-names></name>
      </person-group>
      <article-title>Toward mechanical mathematics</article-title>
      <source>IBM Journal of Research and Development</source>
      <year iso-8601-date="1960">1960</year>
      <volume>4</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1147/rd.41.0002</pub-id>
      <fpage>2</fpage>
      <lpage>22</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
