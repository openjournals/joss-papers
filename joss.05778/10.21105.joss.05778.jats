<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5778</article-id>
<article-id pub-id-type="doi">10.21105/joss.05778</article-id>
<title-group>
<article-title>GridFormat: header-only C++-library for grid file
I/O</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9646-881X</contrib-id>
<name>
<surname>Gläser</surname>
<given-names>Dennis</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4776-5222</contrib-id>
<name>
<surname>Koch</surname>
<given-names>Timo</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8188-620X</contrib-id>
<name>
<surname>Flemisch</surname>
<given-names>Bernd</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University of Stuttgart, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of Oslo, Norway</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<volume>8</volume>
<issue>90</issue>
<fpage>5778</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>simulation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Numerical simulations play a crucial role in various research
  domains including mathematics, physics, and engineering. Such
  simulations typically involve solving a set of model equations that
  describe the physical system under investigation. To find an
  approximate solution to these equations on a given domain geometry and
  with specific boundary conditions, the domain is usually discretized
  into a grid composed of points and cells, on which discretization
  schemes such as finite differences, finite volumes, or finite elements
  are then employed. This process yields a discrete solution defined at
  specific grid positions, which, depending on the scheme, can be
  interpolated over the entire domain using its basis functions. Due to
  the high computational demand of such simulations, developers often
  implement simulation codes in performant C++ and leverage
  distributed-memory parallelism through <monospace>MPI</monospace>, the
  <italic>Message Passing Interface</italic>
  (<xref alt="Clarke et al., 1994" rid="ref-mpi_1994" ref-type="bibr">Clarke
  et al., 1994</xref>;
  <xref alt="MPI Forum, 2023" rid="ref-mpi_web" ref-type="bibr"><italic>MPI
  Forum</italic>, 2023</xref>), to run them on large high-performance
  computing systems.</p>
  <p>Visualization plays a fundamental role in analyzing numerical
  results, and one widely-used visualization tool in research is
  <monospace>ParaView</monospace>
  (<xref alt="Ahrens et al., 2005" rid="ref-ahrens2005_paraview" ref-type="bibr">Ahrens
  et al., 2005</xref>;
  <xref alt="ParaView, 2023" rid="ref-paraview_web" ref-type="bibr"><italic>ParaView</italic>,
  2023</xref>), which is based on <monospace>VTK</monospace>, the
  <italic>Visualization Toolkit</italic>
  (<xref alt="Schroeder et al., 2006" rid="ref-vtk_book" ref-type="bibr">Schroeder
  et al., 2006</xref>;
  <xref alt="The Visualization Toolkit, 2023" rid="ref-vtk_web" ref-type="bibr"><italic>The
  Visualization Toolkit</italic>, 2023</xref>).
  <monospace>ParaView</monospace> can read results from a wide range of
  file formats, with the
  <ext-link ext-link-type="uri" xlink:href="https://examples.vtk.org/site/VTKFileFormats/">VTK
  file formats</ext-link> being among the most popular. To visualize
  simulation results with <monospace>ParaView</monospace>, researchers
  need to write their data into one of the supported file formats. Users
  of existing simulation frameworks, such as <monospace>Dune</monospace>
  (<xref alt="Bastian et al., 2008" rid="ref-bastian2008" ref-type="bibr">Bastian
  et al., 2008</xref>,
  <xref alt="2021" rid="ref-Dune2021" ref-type="bibr">2021</xref>),
  <monospace>Dumux</monospace>
  (<xref alt="Flemisch et al., 2011" rid="ref-dumux_2011" ref-type="bibr">Flemisch
  et al., 2011</xref>;
  <xref alt="Koch et al., 2021" rid="ref-Kochetaldumux2021" ref-type="bibr">Koch
  et al., 2021</xref>), <monospace>Deal.II</monospace>
  (<xref alt="Arndt et al., 2022" rid="ref-dealII94" ref-type="bibr">Arndt
  et al., 2022</xref>), <monospace>FEniCS</monospace>
  (<xref alt="A. Logg, 2012" rid="ref-fenicsbook2012" ref-type="bibr">A.
  Logg, 2012</xref>;
  <xref alt="FEniCS, 2023" rid="ref-fenics" ref-type="bibr"><italic>FEniCS</italic>,
  2023</xref>) or <monospace>MFEM</monospace>
  (<xref alt="Anderson et al., 2021" rid="ref-mfem" ref-type="bibr">Anderson
  et al., 2021</xref>;
  <xref alt="MFEM, 2023" rid="ref-mfem_web" ref-type="bibr"><italic>MFEM</italic>,
  2023</xref>), can usually export their results into some standard file
  formats. However, they are limited to those formats that are supported
  by the framework. Reusing another framework’s I/O functionality is
  generally challenging, at least without runtime and memory overhead
  due to data conversions, since the implementation is typically
  tailored to its specific data structures. As a consequence, the work
  of implementing I/O into standard file formats is currently repeated
  in every framework and remains inaccessible for researchers developing
  new simulation frameworks or other research codes relying on I/O for
  visualization.</p>
  <p>To address this issue, <monospace>GridFormat</monospace> aims to
  provide an easy-to-use and framework-agnostic API for reading from and
  writing to a variety of grid file formats. By utilizing generic
  programming with C++ templates and traits,
  <monospace>GridFormat</monospace> is data-structure agnostic and
  allows developers to achieve full interoperability with their data
  structures by implementing a small number of trait classes (see
  discussion below). Users of both simulation frameworks and
  self-written small codes can write grid-based data into standard file
  formats with minimal effort and without significant runtime or memory
  overhead. <monospace>GridFormat</monospace> comes with out-of-the-box
  support for data structures of several widely-used frameworks, namely
  <monospace>Dune</monospace>, <monospace>Deal.II</monospace>,
  <monospace>FenicsX</monospace>, <monospace>MFEM</monospace>, and
  <monospace>CGAL</monospace>
  (<xref alt="CGAL, 2023" rid="ref-cgal_web" ref-type="bibr"><italic>CGAL</italic>,
  2023</xref>;
  <xref alt="The CGAL Project, 2023" rid="ref-cgal" ref-type="bibr">The
  CGAL Project, 2023</xref>).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p><monospace>GridFormat</monospace> addresses the issue of duplicate
  implementation effort for I/O across different simulation frameworks.
  By utilizing <monospace>GridFormat</monospace> as a backend for
  visualization file output, framework developers can easily provide
  their users with access to additional file formats. Moreover, instead
  of implementing support for new formats within the framework,
  developers can integrate them into <monospace>GridFormat</monospace>,
  thereby making them available to all other frameworks that use
  <monospace>GridFormat</monospace>. In addition to benefiting framework
  developers and users, the generic implementation of
  <monospace>GridFormat</monospace> also serves researchers with
  framework-independent smaller simulation codes.</p>
  <p>Three key requirements govern the design of
  <monospace>GridFormat</monospace>: seamless integration, minimal
  runtime and memory overhead, and support for
  <monospace>MPI</monospace>. Given that C++ is widely used in
  grid-based simulation codes for performance reasons, we selected C++
  as the programming language such that
  <monospace>GridFormat</monospace> can be adopted and used natively. It
  is lightweight, header-only, free of dependencies (unless opt-in
  features such as HDF5 output is desired), and supports CMake
  (<xref alt="CMake, 2023" rid="ref-cmake_web" ref-type="bibr"><italic>CMake</italic>,
  2023</xref>) features that allow for automatic integration of
  <monospace>GridFormat</monospace> in downstream projects.</p>
  <p>A comparable project in Python is <monospace>meshio</monospace>
  (<xref alt="Schlömer, 2022" rid="ref-meshio" ref-type="bibr">Schlömer,
  2022</xref>), which supports reading from and writing to a wide range
  of grid file formats. However, accessing it from within simulators
  written in C++ would introduce an undesirable performance penalty, as
  well as memory overhead, since <monospace>meshio</monospace> operates
  on an internal mesh representation that users have to convert their
  data into. <monospace>Dune</monospace> users can employ
  <monospace>dune-vtk</monospace>
  (<xref alt="Praetorius, 2019" rid="ref-dune_vtk" ref-type="bibr">Praetorius,
  2019</xref>), which supports I/O for a number VTK-XML file formats and
  flavours, however, its implementation is strongly coupled to the
  <monospace>dune-grid</monospace> interface and can therefore not be
  easily reused in other contexts. To the best of our knowledge, a
  framework-independent solution that fulfills the above-mentioned
  requirements does not exist.</p>
</sec>
<sec id="concept">
  <title>Concept</title>
  <p>Following the distinct
  <ext-link ext-link-type="uri" xlink:href="https://examples.vtk.org/site/VTKFileFormats/#xml-file-formats">VTK-XML</ext-link>
  file formats, <monospace>GridFormat</monospace> supports four
  different <italic>grid concepts</italic>:
  <monospace>ImageGrid</monospace>,
  <monospace>RectilinearGrid</monospace>,
  <monospace>StructuredGrid</monospace>, and
  <monospace>UnstructuredGrid</monospace>. While the latter is fully
  generic, the first three assume that the grid has a structured
  topology. A known structured topology makes it obsolete to define cell
  geometries and grid connectivity, and formats designed for such grids
  can therefore store the grid in a space-efficient manner. An overview
  of the different types of grids is shown in the image below, and a
  more detailed discussion can be found in the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/dglaeser/gridformat/blob/40596747e306fa6b899bdc5a19ae67e2308952f4/docs/pages/grid_concepts.md"><monospace>GridFormat</monospace>
  documentation</ext-link>.</p>
  <fig id="imgU003Agrids">
    <caption><p>Overview over the grid concepts supported in
    <monospace>GridFormat</monospace>. While
    <monospace>UnstructuredGrid</monospace>s are fully general, the
    first three have a structured topology.</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/grids.pdf" />
  </fig>
  <p><monospace>GridFormat</monospace> uses a traits (or meta-function)
  mechanism to operate on user-given grid types, and to identify which
  concept a given grid models. As a motivating example, consider the
  following function template:</p>
  <code language="c++">template&lt;typename Grid&gt;
void do_something_on_a_grid(const Grid&amp; grid) {
    for (const auto&amp; cell : grid.cells()) {
        // ...
    }
}</code>
  <p>In the function body, we iterate over all cells of the given grid
  by calling the <monospace>cells</monospace> method. This limits the
  usability of this function to grid types that fulfill such an
  interface. One could wrap the grid in an adapter that exposes the
  required interface method. However, this can become cumbersome,
  especially if there are certain requirements on the cell type in the
  iterated range. An alternative is to use traits, which allows writing
  the function generically, accepting any instance of a grid type that
  the <monospace>Cells</monospace> trait class template is specialized
  for (by using (partial) template specialization):</p>
  <code language="c++">namespace Traits { template&lt;typename Grid&gt; struct Cells; }

template&lt;typename Grid&gt;
void do_something_on_a_grid(const Grid&amp; grid) {
    for (const auto&amp; cell : Traits::Cells&lt;Grid&gt;::get(grid)) {
        // ...
    }
}</code>
  <p>Instead of calling a function on <monospace>grid</monospace>
  directly, it is accessed via <monospace>Cells</monospace>, which can
  be specialized for any type. If such specialization exists,
  <monospace>do_something_on_a_grid</monospace> is invocable with an
  instance of type <monospace>Grid</monospace> directly, without the
  need for wrappers or adapters. Using C++-20 concepts,
  <monospace>GridFormat</monospace> can check at compile-time if a user
  grid specializes all required traits correctly. Error messages emitted
  by the compiler indicate which trait specializations are missing or
  incorrect. The traits mechanism makes the
  <monospace>GridFormat</monospace> library fully extensible: users can
  achieve compatibility with their concrete grid type by specializing
  the required traits within <italic>their</italic> code base, without
  having to change any code in <monospace>GridFormat</monospace>.
  Moreover, <monospace>GridFormat</monospace> comes with predefined
  traits for <monospace>Dune</monospace>,
  <monospace>FenicsX</monospace>, <monospace>Deal.II</monospace>,
  <monospace>MFEM</monospace> and <monospace>CGAL</monospace> such that
  users of these frameworks can directly use
  <monospace>GridFormat</monospace> without any implementation
  effort.</p>
  <p>Note that each of the above-mentioned grid concepts requires the
  user to specialize a certain subset of traits. For instance, to
  determine the connectivity of an unstructured grid,
  <monospace>GridFormat</monospace> needs to know which points are
  embedded in a given grid cell. The information is not required for
  writing structured grids into structured grid file formats. An
  overview of which traits are required for which grid concept can be
  found in the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/dglaeser/gridformat/blob/40596747e306fa6b899bdc5a19ae67e2308952f4/docs/pages/traits.md"><monospace>GridFormat</monospace>
  documentation</ext-link>.</p>
  <p>The traits are required for writing out grids and associated data,
  and are not needed when using <monospace>GridFormat</monospace> to
  read data from grid files. <monospace>GridFormat</monospace> provides
  access to the data as specified by the file format, however, these
  specifications may not be sufficient in all applications. For
  instance, to fully instantiate a simulator for parallel computations,
  information on the grid entities shared by different processes is
  usually required. Since these requirements are simulator-specific, any
  further processing has to be done manually by the user and for their
  data structures. The recommended way to deal with this issue is to add
  any information required for reinstantiation as data fields to the
  output. This way, it is readily available when reading the file. For
  information on how to use these features, we refer to the
  <ext-link ext-link-type="uri" xlink:href="https://dglaeser.github.io/gridformat/">API
  documentation</ext-link> and the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/dglaeser/gridformat/tree/main/examples">examples</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors would like to thank the Federal Government and the
  Heads of Government of the Länder, as well as the Joint Science
  Conference (GWK), for their funding and support within the framework
  of the NFDI4Ing consortium. Funded by the German Research Foundation
  (DFG) - project number 442146713. TK acknowledges funding from the
  European Union’s Horizon 2020 research and innovation programme under
  the Marie Skłodowska-Curie grant agreement No 801133.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-dumux_2011">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Flemisch</surname><given-names>B.</given-names></name>
        <name><surname>Darcis</surname><given-names>M.</given-names></name>
        <name><surname>Erbertseder</surname><given-names>K.</given-names></name>
        <name><surname>Faigle</surname><given-names>B.</given-names></name>
        <name><surname>Lauser</surname><given-names>A.</given-names></name>
        <name><surname>Mosthaf</surname><given-names>K.</given-names></name>
        <name><surname>Müthing</surname><given-names>S.</given-names></name>
        <name><surname>Nuske</surname><given-names>P.</given-names></name>
        <name><surname>Tatomir</surname><given-names>A.</given-names></name>
        <name><surname>Wolff</surname><given-names>M.</given-names></name>
        <name><surname>Helmig</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>DuMux: DUNE for multi-{phase, component, scale, physics, …} flow and transport in porous media</article-title>
      <source>Advances in Water Resources</source>
      <year iso-8601-date="2011">2011</year>
      <volume>34</volume>
      <issue>9</issue>
      <issn>0309-1708</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S030917081100056X</uri>
      <pub-id pub-id-type="doi">10.1016/j.advwatres.2011.03.007</pub-id>
      <fpage>1102</fpage>
      <lpage>1112</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kochetaldumux2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Koch</surname><given-names>Timo</given-names></name>
        <name><surname>Gläser</surname><given-names>Dennis</given-names></name>
        <name><surname>Weishaupt</surname><given-names>Kilian</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>DuMux 3 - an open-source simulator for solving flow and transport problems in porous media with a focus on model coupling</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="2021">2021</year>
      <volume>81</volume>
      <pub-id pub-id-type="doi">10.1016/j.camwa.2020.02.012</pub-id>
      <fpage>423</fpage>
      <lpage>443</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bastian2008">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bastian</surname><given-names>Peter</given-names></name>
        <name><surname>Blatt</surname><given-names>Markus</given-names></name>
        <name><surname>Dedner</surname><given-names>Andreas</given-names></name>
        <name><surname>Engwer</surname><given-names>Christian</given-names></name>
        <name><surname>Klöfkorn</surname><given-names>Robert</given-names></name>
        <name><surname>Kornhuber</surname><given-names>Ralf</given-names></name>
        <name><surname>Ohlberger</surname><given-names>Mario</given-names></name>
        <name><surname>Sander</surname><given-names>Oliver</given-names></name>
      </person-group>
      <article-title>A generic grid interface for parallel and adaptive scientific computing. Part II: Implementation and tests in DUNE</article-title>
      <source>Computing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2008">2008</year>
      <volume>82</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1007/s00607-008-0004-9</pub-id>
      <fpage>121</fpage>
      <lpage>138</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Dune2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bastian</surname><given-names>Peter</given-names></name>
        <name><surname>Blatt</surname><given-names>Markus</given-names></name>
        <name><surname>Dedner</surname><given-names>Andreas</given-names></name>
        <name><surname>Dreier</surname><given-names>Nils-Arne</given-names></name>
        <name><surname>Engwer</surname><given-names>Christian</given-names></name>
        <name><surname>Fritze</surname><given-names>René</given-names></name>
        <name><surname>Gräser</surname><given-names>Carsten</given-names></name>
        <name><surname>Grüninger</surname><given-names>Christoph</given-names></name>
        <name><surname>Kempf</surname><given-names>Dominic</given-names></name>
        <name><surname>Klöfkorn</surname><given-names>Robert</given-names></name>
        <name><surname>Ohlberger</surname><given-names>Mario</given-names></name>
        <name><surname>Sander</surname><given-names>Oliver</given-names></name>
      </person-group>
      <article-title>The Dune framework: Basic concepts and recent developments</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="2021">2021</year>
      <volume>81</volume>
      <pub-id pub-id-type="doi">10.1016/j.camwa.2020.06.007</pub-id>
      <fpage>75</fpage>
      <lpage>112</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dealII94">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Arndt</surname><given-names>Daniel</given-names></name>
        <name><surname>Bangerth</surname><given-names>Wolfgang</given-names></name>
        <name><surname>Feder</surname><given-names>Marco</given-names></name>
        <name><surname>Fehling</surname><given-names>Marc</given-names></name>
        <name><surname>Gassmöller</surname><given-names>Rene</given-names></name>
        <name><surname>Heister</surname><given-names>Timo</given-names></name>
        <name><surname>Heltai</surname><given-names>Luca</given-names></name>
        <name><surname>Kronbichler</surname><given-names>Martin</given-names></name>
        <name><surname>Maier</surname><given-names>Matthias</given-names></name>
        <name><surname>Munch</surname><given-names>Peter</given-names></name>
        <name><surname>Pelteret</surname><given-names>Jean-Paul</given-names></name>
        <name><surname>Sticko</surname><given-names>Simon</given-names></name>
        <name><surname>Turcksin</surname><given-names>Bruno</given-names></name>
        <name><surname>Wells</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>The deal.II library, version 9.4</article-title>
      <source>Journal of Numerical Mathematics</source>
      <year iso-8601-date="2022">2022</year>
      <volume>30</volume>
      <issue>3</issue>
      <uri>https://doi.org/10.1515/jnma-2022-0054</uri>
      <pub-id pub-id-type="doi">10.1515/jnma-2022-0054</pub-id>
      <fpage>231</fpage>
      <lpage>246</lpage>
    </element-citation>
  </ref>
  <ref id="ref-fenics">
    <element-citation>
      <article-title>FEniCS</article-title>
      <publisher-name>Website: https://fenicsproject.org/, code repository: https://github.com/FEniCS</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-fenicsbook2012">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>A. Logg</surname><given-names>G. N. Wells et al</given-names><suffix>K.-A. Mardal</suffix></name>
      </person-group>
      <source>Automated solution of differential equations by the finite element method</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <pub-id pub-id-type="doi">10.1007/978-3-642-23099-8</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mfem">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Anderson</surname><given-names>R.</given-names></name>
        <name><surname>Andrej</surname><given-names>J.</given-names></name>
        <name><surname>Barker</surname><given-names>A.</given-names></name>
        <name><surname>Bramwell</surname><given-names>J.</given-names></name>
        <name><surname>Camier</surname><given-names>J.-S.</given-names></name>
        <name><surname>Cerveny</surname><given-names>J.</given-names></name>
        <name><surname>Dobrev</surname><given-names>V.</given-names></name>
        <name><surname>Dudouit</surname><given-names>Y.</given-names></name>
        <name><surname>Fisher</surname><given-names>A.</given-names></name>
        <name><surname>Kolev</surname><given-names>Tz.</given-names></name>
        <name><surname>Pazner</surname><given-names>W.</given-names></name>
        <name><surname>Stowell</surname><given-names>M.</given-names></name>
        <name><surname>Tomov</surname><given-names>V.</given-names></name>
        <name><surname>Akkerman</surname><given-names>I.</given-names></name>
        <name><surname>Dahm</surname><given-names>J.</given-names></name>
        <name><surname>Medina</surname><given-names>D.</given-names></name>
        <name><surname>Zampini</surname><given-names>S.</given-names></name>
      </person-group>
      <article-title>MFEM: A modular finite element methods library</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="2021">2021</year>
      <volume>81</volume>
      <pub-id pub-id-type="doi">10.1016/j.camwa.2020.06.009</pub-id>
      <fpage>42</fpage>
      <lpage>74</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mfem_web">
    <element-citation>
      <article-title>MFEM</article-title>
      <publisher-name>Website: https://mfem.org/, code repository: https://github.com/mfem/mfem</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-cgal">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>The CGAL Project</string-name>
      </person-group>
      <source>CGAL user and reference manual</source>
      <publisher-name>CGAL Editorial Board</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <edition>5.5.2</edition>
      <uri>https://doc.cgal.org/5.5.2/Manual/packages.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-cgal_web">
    <element-citation>
      <article-title>CGAL</article-title>
      <publisher-name>Website: https://www.cgal.org/, code repository: https://github.com/CGAL/cgal</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-mpi_1994">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Clarke</surname><given-names>Lyndon</given-names></name>
        <name><surname>Glendinning</surname><given-names>Ian</given-names></name>
        <name><surname>Hempel</surname><given-names>Rolf</given-names></name>
      </person-group>
      <article-title>The MPI message passing interface standard</article-title>
      <source>Programming environments for massively parallel distributed systems</source>
      <person-group person-group-type="editor">
        <name><surname>Decker</surname><given-names>Karsten M.</given-names></name>
        <name><surname>Rehmann</surname><given-names>René M.</given-names></name>
      </person-group>
      <publisher-name>Birkhäuser Basel</publisher-name>
      <publisher-loc>Basel</publisher-loc>
      <year iso-8601-date="1994">1994</year>
      <isbn>978-3-0348-8534-8</isbn>
      <fpage>213</fpage>
      <lpage>218</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mpi_web">
    <element-citation>
      <article-title>MPI Forum</article-title>
      <publisher-name>Website: https://www.mpi-forum.org/docs/</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-vtk_book">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Schroeder</surname><given-names>Will</given-names></name>
        <name><surname>Martin</surname><given-names>Ken</given-names></name>
        <name><surname>Lorensen</surname><given-names>Bill</given-names></name>
      </person-group>
      <source>The visualization toolkit (4th ed.)</source>
      <publisher-name>Kitware</publisher-name>
      <year iso-8601-date="2006">2006</year>
      <isbn>978-1-930934-19-1</isbn>
    </element-citation>
  </ref>
  <ref id="ref-vtk_web">
    <element-citation>
      <article-title>The visualization toolkit</article-title>
      <publisher-name>Website: https://vtk.org/</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-ahrens2005_paraview">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ahrens</surname><given-names>James</given-names></name>
        <name><surname>Geveci</surname><given-names>Berk</given-names></name>
        <name><surname>Law</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>ParaView: An end-user tool for large-data visualization</article-title>
      <source>The Visualization Handbook</source>
      <year iso-8601-date="2005-01">2005</year><month>01</month>
      <pub-id pub-id-type="doi">10.1016/B978-012387582-2/50038-1</pub-id>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-paraview_web">
    <element-citation>
      <article-title>ParaView</article-title>
      <publisher-name>Website: https://www.paraview.org/</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-cmake_web">
    <element-citation>
      <article-title>CMake</article-title>
      <publisher-name>Website: https://cmake.org/</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-meshio">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Schlömer</surname><given-names>Nico</given-names></name>
      </person-group>
      <article-title>MeshIO: Input/output for many mesh formats</article-title>
      <publisher-name>Published on GitHub https://github.com/nschloe/meshio and also accessible via Software Heritage Permalink</publisher-name>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-dune_vtk">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Praetorius</surname><given-names>Simon</given-names></name>
      </person-group>
      <article-title>Dune-vtk</article-title>
      <publisher-name>Published on the Dune GitLab server at https://gitlab.dune-project.org/extensions/dune-vtk</publisher-name>
      <year iso-8601-date="2019">2019</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
