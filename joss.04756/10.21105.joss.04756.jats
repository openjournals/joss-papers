<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4756</article-id>
<article-id pub-id-type="doi">10.21105/joss.04756</article-id>
<title-group>
<article-title>libcdict: fast dictionaries in C</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0378-4843</contrib-id>
<name>
<surname>Izzard</surname>
<given-names>Robert G.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8717-6046</contrib-id>
<name>
<surname>Hendriks</surname>
<given-names>David D.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0001-5004-7515</contrib-id>
<name>
<surname>Nemergut</surname>
<given-names>Daniel P.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Physics, School of Mathematics and Physics,
University of Surrey, Guildford, GU2 7XH, Surrey, UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-12-06">
<day>6</day>
<month>12</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>92</issue>
<fpage>4756</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C</kwd>
<kwd>Astronomy</kwd>
<kwd>Associated arrays</kwd>
<kwd>Dictionaries</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>A common requirement in science is to store and share large sets of
  simulation data in an efficient, nested, flexible and human-readable
  way. Such datasets contain number counts and distributions,
  i.e. histograms and maps, of arbitrary dimension and variable type,
  e.g. floating-point number, integer or character string. Modern
  high-level programming languages like Perl and Python have associated
  arrays, knowns as dictionaries or hashes, respectively, to fulfil this
  storage need. Low-level languages used more commonly for fast
  computational simulations, such as C and Fortran, lack this
  functionality. We present a <monospace>libcdict</monospace>, a C
  dictionary library, to solve this problem.
  <monospace>Libcdict</monospace> provides C and Fortran application
  programming interfaces (APIs) to native dictionaries, called
  <monospace>cdict</monospace>s, and functions for
  <monospace>cdict</monospace> to load and save these as JSON and hence
  for easy interpretation in other software and languages like Perl,
  Python and R.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Users of high-level languages such as Perl or Python have access to
  associated-array data structures through dictionaries and hashes,
  respectively. These allow arbitrary data types to be stored in
  array-like structures. These are in turn accessed through key-value
  pairs which allow the value to be a further, nested associated array,
  allowing arbitrary nesting of data. Compiled low-level languages, like
  C and Fortran, are more suited to high-speed and repeated calculations
  typical in science. These languages lack native associated-array
  functionality. While there are pure hash-table solutions out there,
  such as <monospace>glib</monospace>
  (<xref alt="Glib, 2022" rid="ref-glib_manual_hashtable" ref-type="bibr">Glib,
  2022</xref>) and <monospace>uthash</monospace>
  (<xref alt="Hansen, 2022" rid="ref-uthash_github" ref-type="bibr">Hansen,
  2022</xref>), these do not combine a simple API for setting and adding
  to nested structures, a small library footprint, fast input and
  output, and standardised JSON output to easily interface with other
  languages and tools. <monospace>libcdict</monospace> provides an API
  for such functionality which allows <monospace>cdict</monospace>s to
  be nested in <monospace>cdict</monospace>s, hence arbitrarily-nested
  dictionaries of variables in C just as in Perl or Python.</p>
  <p><monospace>libcdict</monospace> is written in C and provides an API
  through a set of C macros. Nested <monospace>cdict</monospace>
  structures have values in them set with a single line of code.
  <monospace>libcdict</monospace> has been used for the last year in the
  <monospace>binary_c</monospace> single- and binary-star population
  nucleosynthesis framework
  (<xref alt="Izzard et al., 2004" rid="ref-izzardU003A2004" ref-type="bibr">Izzard
  et al., 2004</xref>,
  <xref alt="2006" rid="ref-izzardU003A2006" ref-type="bibr">2006</xref>,
  <xref alt="2009" rid="ref-izzardU003A2009" ref-type="bibr">2009</xref>,
  <xref alt="2018" rid="ref-izzardU003A2018" ref-type="bibr">2018</xref>).
  Recent works
  (<xref alt="Hendriks &amp; Izzard, 2023b" rid="ref-2023MNRAS.524.4315H" ref-type="bibr">Hendriks
  &amp; Izzard, 2023b</xref>;
  <xref alt="Izzard &amp; Jermyn, 2023" rid="ref-izzardU003A2023" ref-type="bibr">Izzard
  &amp; Jermyn, 2023</xref>;
  <xref alt="Mirouh et al., 2023" rid="ref-2023MNRAS.524.3978M" ref-type="bibr">Mirouh
  et al., 2023</xref>;
  <xref alt="Yates et al., 2023" rid="ref-2023MNRAS.tmp.3267Y" ref-type="bibr">Yates
  et al., 2023</xref>) compute the evolution of millions of single- and
  binary-stellar systems in only a few hours using its
  <monospace>binary_c-python</monospace> Python frontend
  (<xref alt="Hendriks &amp; Izzard, 2023a" rid="ref-HendriksU003A2023" ref-type="bibr">Hendriks
  &amp; Izzard, 2023a</xref>). We provide
  <monospace>libcdict</monospace> as open-source code on Gitlab subject
  to the GPL3. <monospace>libcdict</monospace> also has a comprehensive
  test suite run through its configuration program
  <monospace>cdict-config</monospace>.</p>
</sec>
<sec id="using-libcdict">
  <title>Using libcdict</title>
  <p><monospace>libcdict</monospace> is flexible but pragmatic. Keys to
  <monospace>cdict</monospace>s can be any C scalar or pointer. Values
  can be scalars, pointers, arrays or other
  <monospace>cdict</monospace>s, but arrays must be of a single C type.
  Values can store metadata of arbitrary type. Pointer values are
  optionally garbage collected when a <monospace>cdict</monospace> is
  freed. A set of API macros provides simple nesting facilities so that
  placing a value in a nested location given a list of keys is a simple
  task for the C programmer. Issues such as C variable typing are
  automatically handled for the user.</p>
  <p>Variables are internally hashed using <monospace>uthash</monospace>
  (<xref alt="Hansen, 2022" rid="ref-uthash_github" ref-type="bibr">Hansen,
  2022</xref>). <monospace>libcdict</monospace> provides a custom JSON
  output function and inputs JSON using <monospace>jsmn</monospace>
  (<xref alt="Zaitsev, 2022" rid="ref-jsmn_github" ref-type="bibr">Zaitsev,
  2022</xref>). Floating-point input and output uses
  <monospace>fast double parser</monospace>
  (<xref alt="Lemire, 2021" rid="ref-lemireU003A2021" ref-type="bibr">Lemire,
  2021</xref>,
  <xref alt="2022" rid="ref-fastdoubleparser_github" ref-type="bibr">2022</xref>)
  and <monospace>Ryū</monospace>
  (<xref alt="Adams, 2018" rid="ref-adamsU003A2018" ref-type="bibr">Adams,
  2018</xref>,
  <xref alt="2019" rid="ref-adamsU003A2019" ref-type="bibr">2019</xref>,
  <xref alt="2022" rid="ref-ryugithub" ref-type="bibr">2022</xref>),
  respectively, both of which are considerably faster than equivalent C
  library functions. <monospace>libdict</monospace> allows customizable
  floating-point accuracy for output and when comparing floating-point
  numbers, e.g. during sorting of key or variable lists.</p>
  <p>Installation uses <monospace>meson</monospace>
  (<xref alt="Pakkanen, 2022" rid="ref-meson_github" ref-type="bibr">Pakkanen,
  2022</xref>) and <monospace>ninja</monospace>
  (<xref alt="Martin, 2022" rid="ref-ninja_github" ref-type="bibr">Martin,
  2022</xref>). <monospace>libcdict</monospace> has been tested with the
  GCC (10.3.0) and Clang (12.0.0) compilers.</p>
</sec>
<sec id="libcdict-in-stellar-population-statistics-calculations">
  <title><monospace>libcdict</monospace> in stellar-population
  statistics calculations</title>
  <p><monospace>libcdict</monospace> was developed to solve the problem
  of storing statistics in stellar-population calculations in
  <monospace>binary_c</monospace>. When evolving a population of
  millions, sometimes billions, of stars, each for thousands of time
  steps, enormous amounts of data are computed. It is impractical to
  output these data every time step as these are typically
  <inline-formula><alternatives>
  <tex-math><![CDATA[\sim 10^{6} \times 10^{4} = 10^{10}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>∼</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>6</mml:mn></mml:msup><mml:mo>×</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>4</mml:mn></mml:msup><mml:mo>=</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>10</mml:mn></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>
  lines, each of which can easily be <inline-formula><alternatives>
  <tex-math><![CDATA[\sim 1\,\mathrm{KB}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>1</mml:mn><mml:mspace width="0.167em"></mml:mspace><mml:mrow><mml:mi mathvariant="normal">K</mml:mi><mml:mi mathvariant="normal">B</mml:mi></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  long. The data from each star could be sent to a Perl or Python
  front-end which merges them into a dictionary of population
  statistics. This communication between programming languages involves
  significant overhead which compares similarly to the runtime of the
  stellar code itself thus greatly increases runtime and cost.</p>
  <p>To overcome this problem, <monospace>binary_c</monospace>
  internally generates an associative-array <monospace>cdict</monospace>
  in native C. This <monospace>cdict</monospace>, and the stellar
  statistics it contains, is filled inside the
  <monospace>binary_c</monospace> simulation as each star is simulated.
  Generation of the stellar-population data in the
  <monospace>cdict</monospace> is efficient because it is only in C and
  communication with the frontend (Python) code is kept to a minimum.
  The <monospace>cdict</monospace>’s dataset is output <italic>only
  once</italic>, as human-readable JSON easily understood by Perl or
  Python, at the end of the simulation. Large simulations are often
  split across clusters of machines using
  <monospace>binary_c-python</monospace>. The data from each run are
  stored as JSON chunks then merged in Python when the final run
  completes. The overhead involved in this joining is small compared to
  the effort of simulating the stars: the goal of
  <monospace>libcdict</monospace> has thus been achieved.</p>
  <p>We provide an interactive example made with
  <monospace>binary_c</monospace> and
  <monospace>binary_c-python</monospace> using
  <monospace>libcdict</monospace> in its <monospace>examples</monospace>
  directory
  (<xref alt="Izzard, 2022" rid="ref-cdictexamples" ref-type="bibr">Izzard,
  2022</xref>). The <monospace>libcdict</monospace> JSON output of a
  Hertzsprung-Russell diagram, the most important diagnostic plot in
  stellar astrophysics, is plotted using <monospace>Bokeh</monospace>
  (<xref alt="Bokeh Development Team, 2014" rid="ref-bokeh_homepage" ref-type="bibr">Bokeh
  Development Team, 2014</xref>;
  <xref alt="Bokeh GitHub, 2022" rid="ref-bokeh_github" ref-type="bibr">Bokeh GitHub,
  2022</xref>) to provide immediate access to nested data sets.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>RGI acknowledges funding by STFC grants ST/L003910/1, ST/L003910/2
  and ST/R000603/1. DDH acknowledges funding by UKRI/UoS grant H120341A.
  We thank the authors of software used by
  <monospace>libcdict</monospace>, especially Troy Hanson and Arthur
  O’Dwyer for <monospace>uthash</monospace>, Ulf Adams and the
  <monospace>Ryū</monospace> team, Serge Zaitsev and the
  <monospace>jsmu</monospace> team, and Daniel Lemire for
  <monospace>fast double parser</monospace>.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-izzardU003A2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
        <name><surname>Tout</surname><given-names>C. A.</given-names></name>
        <name><surname>Karakas</surname><given-names>A. I.</given-names></name>
        <name><surname>Pols</surname><given-names>O. R.</given-names></name>
      </person-group>
      <article-title>A new synthetic model for asymptotic giant branch stars</article-title>
      <source>Monthly Notices of the Royal Astronomical Society</source>
      <year iso-8601-date="2004-05">2004</year><month>05</month>
      <volume>350</volume>
      <pub-id pub-id-type="doi">10.1111/j.1365-2966.2004.07446.x</pub-id>
      <fpage>407</fpage>
      <lpage>426</lpage>
    </element-citation>
  </ref>
  <ref id="ref-izzardU003A2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
        <name><surname>Dray</surname><given-names>L. M.</given-names></name>
        <name><surname>Karakas</surname><given-names>A. I.</given-names></name>
        <name><surname>Lugaro</surname><given-names>M.</given-names></name>
        <name><surname>Tout</surname><given-names>C. A.</given-names></name>
      </person-group>
      <article-title>Population nucleosynthesis in single and binary stars. I. Model</article-title>
      <source>Astronomy and Astrophysics</source>
      <year iso-8601-date="2006-12">2006</year><month>12</month>
      <volume>460</volume>
      <pub-id pub-id-type="doi">10.1051/0004-6361:20066129</pub-id>
      <fpage>565</fpage>
      <lpage>572</lpage>
    </element-citation>
  </ref>
  <ref id="ref-izzardU003A2009">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
        <name><surname>Glebbeek</surname><given-names>E.</given-names></name>
        <name><surname>Stancliffe</surname><given-names>R. J.</given-names></name>
        <name><surname>Pols</surname><given-names>O. R.</given-names></name>
      </person-group>
      <article-title>Population synthesis of binary carbon-enhanced metal-poor stars</article-title>
      <source>Astronomy and Astrophysics</source>
      <year iso-8601-date="2009-12">2009</year><month>12</month>
      <volume>508</volume>
      <uri>https://arxiv.org/abs/0910.2158</uri>
      <pub-id pub-id-type="doi">10.1051/0004-6361/200912827</pub-id>
      <fpage>1359</fpage>
      <lpage>1374</lpage>
    </element-citation>
  </ref>
  <ref id="ref-izzardU003A2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
        <name><surname>Preece</surname><given-names>H.</given-names></name>
        <name><surname>Jofre</surname><given-names>P.</given-names></name>
        <name><surname>Halabi</surname><given-names>G. M.</given-names></name>
        <name><surname>Masseron</surname><given-names>T.</given-names></name>
        <name><surname>Tout</surname><given-names>C. A.</given-names></name>
      </person-group>
      <article-title>Binary stars in the Galactic thick disc</article-title>
      <source>Monthly Notices of the Royal Astronomical Society</source>
      <year iso-8601-date="2018-01">2018</year><month>01</month>
      <volume>473</volume>
      <uri>https://arxiv.org/abs/1709.05237</uri>
      <pub-id pub-id-type="doi">10.1093/mnras/stx2355</pub-id>
      <fpage>2984</fpage>
      <lpage>2999</lpage>
    </element-citation>
  </ref>
  <ref id="ref-uthash_github">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hansen</surname><given-names>T. D.</given-names></name>
      </person-group>
      <article-title>uthash: A hash table for C structures</article-title>
      <source>GitHub repository</source>
      <year iso-8601-date="2022">2022</year>
      <uri>https://troydhanson.github.io/uthash/</uri>
    </element-citation>
  </ref>
  <ref id="ref-jsmn_github">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Zaitsev</surname><given-names>S.</given-names></name>
      </person-group>
      <article-title>jsmn, a minimalistic JSON parser in C</article-title>
      <source>GitHub repository</source>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/zserge/jsmn</uri>
    </element-citation>
  </ref>
  <ref id="ref-fastdoubleparser_github">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lemire</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>fast_double_parser: 4\times faster than strtod</article-title>
      <source>GitHub repository</source>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/lemire/fast_double_parser</uri>
    </element-citation>
  </ref>
  <ref id="ref-lemireU003A2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lemire</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>Number Parsing at a Gigabyte per Second</article-title>
      <source>arXiv e-prints</source>
      <year iso-8601-date="2021-01">2021</year><month>01</month>
      <uri>https://arxiv.org/abs/2101.11408</uri>
      <pub-id pub-id-type="doi">10.1002/spe.2984</pub-id>
      <fpage>arXiv:2101.11408</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ryugithub">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Adams</surname><given-names>U.</given-names></name>
      </person-group>
      <article-title>Ryū &amp; Ryū Printf</article-title>
      <source>GitHub repository</source>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/ulfjack/ryu</uri>
    </element-citation>
  </ref>
  <ref id="ref-adamsU003A2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Adams</surname><given-names>U.</given-names></name>
      </person-group>
      <article-title>Ryū: Fast float-to-string conversion</article-title>
      <source>SIGPLAN Not.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2018-06">2018</year><month>06</month>
      <volume>53</volume>
      <issue>4</issue>
      <issn>0362-1340</issn>
      <uri>https://doi.org/10.1145/3296979.3192369</uri>
      <pub-id pub-id-type="doi">10.1145/3296979.3192369</pub-id>
      <fpage>270</fpage>
      <lpage>282</lpage>
    </element-citation>
  </ref>
  <ref id="ref-adamsU003A2019">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Adams</surname><given-names>U.</given-names></name>
      </person-group>
      <article-title>Ryū revisited: Printf floating point conversion</article-title>
      <source>Proceedings of the ACM on Programming Languages</source>
      <publisher-name>Association for Computing Machinery (ACM)</publisher-name>
      <year iso-8601-date="2019-10">2019</year><month>10</month>
      <volume>3</volume>
      <uri>http://dx.doi.org/10.1145/3360595</uri>
      <pub-id pub-id-type="doi">10.1145/3360595</pub-id>
      <fpage>1</fpage>
      <lpage>23</lpage>
    </element-citation>
  </ref>
  <ref id="ref-meson_github">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Pakkanen</surname><given-names>J.</given-names></name>
      </person-group>
      <article-title>The Meson build system</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/mesonbuild/meson</uri>
    </element-citation>
  </ref>
  <ref id="ref-ninja_github">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Martin</surname><given-names>E.</given-names></name>
      </person-group>
      <article-title>Ninja, a small build system with a focus on speed.</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/ninja-build/ninja</uri>
    </element-citation>
  </ref>
  <ref id="ref-bokeh_homepage">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Bokeh Development Team</string-name>
      </person-group>
      <article-title>Bokeh: Python library for interactive visualization</article-title>
      <year iso-8601-date="2014">2014</year>
      <uri>http://www.bokeh.pydata.org</uri>
    </element-citation>
  </ref>
  <ref id="ref-bokeh_github">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Bokeh GitHub</string-name>
      </person-group>
      <article-title>Bokeh</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/bokeh/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cdictexamples">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
      </person-group>
      <article-title>libcdict examples</article-title>
      <source>Gitlab.com repository</source>
      <publisher-name>Gitlab.com</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://gitlab.com/rob.izzard/libcdict/</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.10276619</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-HendriksU003A2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hendriks</surname><given-names>D. D.</given-names></name>
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
      </person-group>
      <article-title>Binary_c-python: A python-based stellar population synthesis tool and interface to binary_c</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>85</issue>
      <uri>https://doi.org/10.21105/joss.04642</uri>
      <pub-id pub-id-type="doi">10.21105/joss.04642</pub-id>
      <fpage>4642</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-glib_manual_hashtable">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Glib</surname></name>
      </person-group>
      <article-title>glib hash tables</article-title>
      <source>glib official documentation</source>
      <publisher-name>Gitlab</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://docs.gtk.org/glib/index.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-izzardU003A2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
        <name><surname>Jermyn</surname><given-names>A. S.</given-names></name>
      </person-group>
      <article-title>Circumbinary discs for stellar population models</article-title>
      <source></source>
      <year iso-8601-date="2023-05">2023</year><month>05</month>
      <volume>521</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1093/mnras/stac2899</pub-id>
      <fpage>35</fpage>
      <lpage>50</lpage>
    </element-citation>
  </ref>
  <ref id="ref-2023MNRAS.524.3978M">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mirouh</surname><given-names>Giovanni M.</given-names></name>
        <name><surname>Hendriks</surname><given-names>David D.</given-names></name>
        <name><surname>Dykes</surname><given-names>Sophie</given-names></name>
        <name><surname>Moe</surname><given-names>Maxwell</given-names></name>
        <name><surname>Izzard</surname><given-names>Robert G.</given-names></name>
      </person-group>
      <article-title>Detailed equilibrium and dynamical tides: impact on circularization and synchronization in open clusters</article-title>
      <source></source>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <volume>524</volume>
      <issue>3</issue>
      <uri>https://arxiv.org/abs/2307.02678</uri>
      <pub-id pub-id-type="doi">10.1093/mnras/stad2048</pub-id>
      <fpage>3978</fpage>
      <lpage>3999</lpage>
    </element-citation>
  </ref>
  <ref id="ref-2023MNRAS.524.4315H">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hendriks</surname><given-names>D. D.</given-names></name>
        <name><surname>Izzard</surname><given-names>R. G.</given-names></name>
      </person-group>
      <article-title>Mass-stream trajectories with non-synchronously rotating donors</article-title>
      <source></source>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <volume>524</volume>
      <issue>3</issue>
      <uri>https://arxiv.org/abs/2307.04600</uri>
      <pub-id pub-id-type="doi">10.1093/mnras/stad2077</pub-id>
      <fpage>4315</fpage>
      <lpage>4332</lpage>
    </element-citation>
  </ref>
  <ref id="ref-2023MNRAS.tmp.3267Y">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yates</surname><given-names>Robert M.</given-names></name>
        <name><surname>Hendriks</surname><given-names>David</given-names></name>
        <name><surname>Vijayan</surname><given-names>Aswin P.</given-names></name>
        <name><surname>Izzard</surname><given-names>Robert G.</given-names></name>
        <name><surname>Thomas</surname><given-names>Peter A.</given-names></name>
        <name><surname>Das</surname><given-names>Payel</given-names></name>
      </person-group>
      <article-title>The impact of binary stars on the dust and metal evolution of galaxies</article-title>
      <source></source>
      <year iso-8601-date="2023-11">2023</year><month>11</month>
      <uri>https://arxiv.org/abs/2310.15218</uri>
      <pub-id pub-id-type="doi">10.1093/mnras/stad3419</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
