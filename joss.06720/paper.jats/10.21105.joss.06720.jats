<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6720</article-id>
<article-id pub-id-type="doi">10.21105/joss.06720</article-id>
<title-group>
<article-title>Catalyst: a Python JIT compiler for auto-differentiable
hybrid quantum programs</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0975-6448</contrib-id>
<name>
<surname>Ittah</surname>
<given-names>David</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Asadi</surname>
<given-names>Ali</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Lopez</surname>
<given-names>Erick Ochoa</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Mironov</surname>
<given-names>Sergei</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Banning</surname>
<given-names>Samuel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0837-6451</contrib-id>
<name>
<surname>Moyard</surname>
<given-names>Romain</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2377-264X</contrib-id>
<name>
<surname>Peng</surname>
<given-names>Mai Jacob</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2640-0734</contrib-id>
<name>
<surname>Izaac</surname>
<given-names>Josh</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Xanadu, Toronto, ON, M5G 2C8, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-07-01">
<day>1</day>
<month>7</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>99</issue>
<fpage>6720</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>quantum computing</kwd>
<kwd>machine learning</kwd>
<kwd>automatic differentiation</kwd>
<kwd>GPU</kwd>
<kwd>high-performance computing</kwd>
<kwd>JAX</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Catalyst is a software package for capturing Python-based hybrid
  quantum programs (that is, programs that contain both quantum and
  classical instructions), and just-in-time (JIT) compiling them down to
  an MLIR and LLVM representation and generating binary code. As a
  result, Catalyst enables the ability to rapidly prototype quantum
  algorithms in Python alongside efficient compilation, optimization,
  and execution of the program on classical and quantum accelerators. In
  addition, Catalyst allows for advanced quantum programming features
  essential for fault-tolerant hardware support and advanced algorithm
  design, such as mid-circuit measurement with arbitrary
  post-processing, support for classical control flow in and around
  quantum algorithms, built-in measurement statistics, and
  hardware-compatible automatic differentiation (AD).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The rapid development and availability of quantum software and
  hardware has had significant influence on quantum algorithm
  development and general quantum computing research. Through direct
  access to full-featured quantum programming SDKs
  (<xref alt="Bergholm et al., 2018" rid="ref-pennylane" ref-type="bibr">Bergholm
  et al., 2018</xref>;
  <xref alt="Google Inc., 2018" rid="ref-cirq" ref-type="bibr">Google
  Inc., 2018</xref>;
  <xref alt="IBM Corporation, 2016b" rid="ref-qiskit" ref-type="bibr">IBM
  Corporation, 2016b</xref>), high-performance simulators
  (<xref alt="Bergholm et al., 2018" rid="ref-pennylane" ref-type="bibr">Bergholm
  et al., 2018</xref>;
  <xref alt="NVIDIA cuQuantum team, 2022" rid="ref-cuquantum" ref-type="bibr">NVIDIA
  cuQuantum team, 2022</xref>), and near-term noisy hardware
  (<xref alt="Amazon Web Services, 2020" rid="ref-braket" ref-type="bibr">Amazon
  Web Services, 2020</xref>;
  <xref alt="IBM Corporation, 2016a" rid="ref-ibmq" ref-type="bibr">IBM
  Corporation, 2016a</xref>;
  <xref alt="Madsen et al., 2022" rid="ref-borealis" ref-type="bibr">Madsen
  et al., 2022</xref>), researchers have new tools available to
  prototype, execute, analyze, and iterate during algorithm development.
  Notably, this has resulted in the development and exploration of new
  categories of quantum algorithms that take advantage of the strong
  integration with advanced classical tooling; an example being
  auto-differentiation and variational quantum algorithms
  (<xref alt="Delgado et al., 2021" rid="ref-delgado2021variational" ref-type="bibr">Delgado
  et al., 2021</xref>;
  <xref alt="Farhi et al., 2014" rid="ref-farhi2014quantum" ref-type="bibr">Farhi
  et al., 2014</xref>;
  <xref alt="McClean et al., 2016" rid="ref-mcclean2016theory" ref-type="bibr">McClean
  et al., 2016</xref>).</p>
  <p>However, as our hardware capabilities scale, it is becoming clear
  that we cannot separate classical and quantum parts of the program;
  classical processing remains essential for processing quantum input
  and output, as well as mid-circuit processing that must be performant
  enough to keep up with the quantum execution. Furthermore, we must
  support this while retaining the ability to rapidly prototype,
  integrate with classical tooling and accelerators, and provide
  efficient optimization and compilation of both quantum and classical
  instructions.</p>
  <p>One of the core goals of Catalyst is to provide a unified
  representation for hybrid programs with which to drive optimization,
  device compilation, automatic differentiation, and many other types of
  transformations in a scalable way. Moreover, Catalyst is being
  developed to support next-generation quantum programming paradigms,
  such as dynamic circuit generation with classical control flow,
  real-time measurement feedback, qubit reuse, and dynamic quantum
  memory management. Most importantly, Catalyst provides a way to
  transform large scale user workflows from Python into low-level binary
  code for accelerated execution in heterogeneous environments.</p>
  <p>Catalyst is divided into three core components: a
  <italic>frontend</italic> that captures and lowers hybrid Python
  programs, a <italic>compiler</italic> that applies quantum and
  classical optimizations and transformations, and a
  <italic>runtime</italic> that allows the compiled binary to call into
  quantum devices for execution.</p>
  <sec id="frontend">
    <title>Frontend</title>
    <p>The Catalyst frontend, built in Python and C++, directly
    integrates with both PennyLane
    (<xref alt="Bergholm et al., 2018" rid="ref-pennylane" ref-type="bibr">Bergholm
    et al., 2018</xref>), a Python framework for differentiable quantum
    programming, and JAX
    (<xref alt="Bradbury et al., 2018" rid="ref-jax" ref-type="bibr">Bradbury
    et al., 2018</xref>), a Python framework for accelerated
    auto-differentiation, to capture hybrid quantum programs. As a
    result, by decorating hybrid programs with the
    <monospace>@qjit</monospace> decorator, the Catalyst frontend is
    able to capture and ahead-of-time or just-in-time compile (from
    within Python) the quantum and classical instructions provided by
    PennyLane and JAX. In addition, Catalyst provides high-level
    functions for compact and dynamic circuit representation
    (<monospace>for_loop</monospace>, <monospace>cond</monospace>,
    <monospace>while_loop</monospace>, <monospace>measure</monospace>)
    as well as auto-differentiation (<monospace>grad</monospace>,
    <monospace>jacobian</monospace>, <monospace>vjp</monospace>,
    <monospace>jvp</monospace>). Preliminary support for AutoGraph
    (<xref alt="Moldovan et al., 2018" rid="ref-moldovan2018autograph" ref-type="bibr">Moldovan
    et al., 2018</xref>) also allows users to write hybrid quantum
    programs using native Python control flow; all branches of the
    computation will be represented in the captured hybrid program.</p>
  </sec>
  <sec id="compiler">
    <title>Compiler</title>
    <p>Building on the LLVM
    (<xref alt="Lattner &amp; Adve, 2004" rid="ref-llvm" ref-type="bibr">Lattner
    &amp; Adve, 2004</xref>) and MLIR
    (<xref alt="Lattner et al., 2021" rid="ref-mlir" ref-type="bibr">Lattner
    et al., 2021</xref>) compiler frameworks, and the QIR project
    (<xref alt="QIR Alliance, 2021" rid="ref-qir" ref-type="bibr">QIR
    Alliance, 2021</xref>), compilation is then performed on the
    MLIR-based representation for hybrid quantum programs defined by
    Catalyst. The compiler invokes a sequence of transformations that
    lowers the hybrid program to a lower level of abstraction,
    outputting LLVM IR with QIR syntax. In addition to the lowering
    process, various transformations take place, including quantum
    optimizations (adjoint cancellation, operator fusion), classical
    optimizations (code elimination), and automatic differentiation. In
    the latter case, classical auto-differentiation is provided via the
    Enzyme
    (<xref alt="Moses &amp; Churavy, 2020" rid="ref-enzyme" ref-type="bibr">Moses
    &amp; Churavy, 2020</xref>) framework, while hardware-compatible
    quantum gradient methods (such as the parameter-shift rule
    (<xref alt="Schuld et al., 2019" rid="ref-schuld2018gradients" ref-type="bibr">Schuld
    et al., 2019</xref>;
    <xref alt="Wierichs et al., 2022" rid="ref-wierichs2021general" ref-type="bibr">Wierichs
    et al., 2022</xref>)) are provided as Catalyst compiler
    transforms.</p>
  </sec>
  <sec id="runtime">
    <title>Runtime</title>
    <p>The Catalyst runtime is designed to enable Catalyst’s highly
    dynamic execution model. As such, it generally assumes direct
    communication between a quantum device and its classical controller
    or host, although it also supports more restrictive execution
    models. Execution of the user program proceeds on the host’s native
    architecture, while the runtime provides an abstract communication
    API for quantum devices that the user program is free to invoke at
    any time during its execution. Currently, Catalyst provides runtime
    integration for the high-performance PennyLane Lightning suite of
    simulators
    (<xref alt="PennyLane Lightning, 2023" rid="ref-lightning" ref-type="bibr"><italic>PennyLane
    Lightning</italic>, 2023</xref>), as well as an OpenQASM3 pipeline
    with Amazon Braket simulator and hardware support.</p>
  </sec>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>The following example highlights the capabilities of the Catalyst
  frontend, enabling scalable and high-performance quantum computing
  from a feature-rich interactive Python environment.</p>
  <p>First, we utilize Catalyst to just-in-time compile a complex
  function involving a mix of classical and quantum processing. Note
  that, through the AutoGraph feature, native Python control flow is
  automatically captured, allowing both branches to be represented in
  the compiled program.</p>
  <code language="python">import pennylane as qml
from catalyst import qjit, measure
from jax import numpy as jnp

dev = qml.device(&quot;lightning.qubit&quot;, wires=2)

@qjit(autograph=True)
def hybrid_function(x):

    @qml.qnode(dev, diff_method=&quot;parameter-shift&quot;)
    def circuit(x):
        qml.RX(x, wires=0)
        qml.RY(x ** 2, wires=1)
        qml.CNOT(wires=[0, 1])

        for i in range(0, 10):
            m = measure(wires=0)

            if m == 1:
                qml.CRX(x * jnp.exp(- x ** 2), wires=[0, 1])

            x = x * 0.2

        return qml.expval(qml.PauliZ(0))

    return jnp.sin(circuit(x)) ** 2</code>
  <preformat>&gt;&gt;&gt; hybrid_function(0.543)
array(0.70807342)</preformat>
  <p>We can also consider an example that includes a classical
  optimization loop, such as optimizing a quantum computer to find the
  ground state energy of a molecule:</p>
  <code language="python">import pennylane as qml
from catalyst import grad, for_loop, qjit
import jaxopt
from jax import numpy as jnp

mol = qml.data.load(&quot;qchem&quot;, molname=&quot;H3+&quot;)[0]
n_qubits = len(mol.hamiltonian.wires)

dev = qml.device(&quot;lightning.qubit&quot;, wires=n_qubits)

@qjit
@qml.qnode(dev)
def cost(params):
    qml.BasisState(jnp.array(mol.hf_state), wires=range(n_qubits))
    qml.DoubleExcitation(params[0], wires=[0, 1, 2, 3])
    qml.DoubleExcitation(params[1], wires=[0, 1, 4, 5])
    return qml.expval(mol.hamiltonian)

@qjit
def optimization(params):
    loss = lambda x: (cost(x), grad(cost)(x))

    # set up optimizer and define optimization step
    opt = jaxopt.GradientDescent(loss, stepsize=0.3, value_and_grad=True)
    update_step = lambda step, args: tuple(opt.update(*args))

    # gradient descent parameter update loop using jit-compatible for-loop
    state = opt.init_state(params)
    (params, _) = for_loop(0, 10, step=1)(update_step)((params, state))
    return params</code>
  <preformat>&gt;&gt;&gt; params = jnp.array([0.54, 0.3154])
&gt;&gt;&gt; final_params = optimization(params)
&gt;&gt;&gt; cost(final_params)  # optimized energy of H3+
-1.2621179827928877
&gt;&gt;&gt; mol.vqe_energy  # expected energy of H3+
-1.2613407428534986</preformat>
  <p>Here, we are using the JAXopt gradient optimization library
  (<xref alt="Blondel et al., 2022" rid="ref-blondel2022efficient" ref-type="bibr">Blondel
  et al., 2022</xref>) alongside the built-in auto-differentiation
  capabilities of Catalyst, to compile the entire optimization workflow.
  For this small toy example on 6 qubits, we can time the execution
  after compilation on the same system, as a non-rigorous demonstration
  of the advantage of performing this for loop outside of Python:</p>
  <code language="python">&gt;&gt;&gt; %timeit optimization(params)
599 ms ± 96 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code>
  <p>Comparing this to a non-compiled workflow, where the
  <monospace>@qjit</monospace> decorator has been removed:</p>
  <code language="python">@qml.qnode(dev)
def no_qjit_cost(params):
    qml.BasisState(jnp.array(mol.hf_state), wires=range(n_qubits))
    qml.DoubleExcitation(params[0], wires=[0, 1, 2, 3])
    qml.DoubleExcitation(params[1], wires=[0, 1, 4, 5])
    return qml.expval(mol.hamiltonian)

def no_qjit_optimization(params):
    # set up optimizer
    opt = jaxopt.GradientDescent(no_qjit_cost, stepsize=0.3, jit=False)
    state = opt.init_state(params)

    for i in range(15):
        (params, state) = opt.update(params, state)

    return params</code>
  <preformat>&gt;&gt;&gt; %timeit no_qjit_optimization(params)
3.73 s ± 522 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</preformat>
  <p>For more code examples, please see the Catalyst
  documentation<xref ref-type="fn" rid="fn1">1</xref>.</p>
</sec>
<sec id="installation-and-contribution">
  <title>Installation and contribution</title>
  <p>The Catalyst source code is available under the Apache 2.0 license
  on GitHub<xref ref-type="fn" rid="fn2">2</xref>, and binaries are
  available for <monospace>pip</monospace> installation on Linux and
  macOS<xref ref-type="fn" rid="fn3">3</xref>. Contributions to Catalyst
  — via feedback, issues, or pull requests on GitHub — are welcomed.
  Additional Catalyst documentation and tutorials are available on our
  online documentation<xref ref-type="fn" rid="fn4">4</xref>.</p>
</sec>
<sec id="discussion-and-future-work">
  <title>Discussion and future work</title>
  <p>The Catalyst hybrid compilation stack as presented here provides an
  end-to-end infrastructure to explore next-generation dynamic hybrid
  quantum-classical algorithms, by allowing for workflows that support
  compressed representation of large, highly structured quantum
  algorithms, as well as mid-circuit measurements with arbitrary
  classical processing and feedforward.</p>
  <p>The Catalyst software stack will continue to be developed alongside
  research, algorith, and hardware needs, with potential future work
  including support for quantum hardware control systems, building out a
  library of MLIR quantum compilation passes for optimizing quantum
  circuits (without unrolling classical control structure), and
  explorations of dynamic quantum error mitigation and proof-of-concept
  error correction experiments.</p>
  <p>Quantum software is driving many new results and ideas in quantum
  computing research, and the PennyLane framework has already been used
  in a number of scientific publications
  (<xref alt="Delgado et al., 2021" rid="ref-delgado2021variational" ref-type="bibr">Delgado
  et al., 2021</xref>;
  <xref alt="Wierichs et al., 2022" rid="ref-wierichs2021general" ref-type="bibr">Wierichs
  et al., 2022</xref>) and educational materials
  (<xref alt="Xanadu, 2018" rid="ref-demos" ref-type="bibr">Xanadu,
  2018</xref>). By enabling researchers to scale up their ideas and
  algorithms, and execute on both near-term and future quantum hardware,
  the software presented here will help drive future research in quantum
  computing.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge contributions from Lee J O’Riordan, Nathan Killoran,
  and Olivia Di Matteo during the genesis of this project.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-ibmq">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <string-name>IBM Corporation</string-name>
      </person-group>
      <article-title>IBM Quantum Experience</article-title>
      <year iso-8601-date="2016">2016</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2018-11-01">2018</year><month>11</month><day>01</day></date-in-citation>
      <uri>https://quantumexperience.ng.bluemix.net/</uri>
    </element-citation>
  </ref>
  <ref id="ref-qiskit">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <string-name>IBM Corporation</string-name>
      </person-group>
      <article-title>Qiskit</article-title>
      <year iso-8601-date="2016">2016</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2018-11-01">2018</year><month>11</month><day>01</day></date-in-citation>
      <uri>https://qiskit.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cirq">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <string-name>Google Inc.</string-name>
      </person-group>
      <article-title>Cirq</article-title>
      <year iso-8601-date="2018">2018</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2018-11-01">2018</year><month>11</month><day>01</day></date-in-citation>
      <uri>https://cirq.readthedocs.io/en/latest/</uri>
    </element-citation>
  </ref>
  <ref id="ref-braket">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Amazon Web Services</string-name>
      </person-group>
      <article-title>Amazon Braket</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://aws.amazon.com/braket/</uri>
    </element-citation>
  </ref>
  <ref id="ref-pennylane">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bergholm</surname><given-names>Ville</given-names></name>
        <name><surname>Izaac</surname><given-names>Josh</given-names></name>
        <name><surname>Schuld</surname><given-names>Maria</given-names></name>
        <name><surname>Gogolin</surname><given-names>Christian</given-names></name>
        <name><surname>Ahmed</surname><given-names>Shahnawaz</given-names></name>
        <name><surname>Ajith</surname><given-names>Vishnu</given-names></name>
        <name><surname>Alam</surname><given-names>M Sohaib</given-names></name>
        <name><surname>Alonso-Linaje</surname><given-names>Guillermo</given-names></name>
        <name><surname>AkashNarayanan</surname><given-names>B</given-names></name>
        <name><surname>Asadi</surname><given-names>Ali</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Pennylane: Automatic differentiation of hybrid quantum-classical computations</article-title>
      <source>arXiv preprint arXiv:1811.04968</source>
      <year iso-8601-date="2018">2018</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1811.04968</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-cuquantum">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>NVIDIA cuQuantum team</string-name>
      </person-group>
      <article-title>NVIDIA/cuQuantum: cuQuantum v22.03.0</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2022-03">2022</year><month>03</month>
      <uri>https://doi.org/10.5281/zenodo.6385575</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.6385575</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mcclean2016theory">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>McClean</surname><given-names>Jarrod R</given-names></name>
        <name><surname>Romero</surname><given-names>Jonathan</given-names></name>
        <name><surname>Babbush</surname><given-names>Ryan</given-names></name>
        <name><surname>Aspuru-Guzik</surname><given-names>Alán</given-names></name>
      </person-group>
      <article-title>The theory of variational hybrid quantum-classical algorithms</article-title>
      <source>New Journal of Physics</source>
      <publisher-name>IOP Publishing</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>18</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1088/1367-2630/18/2/023023</pub-id>
      <fpage>023023</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-farhi2014quantum">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Farhi</surname><given-names>Edward</given-names></name>
        <name><surname>Goldstone</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Gutmann</surname><given-names>Sam</given-names></name>
      </person-group>
      <article-title>A quantum approximate optimization algorithm</article-title>
      <source>arXiv preprint arXiv:1411.4028</source>
      <year iso-8601-date="2014">2014</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1411.4028</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-delgado2021variational">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Delgado</surname><given-names>Alain</given-names></name>
        <name><surname>Arrazola</surname><given-names>Juan Miguel</given-names></name>
        <name><surname>Jahangiri</surname><given-names>Soran</given-names></name>
        <name><surname>Niu</surname><given-names>Zeyue</given-names></name>
        <name><surname>Izaac</surname><given-names>Josh</given-names></name>
        <name><surname>Roberts</surname><given-names>Chase</given-names></name>
        <name><surname>Killoran</surname><given-names>Nathan</given-names></name>
      </person-group>
      <article-title>Variational quantum algorithm for molecular geometry optimization</article-title>
      <source>Physical Review A</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>104</volume>
      <issue>5</issue>
      <pub-id pub-id-type="doi">10.1103/physreva.104.052402</pub-id>
      <fpage>052402</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-jax">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Frostig</surname><given-names>Roy</given-names></name>
        <name><surname>Hawkins</surname><given-names>Peter</given-names></name>
        <name><surname>Johnson</surname><given-names>Matthew James</given-names></name>
        <name><surname>Leary</surname><given-names>Chris</given-names></name>
        <name><surname>Maclaurin</surname><given-names>Dougal</given-names></name>
        <name><surname>Necula</surname><given-names>George</given-names></name>
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Wanderman-Milne</surname><given-names>Skye</given-names></name>
        <name><surname>Zhang</surname><given-names>Qiao</given-names></name>
      </person-group>
      <article-title>JAX: Composable transformations of Python+NumPy programs</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>http://github.com/google/jax</uri>
    </element-citation>
  </ref>
  <ref id="ref-lightning">
    <element-citation publication-type="software">
      <article-title>PennyLane Lightning: Fast state-vector simulators written in C++</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>http://github.com/pennylane/pennylane-lightning</uri>
    </element-citation>
  </ref>
  <ref id="ref-llvm">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Lattner</surname><given-names>Chris</given-names></name>
        <name><surname>Adve</surname><given-names>Vikram</given-names></name>
      </person-group>
      <article-title>LLVM: A compilation framework for lifelong program analysis and transformation</article-title>
      <source>2004 IEEE/ACM international symposium on code generation and optimization (CGO)</source>
      <publisher-loc>San Jose, CA, USA</publisher-loc>
      <year iso-8601-date="2004-03">2004</year><month>03</month>
      <pub-id pub-id-type="doi">10.1109/CGO.2004.1281665</pub-id>
      <fpage>75</fpage>
      <lpage>88</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mlir">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Lattner</surname><given-names>Chris</given-names></name>
        <name><surname>Amini</surname><given-names>Mehdi</given-names></name>
        <name><surname>Bondhugula</surname><given-names>Uday</given-names></name>
        <name><surname>Cohen</surname><given-names>Albert</given-names></name>
        <name><surname>Davis</surname><given-names>Andy</given-names></name>
        <name><surname>Pienaar</surname><given-names>Jacques</given-names></name>
        <name><surname>Riddle</surname><given-names>River</given-names></name>
        <name><surname>Shpeisman</surname><given-names>Tatiana</given-names></name>
        <name><surname>Vasilache</surname><given-names>Nicolas</given-names></name>
        <name><surname>Zinenko</surname><given-names>Oleksandr</given-names></name>
      </person-group>
      <article-title>MLIR: Scaling compiler infrastructure for domain specific computation</article-title>
      <source>2021 IEEE/ACM international symposium on code generation and optimization (CGO)</source>
      <year iso-8601-date="2021">2021</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/CGO51591.2021.9370308</pub-id>
      <fpage>2</fpage>
      <lpage>14</lpage>
    </element-citation>
  </ref>
  <ref id="ref-borealis">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Madsen</surname><given-names>Lars S</given-names></name>
        <name><surname>Laudenbach</surname><given-names>Fabian</given-names></name>
        <name><surname>Askarani</surname><given-names>Mohsen Falamarzi</given-names></name>
        <name><surname>Rortais</surname><given-names>Fabien</given-names></name>
        <name><surname>Vincent</surname><given-names>Trevor</given-names></name>
        <name><surname>Bulmer</surname><given-names>Jacob FF</given-names></name>
        <name><surname>Miatto</surname><given-names>Filippo M</given-names></name>
        <name><surname>Neuhaus</surname><given-names>Leonhard</given-names></name>
        <name><surname>Helt</surname><given-names>Lukas G</given-names></name>
        <name><surname>Collins</surname><given-names>Matthew J</given-names></name>
        <name><surname>Lita</surname><given-names>Adriana E.</given-names></name>
        <name><surname>Gerrits</surname><given-names>Thomas</given-names></name>
        <name><surname>Nam</surname><given-names>Sae Woo</given-names></name>
        <name><surname>Vaidya</surname><given-names>Varun D.</given-names></name>
        <name><surname>Menotti</surname><given-names>Matteo</given-names></name>
        <name><surname>Dhand</surname><given-names>Ish</given-names></name>
        <name><surname>Vernon</surname><given-names>Zachary</given-names></name>
        <name><surname>Quesada</surname><given-names>Nicolás</given-names></name>
        <name><surname>Lavoie</surname><given-names>Jonathan</given-names></name>
      </person-group>
      <article-title>Quantum computational advantage with a programmable photonic processor</article-title>
      <source>Nature</source>
      <publisher-name>Nature Publishing Group UK London</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <volume>606</volume>
      <issue>7912</issue>
      <pub-id pub-id-type="doi">10.1038/s41586-022-04725-x</pub-id>
      <fpage>75</fpage>
      <lpage>81</lpage>
    </element-citation>
  </ref>
  <ref id="ref-enzyme">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Moses</surname><given-names>William</given-names></name>
        <name><surname>Churavy</surname><given-names>Valentin</given-names></name>
      </person-group>
      <article-title>Instead of rewriting foreign code for machine learning, automatically synthesize fast gradients</article-title>
      <source>Advances in neural information processing systems</source>
      <person-group person-group-type="editor">
        <name><surname>Larochelle</surname><given-names>H.</given-names></name>
        <name><surname>Ranzato</surname><given-names>M.</given-names></name>
        <name><surname>Hadsell</surname><given-names>R.</given-names></name>
        <name><surname>Balcan</surname><given-names>M. F.</given-names></name>
        <name><surname>Lin</surname><given-names>H.</given-names></name>
      </person-group>
      <publisher-name>Curran Associates, Inc.</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>33</volume>
      <uri>https://proceedings.neurips.cc/paper/2020/file/9332c513ef44b682e9347822c2e457ac-Paper.pdf</uri>
      <fpage>12472</fpage>
      <lpage>12485</lpage>
    </element-citation>
  </ref>
  <ref id="ref-qir">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>QIR Alliance</string-name>
      </person-group>
      <source>QIR Specification</source>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/qir-alliance/qir-spec</uri>
    </element-citation>
  </ref>
  <ref id="ref-wierichs2021general">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wierichs</surname><given-names>David</given-names></name>
        <name><surname>Izaac</surname><given-names>Josh</given-names></name>
        <name><surname>Wang</surname><given-names>Cody</given-names></name>
        <name><surname>Lin</surname><given-names>Cedric Yen-Yu</given-names></name>
      </person-group>
      <article-title>General parameter-shift rules for quantum gradients</article-title>
      <source>Quantum</source>
      <publisher-name>Verein zur Förderung des Open Access Publizierens in den Quantenwissenschaften</publisher-name>
      <year iso-8601-date="2022-03">2022</year><month>03</month>
      <volume>6</volume>
      <issn>2521-327X</issn>
      <uri>https://doi.org/10.22331/q-2022-03-30-677</uri>
      <pub-id pub-id-type="doi">10.22331/q-2022-03-30-677</pub-id>
      <fpage>677</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-schuld2018gradients">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schuld</surname><given-names>Maria</given-names></name>
        <name><surname>Bergholm</surname><given-names>Ville</given-names></name>
        <name><surname>Gogolin</surname><given-names>Christian</given-names></name>
        <name><surname>Izaac</surname><given-names>Josh</given-names></name>
        <name><surname>Killoran</surname><given-names>Nathan</given-names></name>
      </person-group>
      <article-title>Evaluating analytic gradients on quantum hardware</article-title>
      <source>Physical Review A</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>99</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1103/physreva.99.032331</pub-id>
      <fpage>032331</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-moldovan2018autograph">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Moldovan</surname><given-names>Dan</given-names></name>
        <name><surname>Decker</surname><given-names>James M</given-names></name>
        <name><surname>Wang</surname><given-names>Fei</given-names></name>
        <name><surname>Johnson</surname><given-names>Andrew A</given-names></name>
        <name><surname>Lee</surname><given-names>Brian K</given-names></name>
        <name><surname>Nado</surname><given-names>Zachary</given-names></name>
        <name><surname>Sculley</surname><given-names>D</given-names></name>
        <name><surname>Rompf</surname><given-names>Tiark</given-names></name>
        <name><surname>Wiltschko</surname><given-names>Alexander B</given-names></name>
      </person-group>
      <article-title>AutoGraph: Imperative-style coding with graph-based performance</article-title>
      <source>arXiv preprint arXiv:1810.08061</source>
      <year iso-8601-date="2018">2018</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1810.08061</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-blondel2022efficient">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Blondel</surname><given-names>Mathieu</given-names></name>
        <name><surname>Berthet</surname><given-names>Quentin</given-names></name>
        <name><surname>Cuturi</surname><given-names>Marco</given-names></name>
        <name><surname>Frostig</surname><given-names>Roy</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Llinares-López</surname><given-names>Felipe</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>Vert</surname><given-names>Jean-Philippe</given-names></name>
      </person-group>
      <article-title>Efficient and modular implicit differentiation</article-title>
      <source>Advances in neural information processing systems</source>
      <year iso-8601-date="2022">2022</year>
      <volume>35</volume>
      <fpage>5230</fpage>
      <lpage>5242</lpage>
    </element-citation>
  </ref>
  <ref id="ref-demos">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Xanadu</string-name>
      </person-group>
      <article-title>PennyLane Demos</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://pennylane.ai/qml/demonstrations</uri>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>https://docs.pennylane.ai/projects/catalyst</p>
  </fn>
  <fn id="fn2">
    <label>2</label><p>https://github.com/PennyLaneAI/catalyst</p>
  </fn>
  <fn id="fn3">
    <label>3</label><p>https://pypi.org/project/pennylane-catalyst</p>
  </fn>
  <fn id="fn4">
    <label>4</label><p>https://docs.pennylane.ai/projects/catalyst</p>
  </fn>
</fn-group>
</back>
</article>
