<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4762</article-id>
<article-id pub-id-type="doi">10.21105/joss.04762</article-id>
<title-group>
<article-title>Pyripherals: A Python Package for Communicating with
Peripheral Electronic Devices</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9412-2049</contrib-id>
<name>
<surname>Stroschein</surname>
<given-names>Abraham</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Bonequi</surname>
<given-names>Ian Delgadillo</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7236-7202</contrib-id>
<name>
<surname>Koerner</surname>
<given-names>Lucas J.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Electrical and Computer Engineering,
University of St. Thomas</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-08-01">
<day>1</day>
<month>8</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>79</issue>
<fpage>4762</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>instrument control</kwd>
<kwd>data acquisition</kwd>
<kwd>electrical engineering</kwd>
<kwd>physics</kwd>
<kwd>experiments</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>We are developing a data acquisition system (DAQ) for real-time
  feedback that uses FPGA-based control of and acquisition from various
  electronic chips, or peripherals. Because these peripherals
  communicate over multiple protocols (SPI, I2C, LVDS) through an FPGA,
  we designed <italic>pyripherals</italic> to organize and abstract
  registers, the communication protocol, and the host computer interface
  to each communication controller. The software and firmware are
  designed for Opal Kelly FPGA modules, yet the Python developments are
  generally useful to organize communication with peripheral chips.</p>
  <p>Data from a register is accessed with the address of the register
  and the bit indices of the data field, but users will often refer to
  the data field by its name, which <italic>pyripherals</italic> retains
  as a dictionary key. When passed the location of the data field,
  parameterized functions automatically format the data or command as
  required by the communication interface used by the peripheral. The
  assembled message is passed to the appropriate hardware controller
  responsible for low-level communication with the peripheral. In this
  solution, the addressing, bit indexing, and formatting are handled by
  <italic>pyripherals</italic> before the message is sent over the Opal
  Kelly FrontPanel API to a hardware-level communication controller on
  an Opal Kelly FPGA
  (<xref alt="“FrontPanel®,” 2022" rid="ref-opalkelly.comFrontPanel" ref-type="bibr">“FrontPanel®,”
  2022</xref>), which handles low-level communication with the desired
  peripheral.</p>
  <p>This DAQ system and the <italic>pyripherals</italic> software are
  crucial components of a digital feedback amplifier being developed for
  ion channel electrophysiology
  (<xref alt="Koerner et al., 2022" rid="ref-koernerDigitalFeedbackAmplifier2022a" ref-type="bibr">Koerner
  et al., 2022</xref>) and more generally comprise an open-source system
  for microsecond latency real-time feedback experiments. Similar DAQ
  systems
  (<xref alt="Leibrandt &amp; Heidecker, 2015" rid="ref-leibrandtOpenSourceDigital2015" ref-type="bibr">Leibrandt
  &amp; Heidecker, 2015</xref>;
  <xref alt="Yu et al., 2018" rid="ref-yuPerformanceLimitationsFPGAbased2018" ref-type="bibr">Yu
  et al., 2018</xref>) create MHz bandwidth servos for physics
  experiments but the host software is either not publicly available or
  not generalizable. Many Python packages for lab automation and
  electrical instrument control have been developed
  (<xref alt="Allan et al., 2019" rid="ref-allanBlueskyAheadMultiFacility2019" ref-type="bibr">Allan
  et al., 2019</xref>;
  <xref alt="Casagrande, 2020" rid="ref-casagrandeInstrumentKit" ref-type="bibr">Casagrande,
  2020</xref>;
  <xref alt="Jermain &amp; Rowlands, 2020" rid="ref-jermainPyMeasure" ref-type="bibr">Jermain
  &amp; Rowlands, 2020</xref>) yet do not support real-time control. In
  our system, the FPGA controller fills a need for microsecond level
  latency by interfacing directly to analog-to-digital converters and
  digital-to-analog converters while <italic>pyripherals</italic>
  organizes the configuration of these chips. The
  <italic>pyripherals</italic> software can be expanded to control and
  read data from other electronic sensors, such as accelerometers, and
  is currently in use in our lab with a time-of-flight depth sensor (AMS
  TMF8801) for rapid readout of photon return time histograms. Similar
  to <italic>pyripherals</italic>, the Python package
  <italic>registerMap</italic>
  (<xref alt="Smiley, 2019" rid="ref-smileyRegisterMap" ref-type="bibr">Smiley,
  2019</xref>) creates a framework for register map organization in
  embedded systems. However, it lacks the interconnection between
  register data and hardware communication controller offered by
  <italic>pyripherals</italic>. The Opal Kelly XEM7310 FPGA that we use
  for communication controllers to demonstrate
  <italic>pyripherals</italic> is common in research environments such
  that our <italic>pyripherals</italic> software may accelerate
  developments of FPGA to electronic chip interfaces in other labs.</p>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p><inline-graphic mimetype="image" mime-subtype="png" xlink:href="media/JOSS_diagram.drawio.png" />
  <italic>Fig. 1: On the left, the pyripherals module abstracts
  registers to enable user code to easily read and write to peripherals.
  pyripherals and the FPGA code share a file (ep_defines.v) that defines
  the addresses of endpoints so that the transport of messages from the
  host computer through the FPGA and to the correct peripherals is
  managed. On the right, is an example hardware setup supported by
  Pyripherals. An FPGA module (Opal Kelly) with a Python API to the USB
  interface has various types of communication controllers in the FPGA
  logic and is wired to peripheral chips that sit on a custom circuit
  board. The chips include analog-to-digital converters (ADCs),
  digital-to-analog converters (DACs), and a unique identification chip
  (UID). The example user code reads the serial number of the UID chip
  using
  <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/peripherals.html#pyripherals.peripherals.UID_24AA025UID.UID_24AA025UID.get_serial_number"><monospace>get_serial_number</monospace></ext-link>.
  Pyripherals constructs the message using the address of the serial
  number register from the Registers.xslx spreadsheet. The message is
  then routed to the appropriate communication controller using the
  controller addresses defined in the ep_defines.v file and by the user
  code which provides the controller/bus name at initialization of the
  UID instance. Pyripherals formats messages for each type of
  communication protocol. In the user code example, the UID chip is
  connected to the I2CDAQ bus and has messages routed through the I2C0
  communication controller such that the UID Python class inherits from
  a parent I2CController class.</italic></p>
  <sec id="registers">
    <title>Registers</title>
    <p><italic>pyripherals</italic> reads an Excel spreadsheet that
    holds the name, address, lower bit index, upper bit index, and bit
    width of each data field. Different peripherals can be separated
    into different sheets within the register index. The table below
    shows an example sheet for a peripheral named “MyADC”.</p>
    <table-wrap>
      <table>
        <colgroup>
          <col width="17%" />
          <col width="14%" />
          <col width="17%" />
          <col width="12%" />
          <col width="21%" />
          <col width="19%" />
        </colgroup>
        <thead>
          <tr>
            <th>Name</th>
            <th>Hex Address</th>
            <th>Default Value</th>
            <th>Bit Width</th>
            <th>Bit Index (High)</th>
            <th>Bit Index (Low)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>RESULT</td>
            <td>0x00</td>
            <td>0xf</td>
            <td>12</td>
            <td>11</td>
            <td>0</td>
          </tr>
          <tr>
            <td>CHAN</td>
            <td>0x00</td>
            <td>0x0</td>
            <td>4</td>
            <td>15</td>
            <td>12</td>
          </tr>
          <tr>
            <td>CONFIG</td>
            <td>0x01</td>
            <td>0xff</td>
            <td>8</td>
            <td>7</td>
            <td>0</td>
          </tr>
          <tr>
            <td>ID</td>
            <td>0x01</td>
            <td>0x0</td>
            <td>8</td>
            <td>15</td>
            <td>8</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p><italic>Table 1: Each row shows a bit-field with a name and an
    address. This information is typically extracted from the datasheet
    of the peripheral chip. Addressable registers in a peripheral have
    multiple bits (often 16 or 32) that allow multiple data fields to be
    held in each register. To account for this, the location within a
    register is indicated by the high and low bit index columns. The
    default value of the register is stored to support verification of
    communication by checks of read-only registers.</italic></p>
    <list list-type="bullet">
      <list-item>
        <p>Name = name of the data field chosen by the user. This is how
        the register will be accessed in Python.</p>
      </list-item>
      <list-item>
        <p>Hex Address = address of the register on the chip as given by
        its datasheet. Must be formatted as a hexadecimal number with
        “0x” prefix.</p>
      </list-item>
      <list-item>
        <p>Default Value = the default value of the register as given by
        the chip’s datasheet.</p>
      </list-item>
      <list-item>
        <p>Bit Width = the number of bits in the data field.</p>
      </list-item>
      <list-item>
        <p>Bit Index (High) = the bit index of the upper end of the data
        field in the register. Ex. in a 32-bit register where the data
        field is located in the last 4 bits of the register, Bit Index
        (High) would be 31.</p>
      </list-item>
      <list-item>
        <p>Bit Index (Low) = the bit index of the lower end of the data
        field in the register. Ex. in a 32-bit register where the data
        field is located in the last 4 bits of the register, Bit Index
        (Low) would be 28.</p>
      </list-item>
    </list>
    <p><italic>pyripherals</italic> then reads the spreadsheet, referred
    to as a register index in the documentation, and returns a
    dictionary of name-Register pairs using the
    <monospace>Register.get_chip_registers</monospace> static method.
    The example below retrieves the register index from the table
    above.</p>
    <code language="python">&gt;&gt;&gt; MYADC_regs = Register.get_chip_registers('MyADC')</code>
    <p>Each <monospace>Register</monospace> object holds all values from
    the spreadsheet for the data field it represents. A guide for
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/register_index_guide.html">creating
    a register index</ext-link> is located in the documentation. An
    example register is shown below.</p>
    <code language="python">&gt;&gt;&gt; print(MYADC_regs['RESULT']) 
0x0[0:11] 
&gt;&gt;&gt; MYADC_regs['RESULT'].__dict__ 
{'address': 0, 'default': 15, 'bit_index_high': 11, 'bit_index_low': 0,
'bit_width': 12}</code>
    <p>The <monospace>Register</monospace> abstraction of
    <italic>pyripherals</italic> allows user code to refer to data
    fields using only their names. The spreadsheet organization of data
    fields allows for user-friendly editing and sharing of data field
    information without the need to change user code. Specific
    applications include communicating with microcontrollers or
    development boards like Arduino as well as accessing data using SPI
    or I2C controllers.</p>
    <p><italic>pyripherals</italic> uses
    <monospace>Registers</monospace> to assemble messages for SPI
    (<xref alt="Srot, 2016" rid="ref-srotOverviewSPIController" ref-type="bibr">Srot,
    2016</xref>) and I2C
    (<xref alt="I2CController, 2021" rid="ref-DesignresourcesHDLComponentsI2CController" ref-type="bibr"><italic>I2CController</italic>,
    2021</xref>) communication interfaces using parameterized commands
    in classes for
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/peripherals.html#pyripherals.peripherals.SPIController.SPIController">SPI</ext-link>,
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/peripherals.html#pyripherals.peripherals.SPIFifoDriven.SPIFifoDriven">hardware-timed
    SPI</ext-link>, and
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/peripherals.html#pyripherals.peripherals.I2CController.I2CController">I2C</ext-link>.
    Communication specific to an individual peripheral is available in
    its subclass. A full list of
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/peripherals.html">peripherals
    with classes</ext-link> in <italic>pyripherals</italic> can be found
    in the documentation.</p>
  </sec>
  <sec id="endpoints">
    <title>Endpoints</title>
    <p>For our research, <italic>pyripherals</italic> is paired with
    hardware controllers instantiated on an Opal Kelly FPGA. These
    controllers send communication signals to the chips connected to the
    FPGA. To interact with these controllers,
    <italic>pyripherals</italic> uses the Opal Kelly FrontPanel API for
    bidirectional communication over USB between a host computer and the
    FPGA using addressable endpoints.</p>
    <p><italic>pyripherals</italic> reads FrontPanel endpoint addresses
    and bit indices from a Verilog definition file. This Verilog file
    requires a
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/endpoint_definitions_guide.html">naming
    system</ext-link> described in the documentation and associates
    peripherals with a specific hardware controller instantiation. A
    complete guide to
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/endpoint_definitions_guide.html">creating
    an endpoint definitions file</ext-link> is in the documentation.
    Each endpoint definition has an address offset, a bit-field width,
    and an amount to increment the address if a second or subsequent
    instance is generated. The line below shows an example that defines
    an endpoint named “WRITE_IN” that belongs to peripheral “MYADC” with
    an address of 0x04 (the 8’h prefix below is Verilog syntax that
    indicates an 8-bit hexademical number) and a bit_width of 32 that
    adds 7 to the address every time it is advanced.</p>
    <code language="verilog">`define MYADC_WRITE_IN_GEN_ADDR 8'h04 // bit_width=32 addr_step=7</code>
    <p>The naming convention for endpoints that contain addresses or bit
    indices is demonstrated below with curly brackets {} indicating
    placeholders to be completed by the user. Endpoint directions are
    from the perspective of the FPGA so <italic>WRITE_IN</italic> is
    data from the host computer into the FPGA that is destined for the
    ADC chip. More information on the syntax and meaning of these lines
    is available in the
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/endpoint_definitions_guide.html">endpoint
    definitions guide</ext-link>.</p>
    <p>Addresses:</p>
    <code language="verilog">`define {CHIPNAME}_{ENDPOINT_NAME}{_GEN_ADDR} {hexadecimal address}
// bit_width={bit_width} addr_step={addr_step}</code>
    <p>Bit Indices:</p>
    <code language="verilog">`define {CHIPNAME}_{ENDPOINT_NAME}{_GEN_BIT} {decimal bit index}
// addr={address or endpoint name} bit_width={bit_width}</code>
    <p><italic>Note: the above comments must be placed on the same line
    as the `define. They are split here for readability.</italic></p>
    <p>For multiple units of the same chip, each chip class has a
    <monospace>create_chips</monospace> method which instantiates a
    specified number of chips, incrementing the endpoint addresses and
    bit indices according to the GEN_ADDR, GEN_BIT, bit_width, and
    addr_step parameters above.</p>
    <p>Once created, the user can read the endpoint definitions file
    with <monospace>Endpoint.get_chip_endpoints</monospace> which
    returns a dictionary of name-Endpoint pairs. An example using the
    “MYADC_WRITE_IN” endpoint from earlier is shown below.</p>
    <code language="python">&gt;&gt;&gt; MYADC_eps = Endpoint.get_chip_endpoints(chip_name='MYADC') 
&gt;&gt;&gt; print(MYADC_eps['WRITE_IN']) 
0x4[None:None] 
&gt;&gt;&gt; MYADC_eps['WRITE_IN'].__dict__ 
{'address': 4, 'bit_index_low': None, 'bit_index_high': None, 'bit_width': 32,
'gen_bit': False, 'gen_address': False, 'addr_step': 7} </code>
    <p>The <monospace>Endpoint</monospace> class in
    <italic>pyripherals</italic> extends the capabilities of the Opal
    Kelly FrontPanel API by automatically linking the Python and Verilog
    endpoint data with a shared definitions file. With
    <italic>pyripherals</italic>, when the user changes the value of an
    endpoint in the definitions file the change is reflected in both the
    Python and Verilog code.</p>
  </sec>
  <sec id="fpga-data-acquisition-code">
    <title>FPGA Data Acquisition Code</title>
    <p>Our FPGA code for use with <italic>pyripherals</italic> is
    available at
    <ext-link ext-link-type="uri" xlink:href="https://github.com/lucask07/covg_fpga/">https://github.com/lucask07/covg_fpga/</ext-link>.
    It is written for the Opal Kelly XEM7310 FPGA and supports I2C, SPI,
    and LVDS communication with a DDR for data buffering. An example use
    of this code is an
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/example.html">impedance
    analyzer</ext-link> using a DAC80508 digital-to-analog converter
    (<xref alt="DAC80508, 2018" rid="ref-dac80508" ref-type="bibr"><italic>DAC80508</italic>,
    2018</xref>) and an ADS8686 analog-to-digital converter
    (<xref alt="ADS8686S, 2020" rid="ref-ads8686" ref-type="bibr"><italic>ADS8686S</italic>,
    2020</xref>) communicating over SPI.</p>
  </sec>
  <sec id="links">
    <title>Links</title>
    <p>Documentation is available at
    <ext-link ext-link-type="uri" xlink:href="https://pyripherals.readthedocs.io/en/latest/index.html">https://pyripherals.readthedocs.io/en/latest/index.html</ext-link>
    and the GitHub is available at
    <ext-link ext-link-type="uri" xlink:href="https://github.com/Ajstros/pyripherals">https://github.com/Ajstros/pyripherals</ext-link>.
    <italic>pyripherals</italic> is available for install from pip at
    <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/pyripherals/">https://pypi.org/project/pyripherals/</ext-link>.</p>
  </sec>
</sec>
<sec id="current-research">
  <title>Current Research</title>
  <p><italic>pyripherals</italic> was developed under an NIH-funded
  project to create a digital ion channel amplifier at the University of
  St. Thomas where it is being used to communicate with and control an
  FPGA-based data acquisition system for real-time feedback.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p><italic>pyripherals</italic> was developed under the National
  Institutes of Health (NIH) R15 grant R15NS116907 to PI L. J.
  Koerner.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-leibrandtOpenSourceDigital2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Leibrandt</surname><given-names>David R.</given-names></name>
        <name><surname>Heidecker</surname><given-names>Jason</given-names></name>
      </person-group>
      <article-title>An open source digital servo for AMO physics experiments</article-title>
      <source>arXiv:1508.06319 [physics]</source>
      <year iso-8601-date="2015-11">2015</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-01-21">2021</year><month>01</month><day>21</day></date-in-citation>
      <uri>http://arxiv.org/abs/1508.06319</uri>
    </element-citation>
  </ref>
  <ref id="ref-srotOverviewSPIController">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Srot</surname><given-names>Simon</given-names></name>
      </person-group>
      <article-title>Overview :: SPI controller core :: OpenCores</article-title>
      <year iso-8601-date="2016">2016</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-05">2022</year><month>07</month><day>05</day></date-in-citation>
      <uri>https://opencores.org/projects/spi</uri>
    </element-citation>
  </ref>
  <ref id="ref-opalkelly.comFrontPanel">
    <element-citation>
      <article-title>FrontPanel®</article-title>
      <source>Opal Kelly</source>
      <publisher-name>Opal Kelly</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-05">2022</year><month>07</month><day>05</day></date-in-citation>
      <uri>https://opalkelly.com/products/frontpanel/</uri>
    </element-citation>
  </ref>
  <ref id="ref-yuPerformanceLimitationsFPGAbased2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yu</surname><given-names>Shi Jing</given-names></name>
        <name><surname>Fajeau</surname><given-names>Emma</given-names></name>
        <name><surname>Liu</surname><given-names>Lin Qiao</given-names></name>
        <name><surname>Jones</surname><given-names>David J.</given-names></name>
        <name><surname>Madison</surname><given-names>Kirk W.</given-names></name>
      </person-group>
      <article-title>The performance and limitations of FPGA-based digital servos for atomic, molecular, and optical physics experiments</article-title>
      <source>Review of Scientific Instruments</source>
      <year iso-8601-date="2018-02">2018</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-28">2022</year><month>07</month><day>28</day></date-in-citation>
      <volume>89</volume>
      <issue>2</issue>
      <issn>0034-6748</issn>
      <uri>https://aip.scitation.org/doi/abs/10.1063/1.5001312</uri>
      <pub-id pub-id-type="doi">10.1063/1.5001312</pub-id>
      <fpage>025107</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-koernerDigitalFeedbackAmplifier2022a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Koerner</surname><given-names>Lucas J.</given-names></name>
        <name><surname>Bonequi</surname><given-names>Ian Degadillo</given-names></name>
        <name><surname>Stroschein</surname><given-names>Abraham</given-names></name>
        <name><surname>Uberecken</surname><given-names>Corissa</given-names></name>
        <name><surname>LoPresto</surname><given-names>Nathan</given-names></name>
        <name><surname>Porter</surname><given-names>Jakob</given-names></name>
      </person-group>
      <article-title>A digital feedback amplifier for oocyte ion channel measurements</article-title>
      <source>Biophysical Journal</source>
      <year iso-8601-date="2022-02">2022</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-28">2022</year><month>07</month><day>28</day></date-in-citation>
      <volume>121</volume>
      <issue>3</issue>
      <issn>0006-3495</issn>
      <uri>https://www.cell.com/biophysj/abstract/S0006-3495(21)02366-3</uri>
      <pub-id pub-id-type="doi">10.1016/j.bpj.2021.11.1391</pub-id>
      <fpage>271a</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-casagrandeInstrumentKit">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Casagrande</surname><given-names>Steven</given-names></name>
      </person-group>
      <article-title>InstrumentKit</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/instrumentkit/InstrumentKit</uri>
    </element-citation>
  </ref>
  <ref id="ref-smileyRegisterMap">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Smiley</surname><given-names>Russell</given-names></name>
      </person-group>
      <article-title>registerMap</article-title>
      <year iso-8601-date="2019">2019</year>
      <uri>https://registermap.readthedocs.io/en/latest/</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.777229</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-jermainPyMeasure">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Jermain</surname><given-names>Colin</given-names></name>
        <name><surname>Rowlands</surname><given-names>Graham</given-names></name>
      </person-group>
      <article-title>PyMeasure</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://pymeasure.readthedocs.io/en/latest/</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3732545</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-allanBlueskyAheadMultiFacility2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Allan</surname><given-names>Daniel</given-names></name>
        <name><surname>Caswell</surname><given-names>Thomas</given-names></name>
        <name><surname>Campbell</surname><given-names>Stuart</given-names></name>
        <name><surname>Rakitin</surname><given-names>Maksim</given-names></name>
      </person-group>
      <article-title>Bluesky’s Ahead: A Multi-Facility Collaboration for an a la Carte Software Project for Data Acquisition and Management</article-title>
      <source>Synchrotron Radiation News</source>
      <year iso-8601-date="2019-05">2019</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-28">2022</year><month>07</month><day>28</day></date-in-citation>
      <volume>32</volume>
      <issue>3</issue>
      <issn>0894-0886</issn>
      <uri>https://doi.org/10.1080/08940886.2019.1608121</uri>
      <pub-id pub-id-type="doi">10.1080/08940886.2019.1608121</pub-id>
      <fpage>19</fpage>
      <lpage>22</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dac80508">
    <element-citation>
      <article-title>DAC80508</article-title>
      <publisher-name>Texas Instruments</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-05">2022</year><month>07</month><day>05</day></date-in-citation>
      <uri>https://www.ti.com/product/DAC80508</uri>
    </element-citation>
  </ref>
  <ref id="ref-ads8686">
    <element-citation>
      <article-title>ADS8686S</article-title>
      <publisher-name>Texas Instruments</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <uri>https://www.ti.com/product/ADS8686S</uri>
    </element-citation>
  </ref>
  <ref id="ref-DesignresourcesHDLComponentsI2CController">
    <element-citation>
      <article-title>I2CController</article-title>
      <publisher-name>Opal Kelly</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-05">2022</year><month>07</month><day>05</day></date-in-citation>
      <uri>https://github.com/opalkelly-opensource/design-resources/tree/main/HDLComponents/I2CController</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
