<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7571</article-id>
<article-id pub-id-type="doi">10.21105/joss.07571</article-id>
<title-group>
<article-title>fortran-src: Fortran static analysis
infrastructure</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5409-7122</contrib-id>
<name>
<surname>Contrastin</surname>
<given-names>Mistral</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8401-7672</contrib-id>
<name>
<surname>Charman</surname>
<given-names>Raoul Hidalgo</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7186-387X</contrib-id>
<name>
<surname>Danish</surname>
<given-names>Matthew</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7543-7675</contrib-id>
<name>
<surname>Orchard</surname>
<given-names>Benjamin</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7058-7842</contrib-id>
<name>
<surname>Orchard</surname>
<given-names>Dominic</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4677-8032</contrib-id>
<name>
<surname>Rice</surname>
<given-names>Andrew</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3310-0756</contrib-id>
<name>
<surname>Xu</surname>
<given-names>Jason</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Computer Science and Technology, University
of Cambridge, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Meta, London, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Bloomberg, US</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Utrecht University, Netherlands</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>School of Computing, University of Kent, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Institute of Computing for Climate Science, University of
Cambridge, UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>10</volume>
<issue>106</issue>
<fpage>7571</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Fortran</kwd>
<kwd>static analysis</kwd>
<kwd>tooling</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>fortran-src is an open-source Haskell library and command-line
  application for the lexing, parsing, and static analysis of Fortran
  source code. It provides an interface to build other tools, e.g., for
  static analysis, automated refactoring, verification, and compilation.
  The library supports FORTRAN 66, FORTRAN 77, Fortran 90, Fortran 95,
  some legacy extensions, and partially Fortran 2003. The library has
  been deployed in several language tool projects in academia and
  industry.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>As one of the oldest surviving programming languages
  (<xref alt="Backus, 1978" rid="ref-backus1978history" ref-type="bibr">Backus,
  1978</xref>), Fortran underpins a vast amount of software; Fortran is
  not only a mainstay of legacy software, but is also used to write new
  software. Fortran remains a popular language in the international
  scientific community; Vanderbauwhede
  (<xref alt="2022" rid="ref-vanderbauwhede2022making" ref-type="bibr">2022</xref>)
  reports data from 2016 on the UK’s Archer supercomputer, showing the
  vast majority of use being Fortran code. Fortran is particularly
  notable for its prevalence in earth sciences, e.g., for implementing
  climate models that inform international policy decisions
  (<xref alt="Méndez et al., 2014" rid="ref-mendez2014climate" ref-type="bibr">Méndez
  et al., 2014</xref>). In 2024, Fortran re-entered the Top 10
  programming languages in the
  <ext-link ext-link-type="uri" xlink:href="https://www.tiobe.com/tiobe-index/">TIOBE
  Index</ext-link>, showing its enduring popularity. The continued use
  of Fortran, particularly in scientific contexts, was the catalyst for
  this software package.</p>
  <p>A challenge in writing language tools for Fortran is its long
  history. There have been several major language standards (FORTRAN
  I-IV, FORTRAN 66 and 77, Fortran 90, 95, 2003, 2008, etc.) Newer
  standards often deprecate features that are known to be a ready source
  of errors, or difficult to specify or understand. However, compilers
  often support an amalgam of features across standards
  (<xref alt="Urma et al., 2014" rid="ref-urmaetal2014" ref-type="bibr">Urma
  et al., 2014</xref>), enabling developers to keep using deprecated
  features and mix language standards. This complicates the development
  of new tools for manipulating Fortran source code; one must tame the
  weight of decades of language evolution.</p>
  <p>Our package, fortran-src, provides an open-source unified core for
  statically analysing Fortran code across language standards, with a
  focus on legacy code over cutting-edge modern Fortran. It is both a
  standalone tool and a library, providing a suite of standard static
  analyses as a basis for further programming language tools and
  systems.</p>
  <sec id="related-software">
    <title>Related software</title>
    <p>A variety of other tools exist for analysing Fortran, but most
    are commercial and closed source, e.g.,
    plusFORT<xref ref-type="fn" rid="fn1">1</xref> (which includes the
    SPAG refactoring tool), the SimCon fpt
    tool<xref ref-type="fn" rid="fn2">2</xref> (which includes further
    verification features like dimensional analysis), and
    Forcheck<xref ref-type="fn" rid="fn3">3</xref>. General commercial
    static analysis tools, like
    Coverity<xref ref-type="fn" rid="fn4">4</xref> and
    Understand<xref ref-type="fn" rid="fn5">5</xref>, can also handle
    Fortran. Photran<xref ref-type="fn" rid="fn6">6</xref> is an
    open-source plugin for refactoring in Eclipse, but does not provide
    more general static analysis facilities. More recent work has
    developed open-source tools for refactoring Fortran
    (<xref alt="Vanderbauwhede, 2022" rid="ref-vanderbauwhede2022making" ref-type="bibr">Vanderbauwhede,
    2022</xref>):
    <ext-link ext-link-type="uri" xlink:href="https://github.com/wimvanderbauwhede/RefactorF4Acc">RefactorF4Acc</ext-link><xref ref-type="fn" rid="fn7">7</xref>
    is an open-source tool for upgrading FORTRAN 77 code to Fortran
    95.</p>
    <p>No comprehensive lexing, parsing, and analysis library was
    available from which to build new tools.</p>
  </sec>
</sec>
<sec id="functionality-in-brief">
  <title>Functionality in brief</title>
  <list list-type="bullet">
    <list-item>
      <p>Lexing (of both fixed and free form code) and parsing of
      Fortran to an expressive unified Abstract Syntax Tree;</p>
    </list-item>
    <list-item>
      <p>Static analyses, e.g., general data flow analysis
      including:</p>
      <list list-type="bullet">
        <list-item>
          <p>Reaching definitions;</p>
        </list-item>
        <list-item>
          <p>Def-use/use-def;</p>
        </list-item>
        <list-item>
          <p>Constant evaluation;</p>
        </list-item>
        <list-item>
          <p>Constant propagation;</p>
        </list-item>
        <list-item>
          <p>Live variable analysis;</p>
        </list-item>
        <list-item>
          <p>Induction variable analysis.</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p>Type checking;</p>
    </list-item>
    <list-item>
      <p>Module graph analysis;</p>
    </list-item>
    <list-item>
      <p>Pretty printing;</p>
    </list-item>
    <list-item>
      <p>“Reprinting” (patching sections of source code without removing
      secondary notation such as comments);</p>
    </list-item>
    <list-item>
      <p>Exporting to JSON.</p>
    </list-item>
  </list>
  <p>fortran-src is primarily a Haskell library but it also packages a
  command-line tool. By exporting parsed code to JSON, the parsing and
  analyses that fortran-src provides may be utilized by non-Haskell
  tools.</p>
  <p>Functionality and example usage of the tool and library is
  described in detail on the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/camfort/fortran-src/wiki/">fortran-src
  wiki</ext-link>. A demonstration of fortran-src for static analysis is
  provided by a small demo tool which detects if an allocatable array is
  used before it has been
  allocated.<xref ref-type="fn" rid="fn8">8</xref></p>
</sec>
<sec id="work-building-on-fortran-src">
  <title>Work building on fortran-src</title>
  <sec id="camfort">
    <title>CamFort</title>
    <p>The fortran-src package originated in the CamFort
    project<xref ref-type="fn" rid="fn9">9</xref> whose aim was to (1)
    develop practical tools for scientists to help reduce the accidental
    complexity of models through evolving a code base, and (2) provide
    tools for automatically verifying properties of code. The work
    resulted in the CamFort tool, of which fortran-src is the core
    infrastructure.</p>
    <p>CamFort provides automatic refactoring of deprecated or
    error-prone programming patterns, with the goal of helping to meet
    core quality requirements, such as maintainability
    (<xref alt="D. Orchard &amp; Rice, 2013" rid="ref-DBLPU003AconfU002FoopslaU002FOrchardR13" ref-type="bibr">D.
    Orchard &amp; Rice, 2013</xref>). It can rewrite EQUIVALENCE and
    COMMON blocks (both of which were deprecated in the Fortran 90
    standard) into more modern style.</p>
    <p>CamFort also provides code analysis and lightweight verification
    tools
    (<xref alt="Contrastin et al., 2016" rid="ref-contrastin2016lightning" ref-type="bibr">Contrastin
    et al., 2016</xref>). Source-code annotations (comments) provide
    specifications of certain aspects of a program’s meaning or
    behaviour. CamFort can check that code conforms to these
    specifications (and for some features can suggest places to insert
    specifications or infer specifications from existing code).
    Facilities include: units-of-measure typing
    (<xref alt="Danish et al., 2024" rid="ref-danish2024incremental" ref-type="bibr">Danish
    et al., 2024</xref>;
    <xref alt="D. Orchard et al., 2020" rid="ref-DBLPU003AjournalsU002FcorrU002Fabs-2011-06094" ref-type="bibr">D.
    Orchard et al., 2020</xref>;
    <xref alt="D. A. Orchard et al., 2015" rid="ref-DBLPU003AjournalsU002FjocsU002FOrchardRO15" ref-type="bibr">D.
    A. Orchard et al., 2015</xref>), array access patterns (for
    capturing the shape of stencil computations)
    (<xref alt="D. A. Orchard et al., 2017" rid="ref-orchard2017verifying" ref-type="bibr">D.
    A. Orchard et al., 2017</xref>), deductive reasoning via pre- and
    post-conditions in Hoare logic style, and various code safety
    checks.</p>
    <p>CamFort has been previously deployed at the Met Office, with its
    analysis tooling run on the Unified Model
    (<xref alt="Walters et al., 2017" rid="ref-walters2017met" ref-type="bibr">Walters
    et al., 2017</xref>) to ensure internal code quality standards are
    met.</p>
  </sec>
  <sec id="fortran-vars-memory-model-library">
    <title>fortran-vars memory model library</title>
    <p><monospace>fortran-vars</monospace> is a static analysis library
    built on top of <monospace>fortran-src</monospace>. Many static
    analysis questions depend on knowing the value and type of
    expressions. <monospace>fortran-vars</monospace> provides an API to
    answer this question. It has modules for symbol table construction,
    constant expression evaluation, and type checking. Additionally,
    <monospace>fortran-vars</monospace> provides a memory model to
    resolve aliases introduced by <monospace>equivalence</monospace>
    statements, which are very common in legacy Fortran 77 code. It is
    possible to construct such a memory model because variables in
    Fortran 77 are statically allocated by default. Data flow analysis,
    such as constant propagation analysis, can be conducted based on
    memory locations instead of variable names.</p>
  </sec>
  <sec id="nonstandard-integer-refactoring">
    <title>Nonstandard INTEGER refactoring</title>
    <p>fortran-src has been used to build refactoring tools to help
    migration and improve the quality of large legacy codebases. One
    example is an effort to fix issues around the use of integers where
    logical types are expected. This tool uses the typechecker to find
    integer expressions which are then normalised while flagging
    anything potentially changing behaviour for further manual
    inspection. These might be situations in which some code is hard to
    statically analyse but safe, or it may have uncovered an existing
    bug. The tool uncovered many such bugs in a particular codebase
    during this effort, including several in the form of the snippet
    above.</p>
    <p>This effort, along with a number of others, allowed the team
    working at Bloomberg (a subset of the authors here) to eventually
    migrate a codebase from a legacy compiler to a modified GFortran,
    with no change in behaviour.</p>
  </sec>
</sec>
<sec id="project-maintenance-and-documentation">
  <title>Project maintenance and documentation</title>
  <p>fortran-src may be built and used on Windows, Mac, and Linux
  systems using a recent version of the
  <ext-link ext-link-type="uri" xlink:href="https://www.haskell.org/ghc/">Glasgow
  Haskell Compiler</ext-link>. The project includes an expansive test
  suite covering various parsing edge cases and behaviours, which is
  automatically executed for changes to the project (on the above three
  systems). Bug reports and other contributions are welcomed at the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/camfort/fortran-src">fortran-src
  GitHub page</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The initial work on the fortran-src infrastructure was funded by an
  EPSRC grant <bold>CamFort: Automated evolution and verification of
  computational science models</bold> (EP/M026124/1), from 2015-18, and
  by an EPSRC Impact Acceleration Award and then Knowledge Transfer
  Partnership grant from 2018-19. Orchard is also supported by the
  generosity of Eric and Wendy Schmidt by recommendation of the Schmidt
  Sciences program, through which he carries on his work supporting
  scientists through programming languages, tools, and systems as part
  of the Institute of Computing for Climate Science at the University of
  Cambridge. Furthermore, this work was supported by a grant from
  Bloomberg.</p>
  <p>A number of other people have been associated with the project and
  have contributed to the development of the package over the years (in
  alphabetical order of surname):</p>
  <list list-type="bullet">
    <list-item>
      <p>Daniel Beer</p>
    </list-item>
    <list-item>
      <p>Anthony Burzillo</p>
    </list-item>
    <list-item>
      <p>Harry Clarke</p>
    </list-item>
    <list-item>
      <p>Aiden Jeffrey</p>
    </list-item>
    <list-item>
      <p>Lukasz Kolodziejczyk</p>
    </list-item>
    <list-item>
      <p>Vilem-Benjamin Liepelt</p>
    </list-item>
    <list-item>
      <p>Darius Makovsky</p>
    </list-item>
    <list-item>
      <p>Benjamin Moon</p>
    </list-item>
    <list-item>
      <p>Daniel Ruoso</p>
    </list-item>
    <list-item>
      <p>Eric Seidel</p>
    </list-item>
    <list-item>
      <p>Poppy Singleton-Hoare</p>
    </list-item>
    <list-item>
      <p>Jay Torry</p>
    </list-item>
  </list>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-DBLPU003AconfU002FoopslaU002FOrchardR13">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Orchard</surname><given-names>Dominic</given-names></name>
        <name><surname>Rice</surname><given-names>Adrew</given-names></name>
      </person-group>
      <article-title>Upgrading Fortran source code using automatic refactoring</article-title>
      <source>Proceedings of the 2013 ACM workshop on refactoring tools, WRT@SPLASH 2013, indianapolis, IN, USA, october 27, 2013</source>
      <year iso-8601-date="2013">2013</year>
      <uri>http://doi.acm.org/10.1145/2541348.2541356</uri>
      <pub-id pub-id-type="doi">10.1145/2541348.2541356</pub-id>
      <fpage>29</fpage>
      <lpage>32</lpage>
    </element-citation>
  </ref>
  <ref id="ref-DBLPU003AjournalsU002FjocsU002FOrchardRO15">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Orchard</surname><given-names>Dominic A.</given-names></name>
        <name><surname>Rice</surname><given-names>Andrew C.</given-names></name>
        <name><surname>Oshmyan</surname><given-names>Oleg</given-names></name>
      </person-group>
      <article-title>Evolving Fortran types with inferred units-of-measure</article-title>
      <source>J. Comput. Science</source>
      <year iso-8601-date="2015">2015</year>
      <volume>9</volume>
      <uri>http://dx.doi.org/10.1016/j.jocs.2015.04.018</uri>
      <pub-id pub-id-type="doi">10.1016/j.jocs.2015.04.018</pub-id>
      <fpage>156</fpage>
      <lpage>162</lpage>
    </element-citation>
  </ref>
  <ref id="ref-DBLPU003AjournalsU002FcorrU002Fabs-2011-06094">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Orchard</surname><given-names>Dominic</given-names></name>
        <name><surname>Contrastin</surname><given-names>Mistral</given-names></name>
        <name><surname>Danish</surname><given-names>Matthew</given-names></name>
        <name><surname>Rice</surname><given-names>Andrew</given-names></name>
      </person-group>
      <article-title>Guiding user annotations for units-of-measure verification</article-title>
      <source>CoRR</source>
      <year iso-8601-date="2020">2020</year>
      <volume>abs/2011.06094</volume>
      <uri>https://arxiv.org/abs/2011.06094</uri>
    </element-citation>
  </ref>
  <ref id="ref-orchard2017verifying">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Orchard</surname><given-names>Dominic A.</given-names></name>
        <name><surname>Contrastin</surname><given-names>Mistral</given-names></name>
        <name><surname>Danish</surname><given-names>Matthew</given-names></name>
        <name><surname>Rice</surname><given-names>Andrew C.</given-names></name>
      </person-group>
      <article-title>Verifying spatial properties of array computations</article-title>
      <source>Proc. ACM Program. Lang.</source>
      <year iso-8601-date="2017">2017</year>
      <volume>1</volume>
      <issue>OOPSLA</issue>
      <uri>https://doi.org/10.1145/3133899</uri>
      <pub-id pub-id-type="doi">10.1145/3133899</pub-id>
      <fpage>75:1</fpage>
      <lpage>75:30</lpage>
    </element-citation>
  </ref>
  <ref id="ref-contrastin2016lightning">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Contrastin</surname><given-names>Mistral</given-names></name>
        <name><surname>Danish</surname><given-names>Matthew</given-names></name>
        <name><surname>Orchard</surname><given-names>Dominic</given-names></name>
        <name><surname>Rice</surname><given-names>Andrew</given-names></name>
      </person-group>
      <article-title>Lightning talk: Supporting software sustainability with lightweight specifications</article-title>
      <source>Proceedings of the fourth workshop on sustainable software for science: Practice and experiences (WSSSPE4), university of manchester, manchester, UK, september 12-­14</source>
      <publisher-name>CEUR Workshop Proceedings</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>1686</volume>
    </element-citation>
  </ref>
  <ref id="ref-backus1978history">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Backus</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>The history of FORTRAN I, II, and III</article-title>
      <source>SIGPLAN Not.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="1978-08">1978</year><month>08</month>
      <volume>13</volume>
      <issue>8</issue>
      <issn>0362-1340</issn>
      <uri>https://doi.org/10.1145/960118.808380</uri>
      <pub-id pub-id-type="doi">10.1145/960118.808380</pub-id>
      <fpage>165</fpage>
      <lpage>180</lpage>
    </element-citation>
  </ref>
  <ref id="ref-vanderbauwhede2022making">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vanderbauwhede</surname><given-names>Wim</given-names></name>
      </person-group>
      <article-title>Making legacy Fortran code type safe through automated program transformation</article-title>
      <source>The Journal of Supercomputing</source>
      <year iso-8601-date="2022">2022</year>
      <volume>78</volume>
      <issue>2</issue>
      <uri>https://doi.org/10.1007/s11227-021-03839-9</uri>
      <pub-id pub-id-type="doi">10.1007/S11227-021-03839-9</pub-id>
      <fpage>2988</fpage>
      <lpage>3028</lpage>
    </element-citation>
  </ref>
  <ref id="ref-urmaetal2014">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Urma</surname><given-names>Raoul-Gabriel</given-names></name>
        <name><surname>Orchard</surname><given-names>Dominic</given-names></name>
        <name><surname>Mycroft</surname><given-names>Alan</given-names></name>
      </person-group>
      <article-title>Programming language evolution workshop report</article-title>
      <source>Proceedings of the 1st workshop on programming language evolution</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2014">2014</year>
      <isbn>9781450328876</isbn>
      <uri>https://doi.org/10.1145/2717124.2717125</uri>
      <pub-id pub-id-type="doi">10.1145/2717124.2717125</pub-id>
      <fpage>1</fpage>
      <lpage>3</lpage>
    </element-citation>
  </ref>
  <ref id="ref-walters2017met">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Walters</surname><given-names>David</given-names></name>
        <name><surname>Boutle</surname><given-names>Ian</given-names></name>
        <name><surname>Brooks</surname><given-names>Malcolm</given-names></name>
        <name><surname>Melvin</surname><given-names>Thomas</given-names></name>
        <name><surname>Stratton</surname><given-names>Rachel</given-names></name>
        <name><surname>Vosper</surname><given-names>Simon</given-names></name>
        <name><surname>Wells</surname><given-names>Helen</given-names></name>
        <name><surname>Williams</surname><given-names>Keith</given-names></name>
        <name><surname>Wood</surname><given-names>Nigel</given-names></name>
        <name><surname>Allen</surname><given-names>Thomas</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>The Met Office unified model global atmosphere 6.0/6.1 and JULES global land 6.0/6.1 configurations</article-title>
      <source>Geoscientific Model Development</source>
      <publisher-name>Copernicus GmbH</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>10</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.5194/gmd-10-1487-2017</pub-id>
      <fpage>1487</fpage>
      <lpage>1520</lpage>
    </element-citation>
  </ref>
  <ref id="ref-danish2024incremental">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Danish</surname><given-names>Matthew</given-names></name>
        <name><surname>Orchard</surname><given-names>Dominic</given-names></name>
        <name><surname>Rice</surname><given-names>Andrew</given-names></name>
      </person-group>
      <article-title>Incremental units-of-measure verification</article-title>
      <source>CoRR</source>
      <year iso-8601-date="2024">2024</year>
      <volume>abs/2406.02174</volume>
      <uri>https://doi.org/10.48550/arXiv.2406.02174</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.2406.02174</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mendez2014climate">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Méndez</surname><given-names>Mariano</given-names></name>
        <name><surname>Tinetti</surname><given-names>Fernando G.</given-names></name>
        <name><surname>Overbey</surname><given-names>Jeffrey L.</given-names></name>
      </person-group>
      <article-title>Climate models: Challenges for Fortran development tools</article-title>
      <source>2014 second international workshop on software engineering for high performance computing in computational science and engineering</source>
      <year iso-8601-date="2014">2014</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/SE-HPCCSE.2014.7</pub-id>
      <fpage>6</fpage>
      <lpage>12</lpage>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p><ext-link ext-link-type="uri" xlink:href="https://polyhedron.com/?product=plusfort">https://polyhedron.com/?product=plusfort</ext-link></p>
  </fn>
  <fn id="fn2">
    <label>2</label><p><ext-link ext-link-type="uri" xlink:href="http://simconglobal.com/fpt_summary.html">http://simconglobal.com/fpt_summary.html</ext-link></p>
  </fn>
  <fn id="fn3">
    <label>3</label><p><ext-link ext-link-type="uri" xlink:href="https://codework.com/solutions/developer-tools/forcheck-fortran-analysis/">https://codework.com/solutions/developer-tools/forcheck-fortran-analysis/</ext-link></p>
  </fn>
  <fn id="fn4">
    <label>4</label><p><ext-link ext-link-type="uri" xlink:href="https://www.synopsys.com/software-integrity/static-analysis-tools-sast/coverity.html">https://www.synopsys.com/software-integrity/static-analysis-tools-sast/coverity.html</ext-link></p>
  </fn>
  <fn id="fn5">
    <label>5</label><p><ext-link ext-link-type="uri" xlink:href="https://scitools.com/">https://scitools.com/</ext-link></p>
  </fn>
  <fn id="fn6">
    <label>6</label><p><ext-link ext-link-type="uri" xlink:href="https://projects.eclipse.org/projects/tools.ptp.photran">https://projects.eclipse.org/projects/tools.ptp.photran</ext-link></p>
  </fn>
  <fn id="fn7">
    <label>7</label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/wimvanderbauwhede/RefactorF4Acc">https://github.com/wimvanderbauwhede/RefactorF4Acc</ext-link></p>
  </fn>
  <fn id="fn8">
    <label>8</label><p><ext-link ext-link-type="uri" xlink:href="https://github.com/camfort/allocate-analysis-example">https://github.com/camfort/allocate-analysis-example</ext-link></p>
  </fn>
  <fn id="fn9">
    <label>9</label><p>Funded from 2015-18 by the EPSRC under the
    project title <italic>CamFort: Automated evolution and verification
    of computational science models</italic>
    <ext-link ext-link-type="uri" xlink:href="https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/M026124/1">https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/M026124/1</ext-link></p>
  </fn>
</fn-group>
</back>
</article>
