<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6906</article-id>
<article-id pub-id-type="doi">10.21105/joss.06906</article-id>
<title-group>
<article-title>lintsampler: Easy random sampling via linear
interpolation</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6841-1496</contrib-id>
<name>
<surname>Naik</surname>
<given-names>Aneesh P.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1517-3935</contrib-id>
<name>
<surname>Petersen</surname>
<given-names>Michael S.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Institute for Astronomy, University of Edinburgh,
UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-06-14">
<day>14</day>
<month>6</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>101</issue>
<fpage>6906</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>statistics</kwd>
<kwd>numpy</kwd>
<kwd>random variates</kwd>
<kwd>random sampling</kwd>
<kwd>low discrepancy sequence</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>lintsampler</monospace> provides a Python implementation
  of a technique we term ‚Äòlinear interpolant sampling‚Äô: an algorithm to
  efficiently draw pseudo-random samples from an arbitrary probability
  density function (PDF). First, the PDF is evaluated on a grid-like
  structure. Then, it is assumed that the PDF can be approximated
  between grid vertices by the (multidimensional) linear interpolant.
  With this assumption, random samples can be efficiently drawn via
  inverse transform sampling
  (<xref alt="Devroye, 1986" rid="ref-devroye.book" ref-type="bibr">Devroye,
  1986</xref>).</p>
  <p><monospace>lintsampler</monospace> is primarily written with
  <monospace>numpy</monospace>
  (<xref alt="Harris et al., 2020" rid="ref-numpy.paper" ref-type="bibr">Harris
  et al., 2020</xref>), drawing some additional functionality from
  <monospace>scipy</monospace>
  (<xref alt="Virtanen et al., 2020" rid="ref-scipy.paper" ref-type="bibr">Virtanen
  et al., 2020</xref>). Under the most basic usage of
  <monospace>lintsampler</monospace>, the user provides a Python
  function defining the target PDF and some parameters describing a
  grid-like structure to the <monospace>LintSampler</monospace> class,
  and is then able to draw samples via the <monospace>sample</monospace>
  method. Additionally, there is functionality for the user to set the
  random seed, employ quasi-Monte Carlo sampling, or sample within a
  premade grid (<monospace>DensityGrid</monospace>) or tree
  (<monospace>DensityTree</monospace>) structure.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Below is a (non-exhaustive) list of ‚Äòuse cases‚Äô, i.e., situations
  where a user might find <monospace>lintsampler</monospace> (and/or the
  the linear interpolant sampling algorithm underpinning it) to be
  preferable over random sampling techniques such as importance
  sampling, rejection sampling or Markov chain Monte Carlo (MCMC). MCMC
  in particular is a powerful class of methods with many excellent
  Python implementations
  (<xref alt="Coullon &amp; Nemeth, 2022" rid="ref-sgmcmcjax.paper" ref-type="bibr">Coullon
  &amp; Nemeth, 2022</xref>;
  <xref alt="Foreman-Mackey et al., 2019" rid="ref-emcee.paper" ref-type="bibr">Foreman-Mackey
  et al., 2019</xref>;
  <xref alt="Marignier, 2023" rid="ref-pxmcmc.paper" ref-type="bibr">Marignier,
  2023</xref>;
  <xref alt="Patil et al., 2010" rid="ref-pymc.paper" ref-type="bibr">Patil
  et al., 2010</xref>). In certain use cases as described below,
  <monospace>lintsampler</monospace> can offer more convenient and/or
  more efficient sampling compared with these various techniques.</p>
  <p>We‚Äôll assume that the target PDF the user wishes to sample from
  does not have its own exact sampling algorithm (such as the Box-Muller
  transform for a Gaussian PDF). The power of
  <monospace>lintsampler</monospace> lies in its applicability to
  arbitrary PDFs for which tailor-made sampling algorithms are not
  available.</p>
  <sec id="use-cases">
    <title>Use Cases</title>
    <sec id="expensive-pdf">
      <title>1. Expensive PDF</title>
      <p>If the PDF being sampled from has high computatational overhead
      to evaluate (referred to as computationally ‚Äòexpensive‚Äô) and a
      large number of samples is desired, then
      <monospace>lintsampler</monospace> might be the most
      cost-effective option. This is because
      <monospace>lintsampler</monospace> does not evaluate the PDF for
      each sample (as would be the case for other random sampling
      techniques), but on the nodes of the user-chosen grid.
      Particularly in a low-dimensional setting where the grid does not
      have too many nodes, this can mean far fewer PDF evaluations. This
      point is demonstrated in the
      <ext-link ext-link-type="uri" xlink:href="https://lintsampler.readthedocs.io/en/latest/example_notebooks/1_gmm.html">first
      example notebook</ext-link> in the
      <monospace>lintsampler</monospace>
      docs.<xref ref-type="fn" rid="fn1">1</xref></p>
    </sec>
    <sec id="multimodal-pdf">
      <title>2. Multimodal PDF</title>
      <p>If the target PDF has a highly complex structure with multiple,
      well-separated modes, then <monospace>lintsampler</monospace>
      might be the <italic>easiest</italic> option (in terms of user
      configuration). In such scenarios, MCMC might struggle unless the
      walkers are carefully preconfigured to start near the modes.
      Similarly, rejection sampling or importance sampling would be
      highly suboptimal unless the proposal distribution is carefully
      chosen to match the structure of the target PDF. With
      <monospace>lintsampler</monospace>, the user needs only to ensure
      that the resolution of their chosen grid is sufficient to resolve
      the PDF structure, and so the setup remains straightforward. This
      is demonstrated in the
      <ext-link ext-link-type="uri" xlink:href="https://lintsampler.readthedocs.io/en/latest/example_notebooks/2_doughnuts.html">second
      example notebook</ext-link> in the
      <monospace>lintsampler</monospace>
      docs.<xref ref-type="fn" rid="fn2">2</xref></p>
    </sec>
    <sec id="pdf-with-large-dynamic-range">
      <title>3. PDF with large dynamic range</title>
      <p>If the target PDF has a very large dynamic range, then the
      <monospace>DensityTree</monospace> object provided by
      <monospace>lintsampler</monospace> might be an effective solution.
      Here, the PDF is evaluated not on a fixed grid, but on the leaves
      of a tree. The tree is refined such that regions of concentrated
      probability are more finely resolved, based on accuracy criteria.
      Such an example is shown in the
      <ext-link ext-link-type="uri" xlink:href="https://lintsampler.readthedocs.io/en/latest/example_notebooks/3_dark_matter.html">third
      example notebook</ext-link> in the
      <monospace>lintsampler</monospace> docs.</p>
    </sec>
    <sec id="noise-needs-to-be-minimised">
      <title>4. Noise needs to be minimised</title>
      <p>In Quasi-Monte Carlo (QMC) sampling, one purposefully generates
      more ‚Äòbalanced‚Äô (and thus less random) draws from a target PDF, so
      that sampling noise decreases faster than
      <inline-formula><alternatives>
      <tex-math><![CDATA[\mathcal{O}(N^{-1/2})]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ùí™</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mrow><mml:mi>‚àí</mml:mi><mml:mn>1</mml:mn><mml:mi>/</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.
      <monospace>lintsampler</monospace> allows easy QMC sampling with
      arbitrary PDFs. We are not aware of such capabilities with any
      other package. We give an example of using
      <monospace>lintsampler</monospace> for QMC in the
      <ext-link ext-link-type="uri" xlink:href="https://lintsampler.readthedocs.io/en/latest/example_notebooks/4_qmc.html">fourth
      example notebook</ext-link> in the
      <monospace>lintsampler</monospace> docs.</p>
    </sec>
  </sec>
  <sec id="real-world-example">
    <title>‚ÄòReal World‚Äô Example</title>
    <p>Any one of the four use cases above would serve by itself as a
    sufficient case for choosing <monospace>lintsampler</monospace>, but
    here we give an example of a real-world scenario that combines all
    of the use cases. It is drawn from our own primary research
    interests in computational astrophysics.</p>
    <p>Much of computational astrophysics consists of large-scale high
    performance computational simulations of gravitating systems. For
    example, simulations of planets evolving and interacting within a
    solar system, simulations of stars interacting within a galaxy, or
    vast cosmological simulations in which a whole universe is grown
    <bold>in silico</bold>.</p>
    <p>There exists a myriad of codes used to run these simulations,
    each using different algorithms to solve the governing equations.
    One class of simulation code that has gained much attention in
    recent years is the class of code employing basis function
    expansions
    (<xref alt="Petersen et al., 2022" rid="ref-exp.paper" ref-type="bibr">Petersen
    et al., 2022</xref>;
    <xref alt="Vasiliev, 2019" rid="ref-agama.paper" ref-type="bibr">Vasiliev,
    2019</xref>). In these codes, the matter density at any point in
    space is represented by a sum over basis functions (not unlike a
    Fourier series), with the coefficients in the sum changing over
    space and time. As such, the matter comprising the system is
    represented everywhere as a smooth, continous fluid, but for many
    applications and/or downstream analyses of the simulated system, one
    needs to instead represent the system as a set of discrete
    particles. These particles can be obtained by drawing samples from
    the continuous density field.</p>
    <p>This is a scenario that satisfies all four of the use cases list
    above. To explain further:</p>
    <list list-type="bullet">
      <list-item>
        <p>The PDF we are sampling from (i.e., the basis expansion
        representation of the matter density field) can be expensive to
        evaluate if a large number of terms are included in the sum.</p>
      </list-item>
      <list-item>
        <p>The PDF can be highly multimodal when the system we are
        simulating comprises many distinct gravitating substructures,
        such as stellar clusters.</p>
      </list-item>
      <list-item>
        <p>The PDF can have a large dynamic range. Astrophysical
        structures such as galaxies and dark matter ‚Äòhaloes‚Äô often have
        power-law density profiles, such as the Navarro-Frenk-White
        profile
        (<xref alt="Navarro et al., 1997" rid="ref-nfw.paper" ref-type="bibr">Navarro
        et al., 1997</xref>). Further complicating the issue is that a
        typical dark matter halo will host several ‚Äòsubhaloes‚Äô, which in
        turn might host ‚Äòsubsubhaloes‚Äô, and so on. In short, a range of
        spatial scales needs to be resolved.</p>
      </list-item>
      <list-item>
        <p>If the particle set being sampled is to be used for further
        simulation, it can be helpful to draw as ‚Äònoiseless‚Äô a sample as
        possible for reasons of numerical stability.</p>
      </list-item>
    </list>
    <p>For these reasons, this kind of astrophysical simulation code
    provides an excellent example of a ‚Äòreal world‚Äô application for
    <monospace>lintsampler</monospace>. Here, one would cover the
    simulation domain with a <monospace>DensityTree</monospace> instance
    (or several instances, one for each primary structure), call the
    <monospace>refine</monospace> method to better resolve the
    high-density regions, then feed the tree to a
    <monospace>LintSampler</monospace> instance and call
    <monospace>sample</monospace> to generate particles. The
    <monospace>qmc</monospace> flag can be passed to the sampler in
    order to employ Quasi-Monte Carlo sampling.</p>
  </sec>
  <sec id="caveats">
    <title>Caveats</title>
    <p>In all use cases listed above, it is assumed that the dimension
    of the problem is not too high. <monospace>lintsampler</monospace>
    works by evaluating a given PDF on the nodes of a grid (or grid-like
    structure, such as a tree), so the number of evaluations (and memory
    occupancy) grows exponentially with the number of dimensions. As a
    consequence, many of the efficiency arguments given for
    <monospace>lintsampler</monospace> below don‚Äôt apply to higher
    dimensional problems. We probably wouldn‚Äôt use
    <monospace>lintsampler</monospace> in more than 6 dimensions, but
    there is no hard limit here: the question of how many dimensions is
    too many will depend on the problem at hand.</p>
  </sec>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p><monospace>lintsampler</monospace> is designed with an interface
  that makes sampling from an input PDF straightforward. For example, if
  you have PDF with multiple separated peaks:</p>
  <code language="python">import numpy as np
from scipy.stats import norm

def gmm_pdf(x):
    mu = np.array([-3.0, 0.5, 2.5])
    sig = np.array([1.0, 0.25, 0.75])
    w = np.array([0.4, 0.25, 0.35])
    return np.sum([w[i] * norm.pdf(x, mu[i], sig[i]) for i in range(3)], axis=0)</code>
  <p><monospace>lintsampler</monospace> can efficiently draw samples
  from it on some defined interval:</p>
  <code language="python">from lintsampler import LintSampler

grid = np.linspace(-7,7,100)
samples = LintSampler(grid,pdf=gmm_pdf).sample(N=10000)</code>
  <p><monospace>samples</monospace> is then an array of 10000 samples
  drawn from the PDF. Apart from defining the PDF,
  <monospace>lintsampler</monospace> enables creating discrete samples
  from a continuous PDF in a small handful of lines.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p>Although <monospace>lintsampler</monospace> is written in pure
  Python, making the code highly readable, the methods make extensive
  use of <monospace>numpy</monospace> functionality to provide rapid
  sampling. After the structure spanning the domain has been
  constructed, sampling proceeds with computational effort scaling
  linearly with number of sample points.</p>
  <p>We provide two methods to define the domain, both optimised with
  <monospace>numpy</monospace> functionality for efficient construction.
  The <monospace>DensityGrid</monospace> class takes highly flexible
  inputs for defining a grid. In particular, the grid need not be evenly
  spaced (or even continuous) in any dimension; the user can
  preferentially place grid elements near high-density regions. The
  <monospace>DensityTree</monospace> class takes error tolerance
  parameters and constructs an adaptive structure to achieve the
  specified tolerance. We also provide a base class
  (<monospace>DensityStructure</monospace>) such that the user could
  extend the methods for spanning the domain.</p>
  <p>Documentation for <monospace>lintsampler</monospace>, including
  example notebooks demonstrating a range of problems, is available via
  a
  <ext-link ext-link-type="uri" xlink:href="https://lintsampler.readthedocs.io">readthedocs
  page</ext-link>. The documentation also has an extensive explanation
  of the interfaces, including optimisation parameters for increasing
  the efficiency in sampling.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank Sergey Koposov for useful discussions. APN
  acknowledges funding support from an Early Career Fellowship from the
  Leverhulme Trust. MSP acknowledges funding support from a UKRI Stephen
  Hawking Fellowship.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-devroye.book">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Devroye</surname><given-names>Luc</given-names></name>
      </person-group>
      <source>Non-uniform random variate generation</source>
      <publisher-name>Springer-Verlag</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="1986">1986</year>
      <pub-id pub-id-type="doi">10.1007/978-1-4613-8643-8</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-nfw.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Navarro</surname><given-names>Julio F.</given-names></name>
        <name><surname>Frenk</surname><given-names>Carlos S.</given-names></name>
        <name><surname>White</surname><given-names>Simon D. M.</given-names></name>
      </person-group>
      <article-title>A Universal Density Profile from Hierarchical Clustering</article-title>
      <source></source>
      <year iso-8601-date="1997-12">1997</year><month>12</month>
      <volume>490</volume>
      <issue>2</issue>
      <uri>https://arxiv.org/abs/astro-ph/9611107</uri>
      <pub-id pub-id-type="doi">10.1086/304888</pub-id>
      <fpage>493</fpage>
      <lpage>508</lpage>
    </element-citation>
  </ref>
  <ref id="ref-emcee.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Foreman-Mackey</surname><given-names>Daniel</given-names></name>
        <name><surname>Farr</surname><given-names>Will</given-names></name>
        <name><surname>Sinha</surname><given-names>Manodeep</given-names></name>
        <name><surname>Archibald</surname><given-names>Anne</given-names></name>
        <name><surname>Hogg</surname><given-names>David</given-names></name>
        <name><surname>Sanders</surname><given-names>Jeremy</given-names></name>
        <name><surname>Zuntz</surname><given-names>Joe</given-names></name>
        <name><surname>Williams</surname><given-names>Peter</given-names></name>
        <name><surname>Nelson</surname><given-names>Andrew</given-names></name>
        <name><surname>de Val-Borro</surname><given-names>Miguel</given-names></name>
        <name><surname>Erhardt</surname><given-names>Tobias</given-names></name>
        <name><surname>Pashchenko</surname><given-names>Ilya</given-names></name>
        <name><surname>Pla</surname><given-names>Oriol</given-names></name>
      </person-group>
      <article-title>emcee v3: A Python ensemble sampling toolkit for affine-invariant MCMC</article-title>
      <source>The Journal of Open Source Software</source>
      <year iso-8601-date="2019-11">2019</year><month>11</month>
      <volume>4</volume>
      <issue>43</issue>
      <uri>https://arxiv.org/abs/1911.07688</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01864</pub-id>
      <fpage>1864</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pymc.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Patil</surname><given-names>Anand</given-names></name>
        <name><surname>Huard</surname><given-names>David</given-names></name>
        <name><surname>Fonnesbeck</surname><given-names>Christopher J.</given-names></name>
      </person-group>
      <article-title>PyMC: Bayesian Stochastic Modelling in Python</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2010">2010</year>
      <volume>35</volume>
      <issue>4</issue>
      <uri>https://www.jstatsoft.org/index.php/jss/article/view/v035i04</uri>
      <pub-id pub-id-type="doi">10.18637/jss.v035.i04</pub-id>
      <fpage>1</fpage>
      <lpage>81</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pxmcmc.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Marignier</surname><given-names>Augustin</given-names></name>
      </person-group>
      <article-title>PxMCMC: A Python package for proximal Markov Chain Monte Carlo</article-title>
      <source>The Journal of Open Source Software</source>
      <year iso-8601-date="2023-07">2023</year><month>07</month>
      <volume>8</volume>
      <issue>87</issue>
      <pub-id pub-id-type="doi">10.21105/joss.05582</pub-id>
      <fpage>5582</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-sgmcmcjax.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coullon</surname><given-names>Jeremie</given-names></name>
        <name><surname>Nemeth</surname><given-names>Christopher</given-names></name>
      </person-group>
      <article-title>SGMCMCJax: A lightweight JAX library for stochastic gradient Markov Chain Monte Carlo algorithms</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <volume>7</volume>
      <issue>72</issue>
      <uri>https://doi.org/10.21105/joss.04113</uri>
      <pub-id pub-id-type="doi">10.21105/joss.04113</pub-id>
      <fpage>4113</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-scipy.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
        <name><surname>van der Walt</surname><given-names>St√©fan J.</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
        <name><surname>Jones</surname><given-names>Eric</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Larson</surname><given-names>Eric</given-names></name>
        <name><surname>Carey</surname><given-names>C J</given-names></name>
        <name><surname>Polat</surname><given-names>ƒ∞lhan</given-names></name>
        <name><surname>Feng</surname><given-names>Yu</given-names></name>
        <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
        <name><surname>Perktold</surname><given-names>Josef</given-names></name>
        <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
        <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
        <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
        <name><surname>Ribeiro</surname><given-names>Ant√¥nio H.</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>van Mulbregt</surname><given-names>Paul</given-names></name>
        <string-name>SciPy 1.0 Contributors</string-name>
      </person-group>
      <article-title>SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python</article-title>
      <source>Nature Methods</source>
      <year iso-8601-date="2020">2020</year>
      <volume>17</volume>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      <fpage>261</fpage>
      <lpage>272</lpage>
    </element-citation>
  </ref>
  <ref id="ref-numpy.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>St√©fan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>R√≠o</surname><given-names>Jaime Fern√°ndez del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>G√©rard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-agama.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vasiliev</surname><given-names>Eugene</given-names></name>
      </person-group>
      <article-title>AGAMA: action-based galaxy modelling architecture</article-title>
      <source></source>
      <year iso-8601-date="2019-01">2019</year><month>01</month>
      <volume>482</volume>
      <issue>2</issue>
      <uri>https://arxiv.org/abs/1802.08239</uri>
      <pub-id pub-id-type="doi">10.1093/mnras/sty2672</pub-id>
      <fpage>1525</fpage>
      <lpage>1544</lpage>
    </element-citation>
  </ref>
  <ref id="ref-exp.paper">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Petersen</surname><given-names>Michael S.</given-names></name>
        <name><surname>Weinberg</surname><given-names>Martin D.</given-names></name>
        <name><surname>Katz</surname><given-names>Neal</given-names></name>
      </person-group>
      <article-title>EXP: N-body integration using basis function expansions</article-title>
      <source></source>
      <year iso-8601-date="2022-03">2022</year><month>03</month>
      <volume>510</volume>
      <issue>4</issue>
      <uri>https://arxiv.org/abs/2104.14577</uri>
      <pub-id pub-id-type="doi">10.1093/mnras/stab3639</pub-id>
      <fpage>6201</fpage>
      <lpage>6217</lpage>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>Similarly, there might be situations where the
    user is not so concerned about strict statistical representativeness
    but wants to generate a huge number of samples from a target PDF
    with the least possible computational cost (such as e.g., generating
    realistic point cloud distributions in video game graphics). They
    can use <monospace>lintsampler</monospace> with a coarse grid (so
    minimal PDF evaluations), then <monospace>sample()</monospace> to
    their heart‚Äôs content.</p>
  </fn>
  <fn id="fn2">
    <label>2</label><p>It is worth noting that in these kinds of
    complex, multimodal problems, a single fixed grid might not be the
    most cost-effective sampling domain. For this reason,
    <monospace>lintsampler</monospace> also provides simple
    functionality for sampling over multiple disconnected grids.</p>
  </fn>
</fn-group>
</back>
</article>
