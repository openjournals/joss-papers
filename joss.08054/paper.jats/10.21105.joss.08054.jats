<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8054</article-id>
<article-id pub-id-type="doi">10.21105/joss.08054</article-id>
<title-group>
<article-title>slap2-utils: Tools for Processing SLAP2
Data</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<name>
<surname>Hogg</surname>
<given-names>Peter William</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0007-4141-556X</contrib-id>
<name>
<surname>Tong</surname>
<given-names>Jerry Shijie</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Haas</surname>
<given-names>Kurt</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Cellular and Physiological Sciences, Centre
for Brain Health, School of Biomedical Engineering, University of
British Columbia, Vancouver, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-04-15">
<day>15</day>
<month>4</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>112</issue>
<fpage>8054</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>neuroscience</kwd>
<kwd>microscopy</kwd>
<kwd>calcium imaging</kwd>
<kwd>voltage imaging</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Two-photon microscopy enables the measurements of neural activity
  in vivo, deep within the brain using fluorescent biosensors. However,
  capturing neural activity with voltage indicators, fast calcium or
  neurotransmitter biosensors, or slower indicators across 3D volumes
  requires sampling speeds that far exceed capabilities of conventional
  laser-scanning two-photon microscopes. The recently developed Scanned
  Line Angular Projection-2 (SLAP2) microscope has overcome these
  limitations by employing novel ultra-fast random-access scanning
  techniques to record neural activity at kilohertz sampling rates.
  Unlike traditional raster imaging, where pixels are recorded
  sequentially by spatial position, SLAP2’s random-access acquisition
  optimizes the sampling order of regions of interest for speed. These
  recordings are stored in a complex file structure, which tracks the
  non-sequentially sampled coordinates. This novel data structure is
  incompatible with post-imaging analysis tools designed for traditional
  image formats, such as TIF or CZI files. Here, we present our Python
  library, <monospace>slap2-utils</monospace>, to interact with the
  custom data structure generated from SLAP2.
  <monospace>slap2-utils</monospace> allows users to extract neuronal
  activity directly from the SLAP2 binary files in a Python
  environment.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>To overcome the inherent speed limitations of laser scanning
  two-photon imaging, the Scanned Line Angular Projection (SLAP)
  microscope was developed using projection microscopy and deconvolution
  to sample neuronal activity in kilohertz rates
  (<xref alt="Kazemipour et al., 2019" rid="ref-Kazemipour2019" ref-type="bibr">Kazemipour
  et al., 2019</xref>). The second generation of this technology, called
  SLAP2, builds upon this technology for random-access sampling of
  regions of interest (ROIs) throughout 3D volumes without deconvolution
  and is commercially available as a kit
  (<xref alt="Podgorski, 2021" rid="ref-mbfSLAP2" ref-type="bibr">Podgorski,
  2021</xref>). SLAP2 conducts random-access imaging of preassigned ROIs
  during high-speed acquisitions by transitioning between ROIs with an
  inertia-free scan engine. However, this results in a complex scan
  pattern as the microscope can sample ROI that are not adjacent to each
  other, complicating the task of indexing the raw recording. Currently,
  the custom tools needed to read data from the binary files generated
  during high-speed acquisitions are written using proprietary
  programming languages, making it cumbersome to design analysis
  workflows that leverage packages in the Python ecosystem. To overcome
  this limitation, we developed the Python library
  <monospace>slap2-utils</monospace>, intended for neuroscientists,
  engineers, and imaging specialists who use SLAP2 microscopes and
  prefer to analyze their data using Python-based tools. This includes
  both academic researchers and core facility staff managing SLAP2
  datasets. Our package provides pure Python implementations of the
  functions needed to read raw SLAP2 microscope data, facilitating
  Python-based analysis pipelines. Additional functionalities include
  visualizing recorded data, plotting components of a SLAP2 file, and
  core processing functions.</p>
</sec>
<sec id="slap2-datafile-pipeline">
  <title>SLAP2 Datafile Pipeline</title>
  <p><monospace>slap2-utils</monospace> provides an open-source version
  of Matlab functions
  (<xref alt="Podgorski, 2021" rid="ref-mbfSLAP2" ref-type="bibr">Podgorski,
  2021</xref>) designed to interface with binary files generated from
  high-speed recordings of neural activity from the SLAP2 two-photon
  microscope. This implementation uses object-orientated programming,
  creating Python Classes for parsing out the data for analytical
  pipelines (see Figure 1)
  (<xref alt="Podgorski, 2021" rid="ref-mbfSLAP2" ref-type="bibr">Podgorski,
  2021</xref>). This is needed because, unlike raster imaging that the
  SLAP2 microscope can also preform, which generates TIF formatted
  digital images, high-speed random-access imaging produces two files: a
  binary file (.dat) with an accompanying metadata (.meta) file that
  stores acquisition information using the HDF5 format. The binary file
  consists of a header, which stores core acquisition settings in
  unsigned 32-bit integers, followed by the digitized recording of the
  microscope’s detectors in unsigned 16-bit integers. The
  <monospace>MetaData</monospace> file contains more detailed
  information about the acquisition, including key parameters, such as
  the <monospace>ParsePlan</monospace>, a collection of data describing
  the timing of axial focus and coordinates being sampled by the
  microscope. This information about the acquisition is needed to index
  the recording in the binary file. During random-access imaging, the
  microscope will sample ROIs at different acquisition rates in an order
  determined by a planning algorithm, which may not be in any particular
  spatial order. Given the complications in random-access imaging and
  the organization of the recording in the binary file, a simple linear
  readout of the DAT file’s contents would be insufficient to extract
  the neural activity. The core function of our Python library handles
  this task with our <monospace>DataFile</monospace> object that parses
  raw data and meta-data stored in these files directly into a Python
  environment. This <monospace>DataFile</monospace> class, upon
  initialization, loads information from the file header of the binary
  file and creates a subclass, MetaData, which will load additional
  acquisition information using the h5py library
  (<xref alt="Collette, 2013" rid="ref-h5py" ref-type="bibr">Collette,
  2013</xref>). The digitized signals of the acquisition are not loaded
  into memory. Rather, the Datafile class generates a memory map
  (memmap) of the 16-bit raw recording in the binary file using
  Numpy(<xref alt="Harris et al., 2020" rid="ref-numpy" ref-type="bibr">Harris
  et al., 2020</xref>). This memmap is used to index specific data in
  the raw recording when needed, helping end users work with larger
  datasets collected at kilohertz acquisition rates.</p>
  <p>To further aid with retrieving traces of neural activity from the
  random-access acquisitions, we implemented an additional Python class,
  <monospace>Trace</monospace>, which streamlines this operation. This
  class initializes with three variables: a
  <monospace>DataFile</monospace> object paired with the z-axis and
  channel ID indices. Before the <monospace>Trace</monospace> object can
  generate an activity trace, users must first call the
  <monospace>Trace.setPixelIdxs()</monospace> method. This method uses
  boolean arrays representing areas in the field of view. The
  <monospace>Trace</monospace> object uses these coordinates to generate
  indices in the <monospace>DataFile</monospace>’s memmap during trace
  extraction. The boolean arrays can be generated from SLAP2 ROI objects
  stored in the <monospace>MetaData</monospace> class, allowing the
  <monospace>Trace</monospace> object to generate activity profiles from
  individual ROIs. Once these inputs are finalized, the
  <monospace>Trace.process()</monospace> method will return an activity
  trace to the user. Additionally, each ROI is composed of smaller
  units, superpixels, and information for each superpixel is stored in a
  subclass <monospace>TracePixel</monospace> accessible through the
  <monospace>Trace.TracePixels</monospace> attribute in the parent
  class. This allows for higher resolution interrogation of the spatial
  domains of neuronal activity within a ROI; it should be noted that
  while <monospace>Trace.TracePixels</monospace> is a list; it is not
  ordered spatially until the <monospace>Trace.orderadjust()</monospace>
  method is called.</p>
  <fig>
    <caption><p>Figure 1: SLAP2 Pipeline. The DataFile class is
    initialized with the path to a .dat file. The MetaData subclass will
    be initialized if the .meta file is found. A DataFile object is then
    used to initialize the Trace Class, which has methods for easy data
    extraction from the binary
    file.<styled-content id="figU003Afig1"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="SLAP2_Pipeline.svg" />
  </fig>
</sec>
<sec id="slap2-utility-functions-and-visualizations">
  <title>SLAP2 Utility Functions and Visualizations</title>
  <p>Several commonly used functions are included for tasks that would
  be routinely called upon. These utility functions simplify generating
  the traces from ROIs, cleaning up traces from volumetric recordings,
  and extracting ROI information in both 2D and 3D. Additional utility
  functions interact with other file types generated by the microscope,
  such as extracting stimulus times from stimulus logs stored in H5
  files and functions for averaging reference stacks stored as TIF
  files. Useful plotting functions are also packaged in the library,
  such as a function that plots ROIs over a reference image.
  Furthermore, a Python-based graphical data viewer is included for
  interactive inspection of ROIs and activity traces from a given
  <monospace>.DAT</monospace> file. The data viewer’s features include
  3D inspection of ROIs over a reference volume and interactive plots of
  activity traces. The viewer uses GPU-accelerated signal processing
  (<xref alt="Coleman et al., 2024" rid="ref-Coleman2024" ref-type="bibr">Coleman
  et al., 2024</xref>). This requires the installation of the optional
  <monospace>cupy</monospace> requirements to function
  (<xref alt="Okuta et al., 2017" rid="ref-cupy" ref-type="bibr">Okuta
  et al., 2017</xref>).</p>
</sec>
<sec id="availability">
  <title>Availability</title>
  <p>All the code and scripts mentioned above are publicly available on
  the GitHub repository
  ([https://github.com/Peter-Hogg/SLAP2_Utils/tree/main]). The Python
  library can be installed using pip.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The development of this Python library was supported by funds from
  the Canadian Institutes of Health Research (CIHR) Foundation Award
  (FDN-148468) and NSF Award 2019976, “AccelNet: International network
  for brain-inspired computation”.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-Kazemipour2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kazemipour</surname><given-names>Abbas</given-names></name>
        <name><surname>Novak</surname><given-names>Ondrej</given-names></name>
        <name><surname>Flickinger</surname><given-names>Daniel</given-names></name>
        <name><surname>Marvin</surname><given-names>Jonathan S.</given-names></name>
        <name><surname>Abdelfattah</surname><given-names>Ahmed S.</given-names></name>
        <name><surname>King</surname><given-names>Jonathan</given-names></name>
        <name><surname>Borden</surname><given-names>Philip M.</given-names></name>
        <name><surname>Kim</surname><given-names>Jeong Jun</given-names></name>
        <name><surname>Al-Abdullatif</surname><given-names>Sarah H.</given-names></name>
        <name><surname>Deal</surname><given-names>Parker E.</given-names></name>
        <name><surname>Miller</surname><given-names>Evan W.</given-names></name>
        <name><surname>Schreiter</surname><given-names>Eric R.</given-names></name>
        <name><surname>Druckmann</surname><given-names>Shaul</given-names></name>
        <name><surname>Svoboda</surname><given-names>Karel</given-names></name>
        <name><surname>Looger</surname><given-names>Loren L.</given-names></name>
        <name><surname>Podgorski</surname><given-names>Kaspar</given-names></name>
      </person-group>
      <article-title>Kilohertz frame-rate two-photon tomography</article-title>
      <source>Nature Methods</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2019-07">2019</year><month>07</month>
      <volume>16</volume>
      <issue>8</issue>
      <issn>1548-7105</issn>
      <uri>http://dx.doi.org/10.1038/s41592-019-0493-9</uri>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0493-9</pub-id>
      <fpage>778</fpage>
      <lpage>786</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mbfSLAP2">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Podgorski</surname><given-names>Kaspar</given-names></name>
      </person-group>
      <article-title>SLAP2 – two photon microscope kit</article-title>
      <source>Product Page</source>
      <publisher-name>MBF Bioscience</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://www.mbfbioscience.com/products/slap2</uri>
    </element-citation>
  </ref>
  <ref id="ref-cupy">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Okuta</surname><given-names>Ryosuke</given-names></name>
        <name><surname>Unno</surname><given-names>Yuya</given-names></name>
        <name><surname>Nishino</surname><given-names>Daisuke</given-names></name>
        <name><surname>Hido</surname><given-names>Shohei</given-names></name>
        <name><surname>Loomis</surname><given-names>Crissman</given-names></name>
      </person-group>
      <article-title>CuPy: A NumPy-compatible library for NVIDIA GPU calculations</article-title>
      <source>Proceedings of workshop on machine learning systems (LearningSys) in the thirty-first annual conference on neural information processing systems (NIPS)</source>
      <year iso-8601-date="2017">2017</year>
      <uri>http://learningsys.org/nips17/assets/papers/paper_16.pdf</uri>
    </element-citation>
  </ref>
  <ref id="ref-numpy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Rio</surname><given-names>Jaime Fernandez del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-h5py">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Collette</surname><given-names>Andrew</given-names></name>
      </person-group>
      <source>Python and HDF5</source>
      <publisher-name>O’Reilly</publisher-name>
      <year iso-8601-date="2013">2013</year>
    </element-citation>
  </ref>
  <ref id="ref-Coleman2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coleman</surname><given-names>Patrick</given-names></name>
        <name><surname>Hogg</surname><given-names>Peter William</given-names></name>
        <name><surname>Toth</surname><given-names>Tristan Dellazizzo</given-names></name>
        <name><surname>Haas</surname><given-names>Kurt</given-names></name>
      </person-group>
      <article-title>PyNeuroTrace - python code for neural activity time series</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <volume>9</volume>
      <issue>100</issue>
      <uri>https://doi.org/10.21105/joss.06877</uri>
      <pub-id pub-id-type="doi">10.21105/joss.06877</pub-id>
      <fpage>6877</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
