<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5309</article-id>
<article-id pub-id-type="doi">10.21105/joss.05309</article-id>
<title-group>
<article-title>Quasi-Monte Carlo Methods in Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9816-1416</contrib-id>
<name>
<surname>Roy</surname>
<given-names>Pamphile T.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5860-3945</contrib-id>
<name>
<surname>Owen</surname>
<given-names>Art B.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8214-8935</contrib-id>
<name>
<surname>Balandat</surname>
<given-names>Maximilian</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4806-3601</contrib-id>
<name>
<surname>Haberland</surname>
<given-names>Matt</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Quansight</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Stanford University</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Meta</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>California Polytechnic State University, San Luis Obispo,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-08-30">
<day>30</day>
<month>8</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>84</issue>
<fpage>5309</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>SciPy</kwd>
<kwd>statistics</kwd>
<kwd>Quasi-Monte Carlo methods</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>NumPy random number generators and SciPy distributions are widely
  used to generate random numbers. However, challenges might arise when
  sampling in high dimensions. Quasi-Monte Carlo (QMC) methods provide
  an answer to these problems but are arguably hard to use. Thanks to
  new developments in SciPy, a new submodule was introduced in version
  1.7.0 making state-of-the-art QMC methods available:
  <monospace>scipy.stats.qmc</monospace>.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>NumPy pseudorandom number generators
  (<monospace>numpy.random</monospace>) have become the de facto
  standard for sampling random numbers in the scientific Python
  ecosystem. These methods are fast and reliable, and the results are
  repeatable when a seed is provided. However, sampling in high
  dimensions with pseudorandom numbers tends to produce gaps and
  clusters of points. When these random numbers are used in algorithms
  (including sampling, numerical integration, optimization) to solve
  deterministic problems, the resulting “Monte Carlo” (MC) methods have
  a low convergence rate. In practice, this can mean that substantial
  computational resources are required to provide sufficient
  accuracy.</p>
  <p>In Quasi-Monte Carlo (QMC) methods
  (<xref alt="Niederreiter, 1992" rid="ref-niederreiter1992" ref-type="bibr">Niederreiter,
  1992</xref>), the random numbers of Monte Carlo methods are replaced
  with a deterministic sequence of numbers that possesses many of the
  characteristics of a random sequence (e.g. reduction of variance with
  increasing sample size), but without these gaps and clusters. QMC
  determinism is independent of its implementation, language, and
  platform – the sequence is mathematically defined.</p>
  <p>In many cases, a QMC sequence can be used as a drop-in replacement
  for a random number sequence, yet they are proven to provide faster
  convergence rates (both in theory and practice)
  (<xref alt="Owen, 2019" rid="ref-owen2019" ref-type="bibr">Owen,
  2019</xref>). When true stochasticity is required (e.g. statistical
  inference), QMC sequences can be “scrambled” using random numbers, and
  several smaller scrambled QMC sequences can often replace one large
  random sequence.</p>
  <p>QMC methods were added to SciPy
  (<xref alt="Virtanen et al., 2020" rid="ref-virtanen2020scipy" ref-type="bibr">Virtanen
  et al., 2020</xref>) after an extensive review and discussion period
  (<xref alt="Roy et al., 2021" rid="ref-scipy2021qmc" ref-type="bibr">Roy
  et al., 2021</xref>) that lead to a very fruitful collaboration
  between SciPy’s maintainers and renowned researchers in the field. For
  instance, our implementation inspired additional work on the
  importance of including the first point in the Sobol’ sequence
  (<xref alt="Owen, 2020" rid="ref-owen2020" ref-type="bibr">Owen,
  2020</xref>).</p>
  <p>The following set of QMC features are now available in SciPy:</p>
  <list list-type="bullet">
    <list-item>
      <p>Sobol’ and Halton sequences (scrambled and unscrambled),</p>
    </list-item>
    <list-item>
      <p>Poisson disk sampling,</p>
    </list-item>
    <list-item>
      <p>Quasi-random multinomial and multivariate normal sampling,</p>
    </list-item>
    <list-item>
      <p>Discrepancy measures (<inline-formula><alternatives>
      <tex-math><![CDATA[C^2]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mi>C</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:math></alternatives></inline-formula>,
      wrap around, star-<inline-formula><alternatives>
      <tex-math><![CDATA[L_2]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>L</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>,
      mixed),</p>
    </list-item>
    <list-item>
      <p>Latin Hypercube Sampling (centered, strength 1 or 2),</p>
    </list-item>
    <list-item>
      <p>Optimize a sample by minimizing <inline-formula><alternatives>
      <tex-math><![CDATA[C^2]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mi>C</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:math></alternatives></inline-formula>
      discrepancy or performing Lloyd-Max iterations,</p>
    </list-item>
    <list-item>
      <p>Fast numerical inverse methods to sample arbitrary univariate
      distributions with QMC
      (<xref alt="Baumgarten &amp; Patel, 2022" rid="ref-unuran2022" ref-type="bibr">Baumgarten
      &amp; Patel, 2022</xref>),</p>
    </list-item>
    <list-item>
      <p>QMC integration.</p>
    </list-item>
  </list>
  <p>Before the release of SciPy 1.7.0, the need for these functions was
  partially met in the scientific Python ecosystem by tutorials
  (e.g. blog posts) and niche packages, but the functions in SciPy have
  several advantages:</p>
  <list list-type="bullet">
    <list-item>
      <p>Popularity: With millions of downloads per month, SciPy is one
      of the most downloaded scientific Python packages. New features
      immediately reach a wide range of users from all fields.</p>
    </list-item>
    <list-item>
      <p>Performance: The low-level functions are written in compiled
      languages such as Cython and optimized for speed and
      efficiency.</p>
    </list-item>
    <list-item>
      <p>Consistency: The APIs comply with the high standards of SciPy,
      function API reference and tutorials are thorough, and the
      interfaces share common features complementing other SciPy
      functions.</p>
    </list-item>
    <list-item>
      <p>Quality: As with all SciPy code, these functions were
      rigorously peer-reviewed for code quality and are extensively
      unit-tested. In addition, the implementations were produced in
      collaboration with the foremost experts in the QMC field.</p>
    </list-item>
  </list>
  <p>Since the first release of all these new features, we have seen
  other libraries add support for and rely on SciPy’s implementations,
  e.g. Optuna
  (<xref alt="Ishikawa et al., 2022" rid="ref-optuna2022qmc" ref-type="bibr">Ishikawa
  et al., 2022</xref>) and SALib
  (<xref alt="Roy &amp; Iwanaga, 2022" rid="ref-salib2022qmc" ref-type="bibr">Roy
  &amp; Iwanaga, 2022</xref>).</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors thank professors Sergei Kucherenko (Imperial College
  London) and Fred Hickernell (Illinois Institute of Technology) for
  helpful discussions. The SciPy maintainer team provided support and
  help regarding the design and integration, notably Ralf Gommers
  (Quansight) and Tyler J. Reddy (Los Alamos National Laboratory).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-virtanen2020scipy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Bright</surname><given-names>Jonathan et al.</given-names></name>
      </person-group>
      <article-title>SciPy 1.0: Fundamental algorithms for scientific computing in Python</article-title>
      <source>Nature methods</source>
      <publisher-name>Nature Publishing Group</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>17</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      <fpage>261</fpage>
      <lpage>272</lpage>
    </element-citation>
  </ref>
  <ref id="ref-niederreiter1992">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Niederreiter</surname><given-names>Harald</given-names></name>
      </person-group>
      <source>Random number generation and Quasi-Monte Carlo methods</source>
      <publisher-name>Society for Industrial; Applied Mathematics</publisher-name>
      <year iso-8601-date="1992">1992</year>
      <pub-id pub-id-type="doi">10.1137/1.9781611970081</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-owen2019">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Owen</surname><given-names>Art B.</given-names></name>
      </person-group>
      <article-title>Monte Carlo book: The Quasi-Monte Carlo parts.</article-title>
      <year iso-8601-date="2019">2019</year>
      <uri>https://artowen.su.domains/mc/</uri>
    </element-citation>
  </ref>
  <ref id="ref-owen2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Owen</surname><given-names>Art B.</given-names></name>
      </person-group>
      <article-title>On dropping the first Sobol’ point</article-title>
      <source>arXiv e-prints</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://arxiv.org/abs/2008.08051</uri>
      <pub-id pub-id-type="doi">10.1007/978-3-030-98319-2_4</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-scipy2021qmc">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Roy</surname><given-names>Pamphile T.</given-names></name>
        <name><surname>Balandat</surname><given-names>Maximilian</given-names></name>
        <name><surname>Owen</surname><given-names>Art B.</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
      </person-group>
      <article-title>ENH: Add stats.qmc module with quasi Monte Carlo functionality</article-title>
      <source>GitHub pull request</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/scipy/scipy/pull/10844</uri>
    </element-citation>
  </ref>
  <ref id="ref-optuna2022qmc">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Ishikawa</surname><given-names>Kei</given-names></name>
        <name><surname>Imamura</surname><given-names>Hideaki</given-names></name>
        <name><surname>Roy</surname><given-names>Pamphile T.</given-names></name>
      </person-group>
      <article-title>Add QMC sampler</article-title>
      <source>GitHub pull request</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/optuna/optuna/pull/2423</uri>
    </element-citation>
  </ref>
  <ref id="ref-salib2022qmc">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Roy</surname><given-names>Pamphile T.</given-names></name>
        <name><surname>Iwanaga</surname><given-names>Takuya</given-names></name>
      </person-group>
      <article-title>Add Sobol’ sampler from SciPy</article-title>
      <source>GitHub pull request</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/SALib/SALib/pull/519</uri>
    </element-citation>
  </ref>
  <ref id="ref-unuran2022">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Baumgarten</surname></name>
        <name><surname>Patel</surname></name>
      </person-group>
      <article-title>Automatic random variate generation in Python</article-title>
      <source>Proceedings of the 21st Python in Science Conference</source>
      <person-group person-group-type="editor">
        <name><surname>Agarwal</surname></name>
        <name><surname>Calloway</surname></name>
        <name><surname>Niederhut</surname></name>
        <name><surname>Shupe</surname></name>
      </person-group>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.25080/majora-212e5952-007</pub-id>
      <fpage>46 </fpage>
      <lpage> 51</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
