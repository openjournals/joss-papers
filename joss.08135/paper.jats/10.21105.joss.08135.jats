<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8135</article-id>
<article-id pub-id-type="doi">10.21105/joss.08135</article-id>
<title-group>
<article-title>PyPaperRetriever: A Python Tool for Finding and
Downloading Scientific Literature</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0009-2423-3451</contrib-id>
<name>
<surname>Turner</surname>
<given-names>Joseph I</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Turner</surname>
<given-names>Kaydance D</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>NYU Grossman School of Medicine</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Center for Brain Circuit Therapeutics, Harvard Medical
School</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Computer Science, Brigham Young
University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-01-29">
<day>29</day>
<month>1</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>8135</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>scientific literature</kwd>
<kwd>literature search</kwd>
<kwd>PDF retrieval</kwd>
<kwd>PubMed</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>PyPaperRetriever is a Python tool that automates the discovery and
  retrieval of scientific literature, starting from either a DOI or
  PubMed ID. It queries multiple sources—Unpaywall, NIH Entrez/PMC, and
  Crossref—to locate and download lawfully available PDFs, prioritizing
  open access. The tool supports programmatic PubMed searches with
  custom queries, enabling at‑scale retrieval where lawfully available,
  metadata resolution, and optional figure extraction in a single,
  reproducible workflow. Usable via command line or as a Python module,
  PyPaperRetriever provides a scalable, PubMed‑first solution for
  literature reviews, dataset creation, and other projects requiring
  comprehensive literature aggregation.</p>
  <p><bold>Legal/Ethical Notice:</bold> This article documents software
  that prioritizes lawfully available sources (e.g., PubMed Central,
  Unpaywall‑indexed OA, and publisher‑permitted copies). It does not
  instruct readers to access or download materials from unauthorized
  sources. Any references to third‑party websites that may host
  unauthorized copies are provided only for contextual completeness and
  are not endorsed. Readers are solely responsible for compliance with
  applicable laws and institutional policies.</p>
  <sec id="core-features">
    <title>Core Features</title>
    <fig>
      <caption><p>PyPaperRetriever paper retrieval
      workflow.<styled-content id="figU003Aworkflow"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figure1.png" />
    </fig>
    <p><bold>1. Find and Download PDFs for a Given DOI or PubMed
    ID:</bold> PyPaperRetriever can find and download PDFs for a given
    DOI or PubMed ID by querying multiple APIs, including Unpaywall,
    NIH’s Entrez, and Crossref. If a PDF is lawfully available (e.g.,
    via PubMed Central or publisher‑permitted OA), PyPaperRetriever will
    download it to the user’s system.</p>
    <fig>
      <caption><p>PubMedSearcher workflow for searching PubMed
      programmatically.<styled-content id="figU003Apubmed"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figure2.png" />
    </fig>
    <p><bold>2. Search PubMed programmatically:</bold> PyPaperRetriever
    can search PubMed using a query string and download PDFs of the
    search results where lawfully available (e.g., PubMed Central or
    publisher‑provided OA). This feature is useful for researchers who
    want to download multiple papers based on a specific topic or
    keyword.</p>
    <p><bold>3. Extract figures/images from PDFs:</bold>
    PyPaperRetriever can extract figures and images from PDFs and save
    them as PNG files. This feature is useful for researchers who want
    to extract and analyze figures or images from scientific papers, and
    is robust to a variety of PDF formats. PyPaperRetriever has been
    used to build an extensive catalog of brain lesion images for
    training computer vision models.</p>
    <p><bold>4. Finding references, and building citation
    networks:</bold> PyPaperRetriever allows users to track a paper’s
    citation network using a DOI or PubMedID. It finds papers that
    reference the given paper, as well as the papers it references. This
    process can be repeated recursively to any desired depth, enabling
    users to explore how the paper has influenced others and the
    foundational work it is built upon across multiple generations of
    citations.</p>
  </sec>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Efficient, reproducible access to full texts at scale remains a
  bottleneck for systematic reviews, dataset construction, and
  downstream AI/LLM workflows. Manually locating and downloading PDFs is
  tedious and
  time‑consuming(<xref alt="Singh et al., 2011" rid="ref-SinghU003A2011" ref-type="bibr">Singh
  et al., 2011</xref>;
  <xref alt="Zhang et al., 2023" rid="ref-ZhangU003A2023" ref-type="bibr">Zhang
  et al., 2023</xref>), even with recent advances in open access (OA)
  and indexes like Unpaywall. Biomedical researchers often begin with
  PubMed queries rather than DOI lists, and converting those results
  into full‑text PDFs involves several steps: resolving metadata from
  search results, handling newly posted green OA, validating links, and
  downloading large batches reliably. Without a dedicated tool, most
  labs resort to ad‑hoc glue code and custom scripts that are hard to
  maintain.</p>
  <p>PyPaperRetriever automates this process. It provides a
  PubMed-first, end-to-end pipeline that: (i) executes complex PubMed
  searches; (ii) resolves and downloads full text from multiple sources
  (prioritizing OA sources such as PubMed Central and
  publisher‑permitted copies); (iii) supports downstream analyses such
  as figure extraction and citation graphs; and (iv) integrates cleanly
  into Python workflows.</p>
  <p>The tool has been extensively used in research, including
  aggregation of over 7,000 brain lesion case reports for LesionBank.org
  and several thousand additional downloads for related neuroscience
  projects. By streamlining literature retrieval and integrating
  advanced search capabilities, PyPaperRetriever saves substantial time
  in projects requiring comprehensive literature aggregation, and it has
  been successfully embedded into PRISMA pipelines for systematic review
  workflows.</p>
  <p>Looking ahead, the ability to leverage Large Language Models (LLMs)
  for screening full text, extracting detailed insights, and mining not
  only abstracts but also full-text content, figures, and images
  represents a critical step for the next generation of AI-driven
  literature
  tools(<xref alt="Oami et al., 2024" rid="ref-OamiU003A2024" ref-type="bibr">Oami
  et al., 2024</xref>;
  <xref alt="Scherbakov et al., 2024" rid="ref-ScherbakovU003A2024" ref-type="bibr">Scherbakov
  et al., 2024</xref>). PyPaperRetriever provides the foundational
  infrastructure for these advancements, ensuring researchers can access
  and process the literature at scale.</p>
</sec>
<sec id="methods">
  <title>Methods</title>
  <p>PyPaperRetriever is a Python‑based tool designed to search,
  retrieve, and analyze scientific papers using a structured,
  object‑oriented approach. The primary class, PaperRetriever, serves as
  the central interface and can be used both via the command line and as
  an importable module for integration into custom Python scripts or
  Jupyter notebooks. Supporting classes—PubMedSearcher, ImageExtractor,
  PaperTracker, and ReferenceRetriever—extend its capabilities, allowing
  for enhanced paper searching, citation tracking, and figure
  extraction.</p>
  <sec id="object-oriented-structure">
    <title>Object-Oriented Structure</title>
    <p>The software is structured around the following classes:</p>
    <list list-type="bullet">
      <list-item>
        <p><bold><monospace>PaperRetriever</monospace>:</bold> The core
        class responsible for retrieving scientific papers. It supports
        searching for papers using DOIs or PubMed IDs and attempts to
        download them using multiple external sources. This class is
        importable from the PyPaperRetriever module and can also be
        executed via the command line.</p>
      </list-item>
      <list-item>
        <p><bold><monospace>PubMedSearcher</monospace>:</bold>
        Facilitates keyword-based searching of PubMed, retrieving
        metadata, and assembling structured datasets of search
        results.</p>
      </list-item>
      <list-item>
        <p><bold><monospace>ImageExtractor</monospace>:</bold> Extracts
        images and figures from downloaded PDFs, handling both native
        and image-based PDFs.</p>
      </list-item>
      <list-item>
        <p><bold><monospace>ReferenceRetriever</monospace></bold>:
        Gathers references and citations for a given paper using
        multiple external APIs.</p>
      </list-item>
      <list-item>
        <p><bold><monospace>PaperTracker</monospace>:</bold> Builds
        citation networks by tracing references upstream (papers cited
        by the target paper) and downstream (papers that cite the target
        paper), storing results in structured DataFrames.</p>
      </list-item>
    </list>
  </sec>
  <sec id="command-line-vs.-programmatic-usage">
    <title>Command-Line vs. Programmatic Usage</title>
    <list list-type="bullet">
      <list-item>
        <p><bold>Command-Line Interface (CLI)</bold>: The PaperRetriever
        class can be executed directly from the command line using the
        main() function, allowing users to quickly retrieve papers
        without writing additional code.</p>
      </list-item>
      <list-item>
        <p><bold>Python Module Import</bold>: While PaperRetriever can
        be used standalone, the supporting classes (PubMedSearcher,
        ImageExtractor, PaperTracker, and ReferenceRetriever) are
        intended for use in Python scripts and Jupyter notebooks,
        providing more flexibility for data analysis and automation.</p>
      </list-item>
    </list>
  </sec>
</sec>
<sec id="similar-tools">
  <title>Similar Tools</title>
  <p>Several tools exist for finding and downloading scientific
  literature, but PyPaperRetriever stands out due to its versatility and
  robust integration with multiple APIs. Here, we compare
  PyPaperRetriever with similar tools to highlight its advantages:</p>
  <p><bold>1. Unpaywall</bold></p>
  <p>Unpaywall is a widely used open‑access index for DOIs, offering a
  REST API that identifies locations of freely available PDFs on the
  web. It’s integrated into many reference managers and academic tools,
  and even has an R client for programmatic access. While Unpaywall is
  excellent for finding OA versions of papers, it is DOI‑centric and
  does not support PubMed ID–based searches; nor does it provide a
  complete end‑to‑end solution for downloading PDFs at scale.</p>
  <p>PyPaperRetriever builds on Unpaywall by handling the entire
  workflow, from running PubMed searches, to resolving mixed PMID/DOI
  metadata, to downloading PDFs, with additional queries to NIH’s Entrez
  (PubMed/PMC) and Crossref to improve coverage. In practice, we’ve
  found that Unpaywall’s API can occasionally miss newly deposited green
  OA copies or point to PDFs that are hosted in ways that block
  automated retrieval. By cross-checking multiple sources and validating
  links, PyPaperRetriever improves recall and reliability, helping
  ensure that open-access copies outside Unpaywall’s current index are
  found and retrieved.</p>
  <p><bold>2. PyPaperBot</bold></p>
  <p>PyPaperBot
  (<xref alt="Ferrulli, 2020" rid="ref-pypaperbot" ref-type="bibr">Ferrulli,
  2020</xref>), while functional, has significant limitations that
  prompted the development of PyPaperRetriever. PyPaperBot relies
  primarily on Sci‑Hub, which is ethically controversial, may be
  unlawful to use in many jurisdictions, and is often blocked by
  academic institutions and in certain countries. Additionally, it lacks
  support for PubMed ID‑based searches, a critical feature for
  researchers in biomedical sciences.</p>
  <p>PyPaperRetriever addresses these shortcomings through several key
  improvements. It integrates with three different APIs (Unpaywall,
  NIH’s Entrez, and Crossref) to expand access to a wide range of
  sources, and prioritizes open‑access sources. The tool also supports
  PubMed ID searches and programmatic PubMed queries, while enabling
  module‑level imports for integration into Python workflows, unlike
  PyPaperBot’s command‑line‑only functionality.</p>
  <p><bold>3. Proprietary Software</bold></p>
  <p>There are several proprietary software tools for managing
  scientific literature, including DistillerSR and Convidence. These
  often come with high costs and limited flexibility. PyPaperRetriever
  offers a free, open‑source alternative with comparable
  functionality.</p>
</sec>
<sec id="ethical-and-legal-note-on-sci-hub">
  <title>Ethical and legal note on Sci-Hub</title>
  <p>Use of third‑party sites that may host unauthorized copies (e.g.,
  Sci‑Hub) can be unlawful in many jurisdictions, and institutions
  commonly block such access. This article does not provide instructions
  for accessing or downloading materials from unauthorized sources.
  PyPaperRetriever prioritizes lawfully available sources (e.g., PubMed
  Central, Unpaywall‑indexed OA, and publisher‑permitted copies). The
  authors do not endorse or encourage any unlawful use; users are
  responsible for ensuring compliance with applicable laws, licenses,
  and institutional policies.</p>
</sec>
<sec id="availability">
  <title>Availability</title>
  <p>All code and documentation for PyPaperRetriever are available on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/JosephIsaacTurner/pypaperretriever">GitHub</ext-link>.
  The tool is distributed under the MIT License, allowing for free use,
  modification, and redistribution. Instructions for installation and
  usage are provided in the README file. We welcome contributions and
  feedback from the community to improve the tool and expand its
  capabilities. Opening an issue on the GitHub repository is the best
  way to report bugs or request features; pull requests are also welcome
  for contributions and will be reviewed promptly.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>JIT conceived the idea for PyPaperRetriever, developed the
  codebase, and wrote documentation. JIT is the primary author of this
  paper and takes full responsibility for the content. KDT also provided
  feedback on the tool’s design and functionality, contributed to the
  documentation, and assisted in testing and debugging.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-ZhangU003A2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>M.</given-names></name>
        <name><surname>Doi</surname><given-names>L.</given-names></name>
        <name><surname>Awua</surname><given-names>J.</given-names></name>
        <name><surname>Asare</surname><given-names>H.</given-names></name>
        <name><surname>Stenhouse</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>Challenges and possible solutions for accessing scholarly literature among medical and nursing professionals and students in low-and-middle income countries: A systematic review</article-title>
      <source>Nurse Education Today</source>
      <year iso-8601-date="2023">2023</year>
      <volume>123</volume>
      <pub-id pub-id-type="doi">10.1016/j.nedt.2023.105737</pub-id>
      <fpage>105737</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-SinghU003A2011">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Singh</surname><given-names>A.</given-names></name>
        <name><surname>Singh</surname><given-names>M.</given-names></name>
        <name><surname>Singh</surname><given-names>A. K.</given-names></name>
        <name><surname>Singh</surname><given-names>D.</given-names></name>
        <name><surname>Singh</surname><given-names>P.</given-names></name>
        <name><surname>Sharma</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>&quot;Free full text articles&quot;: where to search for them?</article-title>
      <source>International Journal of Trichology</source>
      <year iso-8601-date="2011">2011</year>
      <volume>3</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.4103/0974-7753.90803</pub-id>
      <fpage>75</fpage>
      <lpage>79</lpage>
    </element-citation>
  </ref>
  <ref id="ref-OamiU003A2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Oami</surname><given-names>T.</given-names></name>
        <name><surname>Okada</surname><given-names>Y.</given-names></name>
        <name><surname>Nakada</surname><given-names>T. A.</given-names></name>
      </person-group>
      <article-title>Performance of a Large Language Model in Screening Citations</article-title>
      <source>JAMA Network Open</source>
      <year iso-8601-date="2024">2024</year>
      <volume>7</volume>
      <issue>7</issue>
      <pub-id pub-id-type="doi">10.1001/jamanetworkopen.2024.20496</pub-id>
      <fpage>e2420496</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ScherbakovU003A2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Scherbakov</surname><given-names>D.</given-names></name>
        <name><surname>Hubig</surname><given-names>N.</given-names></name>
        <name><surname>Jansari</surname><given-names>V.</given-names></name>
        <name><surname>Bakumenko</surname><given-names>A.</given-names></name>
        <name><surname>Lenert</surname><given-names>L. A.</given-names></name>
      </person-group>
      <article-title>The emergence of Large Language Models (LLM) as a tool in literature reviews: an LLM automated systematic review</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://arxiv.org/abs/2409.04600</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2409.04600</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pypaperbot">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Ferrulli</surname><given-names>Vito</given-names></name>
      </person-group>
      <article-title>PyPaperBot: A tool to automatically download scientific papers</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/ferru97/PyPaperBot</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
