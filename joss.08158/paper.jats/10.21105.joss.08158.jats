<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8158</article-id>
<article-id pub-id-type="doi">10.21105/joss.08158</article-id>
<title-group>
<article-title>PathSim - A System Simulation Framework</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0006-5964-6115</contrib-id>
<name>
<surname>Rother</surname>
<given-names>Milan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Technische Universität Braunschweig, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-04-23">
<day>23</day>
<month>4</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>109</issue>
<fpage>8158</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>system simulation</kwd>
<kwd>dynamical systems</kwd>
<kwd>block diagram</kwd>
<kwd>ODE solver</kwd>
<kwd>automatic differentiation</kwd>
<kwd>event handling</kwd>
<kwd>hybrid systems</kwd>
<kwd>scientific computing</kwd>
<kwd>numerical integration</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>PathSim is a flexible, block-based, time-domain dynamical system
  simulation framework implemented in Python. It enables the modeling
  and simulation of complex interconnected systems from their signal
  flow graphs, similar to MathWorks Simulink
  (<xref alt="Simulink, Simulation and Model-Based Design, Version R2025a, 2025" rid="ref-Simulink" ref-type="bibr"><italic><named-content content-type="nocase">Simulink,
  Simulation and Model-Based Design, Version
  R2025a</named-content></italic>, 2025</xref>) using an object-oriented
  and decentralized architecture. This architectural choice
  distinguishes PathSim by distributing state and computation across
  individual <monospace>Block</monospace> components, promoting
  modularity, extensibility, and flexibility. Core components include
  user-defined or built-in <monospace>Block</monospace> objects
  encapsulating specific behaviors, <monospace>Connection</monospace>
  objects defining explicit data flow, and a
  <monospace>Simulation</monospace> object managing time evolution and
  coordination. Dynamic blocks possess their own numerical solver
  instances (<monospace>engine</monospace>) for state integration.
  PathSim incorporates advanced features: (forward mode) automatic
  differentiation for sensitivity analysis or gradient based
  optimization, discrete event handling for hybrid systems, automatic
  system- or block-level linearization, hierarchical modeling through
  subsystems, and a comprehensive suite of ODE solvers suitable for
  stiff problems. It requires only core scientific Python libraries:
  NumPy
  (<xref alt="Harris et al., 2020" rid="ref-harris2020array" ref-type="bibr">Harris
  et al., 2020</xref>), SciPy
  (<xref alt="Virtanen et al., 2020" rid="ref-virtanen2020scipy" ref-type="bibr">Virtanen
  et al., 2020</xref>), and Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Modeling and simulating dynamical systems is vital across many
  disciplines such as control engineering, chemical process engineering,
  and mixed signal engineering. Challenges are often the interplay of
  multiple <italic>coupled</italic> subsystems with their distinct
  dynamics and behaviors that have to be solved and synchronized
  concurrently to advance the full system simulation.</p>
  <p>PathSim meets the need for an open source simulation framework in
  the block-diagram paradigm with minimal dependencies, which integrates
  seamlessly into the Python ecosystem. Traditional simulation tools
  often rely on centralized solvers, proprietary file formats, or
  compiled code, which can limit flexibility and extensibility within
  the Python ecosystem. PathSim’s decentralized architecture offers
  distinct advantages: enhanced modularity (blocks are self-contained
  units), straight forward extensibility (new blocks integrate naturally
  without core modification), and greater flexibility in model
  composition and analysis. Additionally this opens up block level
  solver optimizations, integration with other simulation environments
  (co-simulation), and hardware in the loop (HiL) setups through
  encapsulation within blocks, as well as integration into
  machine-learning pipelines.</p>
  <p>Specifically PathSim offers:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Open Source Alternative:</bold> An open source
      alternative to legacy block-diagram system simulation
      frameworks.</p>
    </list-item>
    <list-item>
      <p><bold>Accessible Hybrid System Simulation:</bold> Integrates
      event detection (zero-crossing, scheduled) directly into the
      block-diagram paradigm, simplifying the modeling of systems with
      both <italic>continuous and discrete dynamics</italic>.</p>
    </list-item>
    <list-item>
      <p><bold>Hierarchical Modeling:</bold> Subsystem blocks that
      encapsulate their own blocks and connections to <italic>manage
      model complexity</italic>.</p>
    </list-item>
    <list-item>
      <p><bold>Gradient-Enabled Simulation:</bold> Provides built-in
      <italic>automatic differentiation</italic> for sensitivity
      analysis and integration with gradient-based optimization or
      machine learning frameworks.</p>
    </list-item>
    <list-item>
      <p><bold>Unified Framework for Diverse Dynamics:</bold> Offers a
      wide range of solvers, including implicit methods (ESDIRK,
      BDF/GEAR) for <italic>stiff systems</italic>.</p>
    </list-item>
    <list-item>
      <p><bold>Extensibility in Python:</bold> Leverages the scientific
      Python ecosystem with minimal dependencies. Its architecture
      allows straightforward creation and integration of custom
      blocks.</p>
    </list-item>
  </list>
</sec>
<sec id="comparison-to-existing-tools">
  <title>Comparison to Existing Tools</title>
  <p>MathWorks Simulink
  (<xref alt="Simulink, Simulation and Model-Based Design, Version R2025a, 2025" rid="ref-Simulink" ref-type="bibr"><italic><named-content content-type="nocase">Simulink,
  Simulation and Model-Based Design, Version
  R2025a</named-content></italic>, 2025</xref>) is the de facto industry
  standard for system modeling in the block diagram paradigm. It’s a
  proprietary tool with significant licensing costs. Besides that, other
  equation based modeling frameworks such as
  <monospace>Modelica</monospace>
  (<xref alt="Modelica Standard Library, 1999" rid="ref-ModelicaRepo" ref-type="bibr"><italic>Modelica
  Standard Library</italic>, 1999</xref>) with its own model description
  language are also used but not as widely adopted.</p>
  <p>Several Python tools for simulating dynamical systems have emerged
  over the years. Standard ODE solvers like
  <monospace>scipy.integrate.solve_ivp</monospace>
  (<xref alt="Virtanen et al., 2020" rid="ref-virtanen2020scipy" ref-type="bibr">Virtanen
  et al., 2020</xref>) offer robust integration but lack a structured
  framework for modeling complex, interconnected systems, or handling
  discrete events natively. Users have to manually derive the govering
  system equations. The <italic>Python Control Systems Library</italic>
  (<xref alt="Fuller et al., 2021" rid="ref-pythoncontrol" ref-type="bibr">Fuller
  et al., 2021</xref>) is a popular package for modeling and optimizing
  dynamical systems, primarily from the control engineering perspective.
  The package <monospace>tbcontrol</monospace>
  (<xref alt="Sandrock, 2019" rid="ref-tbcontrol" ref-type="bibr">Sandrock,
  2019</xref>) similarly focuses on control systems. Libraries like
  <monospace>SimuPy</monospace>
  (<xref alt="Margolis, 2017b" rid="ref-Margolis2017" ref-type="bibr">Margolis,
  2017b</xref>,
  <xref alt="2017a" rid="ref-SimuPyRepo" ref-type="bibr">2017a</xref>)
  provide a block-based modeling approach similar to PathSim, leveraging
  SymPy for symbolic definition and SciPy solvers for integration. Other
  frameworks like <monospace>Collimator</monospace>
  (<xref alt="Collimator.ai, 2022" rid="ref-pycollimator" ref-type="bibr">Collimator.ai,
  2022</xref>) offer graphical interfaces and JAX-based acceleration but
  require compilation and introduce dependencies beyond the standard
  scientific Python stack. <monospace>bdsim</monospace>
  (<xref alt="Corke, 2020" rid="ref-bdsimRepo" ref-type="bibr">Corke,
  2020</xref>) also provides block diagram simulation, based on Scipy
  solvers, with a strong focus on robotics but without event
  handling.</p>
  <p>PathSim differentiates itself by offering a script-based
  block-diagram interface with a <italic>decentralized
  architecture</italic>, native integration of both <italic>automatic
  differentiation</italic> and <italic>discrete event handling</italic>
  into the full simulation loop, capable of handling <italic>algebraic
  loops</italic>, and a <italic>built-in library</italic> of
  independently implemented and verified ODE solvers (beyond wrapping
  SciPy). It is fully open under the <italic>MIT License</italic> with
  <italic>minimal core dependencies</italic>.</p>
</sec>
<sec id="architecture-and-design">
  <title>Architecture and Design</title>
  <p>PathSim employs a decentralized, object-oriented design centered
  around three primary components:</p>
  <list list-type="order">
    <list-item>
      <p><bold>Blocks (<monospace>Block</monospace>):</bold> Represent
      individual system components or operations. They encapsulate their
      parameters and, if stateful (like
      <monospace>Integrator</monospace>,
      <monospace>StateSpace</monospace> or <monospace>ODE</monospace>),
      manage their own internal state via a dedicated numerical
      integration engine (<monospace>engine</monospace>) instance. This
      contrasts with centralized approaches where a single solver
      manages all system states. Blocks define
      <monospace>update</monospace> methods for algebraic computations
      within a timestep and
      <monospace>step</monospace>/<monospace>solve</monospace> methods
      for interacting with their <monospace>engine</monospace> for state
      evolution. The <monospace>Subsystem</monospace> class shares the
      same interface as the base <monospace>Block</monospace> and is
      treated by the main simulation loop as such. This enables
      arbitrary encapsulation and nesting.</p>
    </list-item>
    <list-item>
      <p><bold>Connections (<monospace>Connection</monospace>):</bold>
      Define the explicit data flow pathways between block output ports
      and input ports, mirroring the connections in a block diagram.</p>
    </list-item>
    <list-item>
      <p><bold>Simulation (<monospace>Simulation</monospace>):</bold>
      Coordinates the overall simulation process. It maintains the list
      of blocks and connections. It assembles directed graphs of the
      block dependencies that is used to evaluate the algebraic parts of
      the global system function.
      <monospace>Connection.update()</monospace> propagates output
      values to inputs, and <monospace>Block.update()</monospace>
      computes algebraic outputs based on current inputs and states.
      Algebraic loop blocks are stored in a separate graph and resolved
      iteratively in a second stage. The
      <monospace>Simulation</monospace> object then triggers the
      <monospace>step</monospace> (for explicit solvers) or
      <monospace>solve</monospace> (for implicit solvers) methods of the
      blocks’ engines to advance their internal states. It also manages
      the event handling system.</p>
    </list-item>
  </list>
</sec>
<sec id="pathsim-modeling-flow">
  <title>PathSim Modeling Flow</title>
  <p>PathSim is a script based modeling framework with no built-in
  graphical user interface. Therefore it makes sense to start from the
  block diagram of the system to be modeled. This section demonstrates
  PathSim’s modeling and simulation flow on a classical example
  dynamical system, the <italic>harmonic oscillator</italic>.</p>
  <p>The figure below shows the mechanical representation of the
  harmonic oscillator to the left and its block diagram to the
  right.</p>
  <fig>
    <caption><p>Mechanical representation of the harmonic oscillator to
    the left and its block diagram to the right as a schematic
    viasualization to help with the assembly of the system im PathSim
    (PathSim is purely script based)</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="harmonic_oscillator_g.png" />
  </fig>
  <p>Translating it to PathSim involves importing the blocks from the
  block library, instantiating them with their correct parameters,
  connecting them with the <monospace>Connection</monospace> object, and
  passing everything to the <monospace>Simulation</monospace>.</p>
  <code language="python">from pathsim import Simulation, Connection
from pathsim.blocks import Integrator, Amplifier, Adder, Scope

#initial position and velocity
x0, v0 = 2, 5

#parameters (mass, damping, spring constant)
m, c, k = 0.8, 0.2, 1.5

#blocks that define the system
I1 = Integrator(v0)   # integrator for velocity
I2 = Integrator(x0)   # integrator for position
A1 = Amplifier(-c/m)
A2 = Amplifier(-k/m)
P1 = Adder()
Sc = Scope(labels=[&quot;velocity&quot;, &quot;position&quot;])

blocks = [I1, I2, A1, A2, P1, Sc]

#connections between the blocks
connections = [
    Connection(I1, I2, A1, Sc), 
    Connection(I2, A2, Sc[1]),
    Connection(A1, P1), 
    Connection(A2, P1[1]), 
    Connection(P1, I1)
    ]

#create a simulation instance from the blocks and connections
Sim = Simulation(blocks, connections)

#run the simulation for some time
Sim.run(25)

#plot the results directly from the scope
Sc.plot()

#or read them out for postprocessing
time, [vel, pos] = Sc.read()</code>
  <p>The <monospace>Scope</monospace> block enables fast plotting of the
  simulation results as well as their retrieval.</p>
  <fig>
    <caption><p>Simulation results plotted directly from the PathSim
    <monospace>Scope</monospace> block for the harmonic oscillator
    example.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="harmonic_oscillator_result_g.png" />
  </fig>
  <p>There are more <italic>examples</italic> of dynamical system
  simulations present in the <bold>PathSim</bold> repository and, with
  further explanations, in the documentation. The examples cover all
  features <bold>PathSim</bold> has to offer, including hierarchical
  modeling through <italic>subsystems</italic>, examples of
  <italic>stiff dynamics</italic> with implicit solver, and discrete
  dynamics with <italic>event handling</italic>.</p>
  <p>The figures below showcase more dynamical systems and simulation
  results obtained with <bold>PathSim</bold>.</p>
  <fig>
    <caption><p>Visualization of the <italic>Van der Pol</italic> system
    built from distinct components as a block diagram and the simulation
    results for a very stiff case (<inline-formula><alternatives>
    <tex-math><![CDATA[\mu=1000]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>μ</mml:mi><mml:mo>=</mml:mo><mml:mn>1000</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>)
    using one of PathSim’s implicit ODE solvers
    (<monospace>ESDIRK43</monospace>). This example showcases PathSim’s
    ability to handle stiff systems, it is available in the
    repository.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="vanderpol_g.png" />
  </fig>
  <fig>
    <caption><p>Visualization of the <italic>bouncing ball</italic>, a
    classical example for discrete event handling. This example
    showcases PathSim’s event handling mechanism for detecting and
    resolving discrete events (<italic>zero-crossings</italic> in this
    case). It is available in the repository.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="bouncing_ball_g.png" />
  </fig>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-pycollimator">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Collimator.ai</surname></name>
      </person-group>
      <article-title>Collimator.ai core simulation engine and API client</article-title>
      <publisher-name>https://pypi.org/project/pycollimator/</publisher-name>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-bdsimRepo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Corke</surname><given-names>Peter</given-names></name>
      </person-group>
      <article-title>Bdsim: Simulate dynamic systems expressed in block diagram form using Python</article-title>
      <publisher-name>https://github.com/petercorke/bdsim</publisher-name>
      <year iso-8601-date="2020-05">2020</year><month>05</month>
    </element-citation>
  </ref>
  <ref id="ref-tbcontrol">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Sandrock</surname><given-names>Carl</given-names></name>
      </person-group>
      <article-title>A Python library for solving textbook control problems</article-title>
      <publisher-name>https://github.com/alchemyst/Dynamics-and-Control</publisher-name>
      <year iso-8601-date="2019-05">2019</year><month>05</month>
    </element-citation>
  </ref>
  <ref id="ref-SimuPyRepo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Margolis</surname><given-names>Benjamin W. l.</given-names></name>
      </person-group>
      <article-title>SimuPy: A framework for modeling and simulating dynamical systems</article-title>
      <publisher-name>https://github.com/simupy/simupy</publisher-name>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-Margolis2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Margolis</surname><given-names>Benjamin W. l.</given-names></name>
      </person-group>
      <article-title>SimuPy: A Python framework for modeling and simulating dynamical systems</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>2</volume>
      <issue>17</issue>
      <uri>https://doi.org/10.21105/joss.00396</uri>
      <pub-id pub-id-type="doi">10.21105/joss.00396</pub-id>
      <fpage>396</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Simulink">
    <element-citation publication-type="book">
      <source>Simulink, Simulation and Model-Based Design, Version R2025a</source>
      <publisher-name>The MathWorks, Inc.</publisher-name>
      <publisher-loc>Natick, Massachusetts</publisher-loc>
      <year iso-8601-date="2025">2025</year>
    </element-citation>
  </ref>
  <ref id="ref-ModelicaRepo">
    <element-citation>
      <article-title>Modelica standard library</article-title>
      <publisher-name>Modelica Association; https://github.com/modelica/ModelicaStandardLibrary</publisher-name>
      <year iso-8601-date="1999">1999</year>
    </element-citation>
  </ref>
  <ref id="ref-virtanen2020scipy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
        <name><surname>van der Walt</surname><given-names>Stéfan J.</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
        <name><surname>Jones</surname><given-names>Eric</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Larson</surname><given-names>Eric</given-names></name>
        <name><surname>Carey</surname><given-names>C J</given-names></name>
        <name><surname>Polat</surname><given-names>İlhan</given-names></name>
        <name><surname>Feng</surname><given-names>Yu</given-names></name>
        <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
        <name><surname>Perktold</surname><given-names>Josef</given-names></name>
        <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
        <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
        <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
        <name><surname>Ribeiro</surname><given-names>Antônio H.</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>van Mulbregt</surname><given-names>Paul</given-names></name>
        <string-name>SciPy 1.0 Contributors</string-name>
      </person-group>
      <article-title>SciPy 1.0: Fundamental algorithms for scientific computing in Python</article-title>
      <source>Nature Methods</source>
      <year iso-8601-date="2020">2020</year>
      <volume>17</volume>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      <fpage>261</fpage>
      <lpage>272</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hunter2007matplotlib">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D graphics environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <publisher-name>IEEE COMPUTER SOC</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <volume>9</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
  <ref id="ref-harris2020array">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pythoncontrol">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Fuller</surname><given-names>Sawyer</given-names></name>
        <name><surname>Greiner</surname><given-names>Ben</given-names></name>
        <name><surname>Moore</surname><given-names>Jason</given-names></name>
        <name><surname>Murray</surname><given-names>Richard</given-names></name>
        <name><surname>Paassen</surname><given-names>René van</given-names></name>
        <name><surname>Yorke</surname><given-names>Rory</given-names></name>
      </person-group>
      <article-title>The Python Control Systems Library (python-control)</article-title>
      <source>2021 60th IEEE conference on decision and control (CDC)</source>
      <year iso-8601-date="2021">2021</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/CDC45484.2021.9683368</pub-id>
      <fpage>4875</fpage>
      <lpage>4881</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
