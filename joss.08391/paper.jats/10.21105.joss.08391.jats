<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8391</article-id>
<article-id pub-id-type="doi">10.21105/joss.08391</article-id>
<title-group>
<article-title>kokkos-fft: A shared-memory FFT for the Kokkos
ecosystem</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9997-1274</contrib-id>
<name>
<surname>Asahi</surname>
<given-names>Yuuichi</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5496-0013</contrib-id>
<name>
<surname>Padioleau</surname>
<given-names>Thomas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4811-0079</contrib-id>
<name>
<surname>Zehner</surname>
<given-names>Paul</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0015-4304</contrib-id>
<name>
<surname>Bigot</surname>
<given-names>Julien</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1952-7219</contrib-id>
<name>
<surname>Lebrun-Grandie</surname>
<given-names>Damien</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Universit√© Paris-Saclay, UVSQ, CNRS, CEA, Maison de la
Simulation, 91191, Gif-sur-Yvette, France</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Oak Ridge National Laboratory, Oak Ridge, Tennessee,
US</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-06-06">
<day>6</day>
<month>6</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>111</issue>
<fpage>8391</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>FFT</kwd>
<kwd>High performance computing</kwd>
<kwd>Performance portability</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>kokkos-fft provides a unified, performance-portable interface for
  Fast Fourier Transforms (FFTs) within the Kokkos ecosystem
  (<xref alt="C. Trott et al., 2021" rid="ref-Trott2021" ref-type="bibr">C.
  Trott et al., 2021</xref>). It seamlessly integrates with leading
  local FFT libraries including FFTW, cuFFT, rocFFT, and oneMKL.
  Designed for simplicity and efficiency, kokkos-fft offers a user
  experience akin to numpy.fft for in-place and out-of-place transforms,
  while leveraging the raw speed of vendor-optimized libraries. A
  demonstration solving 2D Hasegawa-Wakatani turbulence with the Fourier
  spectral method illustrates how kokkos-fft can deliver significant
  speedups over Python-based alternatives without drastically increasing
  code complexity, empowering researchers to perform high-performance
  FFTs simply and effectively.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The fast Fourier transform (FFT) is a family of fundamental
  algorithms that is widely used in scientific computing and other areas
  (<xref alt="Rockmore, 2000" rid="ref-Rockmore2000" ref-type="bibr">Rockmore,
  2000</xref>).
  <ext-link ext-link-type="uri" xlink:href="https://github.com/kokkos/kokkos-fft">kokkos-fft</ext-link>
  is designed to help
  <ext-link ext-link-type="uri" xlink:href="https://github.com/kokkos/kokkos">Kokkos</ext-link>
  (<xref alt="C. R. Trott et al., 2022" rid="ref-Trott2022" ref-type="bibr">C.
  R. Trott et al., 2022</xref>) users who are:</p>
  <list list-type="bullet">
    <list-item>
      <p>developing a Kokkos application that relies on FFT libraries,
      e.g., fluid simulation codes with periodic boundaries, plasma
      turbulence, etc.</p>
    </list-item>
    <list-item>
      <p>inclined to integrate in-situ signal and image processing with
      FFTs, e.g., spectral analyses, low pass filtering, etc.</p>
    </list-item>
    <list-item>
      <p>willing to use de facto standard FFT libraries just like
      <ext-link ext-link-type="uri" xlink:href="https://numpy.org/doc/stable/reference/routines.fft.html"><monospace>numpy.fft</monospace></ext-link>
      (<xref alt="Harris et al., 2020" rid="ref-Harris2020" ref-type="bibr">Harris
      et al., 2020</xref>).</p>
    </list-item>
  </list>
  <p>kokkos-fft can benefit such users through the following
  features:</p>
  <list list-type="bullet">
    <list-item>
      <p>A simple interface like
      <ext-link ext-link-type="uri" xlink:href="https://numpy.org/doc/stable/reference/routines.fft.html"><monospace>numpy.fft</monospace></ext-link>
      with in-place and out-of-place transforms:
      Only accepts
      <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/view/view.html">Kokkos
      Views</ext-link> that correspond to the
      <ext-link ext-link-type="uri" xlink:href="https://numpy.org/doc/stable/reference/generated/numpy.array.html">numpy.array</ext-link>,
      to make APIs simple and safe.</p>
    </list-item>
    <list-item>
      <p>1D, 2D, 3D standard and real FFT functions (similar to
      <ext-link ext-link-type="uri" xlink:href="https://numpy.org/doc/stable/reference/routines.fft.html"><monospace>numpy.fft</monospace></ext-link>)
      over 1D to 8D Kokkos Views:
      Batched plans are automatically used if View dimension is larger
      than FFT dimension.</p>
    </list-item>
    <list-item>
      <p>A reusable
      <ext-link ext-link-type="uri" xlink:href="https://kokkosfft.readthedocs.io/en/latest/api/plan/plan.html">FFT
      plan</ext-link> that wraps the vendor libraries for each Kokkos
      backend:
      <ext-link ext-link-type="uri" xlink:href="http://www.fftw.org">FFTW</ext-link>,
      <ext-link ext-link-type="uri" xlink:href="https://developer.nvidia.com/cufft">cuFFT</ext-link>,
      <ext-link ext-link-type="uri" xlink:href="https://github.com/ROCm/rocFFT">rocFFT</ext-link>,
      and
      <ext-link ext-link-type="uri" xlink:href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html">oneMKL</ext-link>
      are automatically enabled based on the enabled Kokkos backend.</p>
    </list-item>
    <list-item>
      <p>Support for multiple CPU and GPU backends:
      FFT libraries for the enabled Kokkos backend are executed on the
      stream/queue used in the
      <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/execution_spaces.html"><monospace>ExecutionSpace</monospace></ext-link>
      where the parallel operations are performed.</p>
    </list-item>
    <list-item>
      <p>Compile time and/or runtime errors for invalid usage (e.g.,
      <monospace>View</monospace> extents mismatch).</p>
    </list-item>
  </list>
  <p>A couple of libraries that offer common APIs over performant vendor
  FFT libraries already exist. Relying on data structures in Python,
  these APIs are offered by a dedicated FFT library like FluidFFT
  (<xref alt="Mohanan et al., 2019" rid="ref-Mohanan2019" ref-type="bibr">Mohanan
  et al., 2019</xref>) or a more general library offering GPU
  acceleration like Jax
  (<xref alt="Bradbury et al., 2018" rid="ref-jax2018github" ref-type="bibr">Bradbury
  et al., 2018</xref>). In C++, offering this kind of APIs is
  non-trivial because of the lack of standard data structures with
  extents and/or data locations. Thanks to
  <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/view/view.html">Kokkos
  Views</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/execution_spaces.html"><monospace>ExecutionSpace</monospace></ext-link>,
  we can offer simple and safe APIs, which is the unique feature of this
  library.</p>
</sec>
<sec id="how-to-use-kokkos-fft">
  <title>How to use kokkos-fft</title>
  <p>For those who are familiar with
  <ext-link ext-link-type="uri" xlink:href="https://numpy.org/doc/stable/reference/routines.fft.html"><monospace>numpy.fft</monospace></ext-link>,
  you may use kokkos-fft quite easily. In fact, all of the numpy.fft
  functions (<monospace>numpy.fft.&lt;function_name&gt;</monospace>)
  have an analogous counterpart in kokkos-fft
  (<monospace>KokkosFFT::&lt;function_name&gt;</monospace>), which can
  run on the Kokkos device. In addition, kokkos-fft supports
  <ext-link ext-link-type="uri" xlink:href="https://kokkosfft.readthedocs.io/en/latest/intro/using.html#inplace-transform">in-place
  transform</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://kokkosfft.readthedocs.io/en/latest/intro/using.html#reuse-fft-plan">plan
  reuse</ext-link> capabilities.</p>
  <p>Let‚Äôs start with a simple example to perform the 1D real to complex
  transform using <monospace>rfft</monospace> in kokkos-fft.</p>
  <code language="c++">#include &lt;Kokkos_Core.hpp&gt;
#include &lt;Kokkos_Random.hpp&gt;
#include &lt;KokkosFFT.hpp&gt;
int main(int argc, char* argv[]) {
  Kokkos::ScopeGuard guard(argc, argv);
  const int n = 4;
  Kokkos::View&lt;double*&gt; x(&quot;x&quot;, n);
  Kokkos::View&lt;Kokkos::complex&lt;double&gt;*&gt; x_hat(&quot;x_hat&quot;, n/2+1);
  // initialize the input array with random values
  Kokkos::DefaultExecutionSpace exec;
  Kokkos::Random_XorShift64_Pool&lt;&gt; random_pool(/*seed=*/12345);
  Kokkos::fill_random(exec, x, random_pool, /*range=*/1.0);
  KokkosFFT::rfft(exec, x, x_hat);
  // block the current thread until all work enqueued into exec is finished
  exec.fence();
}</code>
  <p>This is equivalent to the following Python code.</p>
  <code language="python">import numpy as np
x = np.random.rand(4)
x_hat = np.fft.rfft(x)</code>
  <p>There are two additional arguments in the Kokkos version:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>exec</monospace>:
      <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/execution_spaces.html"><italic>Kokkos
      execution space instance</italic></ext-link> that encapsulates the
      underlying compute resources (e.g., CPU cores, GPU devices) where
      the task will be dispatched for execution.</p>
    </list-item>
    <list-item>
      <p><monospace>x_hat</monospace>:
      <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/view/view.html"><italic>Kokkos
      Views</italic></ext-link> where the complex-valued FFT output will
      be stored. By accepting this view as an argument, the function
      allows the user to pre-allocate memory and optimize data
      placement, avoiding unnecessary allocations and copies.</p>
    </list-item>
  </list>
  <p>Also, kokkos-fft only accepts
  <ext-link ext-link-type="uri" xlink:href="https://kokkos.org/kokkos-core-wiki/API/core/view/view.html">Kokkos
  Views</ext-link> as input data. The accessibility of a View from
  <monospace>ExecutionSpace</monospace> is statically checked and will
  result in a compilation error if not accessible. See
  <ext-link ext-link-type="uri" xlink:href="https://kokkosfft.readthedocs.io/en/latest/intro/quick_start.html">documentations</ext-link>
  for basic usage.</p>
</sec>
<sec id="benchmark-2d-hasegawa-wakatani-turbulence-with-the-fourier-spectral-method">
  <title>Benchmark: 2D Hasegawa-Wakatani turbulence with the Fourier
  spectral method</title>
  <p>As a more scientific example, we solve a typical 2D plasma
  turbulence model, called the Hasegawa-Wakatani equation
  (<xref alt="Wakatani &amp; Hasegawa, 1984" rid="ref-Wakatani1984" ref-type="bibr">Wakatani
  &amp; Hasegawa, 1984</xref>) using the Fourier spectral method (see
  <xref alt="[fig:hw2D]" rid="figU003Ahw2D">[fig:hw2D]</xref> for the
  vorticity structure).</p>
  <fig>
    <caption><p>Vorticity.<styled-content id="figU003Ahw2D"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="hw2D.png" />
  </fig>
  <p>Using Kokkos and kokkos-fft, we can easily implement the code (see
  <ext-link ext-link-type="uri" xlink:href="https://github.com/kokkos/kokkos-fft/tree/main/examples/10_HasegawaWakatani/README.md">example</ext-link>),
  just like Python, while getting a significant acceleration. The core
  computational kernel of the code is the nonlinear term which is
  computed with FFTs. We construct the forward and backward FFT plans
  once during initialization which are reused in the time evolution
  loops.</p>
  <p>We have performed a benchmark of this application over multiple
  backends. We performed a simulation for 100 steps with a resolution of
  <monospace>1024 x 1024</monospace> while I/O is disabled. The
  following table shows the achieved performance.</p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="14%" />
        <col width="14%" />
        <col width="14%" />
        <col width="14%" />
        <col width="14%" />
        <col width="14%" />
        <col width="14%" />
      </colgroup>
      <thead>
        <tr>
          <th>Device</th>
          <th>Icelake (python)</th>
          <th>Icelake</th>
          <th>A100</th>
          <th>H100</th>
          <th>MI250X</th>
          <th>PVC</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Kokkos Backend</td>
          <td>-</td>
          <td>OpenMP</td>
          <td>CUDA</td>
          <td>CUDA</td>
          <td>HIP</td>
          <td>SYCL</td>
        </tr>
        <tr>
          <td>LOC</td>
          <td>568</td>
          <td>738</td>
          <td>738</td>
          <td>738</td>
          <td>738</td>
          <td>738</td>
        </tr>
        <tr>
          <td>Compiler/version</td>
          <td>Python 3.12.3</td>
          <td>IntelLLVM 2023.0.0</td>
          <td>nvcc 12.2</td>
          <td>nvcc 12.3</td>
          <td>rocm 5.7</td>
          <td>IntelLLVM 2024.0.2</td>
        </tr>
        <tr>
          <td>GB/s (Theoretical peak)</td>
          <td>205</td>
          <td>205</td>
          <td>1555</td>
          <td>3350</td>
          <td>1600</td>
          <td>3276.8</td>
        </tr>
        <tr>
          <td>Elapsed time [s]</td>
          <td>463</td>
          <td>9.28</td>
          <td>0.25</td>
          <td>0.14</td>
          <td>0.41</td>
          <td>0.30</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p>Here, the testbed includes Intel Xeon Platinum 8360Y (referred to
  as Icelake), NVIDIA A100 and H100 GPUs, AMD MI250X GPU (1 GCD) and
  Intel Data Center GPU Max 1550 (referred to as PVC). On Icelake, we
  use 36 cores with OpenMP parallelization. As expected, the Python
  version is the simplest in terms of lines of code (LOC). With Kokkos
  and kokkos-fft, the same logic can be implemented without
  significantly increasing the source code size (roughly 1.5 times
  longer). However, the benefit is enormous: a single and simple code
  that runs on multiple architectures efficiently.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work has received support by the CExA Moonshot project of the
  CEA
  <ext-link ext-link-type="uri" xlink:href="https://cexa-project.org">cexa-project</ext-link>.
  This work was carried out using FUJITSU PRIMERGY GX2570
  (Wisteria/BDEC-01) at the University of Tokyo. This work was partly
  supported by JHPCN project jh220036. This research used resources of
  the Oak Ridge Leadership Computing Facility at the Oak Ridge National
  Laboratory, which is supported by the Office of Science of the U.S.
  Department of Energy under Contract No.¬†DE-AC05-00OR22725. This work
  was also granted access to the HPC resources of CINES under the
  allocation 2023-cin4492 made by GENCI.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-Trott2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Trott</surname><given-names>Christian</given-names></name>
        <name><surname>Berger-Vergiat</surname><given-names>Luc</given-names></name>
        <name><surname>Poliakoff</surname><given-names>David</given-names></name>
        <name><surname>Rajamanickam</surname><given-names>Sivasankaran</given-names></name>
        <name><surname>Lebrun-Grandie</surname><given-names>Damien</given-names></name>
        <name><surname>Madsen</surname><given-names>Jonathan</given-names></name>
        <name><surname>Al Awar</surname><given-names>Nader</given-names></name>
        <name><surname>Gligoric</surname><given-names>Milos</given-names></name>
        <name><surname>Shipman</surname><given-names>Galen</given-names></name>
        <name><surname>Womeldorff</surname><given-names>Geoff</given-names></name>
      </person-group>
      <article-title>The Kokkos EcoSystem: Comprehensive performance portability for high performance computing</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <publisher-name>IEEE Computer Society</publisher-name>
      <publisher-loc>Los Alamitos, CA, USA</publisher-loc>
      <year iso-8601-date="2021-09">2021</year><month>09</month>
      <volume>23</volume>
      <issue>05</issue>
      <issn>1558-366X</issn>
      <uri>https://doi.ieeecomputersociety.org/10.1109/MCSE.2021.3098509</uri>
      <pub-id pub-id-type="doi">10.1109/MCSE.2021.3098509</pub-id>
      <fpage>10</fpage>
      <lpage>18</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Rockmore2000">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rockmore</surname><given-names>D. N.</given-names></name>
      </person-group>
      <article-title>The FFT: An algorithm the whole family can use</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <year iso-8601-date="2000">2000</year>
      <volume>2</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1109/5992.814659</pub-id>
      <fpage>60</fpage>
      <lpage>64</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Trott2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Trott</surname><given-names>Christian R.</given-names></name>
        <name><surname>Lebrun-Grandi√©</surname><given-names>Damien</given-names></name>
        <name><surname>Arndt</surname><given-names>Daniel</given-names></name>
        <name><surname>Ciesko</surname><given-names>Jan</given-names></name>
        <name><surname>Dang</surname><given-names>Vinh</given-names></name>
        <name><surname>Ellingwood</surname><given-names>Nathan</given-names></name>
        <name><surname>Gayatri</surname><given-names>Rahulkumar</given-names></name>
        <name><surname>Harvey</surname><given-names>Evan</given-names></name>
        <name><surname>Hollman</surname><given-names>Daisy S.</given-names></name>
        <name><surname>Ibanez</surname><given-names>Dan</given-names></name>
        <name><surname>Liber</surname><given-names>Nevin</given-names></name>
        <name><surname>Madsen</surname><given-names>Jonathan</given-names></name>
        <name><surname>Miles</surname><given-names>Jeff</given-names></name>
        <name><surname>Poliakoff</surname><given-names>David</given-names></name>
        <name><surname>Powell</surname><given-names>Amy</given-names></name>
        <name><surname>Rajamanickam</surname><given-names>Sivasankaran</given-names></name>
        <name><surname>Simberg</surname><given-names>Mikael</given-names></name>
        <name><surname>Sunderland</surname><given-names>Dan</given-names></name>
        <name><surname>Turcksin</surname><given-names>Bruno</given-names></name>
        <name><surname>Wilke</surname><given-names>Jeremiah</given-names></name>
      </person-group>
      <article-title>Kokkos 3: Programming model extensions for the exascale era</article-title>
      <source>IEEE Transactions on Parallel and Distributed Systems</source>
      <year iso-8601-date="2022">2022</year>
      <volume>33</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/TPDS.2021.3097283</pub-id>
      <fpage>805</fpage>
      <lpage>817</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Harris2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>St√©fan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>R√≠o</surname><given-names>Jaime Fern√°ndez del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>G√©rard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Mohanan2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mohanan</surname><given-names>Ashwin Vishnu</given-names></name>
        <name><surname>Bonamy</surname><given-names>Cyrille</given-names></name>
        <name><surname>Augier</surname><given-names>Pierre</given-names></name>
      </person-group>
      <article-title>FluidFFT: Common API (C++ and Python) for Fast Fourier Transform HPC libraries</article-title>
      <source>Journal of Open Research Software</source>
      <year iso-8601-date="2019-04">2019</year><month>04</month>
      <pub-id pub-id-type="doi">10.5334/jors.238</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-jax2018github">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Frostig</surname><given-names>Roy</given-names></name>
        <name><surname>Hawkins</surname><given-names>Peter</given-names></name>
        <name><surname>Johnson</surname><given-names>Matthew James</given-names></name>
        <name><surname>Leary</surname><given-names>Chris</given-names></name>
        <name><surname>Maclaurin</surname><given-names>Dougal</given-names></name>
        <name><surname>Necula</surname><given-names>George</given-names></name>
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Wanderman-Milne</surname><given-names>Skye</given-names></name>
        <name><surname>Zhang</surname><given-names>Qiao</given-names></name>
      </person-group>
      <article-title>JAX: Composable transformations of Python+NumPy programs</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>http://github.com/jax-ml/jax</uri>
    </element-citation>
  </ref>
  <ref id="ref-Wakatani1984">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wakatani</surname><given-names>Masahiro</given-names></name>
        <name><surname>Hasegawa</surname><given-names>Akira</given-names></name>
      </person-group>
      <article-title>A collisional drift wave description of plasma edge turbulence</article-title>
      <source>The Physics of Fluids</source>
      <year iso-8601-date="1984-03">1984</year><month>03</month>
      <volume>27</volume>
      <issue>3</issue>
      <issn>0031-9171</issn>
      <uri>https://doi.org/10.1063/1.864660</uri>
      <pub-id pub-id-type="doi">10.1063/1.864660</pub-id>
      <fpage>611</fpage>
      <lpage>618</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
