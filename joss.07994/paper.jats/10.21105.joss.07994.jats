<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7994</article-id>
<article-id pub-id-type="doi">10.21105/joss.07994</article-id>
<title-group>
<article-title>QuantumReservoirPy: A Software Package for Time Series
Prediction</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0009-9807-4975</contrib-id>
<name>
<surname>Kulseng</surname>
<given-names>Ola Tangen</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Miao</surname>
<given-names>Stanley</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3558-503X</contrib-id>
<name>
<surname>Fuchs</surname>
<given-names>Franz G.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1646-2472</contrib-id>
<name>
<surname>Stasik</surname>
<given-names>Alexander</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-2">
<institution-wrap>
<institution>David R. Cheriton School of Computer Science, University of
Waterloo, Canada</institution>
</institution-wrap>
</aff>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Physics, Norwegian University of Science and
Technology (NTNU), Norway</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Mathematics and Cybernetics, SINTEF Digital,
Norway</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Department of Data Science, Norwegian University of Life
Science, Norway</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-02-22">
<day>22</day>
<month>2</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>110</issue>
<fpage>7994</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>physics</kwd>
<kwd>quantum information</kwd>
<kwd>quantum circuits</kwd>
<kwd>qiskit</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Reservoir computing on quantum computers has recently emerged as a
  potential resource for time series prediction, owing to its inherent
  complex dynamics. To advance Quantum Reservoir Computing (QRC)
  research, we have developed the Python package
  <ext-link ext-link-type="uri" xlink:href="https://github.com/OpenQuantumComputing/quantumreservoirpy"><monospace>QuantumReservoirPy</monospace></ext-link>,
  which facilitates QRC using quantum circuits as reservoirs.</p>
  <p>The package is designed to be easy to use, while staying completely
  customizable. The resulting interface, similar to that of
  <ext-link ext-link-type="uri" xlink:href="https://github.com/reservoirpy/reservoirpy">reservoirpy</ext-link>
  (<xref alt="Trouvain et al., 2020" rid="ref-trouvain20" ref-type="bibr">Trouvain
  et al., 2020</xref>), simplifies the development of quantum
  reservoirs, and provides logical methods of comparison between
  reservoir architectures.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Reservoir computing (RC) is a paradigm in machine learning for time
  series prediction. With recent developments, it has shown a promising
  efficacy compared to conventional neural networks, owing to its
  relatively simple training process
  (<xref alt="Tanaka et al., 2019" rid="ref-tanaka2019" ref-type="bibr">Tanaka
  et al., 2019</xref>).</p>
  <p>The main building block of RC is a dynamical system called a
  reservoir. By making the dynamics of the reservoir dependent on the
  input time series, the state of the reservoir becomes a
  high-dimensional, non-linear transformation of the time series. The
  hope is that such a low-to-high dimensional encoding enables
  forecasting using a relatively simple method like Ridge regression. A
  reservoir can be virtual, such as a sparsely-connected recurrent
  neural network with random fixed weights, termed an echo state network
  (<xref alt="Jaeger &amp; Haas, 2004" rid="ref-jaeger04" ref-type="bibr">Jaeger
  &amp; Haas, 2004</xref>), or even physical, such as a bucket of water
  (<xref alt="Fernando &amp; Sojakka, 2003" rid="ref-fernando03" ref-type="bibr">Fernando
  &amp; Sojakka, 2003</xref>). See
  <xref alt="[fig1]" rid="fig1">[fig1]</xref> for an illustration of a
  typical RC pipeline.</p>
  <fig>
    <caption><p>A quantum reservoir system consists of a learning task,
    an en- and de-coder (red), and the dynamic system itself (green). In
    standard RC the machine learning part is linear
    regression.<styled-content id="fig1"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig1.pdf" />
  </fig>
  <p>QRC is a proposed method of RC utilizing quantum circuits as
  reservoirs. Multi-qubit systems with the capability of quantum
  entanglement provide compelling non-linear dynamics that match the
  requirements for a feasible reservoir. Furthermore, the
  exponentially-scaling Hilbert space of large multi-qubit systems
  support the efficiency and state-storage goals of RC. As a result,
  quantum computers have been touted as a viable dynamical system to
  produce the intended effects of RC.</p>
  <p>Existing implementations of QRC have used proprietary realizations
  on simulated and actual quantum computers. The lack of a shared
  structure between implementations has resulted in a disconnect in
  comparing reservoir architectures. In addition, individual
  implementations require a certain amount of redundant procedure prior
  to the involvement of specific concepts.</p>
  <p>We observe that there is a need for a common framework for the
  implementation of QRC. As such, we have developed
  <monospace>QuantumReservoirPy</monospace> to solve the issues
  presented in current QRC research.
  <monospace>QuantumReservoirPy</monospace> is designed to handle every
  step of the RC pipeline, in addition to the pre- and post-processing
  needed in the quantum case. In providing this software package, we
  hope to facilitate logical methods of comparison in QRC architecture
  and enable a simplified process of creating a custom reservoir from
  off-the-shelf libraries with minimal overhead requirements to begin
  development.</p>
  <fig>
    <caption><p>Quantum circuit construction may be customized through
    the <monospace>before</monospace>, <monospace>during</monospace>,
    and <monospace>after</monospace> methods and a timeseries processed
    with the <monospace>run</monospace> and
    <monospace>predict</monospace>
    methods.<styled-content id="fig2"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig2.pdf" />
  </fig>
</sec>
<sec id="design-and-implementation">
  <title>Design and implementation</title>
  <p>We intend <monospace>QuantumReservoirPy</monospace> to provide
  flexibility to all possible designs of quantum reservoirs, with full
  control over pre-processing, input, quantum circuit operations,
  measurement, and post-processing. In particular, we take inspiration
  from the simple and flexible structure provided by the ReservoirPy
  software package
  <ext-link ext-link-type="uri" xlink:href="https://github.com/reservoirpy/reservoirpy">reservoirpy</ext-link>
  (<xref alt="Trouvain et al., 2020" rid="ref-trouvain20" ref-type="bibr">Trouvain
  et al., 2020</xref>).</p>
  <p>The construction methods of
  <monospace>QuantumReservoirPy</monospace> serve as sequential
  operations performed on the quantum system. All of them may include an
  arbitrary combination of operations from the
  <ext-link ext-link-type="uri" xlink:href="https://docs.quantum.ibm.com/api/qiskit/circuit_library">Qiskit
  Circuit Library</ext-link>. <monospace>before</monospace> and
  <monospace>after</monospace> are independent of the time series, and
  are applied before and after the time series is processed,
  respectively. Operations in <monospace>during</monospace> are applied
  per timestep, and most closely determine the dynamical properties of
  the reservoir. <xref alt="[fig3]" rid="fig3">[fig3]</xref>a
  demonstrates the aforementioned arrangement, which is implemented as a
  hidden intermediary process in a
  <monospace>QuantumReservoirPy</monospace> quantum reservoir.</p>
  <fig>
    <caption><p>The intended functionality of the
    <monospace>run</monospace> and <monospace>predict</monospace>
    method. The observed input sequence is
    <inline-formula><alternatives>
    <tex-math><![CDATA[\{x_t\}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:mo stretchy="false" form="postfix">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
    and the target sequence <inline-formula><alternatives>
    <tex-math><![CDATA[\{y_t\}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:mo stretchy="false" form="postfix">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.
    The reservoir <inline-formula><alternatives>
    <tex-math><![CDATA[f]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>f</mml:mi></mml:math></alternatives></inline-formula>
    performs an evolution in
    time.<styled-content id="fig3"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig3.pdf" />
  </fig>
  <p>The processing methods do not affect the creation of the
  reservoirs, but are included to keep a coherent interface to
  <monospace>reservoirpy</monospace>. Calling <monospace>run</monospace>
  on a time series returns the non-linear embeddings for each timestep.
  Depending on the realization of QRC, such as averaging over multi-shot
  data, additional post-processing can be included in the
  <monospace>run</monospace> method to achieve the desired output.
  <xref alt="[fig3]" rid="fig3">[fig3]</xref>b provides a visualization
  of the <monospace>run</monospace> method.
  <monospace>predict</monospace> functions as a complete forecasting
  process including encoding, decoding, and post-processing.
  Additionally, a trained simple machine learning model is used to
  predict the next step in the timeseries from the transformed and
  post-processed data. The resulting prediction is then fed in as input
  for the following prediction, which occurs as an iterative process
  until the specified number of forecasting steps is reached. At this
  point, the <monospace>predict</monospace> method returns the sequence
  of predictions from each iteration.
  <xref alt="[fig3]" rid="fig3">[fig3]</xref>c provides a visualization
  of the <monospace>predict</monospace> method.</p>
</sec>
<sec id="package-details">
  <title>Package Details</title>
  <sec id="dependencies">
    <title>Dependencies</title>
    <p>The three main dependencies of
    <monospace>QuantumReservoirPy</monospace> are numpy, qiskit, and
    scikit-learn, with python versions above 3.9. Qiskit is
    <ext-link ext-link-type="uri" xlink:href="https://github.com/Qiskit/qiskit/releases">deprecating</ext-link>
    python 3.9 support in the 2.1.0 version, and the package presented
    here is developed to support qiskit=2.0.x. As for the other
    packages, the supported versions of scikit-learn and numpy follows
    from their interrelated constraints as well as the constraint from
    qiskit. In the install script, we specify numpy&gt;1.17. We strive
    for <monospace>QuantumReservoirPy</monospace> to support
    compatibility with existing reservoir computing and quantum
    computing workflows.</p>
    <p>Much of existing research in QRC is performed on IBM devices and
    simulators (see Yasuda et al.
    (<xref alt="2023" rid="ref-yasuda23" ref-type="bibr">2023</xref>)
    and Suzuki et al.
    (<xref alt="2022" rid="ref-suzuki22" ref-type="bibr">2022</xref>)),
    programmed through the Qiskit software package. To minimize
    disruption in current workflows,
    <monospace>QuantumReservoirPy</monospace> is built as a package to
    interact with Qiskit circuits and backends. It is expected that the
    user also uses Qiskit in the customization of reservoir architecture
    when working with <monospace>QuantumReservoirPy</monospace>.</p>
  </sec>
  <sec id="license">
    <title>License</title>
    <p><monospace>QuantumReservoirPy</monospace> is licensed under the
    GNU General Public License v3.0.
    <monospace>QuantumReservoirPy</monospace> also includes derivative
    work of Qiskit, which is licensed by IBM under the Apache License,
    Version 2.0.</p>
  </sec>
  <sec id="further-development">
    <title>Further Development</title>
    <p>The authors continue to support and maintain the project. Users
    may report package issues and desired features by opening an issue
    on the public GitHub repository or contacting the authors by email.
    Additional opportunities for further development on
    <monospace>QuantumReservoirPy</monospace> include supplementary
    built-in processing schemes, expanded features for data
    visualization, and reservoir evaluation methods.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Work in this project was supported by the NTNU and SINTEF Digital
  through the International Work-Integrated-Learning in Artificial
  Intelligence (IWIL AI) program, in partnership with SFI NorwAI and the
  Waterloo Artificial Intelligence Institute (Waterloo.AI). IWIL AI is
  funded by the Norwegian Directorate for Higher Education and Skills
  (HK-dir).</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-fernando03">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Fernando</surname><given-names>Chrisantha</given-names></name>
        <name><surname>Sojakka</surname><given-names>Sampsa</given-names></name>
      </person-group>
      <article-title>Pattern recognition in a bucket</article-title>
      <source>Advances in artificial life</source>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2003">2003</year>
      <isbn>978-3-540-39432-7</isbn>
      <fpage>588</fpage>
      <lpage>597</lpage>
    </element-citation>
  </ref>
  <ref id="ref-trouvain20">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Trouvain</surname><given-names>Nathan</given-names></name>
        <name><surname>Pedrelli</surname><given-names>Luca</given-names></name>
        <name><surname>Dinh</surname><given-names>Thanh Trung</given-names></name>
        <name><surname>Hinaut</surname><given-names>Xavier</given-names></name>
      </person-group>
      <article-title>ReservoirPy: An efficient and user-friendly library to design echo state networks</article-title>
      <source>Artificial neural networks and machine learning – ICANN 2020</source>
      <person-group person-group-type="editor">
        <name><surname>Farkaš</surname><given-names>Igor</given-names></name>
        <name><surname>Masulli</surname><given-names>Paolo</given-names></name>
        <name><surname>Wermter</surname><given-names>Stefan</given-names></name>
      </person-group>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2020">2020</year>
      <isbn>978-3-030-61616-8</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-030-61616-8_40</pub-id>
      <fpage>494</fpage>
      <lpage>505</lpage>
    </element-citation>
  </ref>
  <ref id="ref-jaeger04">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jaeger</surname><given-names>Herbert</given-names></name>
        <name><surname>Haas</surname><given-names>Harald</given-names></name>
      </person-group>
      <article-title>Harnessing nonlinearity: Predicting chaotic systems and saving energy in wireless communication</article-title>
      <source>Science</source>
      <year iso-8601-date="2004">2004</year>
      <volume>304</volume>
      <issue>5667</issue>
      <uri>https://www.science.org/doi/abs/10.1126/science.1091277</uri>
      <pub-id pub-id-type="doi">10.1126/science.1091277</pub-id>
      <fpage>78</fpage>
      <lpage>80</lpage>
    </element-citation>
  </ref>
  <ref id="ref-suzuki22">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Suzuki</surname><given-names>Yudai</given-names></name>
        <name><surname>Gao</surname><given-names>Qi</given-names></name>
        <name><surname>Pradel</surname><given-names>Ken C.</given-names></name>
        <name><surname>Yasuoka</surname><given-names>Kenji</given-names></name>
        <name><surname>Yamamoto</surname><given-names>Naoki</given-names></name>
      </person-group>
      <article-title>Natural quantum reservoir computing for temporal information processing</article-title>
      <source>Scientific Reports</source>
      <year iso-8601-date="2022-01-25">2022</year><month>01</month><day>25</day>
      <volume>12</volume>
      <issue>1</issue>
      <issn>2045-2322</issn>
      <uri>https://doi.org/10.1038/s41598-022-05061-w</uri>
      <pub-id pub-id-type="doi">10.1038/s41598-022-05061-w</pub-id>
      <fpage>1353</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-yasuda23">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Yasuda</surname><given-names>Toshiki</given-names></name>
        <name><surname>Suzuki</surname><given-names>Yudai</given-names></name>
        <name><surname>Kubota</surname><given-names>Tomoyuki</given-names></name>
        <name><surname>Nakajima</surname><given-names>Kohei</given-names></name>
        <name><surname>Gao</surname><given-names>Qi</given-names></name>
        <name><surname>Zhang</surname><given-names>Wenlong</given-names></name>
        <name><surname>Shimono</surname><given-names>Satoshi</given-names></name>
        <name><surname>Nurdin</surname><given-names>Hendra I.</given-names></name>
        <name><surname>Yamamoto</surname><given-names>Naoki</given-names></name>
      </person-group>
      <article-title>Quantum reservoir computing with repeated measurements on superconducting devices</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://arxiv.org/abs/2310.06706</uri>
    </element-citation>
  </ref>
  <ref id="ref-tanaka2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tanaka</surname><given-names>Gouhei</given-names></name>
        <name><surname>Yamane</surname><given-names>Toshiyuki</given-names></name>
        <name><surname>Héroux</surname><given-names>Jean Benoit</given-names></name>
        <name><surname>Nakane</surname><given-names>Ryosho</given-names></name>
        <name><surname>Kanazawa</surname><given-names>Naoki</given-names></name>
        <name><surname>Takeda</surname><given-names>Seiji</given-names></name>
        <name><surname>Numata</surname><given-names>Hidetoshi</given-names></name>
        <name><surname>Nakano</surname><given-names>Daiju</given-names></name>
        <name><surname>Hirose</surname><given-names>Akira</given-names></name>
      </person-group>
      <article-title>Recent advances in physical reservoir computing: A review</article-title>
      <source>Neural Networks</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>115</volume>
      <fpage>100</fpage>
      <lpage>123</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
