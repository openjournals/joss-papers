<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3991</article-id>
<article-id pub-id-type="doi">10.21105/joss.03991</article-id>
<title-group>
<article-title>DCISolver.jl: A Julia Solver for Nonlinear Optimization
using Dynamic Control of Infeasibility</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0001-7729-2513</contrib-id>
<name>
<surname>Migot</surname>
<given-names>Tangi</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8017-7687</contrib-id>
<name>
<surname>Orban</surname>
<given-names>Dominique</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4451-281X</contrib-id>
<name>
<surname>Siqueira</surname>
<given-names>Abel Soares</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>GERAD and Department of Mathematics and Industrial
Engineering, Polytechnique Montréal, QC, Canada.</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Netherlands eScience Center, Amsterdam, NL</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-11-05">
<day>5</day>
<month>11</month>
<year>2021</year>
</pub-date>
<volume>7</volume>
<issue>70</issue>
<fpage>3991</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Julia</kwd>
<kwd>nonlinear optimization</kwd>
<kwd>numerical optimization</kwd>
<kwd>large-scale optimization</kwd>
<kwd>constrained optimization</kwd>
<kwd>nonlinear programming</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>DCISolver.jl</monospace> is a new Julia
  (<xref alt="Bezanson et al., 2017" rid="ref-bezanson2017julia" ref-type="bibr">Bezanson
  et al., 2017</xref>) implementation of the Dynamic Control of
  Infeasibility method (DCI), introduced by Bielschowsky &amp; Gomes
  (<xref alt="2008" rid="ref-bielschowsky2008dynamic" ref-type="bibr">2008</xref>),
  for solving the equality-constrained nonlinear optimization problem
  <named-content id="eqU003Anlp" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[
      \underset{x \in \mathbb{R}^n}{\text{minimize}} \quad f(x) \quad \text{subject to} \quad h(x) = 0,]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:munder><mml:mtext mathvariant="normal">minimize</mml:mtext><mml:mrow><mml:mi>x</mml:mi><mml:mo>∈</mml:mo><mml:msup><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle><mml:mi>n</mml:mi></mml:msup></mml:mrow></mml:munder><mml:mspace width="1.0em"></mml:mspace><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mspace width="1.0em"></mml:mspace><mml:mtext mathvariant="normal">subject to</mml:mtext><mml:mspace width="1.0em"></mml:mspace><mml:mi>h</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[f:\mathbb{R}^n \rightarrow \mathbb{R}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mo>:</mml:mo><mml:msup><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle><mml:mi>n</mml:mi></mml:msup><mml:mo>→</mml:mo><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle></mml:mrow></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[h:\mathbb{R}^n \rightarrow \mathbb{R}^m]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>h</mml:mi><mml:mo>:</mml:mo><mml:msup><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle><mml:mi>n</mml:mi></mml:msup><mml:mo>→</mml:mo><mml:msup><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle><mml:mi>m</mml:mi></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>
  are twice continuously differentiable. DCI is an iterative method that
  aims to compute a local minimum of
  <xref alt="1" rid="eqU003Anlp">1</xref> using first and second-order
  derivatives. Our initial motivation for developing
  <monospace>DCISolver.jl</monospace> is to solve PDE-constrained
  optimization problems, many of which have equality constraints
  only.</p>
  <p>Each DCI iteration is a two-step process. A tangential step first
  approximately minimizes a quadratic model subject to linearized
  constraints within a trust region. A normal step then recenters
  feasibility by way of a trust cylinder, which is the set of points
  such that <inline-formula><alternatives>
  <tex-math><![CDATA[\|h(x)\| \leq \rho]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="postfix">∥</mml:mo><mml:mi>h</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="false" form="postfix">∥</mml:mo><mml:mo>≤</mml:mo><mml:mi>ρ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\rho > 0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.
  The idea of trust cylinders is to control infeasibility, contrary to
  penalty methods, which encourage feasibility by penalizing
  infeasibility. Each time the trust cylinder is violated during the
  tangential step, the normal step brings infeasibility back within
  prescribed limits. The radius <inline-formula><alternatives>
  <tex-math><![CDATA[\rho]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ρ</mml:mi></mml:math></alternatives></inline-formula>
  of the trust cylinder decreases with the iterations, so a feasible and
  optimal point results in the limit. For details and theoretical
  convergence, we refer the reader to the original paper
  (<xref alt="Bielschowsky &amp; Gomes, 2008" rid="ref-bielschowsky2008dynamic" ref-type="bibr">Bielschowsky
  &amp; Gomes, 2008</xref>).</p>
  <p><monospace>DCISolver.jl</monospace> is built upon the
  JuliaSmoothOptimizers (JSO) tools
  (<xref alt="Migot et al., 2021b" rid="ref-jso" ref-type="bibr">Migot
  et al., 2021b</xref>). JSO is an academic organization containing a
  collection of Julia packages for nonlinear optimization software
  development, testing, and benchmarking. It provides tools for building
  models, accessing problems repositories, and solving subproblems.
  <monospace>DCISolver.jl</monospace> takes as input an
  <monospace>AbstractNLPModel</monospace>, JSO’s general model API
  defined in <monospace>NLPModels.jl</monospace>
  (<xref alt="Orban et al., 2020a" rid="ref-orban-siqueira-nlpmodels-2020" ref-type="bibr">Orban
  et al., 2020a</xref>), a flexible data type to evaluate objective and
  constraints, their derivatives, and to provide any information that a
  solver might request from a model. The user can hand-code derivatives,
  use automatic differentiation, or use JSO-interfaces to classical
  mathematical optimization modeling languages such as AMPL
  (<xref alt="Fourer et al., 2003" rid="ref-fourer2003ampl" ref-type="bibr">Fourer
  et al., 2003</xref>), CUTEst
  (<xref alt="Gould et al., 2015" rid="ref-cutest" ref-type="bibr">Gould
  et al., 2015</xref>), or JuMP
  (<xref alt="Dunning et al., 2017" rid="ref-jump" ref-type="bibr">Dunning
  et al., 2017</xref>).</p>
  <p>Internally, <monospace>DCISolver.jl</monospace> combines
  cutting-edge numerical linear algebra solvers. The normal step relies
  heavily on iterative methods for linear algebra from
  <monospace>Krylov.jl</monospace>
  (<xref alt="Montoison et al., 2020" rid="ref-montoison-orban-krylov-2020" ref-type="bibr">Montoison
  et al., 2020</xref>), which provides more than 25 implementations of
  standard and novel Krylov methods, and they all can be used with
  Nvidia GPU via CUDA.jl
  (<xref alt="Besard et al., 2018" rid="ref-besard2018juliagpu" ref-type="bibr">Besard
  et al., 2018</xref>). The tangential step is computed using the sparse
  factorization of a symmetric and quasi-definite matrix via
  <monospace>LDLFactorizations.jl</monospace>
  (<xref alt="Orban &amp; contributors, 2020" rid="ref-orban-ldlfactorizations-2020" ref-type="bibr">Orban
  &amp; contributors, 2020</xref>), or the well-known Fortran code
  <monospace>MA57</monospace>
  (<xref alt="Duff, 2004" rid="ref-duff-2004" ref-type="bibr">Duff,
  2004</xref>) from the HSL
  (<xref alt="2007" rid="ref-HSL" ref-type="bibr">2007</xref>), via
  <monospace>HSL.jl</monospace>
  (<xref alt="Orban &amp; contributors, 2021" rid="ref-orban-hsl-2021" ref-type="bibr">Orban
  &amp; contributors, 2021</xref>).</p>
  <p>One of the significant advantages of our implementation is that the
  normal step is factorization-free, i.e., it uses second-order
  information via Hessian-vector products but does not need access to
  the Hessian as an explicit matrix. This makes
  <monospace>DCISolver.jl</monospace> a valuable asset for large-scale
  problems, for instance to solve PDE-constrained optimization problems
  (<xref alt="Migot et al., 2021a" rid="ref-migot-orban-siqueira-pdenlpmodels-2021" ref-type="bibr">Migot
  et al., 2021a</xref>). In the current implementation, the tangential
  step requires the explicit hessian, but removing that restriction is
  the subject of ongoing research, as is the treatment of inequality
  constraints.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Julia’s JIT compiler is attractive for the design of efficient
  scientific computing software, and, in particular, mathematical
  optimization
  (<xref alt="Lubin &amp; Dunning, 2015" rid="ref-lubin2015computing" ref-type="bibr">Lubin
  &amp; Dunning, 2015</xref>), and has become a natural choice for
  developing new solvers.</p>
  <p>There already exist ways to solve
  <xref alt="1" rid="eqU003Anlp">1</xref> in Julia. If
  <xref alt="1" rid="eqU003Anlp">1</xref> is amenable to being modeled
  in <monospace>JuMP</monospace>
  (<xref alt="Dunning et al., 2017" rid="ref-jump" ref-type="bibr">Dunning
  et al., 2017</xref>), the model may be passed to state-of-the-art
  solvers, implemented in low-level compiled languages, via wrappers
  thanks to Julia’s native interoperability with such languages.
  However, interfaces to low-level languages have limitations that pure
  Julia implementations do not have, including the ability to apply
  solvers with various arithmetic types. <monospace>Optim.jl</monospace>
  (<xref alt="Mogensen &amp; Riseth, 2018" rid="ref-mogensen2018optim" ref-type="bibr">Mogensen
  &amp; Riseth, 2018</xref>) implements a factorization-based pure Julia
  primal-dual interior-point method for problems with both equality and
  inequality constraints modeled after Artlelys Knitro
  (<xref alt="Byrd et al., 2006" rid="ref-byrd2006k" ref-type="bibr">Byrd
  et al., 2006</xref>) and Ipopt
  (<xref alt="Wächter &amp; Biegler, 2006" rid="ref-wachter2006implementation" ref-type="bibr">Wächter
  &amp; Biegler, 2006</xref>). <monospace>Percival.jl</monospace>
  (<xref alt="Santos &amp; Siqueira, 2020" rid="ref-percival-jl" ref-type="bibr">Santos
  &amp; Siqueira, 2020</xref>) is a factorization-free pure Julia
  implementation of an augmented Lagrangian method for problems with
  both equality and inequality constraints based on bound-constrained
  subproblems.</p>
  <p>To the best of our knowledge, there is no available maintained
  open-source implementation of DCI in existence. The original authors
  did not make their implementation public, and the other known
  implementation is <monospace>dcicpp</monospace>
  (<xref alt="Siqueira, 2016" rid="ref-dcicpp" ref-type="bibr">Siqueira,
  2016</xref>), extending the original method to inequalities in the
  Ph.D. thesis by Siqueira
  (<xref alt="2013" rid="ref-siqueira2013controle" ref-type="bibr">2013</xref>),
  and it has had no updates in the last 5 years. Hence, we offer an
  interesting alternative to augmented Lagrangian and interior-point
  methods in the form of an evolving, research level yet stable
  solver.</p>
  <p><monospace>DCISolver.jl</monospace> can solve large-scale problems
  and can be benchmarked easily against other JSO-compliant solvers
  using <monospace>SolverBenchmark.jl</monospace>
  (<xref alt="Orban et al., 2020b" rid="ref-orban-siqueira-solverbenchmark-2020" ref-type="bibr">Orban
  et al., 2020b</xref>). We include below performance profiles
  (<xref alt="Dolan &amp; Moré, 2002" rid="ref-dolan2002benchmarking" ref-type="bibr">Dolan
  &amp; Moré, 2002</xref>) of <monospace>DCISolver.jl</monospace>
  against Ipopt on 82 problems from CUTEst
  (<xref alt="Gould et al., 2015" rid="ref-cutest" ref-type="bibr">Gould
  et al., 2015</xref>) with up to 10,000 variables and 10,000
  constraints. Ipopt solved 72 problems (88%) successfully, which is one
  more than DCI. Without explaining performance profiles in full detail,
  the plot on the left shows that Ipopt is the fastest on 20 of the
  problems (28%), while DCI is the fastest on 51 of the problems (72%)
  among the 71 problems solved by both solvers. The plot on the right
  shows that Ipopt used fewer evaluations of objective and constraint
  functions on 50 of the problems (70%), DCI used fewer evaluations on
  17 of the problems (24%), and there was a tie in the number of
  evaluations on 4 problems (6%). Overall, this performance profile is
  very encouraging for such a young implementation. The package’s
  documentation includes more extensive benchmarks on classical test
  sets showing that <monospace>DCISolver.jl</monospace> is also
  competitive with Artelys Knitro.</p>
  <graphic mimetype="image" mime-subtype="png" xlink:href="media/ipopt_dcildl_82.png" />
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Tangi Migot is supported by IVADO and the Canada First Research
  Excellence Fund / Apogée, and Dominique Orban is partially supported
  by an NSERC Discovery Grant.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-bielschowsky2008dynamic">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bielschowsky</surname><given-names>Roberto H.</given-names></name>
        <name><surname>Gomes</surname><given-names>Francisco A. M.</given-names></name>
      </person-group>
      <article-title>Dynamic control of infeasibility in equality constrained optimization</article-title>
      <source>SIAM Journal on Optimization</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2008">2008</year>
      <volume>19</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1137/070679557</pub-id>
      <fpage>1299</fpage>
      <lpage>1325</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cutest">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gould</surname><given-names>Nicholas I.</given-names></name>
        <name><surname>Orban</surname><given-names>Dominique</given-names></name>
        <name><surname>Toint</surname><given-names>Philippe L.</given-names></name>
      </person-group>
      <article-title>CUTEst: A constrained and unconstrained testing environment with safe threads for mathematical optimization</article-title>
      <source>Computational Optimization and Applications</source>
      <year iso-8601-date="2015">2015</year>
      <volume>60</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1007/s10589-014-9687-3</pub-id>
      <fpage>545</fpage>
      <lpage>557</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wachter2006implementation">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wächter</surname><given-names>Andreas</given-names></name>
        <name><surname>Biegler</surname><given-names>Lorenz T.</given-names></name>
      </person-group>
      <article-title>On the implementation of an interior-point filter line-search algorithm for large-scale nonlinear programming</article-title>
      <source>Mathematical Programming</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2006">2006</year>
      <volume>106</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1007/s10107-004-0559-y</pub-id>
      <fpage>25</fpage>
      <lpage>57</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mogensen2018optim">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mogensen</surname><given-names>Patrick Kofod</given-names></name>
        <name><surname>Riseth</surname><given-names>Asbjørn Nilsen</given-names></name>
      </person-group>
      <article-title>Optim: A mathematical optimization package for Julia</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2018">2018</year>
      <volume>3</volume>
      <issue>24</issue>
      <pub-id pub-id-type="doi">10.21105/joss.00615</pub-id>
      <fpage>615</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-percival-jl">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Santos</surname><given-names>Egmara Antunes dos</given-names></name>
        <name><surname>Siqueira</surname><given-names>Abel Soares</given-names></name>
      </person-group>
      <article-title>Percival.jl: An augmented lagrangian method</article-title>
      <year iso-8601-date="2020-07">2020</year><month>07</month>
      <uri>https://github.com/JuliaSmoothOptimizers/Percival.jl</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3969045</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-orban-siqueira-solverbenchmark-2020">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <name><surname>Siqueira</surname><given-names>A. S.</given-names></name>
        <string-name>contributors</string-name>
      </person-group>
      <article-title>SolverBenchmark.jl: Benchmark tools for solvers</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/JuliaSmoothOptimizers/SolverBenchmark.jl</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3948381</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-orban-siqueira-nlpmodels-2020">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <name><surname>Siqueira</surname><given-names>A. S.</given-names></name>
        <string-name>contributors</string-name>
      </person-group>
      <article-title>NLPModels.jl: Data structures for optimization models</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/JuliaSmoothOptimizers/NLPModels.jl</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.2558627</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-montoison-orban-krylov-2020">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Montoison</surname><given-names>A.</given-names></name>
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <string-name>contributors</string-name>
      </person-group>
      <article-title>Krylov.jl: A Julia basket of hand-picked Krylov methods</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/JuliaSmoothOptimizers/Krylov.jl</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.822073</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-orban-ldlfactorizations-2020">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <string-name>contributors</string-name>
      </person-group>
      <article-title>LDLFactorizations.jl: Factorization of symmetric matrices</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/JuliaSmoothOptimizers/LDLFactorizations.jl</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3900668</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-orban-hsl-2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <string-name>contributors</string-name>
      </person-group>
      <article-title>HSL.jl: A julia interface to the HSL mathematical software library</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/JuliaSmoothOptimizers/HSL.jl</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.2658672</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-HSL">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>HSL</surname></name>
      </person-group>
      <source>The HSL mathematical software library</source>
      <publisher-name>STFC Rutherford Appleton Laboratory</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <uri>http://www.hsl.rl.ac.uk</uri>
    </element-citation>
  </ref>
  <ref id="ref-duff-2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Duff</surname><given-names>I. S.</given-names></name>
      </person-group>
      <article-title>MA57—a code for the solution of sparse symmetric definite and indefinite systems</article-title>
      <source>ACM Transactions on Mathematical Software</source>
      <year iso-8601-date="2004">2004</year>
      <volume>30</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1145/992200.992202</pub-id>
      <fpage>118</fpage>
      <lpage>144</lpage>
    </element-citation>
  </ref>
  <ref id="ref-besard2018juliagpu">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Besard</surname><given-names>Tim</given-names></name>
        <name><surname>Foket</surname><given-names>Christophe</given-names></name>
        <name><surname>De Sutter</surname><given-names>Bjorn</given-names></name>
      </person-group>
      <article-title>Effective extensible programming: Unleashing Julia on GPUs</article-title>
      <source>IEEE Transactions on Parallel and Distributed Systems</source>
      <year iso-8601-date="2018">2018</year>
      <issn>1045-9219</issn>
      <uri>https://arxiv.org/abs/1712.03112</uri>
      <pub-id pub-id-type="doi">10.1109/TPDS.2018.2872064</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-bezanson2017julia">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
        <name><surname>Edelman</surname><given-names>Alan</given-names></name>
        <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
        <name><surname>Shah</surname><given-names>Viral B.</given-names></name>
      </person-group>
      <article-title>Julia: A fresh approach to numerical computing</article-title>
      <source>SIAM Review</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>59</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1137/141000671</pub-id>
      <fpage>65</fpage>
      <lpage>98</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lubin2015computing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lubin</surname><given-names>Miles</given-names></name>
        <name><surname>Dunning</surname><given-names>Iain</given-names></name>
      </person-group>
      <article-title>Computing in operations research using Julia</article-title>
      <source>INFORMS Journal on Computing</source>
      <publisher-name>INFORMS</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>27</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1287/ijoc.2014.0623</pub-id>
      <fpage>238</fpage>
      <lpage>248</lpage>
    </element-citation>
  </ref>
  <ref id="ref-byrd2006k">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Byrd</surname><given-names>Richard H</given-names></name>
        <name><surname>Nocedal</surname><given-names>Jorge</given-names></name>
        <name><surname>Waltz</surname><given-names>Richard A</given-names></name>
      </person-group>
      <article-title>Knitro: An integrated package for nonlinear optimization</article-title>
      <source>Large-scale nonlinear optimization</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2006">2006</year>
      <pub-id pub-id-type="doi">10.1007/0-387-30065-1\_4</pub-id>
      <fpage>35</fpage>
      <lpage>59</lpage>
    </element-citation>
  </ref>
  <ref id="ref-jump">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dunning</surname><given-names>Iain</given-names></name>
        <name><surname>Huchette</surname><given-names>Joey</given-names></name>
        <name><surname>Lubin</surname><given-names>Miles</given-names></name>
      </person-group>
      <article-title>JuMP: A modeling language for mathematical optimization</article-title>
      <source>SIAM Review</source>
      <year iso-8601-date="2017">2017</year>
      <volume>59</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1137/15M1020575</pub-id>
      <fpage>295</fpage>
      <lpage>320</lpage>
    </element-citation>
  </ref>
  <ref id="ref-fourer2003ampl">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Fourer</surname><given-names>Robert</given-names></name>
        <name><surname>Gay</surname><given-names>David M.</given-names></name>
        <name><surname>Kernighan</surname><given-names>Brian W.</given-names></name>
      </person-group>
      <source>AMPL. A modeling language for mathematical programming</source>
      <publisher-name>2nd ed., Brooks/Cole, Pacific Grove, CA</publisher-name>
      <year iso-8601-date="2003">2003</year>
      <isbn>0-534-38809-4</isbn>
      <pub-id pub-id-type="doi">10.1287/mnsc.36.5.519</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-jso">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Migot</surname><given-names>T.</given-names></name>
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <name><surname>Siqueira</surname><given-names>A. S.</given-names></name>
      </person-group>
      <article-title>The JuliaSmoothOptimizers ecosystem for linear and nonlinear optimization</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://juliasmoothoptimizers.github.io/</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.2655082</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-migot-orban-siqueira-pdenlpmodels-2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Migot</surname><given-names>T.</given-names></name>
        <name><surname>Orban</surname><given-names>D.</given-names></name>
        <name><surname>Siqueira</surname><given-names>A. S.</given-names></name>
      </person-group>
      <article-title>PDENLPModels.jl: A NLPModel API for optimization problems with PDE-constraints</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://doi.org/10.5281/zenodo.5056629</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.5056629</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-siqueira2013controle">
    <element-citation publication-type="thesis">
      <person-group person-group-type="author">
        <name><surname>Siqueira</surname><given-names>Abel Soares</given-names></name>
      </person-group>
      <article-title>Controle dinâmico de infactibilidade para programação não linear</article-title>
      <publisher-name>Universidade Estadual de Campinas</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <pub-id pub-id-type="doi">10.47749/T/UNICAMP.2013.918998</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-dcicpp">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Siqueira</surname><given-names>Abel Soares</given-names></name>
      </person-group>
      <article-title>Dcicpp: Dynamic control of infeasibility</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <uri>https://github.com/abelsiqueira/dcicpp</uri>
    </element-citation>
  </ref>
  <ref id="ref-dolan2002benchmarking">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dolan</surname><given-names>Elizabeth D</given-names></name>
        <name><surname>Moré</surname><given-names>Jorge J</given-names></name>
      </person-group>
      <article-title>Benchmarking optimization software with performance profiles</article-title>
      <source>Mathematical programming</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2002">2002</year>
      <volume>91</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1007/s101070100263</pub-id>
      <fpage>201</fpage>
      <lpage>213</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
