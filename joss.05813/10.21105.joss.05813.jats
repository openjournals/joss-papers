<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5813</article-id>
<article-id pub-id-type="doi">10.21105/joss.05813</article-id>
<title-group>
<article-title>The 2DECOMP&amp;FFT library: an update with new CPU/GPU
capabilities</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6325-7629</contrib-id>
<name>
<surname>Rolfo</surname>
<given-names>Stefano</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Flageul</surname>
<given-names>Cédric</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Bartholomew</surname>
<given-names>Paul</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Spiga</surname>
<given-names>Filippo</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Laizet</surname>
<given-names>Sylvain</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>STFC Daresbury Laboratory, Scientific Computing Department,
UKRI, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>PPRIME institute, Curiosity Group, Université de Poitiers,
CNRS, ISAE-ENSMA, Poitiers, France</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>EPCC, The University of Edinburgh, Edinburgh,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>NVIDIA Corporation, Cambridge, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Department of Aeronautics, Imperial College London, London,
UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-07-31">
<day>31</day>
<month>7</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>91</issue>
<fpage>5813</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Fortran</kwd>
<kwd>FFT</kwd>
<kwd>Finite Difference Discretisation</kwd>
<kwd>Pencil Decomposition</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The 2DECOMP&amp;FFT library is a software framework written in
  modern Fortran to build large-scale parallel applications. It is
  designed for applications using three-dimensional structured meshes
  with a particular focus on spatially implicit numerical algorithms.
  However, the library can be easily used with other discretisation
  schemes based on a structured layout and where pencil decomposition
  can apply. It is based on a general-purpose 2D pencil decomposition
  for data distribution and data Input Output (I/O). A 1D slab
  decomposition is also available as a special case of the 2D pencil
  decomposition. The library includes a highly scalable and efficient
  interface to perform three-dimensional Fast Fourier Transforms (FFTs).
  The library has been designed to be user-friendly, with a clean
  application programming interface hiding most communication details
  from application developers, and portable with support for modern CPUs
  and NVIDIA GPUs (support for AMD and Intel GPUs to follow).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The 2DECOMP&amp;FFT library
  (<xref alt="Li &amp; Laizet, 2010" rid="ref-li_2010_2decomp" ref-type="bibr">Li
  &amp; Laizet, 2010</xref>) was originally designed for CPU hardware
  and is now used by many research groups worldwide. The library is
  based on a 2D-pencil decomposition for data distribution on
  distributed memory systems and is used as the core of many CFD solvers
  such as Xcompact3d
  (<xref alt="Bartholomew et al., 2020" rid="ref-BARTHOLOMEW2020100550" ref-type="bibr">Bartholomew
  et al., 2020</xref>) and CaNS
  (<xref alt="Costa, 2018" rid="ref-COSTA20181853" ref-type="bibr">Costa,
  2018</xref>), with excellent strong scaling performance up to hundreds
  of thousands of CPU cores. 2DECOMP&amp;FFT mainly relies on MPI, and
  it offers a user-friendly interface that hides the complexity of the
  communication. Version 2.0.1 of the library also offers a 1D slab
  decomposition, which is implemented as a special case of the 2D
  decomposition. Two alternatives are possible:</p>
  <list list-type="bullet">
    <list-item>
      <p>Initial slabs orientation in the <monospace>XY</monospace>
      plane;</p>
    </list-item>
    <list-item>
      <p>Initial slabs orientation in the <monospace>XZ</monospace>
      plane.</p>
    </list-item>
  </list>
  <p>In many configurations the slabs decomposition gives some gain in
  performance with respect to the 2D-pencil decomposition. This is a
  consequence of having data already in memory when transposing between
  the two dimensions of the slab. Therefore, it is possible to perform a
  simple memory copy between input and output arrays instead of the full
  MPI communication.</p>
  <p>The library also offers a very efficient and flexible interface to
  perform 3D Fast Fourier Transform (FFT) on distributed memory systems.
  However, 2DECOMP&amp;FFT is mainly designed to perform data management
  and communication and the actual computation of the 1D FFT is
  delegated to 3rd-party libraries. The supported FFT backends are: FFTW
  (<xref alt="Frigo &amp; Johnson, 2005" rid="ref-FFTW05" ref-type="bibr">Frigo
  &amp; Johnson, 2005</xref>), the Intel Math Kernel Library (MKL), and
  the CUDA FFT (cuFFT), which is used for FFT on NVIDIA GPUs. A Generic
  FFT backend, based on Glassman’s general N Fast Fourier Transform
  (<xref alt="Ferguson, 1982" rid="ref-FERGUSON1982401" ref-type="bibr">Ferguson,
  1982</xref>), is also available to make the library more portable.</p>
  <p>While the 2DECOMP&amp;FFT library has been designed with high order
  compact schemes in mind, it is possible that some derivatives can be
  evaluated using an explicit formulation based on local stencils. For
  this reason a halo support API is also provided to support explicit
  message passing between neighbouring pencils.</p>
  <p>Finally, the library provides infrastructure to perform parallel
  data I/O using MPI I/O or ADIOS2
  (<xref alt="Godoy et al., 2020" rid="ref-godoy2020adios" ref-type="bibr">Godoy
  et al., 2020</xref>). The API provide several features such as:
  writing single or multiple 3D arrays into a file, writing 2D slices of
  the data, and data compression either via ADIOS2 or by writing reduced
  precision or resolution with the MPI I/O backend.</p>
  <p>The first version of the library was released in 2010 as a tar.gz
  package, with a Makefile approach, and could only make use of CPUs. It
  has not been modified since its release. The new version of the
  library can now leverage NVIDIA GPUs, modern CPUs, and various
  compilers (GNU, Intel, NVHPC, CRAY). It has CMAKE capabilities as well
  as a proper continuous integration framework with automated tests. The
  new library was designed to be more appealing to the scientific
  community, and it can now be easily implemented as an independent
  library for use by other software.</p>
</sec>
<sec id="gpu-porting">
  <title>GPU porting</title>
  <p>An initial port of 2DECOMP&amp;FFT to GPUs was performed within the
  solver AFiD-GPU
  (<xref alt="Zhu et al., 2018" rid="ref-ZHU2018199" ref-type="bibr">Zhu
  et al., 2018</xref>), which was mainly based on CUDA-Fortran for some
  kernels and CUDA-aware-MPI for communications. A second library, named
  cuDECOMP, which was directly inspired by 2DECOMP&amp;FFT, takes full
  advantages of CUDA and uses NVIDIA’s most recent libraries for
  communications, such as NVIDIA Collective Communication Library
  (NCCL), is presented in Romero et al.
  (<xref alt="2022" rid="ref-Romero_2022_cuDecomp" ref-type="bibr">2022</xref>).
  Indeed, cuDECOMP only targets NVIDIA GPUs. The updated 2DECOMP&amp;FFT
  mainly uses a mix of CUDA-Fortran and openACC for the GPU porting
  together with CUDA-aware-MPI and NCCL for the communications. In
  addition to previous work, the FFT module is ported to GPUs using
  cuFFT. The next step is also to implement OpenMP for GPU porting to
  support both AMD and Intel GPU hardware.</p>
</sec>
<sec id="how-to-use-2decompfft">
  <title>How to use 2DECOMP&amp;FFT</title>
  <p>The 2D Pencil Decomposition API is defined with three Fortran
  modules which should be used by applications as:</p>
  <preformat>  use decomp_2d_constants
  use decomp_2d_mpi
  use decomp_2d</preformat>
  <p>where <monospace>use decomp_2d_constants</monospace> defines all
  the parameters, <monospace>use decomp_2d_mpi</monospace> introduces
  all the MPI related interfaces, and
  <monospace>use decomp_2d</monospace> contains the main decomposition
  and transposition APIs. The library is initialised using:</p>
  <preformat>  call decomp_2d_init(nx, ny, nz, p_row, p_col)</preformat>
  <p>where <monospace>nx</monospace>, <monospace>ny</monospace>, and
  <monospace>nz</monospace> are the spatial dimensions of the problem,
  to be distributed over a 2D processor grid
  <inline-formula><alternatives>
  <tex-math><![CDATA[p_{row} \times p_{col}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mrow><mml:mi>r</mml:mi><mml:mi>o</mml:mi><mml:mi>w</mml:mi></mml:mrow></mml:msub><mml:mo>×</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>.
  Note that none of the dimensions need to be divisible by
  <monospace>p_row</monospace> or <monospace>p_col</monospace>. In the
  case of <monospace>p_row=p_col=0</monospace>, an automatic
  decomposition is selected among all possible combinations available. A
  key element of this library is a set of communication routines that
  perform the data transpositions. As mentioned, one needs to perform 4
  global transpositions to go through all 3 pencil orientations (i.e.,
  one has to go from x-pencils to y-pencils to z-pencils to y-pencils to
  x-pencils). Correspondingly, the library provides 4 communication
  subroutines:</p>
  <preformat>  call transpose_x_to_y(var_in,var_out)
  call transpose_y_to_z(var_in,var_out)
  call transpose_z_to_y(var_in,var_out)
  call transpose_y_to_x(var_in,var_out)</preformat>
  <p>The input array <monospace>var_in</monospace> and output array
  <monospace>var_out</monospace> are defined by the code using the
  library and contain distributed data for the correct pencil
  orientations.</p>
  <p>Note that the library is written using Fortran’s generic interfaces
  so different data types are supported without user input. That means
  in and out above can be either real or complex arrays, the latter
  being useful for applications involving 3D Fast Fourier Transforms.
  Finally, before exit, applications should clean up the memory by:</p>
  <preformat>  call decomp_2d_finalize</preformat>
  <p>Detailed information about the decomposition API are available
  <ext-link ext-link-type="uri" xlink:href="https://2decomp-fft.github.io/pages/api_domain.html">here</ext-link>.
  Several examples detailing the usage of the different library
  functionalities can be found
  <ext-link ext-link-type="uri" xlink:href="https://github.com/2decomp-fft/2decomp-fft/blob/main/examples/README.md">here</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The first version of the library was initially designed thanks to
  several projects funded under the HECToR Distributed Computational
  Science and Engineering (CSE) Service operated by NAG Ltd.  The new
  library has been designed thanks to the support of EPSRC via the CCP
  Turbulence (EP/T026170/1) and work funded under the embedded CSE
  programme of the ARCHER2 UK National Supercomputing Service
  (http://www.archer2.ac.uk) (ARCHER2 eCSE03-2).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Romero_2022_cuDecomp">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Romero</surname><given-names>Joshua</given-names></name>
        <name><surname>Costa</surname><given-names>Pedro</given-names></name>
        <name><surname>Fatica</surname><given-names>Massimiliano</given-names></name>
      </person-group>
      <article-title>Distributed-memory simulations of turbulent flows on modern GPU systems using an adaptive pencil decomposition library</article-title>
      <source>Proceedings of the platform for advanced scientific computing conference</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2022">2022</year>
      <isbn>9781450394109</isbn>
      <uri>https://doi.org/10.1145/3539781.3539797</uri>
      <pub-id pub-id-type="doi">10.1145/3539781.3539797</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ZHU2018199">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhu</surname><given-names>Xiaojue</given-names></name>
        <name><surname>Phillips</surname><given-names>Everett</given-names></name>
        <name><surname>Spandan</surname><given-names>Vamsi</given-names></name>
        <name><surname>Donners</surname><given-names>John</given-names></name>
        <name><surname>Ruetsch</surname><given-names>Gregory</given-names></name>
        <name><surname>Romero</surname><given-names>Joshua</given-names></name>
        <name><surname>Ostilla-Mónico</surname><given-names>Rodolfo</given-names></name>
        <name><surname>Yang</surname><given-names>Yantao</given-names></name>
        <name><surname>Lohse</surname><given-names>Detlef</given-names></name>
        <name><surname>Verzicco</surname><given-names>Roberto</given-names></name>
        <name><surname>Fatica</surname><given-names>Massimiliano</given-names></name>
        <name><surname>Stevens</surname><given-names>Richard J. A. M.</given-names></name>
      </person-group>
      <article-title>AFiD-GPU: A versatile Navier–Stokes solver for wall-bounded turbulent flows on GPU clusters</article-title>
      <source>Computer Physics Communications</source>
      <year iso-8601-date="2018">2018</year>
      <volume>229</volume>
      <issn>0010-4655</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0010465518300985</uri>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2018.03.026</pub-id>
      <fpage>199</fpage>
      <lpage>210</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BARTHOLOMEW2020100550">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bartholomew</surname><given-names>Paul</given-names></name>
        <name><surname>Deskos</surname><given-names>Georgios</given-names></name>
        <name><surname>Frantz</surname><given-names>Ricardo A. S.</given-names></name>
        <name><surname>Schuch</surname><given-names>Felipe N.</given-names></name>
        <name><surname>Lamballais</surname><given-names>Eric</given-names></name>
        <name><surname>Laizet</surname><given-names>Sylvain</given-names></name>
      </person-group>
      <article-title>Xcompact3D: An open-source framework for solving turbulence problems on a Cartesian mesh</article-title>
      <source>SoftwareX</source>
      <year iso-8601-date="2020">2020</year>
      <volume>12</volume>
      <issn>2352-7110</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S2352711019303620</uri>
      <pub-id pub-id-type="doi">10.1016/j.softx.2020.100550</pub-id>
      <fpage>100550</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-li_2010_2decomp">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Li</surname><given-names>Ning</given-names></name>
        <name><surname>Laizet</surname><given-names>Sylvain</given-names></name>
      </person-group>
      <article-title>2DECOMP&amp;FFT - a highly scalable 2D decomposition library and FFT interface</article-title>
      <source>Cray user group 2010 conference</source>
      <year iso-8601-date="2010">2010</year>
      <fpage>1</fpage>
      <lpage>13</lpage>
    </element-citation>
  </ref>
  <ref id="ref-godoy2020adios">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Godoy</surname><given-names>William F.</given-names></name>
        <name><surname>Podhorszki</surname><given-names>Norbert</given-names></name>
        <name><surname>Wang</surname><given-names>Ruonan</given-names></name>
        <name><surname>Atkins</surname><given-names>Chuck</given-names></name>
        <name><surname>Eisenhauer</surname><given-names>Greg</given-names></name>
        <name><surname>Gu</surname><given-names>Junmin</given-names></name>
        <name><surname>Davis</surname><given-names>Philip</given-names></name>
        <name><surname>Choi</surname><given-names>Jong</given-names></name>
        <name><surname>Germaschewski</surname><given-names>Kai</given-names></name>
        <name><surname>Huck</surname><given-names>Kevin</given-names></name>
        <name><surname>Huebl</surname><given-names>Axel</given-names></name>
        <name><surname>Kim</surname><given-names>Mark</given-names></name>
        <name><surname>Kress</surname><given-names>James</given-names></name>
        <name><surname>Kurc</surname><given-names>Tahsin</given-names></name>
        <name><surname>Liu</surname><given-names>Qing</given-names></name>
        <name><surname>Logan</surname><given-names>Jeremy</given-names></name>
        <name><surname>Mehta</surname><given-names>Kshitij</given-names></name>
        <name><surname>Ostrouchov</surname><given-names>George</given-names></name>
        <name><surname>Parashar</surname><given-names>Manish</given-names></name>
        <name><surname>Poeschel</surname><given-names>Franz</given-names></name>
        <name><surname>Pugmire</surname><given-names>David</given-names></name>
        <name><surname>Suchyta</surname><given-names>Eric</given-names></name>
        <name><surname>Takahashi</surname><given-names>Keichi</given-names></name>
        <name><surname>Thompson</surname><given-names>Nick</given-names></name>
        <name><surname>Tsutsumi</surname><given-names>Seiji</given-names></name>
        <name><surname>Wan</surname><given-names>Lipeng</given-names></name>
        <name><surname>Wolf</surname><given-names>Matthew</given-names></name>
        <name><surname>Wu</surname><given-names>Kesheng</given-names></name>
        <name><surname>Klasky</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>ADIOS 2: The adaptable input output system. A framework for high-performance data management</article-title>
      <source>SoftwareX</source>
      <year iso-8601-date="2020">2020</year>
      <volume>12</volume>
      <issn>2352-7110</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S2352711019302560</uri>
      <pub-id pub-id-type="doi">10.1016/j.softx.2020.100561</pub-id>
      <fpage>100561</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-COSTA20181853">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Costa</surname><given-names>Pedro</given-names></name>
      </person-group>
      <article-title>A FFT-based finite-difference solver for massively-parallel direct numerical simulations of turbulent flows</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="2018">2018</year>
      <volume>76</volume>
      <issue>8</issue>
      <issn>0898-1221</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S089812211830405X</uri>
      <pub-id pub-id-type="doi">10.1016/j.camwa.2018.07.034</pub-id>
      <fpage>1853</fpage>
      <lpage>1862</lpage>
    </element-citation>
  </ref>
  <ref id="ref-FFTW05">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Frigo</surname><given-names>Matteo</given-names></name>
        <name><surname>Johnson</surname><given-names>Steven G.</given-names></name>
      </person-group>
      <article-title>The design and implementation of FFTW3</article-title>
      <source>Proceedings of the IEEE</source>
      <year iso-8601-date="2005">2005</year>
      <volume>93</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1109/JPROC.2004.840301</pub-id>
      <fpage>216</fpage>
      <lpage>231</lpage>
    </element-citation>
  </ref>
  <ref id="ref-FERGUSON1982401">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ferguson</surname><given-names>Warren E.</given-names></name>
      </person-group>
      <article-title>A simple derivation of Glassman’s general N fast Fourier transform</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="1982">1982</year>
      <volume>8</volume>
      <issue>6</issue>
      <issn>0898-1221</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/0898122182900165</uri>
      <pub-id pub-id-type="doi">10.1016/0898-1221(82)90016-5</pub-id>
      <fpage>401</fpage>
      <lpage>411</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
