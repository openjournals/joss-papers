<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4818</article-id>
<article-id pub-id-type="doi">10.21105/joss.04818</article-id>
<title-group>
<article-title>cppTPSA/pyTPSA: a C++/Python package for truncated power
series algebra</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7701-4118</contrib-id>
<name>
<surname>Zhang</surname>
<given-names>He</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Thomas Jefferson National Accelerator Facility, Newport
News, VA 23606, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-07-15">
<day>15</day>
<month>7</month>
<year>2021</year>
</pub-date>
<volume>9</volume>
<issue>94</issue>
<fpage>4818</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>differential algebra</kwd>
<kwd>truncated power series algebra</kwd>
<kwd>Python</kwd>
<kwd>C++</kwd>
<kwd>accelerator physics</kwd>
<kwd>astronomy</kwd>
<kwd>beam dynamics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The truncated power series algebra (TPSA), also referred to as
  differential algebra (DA), is a well-established and widely used
  method in particle accelerator physics and astronomy. The most
  straightforward usage of TPSA/DA is to calculate the Taylor expansion
  of a given function at a specific point up to order
  <inline-formula><alternatives>
  <tex-math><![CDATA[n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>.
  In recent years, as the application of TPSA/TA has been extended to
  other fields, a reusable implementation of TPSA/DA as a modern C++
  library or other high level programming language like Python has
  become desirable. The cppTPSA package implements TPSA/DA in C++11 and
  provides developers a convenient library with which to build advanced
  TPSA/DA-based methods. A Python 3 library, pyTPSA, has also been
  developed based on the C++ lib.</p>
</sec>
<sec id="background">
  <title>Background</title>
  <p>In the following, we give a very brief introduction on TPSA/DA from
  a practical computational perspective. Please refer to Berz
  (<xref alt="1999" rid="ref-AIEP108book" ref-type="bibr">1999</xref>)
  and Chao
  (<xref alt="2002" rid="ref-chao2002lecture" ref-type="bibr">2002</xref>)
  for the complete theory with more details.</p>
  <p>The fundamental concept in DA is the DA vector. To make this
  concept easier to understand, we can consider a DA vector as the
  Taylor expansion of a function at a specific point.</p>
  <p>Considering a function <inline-formula><alternatives>
  <tex-math><![CDATA[f(\mathbf{x})]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ùê±</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  and its Taylor expansion <inline-formula><alternatives>
  <tex-math><![CDATA[f_{\mathrm{T}}(\mathbf{x}_0)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi mathvariant="normal">T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>ùê±</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  at the point <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{x}_0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>ùê±</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
  up to the order <inline-formula><alternatives>
  <tex-math><![CDATA[n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>,
  we can define an equivalence relation between the Taylor expansion and
  the DA vector as follows</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[ [f]_n = f_{\mathrm{T}}(\mathbf{x}_0) = \sum {C_{n_1,n_2, ..., n_v}} \cdot d_1^{n_1} \cdot \dots \cdot d_v^{n_v}, ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>f</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>f</mml:mi><mml:mi mathvariant="normal">T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>ùê±</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>‚àë</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi>.</mml:mi><mml:mi>.</mml:mi><mml:mi>.</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>‚ãÖ</mml:mo><mml:msubsup><mml:mi>d</mml:mi><mml:mn>1</mml:mn><mml:msub><mml:mi>n</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:msubsup><mml:mo>‚ãÖ</mml:mo><mml:mi>‚Ä¶</mml:mi><mml:mo>‚ãÖ</mml:mo><mml:msubsup><mml:mi>d</mml:mi><mml:mi>v</mml:mi><mml:msub><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:msub></mml:msubsup><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{x} = (x_1, x_2, \dots, x_v)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ùê±</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi>‚Ä¶</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>v</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  and <inline-formula><alternatives>
  <tex-math><![CDATA[n \ge n_1 + n_2 + \dots + n_v]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>n</mml:mi><mml:mo>‚â•</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mi>‚Ä¶</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>.
  Here <inline-formula><alternatives>
  <tex-math><![CDATA[d_i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>d</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is a special number: it represents a small variance in
  <inline-formula><alternatives>
  <tex-math><![CDATA[x_i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></alternatives></inline-formula>.
  Generally one can define a DA vector by directly setting values to
  respective terms, without defining the function
  <inline-formula><alternatives>
  <tex-math><![CDATA[f]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>f</mml:mi></mml:math></alternatives></inline-formula>.
  The addition and multiplication of two DA vectors can be defined
  straightforwardly. To add two DA vectors, we simply add the
  coefficients of the like terms. To multiply two DA vectors, we
  multiply each term in the first one with all the terms in the second
  one and combine like terms while ignoring all terms above order
  <inline-formula><alternatives>
  <tex-math><![CDATA[n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>.
  So given two DA vectors <inline-formula><alternatives>
  <tex-math><![CDATA[[a]_n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[[b]_n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  and a scalar c, we have the following formulae:</p>
  <p><named-content id="eqU003Aaddmlt" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[\begin{aligned}
  _{n}+[b]_{n} & := & [a+b]_{n},\nonumber \\
  c\cdot[a]_{n} & := & [c\cdot a]_{n},\\
  {}[a]_{n}\cdot[b]_{n} & := & [a\cdot b]_{n},\nonumber 
  \end{aligned}]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtable><mml:mtr><mml:mtd columnalign="right" style="text-align: right"><mml:msub><mml:mi></mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mtd><mml:mtd columnalign="left" style="text-align: left"><mml:mo>:=</mml:mo></mml:mtd><mml:mtd columnalign="right" style="text-align: right"><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo>+</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right" style="text-align: right"><mml:mi>c</mml:mi><mml:mo>‚ãÖ</mml:mo><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mtd><mml:mtd columnalign="left" style="text-align: left"><mml:mo>:=</mml:mo></mml:mtd><mml:mtd columnalign="right" style="text-align: right"><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>c</mml:mi><mml:mo>‚ãÖ</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>,</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right" style="text-align: right"><mml:mrow></mml:mrow><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>‚ãÖ</mml:mo><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mtd><mml:mtd columnalign="left" style="text-align: left"><mml:mo>:=</mml:mo></mml:mtd><mml:mtd columnalign="right" style="text-align: right"><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo>‚ãÖ</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives></disp-formula></named-content></p>
  <p>According to the fixed point theorem
  (<xref alt="Berz, 1999" rid="ref-AIEP108book" ref-type="bibr">Berz,
  1999</xref>), the inverse of a DA vector that is not infinitely small
  can be calculated iteratively in a limited number of iterations.</p>
  <p>The derivation operator <inline-formula><alternatives>
  <tex-math><![CDATA[\partial_v]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  with respect to the <inline-formula><alternatives>
  <tex-math><![CDATA[v^{\mathrm{th}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">h</mml:mi></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>
  variable can be defined as</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[ \partial_v[a]_n = \left[ \frac{\partial}{\partial x_v} a \right]_{n-1}, ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mfrac><mml:mi>‚àÇ</mml:mi><mml:mrow><mml:mi>‚àÇ</mml:mi><mml:msub><mml:mi>x</mml:mi><mml:mi>v</mml:mi></mml:msub></mml:mrow></mml:mfrac><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>‚àí</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>which can be carried out term by term on
  <inline-formula><alternatives>
  <tex-math><![CDATA[[a]_n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:math></alternatives></inline-formula>.
  The operator <inline-formula><alternatives>
  <tex-math><![CDATA[\partial_v]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  satisfies the chain rule:</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[ \partial_v([a]\cdot [b]) = [a]\cdot (\partial_v [b]) + (\partial_v [a])\cdot [b]. ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo>‚ãÖ</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo>‚ãÖ</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>‚ãÖ</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>The inverse operator <inline-formula><alternatives>
  <tex-math><![CDATA[\partial^{-1}_v]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msubsup><mml:mi>‚àÇ</mml:mi><mml:mi>v</mml:mi><mml:mrow><mml:mo>‚àí</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></alternatives></inline-formula>
  can also be defined and carried out easily in a term-by-term manner.
  Once the fundamental operators are defined, the DA vector can be used
  in calculations just as a number. More sophisticated methods using DA
  have been developed, <italic>e.g.</italic> symplectic tracking
  (<xref alt="Berz, 1991a" rid="ref-caprimap" ref-type="bibr">Berz,
  1991a</xref>), normal form analysis
  (<xref alt="Berz, 1991b" rid="ref-monthnf" ref-type="bibr">Berz,
  1991b</xref>), verified integration
  (<xref alt="Berz &amp; Makino, 1998" rid="ref-rdaint" ref-type="bibr">Berz
  &amp; Makino, 1998</xref>), global optimization
  (<xref alt="Makino &amp; Berz, 2005" rid="ref-makino2005verified" ref-type="bibr">Makino
  &amp; Berz, 2005</xref>,), fast multipole method for pairwise
  interactions between particles
  (<xref alt="Zhang &amp; Berz, 2011" rid="ref-FMMCPO2010" ref-type="bibr">Zhang
  &amp; Berz, 2011</xref>).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>TPSA/DA methods for particle beam dynamic analysis were developed
  in the 1980s. These tools are available in several popular programs
  for particle accelerator design and simulations, such as COSY Infinity
  9
  (<xref alt="Makino &amp; Berz, 2006" rid="ref-COSYCAP04" ref-type="bibr">Makino
  &amp; Berz, 2006</xref>), MAD-X
  (<xref alt="Deniau et al., 2017" rid="ref-MADX" ref-type="bibr">Deniau
  et al., 2017</xref>;
  <xref alt="Grote &amp; Schmidt, 2003" rid="ref-grote2003mad" ref-type="bibr">Grote
  &amp; Schmidt, 2003</xref>), and PTC
  (<xref alt="Forest et al., 2002" rid="ref-forest2002introduction" ref-type="bibr">Forest
  et al., 2002</xref>). In recent years, the application of TPSA/DA has
  been extended to other fields, motivating the development of TPSA/DA
  libraries in popular programming languages. However, the existing
  programs are not convenient for developers from other fields. For
  instance, MAD-X is specifically developed for accelerator design and
  cannot be used as a general programming language. Although COSY
  Infinity can be used as a general programming languages, it lacks some
  of the convenient programming features found in modern languages, such
  as C++ or Python, along with abundant libraries and a large supporting
  community. PTC does include a TPSA/DA library in Fortran 90 but it
  lacks a user-friendly interface. TPSA/DA libraries in C++ are rare.
  DACE
  (<xref alt="Massari et al., 2018" rid="ref-massari2018differential" ref-type="bibr">Massari
  et al., 2018</xref>;
  <xref alt="Massari &amp; Wittig, 2021" rid="ref-DACE" ref-type="bibr">Massari
  &amp; Wittig, 2021</xref>) is one alternative. The DACE repository on
  GitHub had been created but no codes had been released when the author
  began developing
  cppTPSA(<xref alt="Zhang, 2021" rid="ref-cppTPSA" ref-type="bibr">Zhang,
  2021</xref>). Now DACE is available to the public, providing
  fundamental DA operations and some advanced algorithms based on DA.
  However, it does not support complex DA vectors, which are useful in
  normal form analysis. To the author‚Äôs best knowledge, there is no
  other TPSA/DA library in Python 3.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p>This library consists of a C++ library that performs TPSA/DA
  calculations and a Python wrapper. Users can compile the source code
  into a static or shared library or generate a Python library for a
  Python 3 environment. The readme file in the repository provides
  detailed instructions on how to compile both the C++ library and the
  Python library, respectively.</p>
  <p>The C++ library is based on Lingyun Yang‚Äôs TPSA code
  (<xref alt="Yang, 2009" rid="ref-yang9array" ref-type="bibr">Yang,
  2009</xref>), which is also incorporated into MAD-X
  (<xref alt="Deniau et al., 2017" rid="ref-MADX" ref-type="bibr">Deniau
  et al., 2017</xref>). During development, we tried to make minimal
  changes from the original code, but had to revise or rewrite some
  functions for better efficiency and/or consistency. One big change is
  the memory management. In Yang‚Äôs code, the pointers to all the DA
  vectors are stored in a vector. Whenever a new DA vector is required,
  the program searches this vector for the first empty pointer and
  allocates the memory. Once a DA vector is out of scope, the memory is
  freed. In contrast, our library initiates a memory pool for all DA
  vectors (with the number defined by the user) at the very start,
  during the initialization of the DA environment. The addresses for the
  slots, each for one DA vector, in the pool are maintained in a linked
  list. Whenever we need to create a new DA vector, we take out a slot
  from the beginning of the list. Whenever a DA vector goes out of the
  scope, its destructor will set all value in the slot to zero and put
  it back at the end of the list. The memory pool is managed simply by
  manipulating the two pointers: one pointing to the start and the other
  to the end of the list. This method eliminates the repetitive
  searching and allocation/deallocation operations, thereby achieving
  better efficiency.</p>
  <p>Some new features have been added, as follows:</p>
  <list list-type="order">
    <list-item>
      <p>Add a DA vector data type and define the commonly used math
      operators for it, so that users can use a DA vector as simple as a
      normal number in calculations.</p>
    </list-item>
    <list-item>
      <p>Support the complex DA vector defined by the C++ complex
      template.</p>
    </list-item>
    <list-item>
      <p>More math functions are supported. (A list of the overloaded
      math functions can be found in the readme file of the
      repository.)</p>
    </list-item>
    <list-item>
      <p>Add new functions that perform the composition of (complex) DA
      vectors, which can carry out multiple compositions in a call.</p>
    </list-item>
    <list-item>
      <p>A Python wrapper is provided.</p>
    </list-item>
  </list>
  <p>The following C++ code shows an example of a simple TPSA/DA
  calculation. After initializing an environment that can contain at
  most 400 three dimensional DA vectors up to the 4th order, two DA
  vectors x1 and x2 and a complex DA vector y1 are defined, some
  trigonometric functions are performed on them, and the results are
  output to the screen.</p>
  <code language="c++">    #include &quot;da.h&quot;
    da_init(4, 3, 400);
    DAVector x1, x2;
    x1 = da[0] + 2*da[1] + 3*da[2];
    x2 = sin(x1);
    x1 = cos(x1);
    auto y1 = x1 + x2*1i;
    std::cout&lt;&lt;x1&lt;&lt;x2&lt;&lt;std::endl;
    std::cout&lt;&lt;sin(y1)&lt;&lt;std::endl;</code>
  <p>A Python example doing the same calculation is presented as
  follows.</p>
  <code language="python">    import tpsa
    tpsa.da_init(4, 3, 400)
    da = tpsa.base()
    x1 = da[0] + 2*da[1] + 3*da[2]
    x2 = tpsa.sin(x1)
    x1 = tpsa.cos(x1)
    y1 = tpsa.complex(x1, x2)
    print(x1)
    print(x2)
    print(tpsa.sin(y1))</code>
  <p>More examples can be found in the repository.</p>
</sec>
<sec id="verification">
  <title>Verification</title>
  <p>This library has been verified with COSY Infinity 9.0. As an
  example, the outputs of calculating sin (0.3+da[0]+2√óda[1]) up to the
  fourth order by both programs are presented in
  <xref alt="[fig:cosy]" rid="figU003Acosy">[fig:cosy]</xref> and
  <xref alt="[fig:cpptpsa]" rid="figU003Acpptpsa">[fig:cpptpsa]</xref>
  respectively.
  <xref alt="[fig:cosy]" rid="figU003Acosy">[fig:cosy]</xref> shows the
  result generated by COSY Infinity, while
  <xref alt="[fig:cpptpsa]" rid="figU003Acpptpsa">[fig:cpptpsa]</xref>
  shows the result generated by cppTPSA. The two programs give exactly
  the same result. In most cases, the two programs agree to the
  machine‚Äôs precision. However, one may observe difference in the
  coefficients at orders of <inline-formula><alternatives>
  <tex-math><![CDATA[10^{-15}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>‚àí</mml:mo><mml:mn>15</mml:mn></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>
  or <inline-formula><alternatives>
  <tex-math><![CDATA[10^{-16}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>‚àí</mml:mo><mml:mn>16</mml:mn></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>
  for some special functions such as arcsin. This is because different
  numerical recipes are used in calculation. For example, a special
  function may be approximated by different series. This small deviation
  is usually considered acceptable in practice. If higher precision is
  desired, one could/should consider the Taylor Model (TM) datatype in
  COSY Infinity. The TM vector calculates a DA vector together with its
  error band. However, it is outside the scope of this code. Please note
  the sequence of the terms may be different when outputting a DA vector
  from cppTPSA and from COSY Infinity.</p>
  <fig>
    <caption><p>COSY Infinity 9.0
    output.<styled-content id="figU003Acosy"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/cosy-output.png" />
  </fig>
  <fig>
    <caption><p>cppTPSA
    output.<styled-content id="figU003Acpptpsa"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/cppTPSA-output.png" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The author would like to thank Dr.¬†Lingyun Yang for providing his
  source code.</p>
  <p>This material is based upon work supported by the U.S. Department
  of Energy, Office of Science, Office of Nuclear Physics under contract
  DE-AC05-06OR23177.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-caprimap">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Berz</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>Symplectic tracking in circular accelerators with high order maps</article-title>
      <source>Nonlinear problems in future particle accelerators</source>
      <publisher-name>World Scientific</publisher-name>
      <year iso-8601-date="1991">1991</year>
      <fpage>288</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-monthnf">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Berz</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>High-order computation and normal form analysis of repetitive systems, in: M. Month (Ed), physics of particle accelerators</article-title>
      <publisher-name>American Institute of Physics</publisher-name>
      <publisher-loc>New York</publisher-loc>
      <year iso-8601-date="1991">1991</year>
      <volume>249</volume>
      <pub-id pub-id-type="doi">10.1063/1.41975</pub-id>
      <fpage>456</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-rdaint">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Berz</surname><given-names>M.</given-names></name>
        <name><surname>Makino</surname><given-names>K.</given-names></name>
      </person-group>
      <article-title>Verified integration of ODEs and flows using differential algebraic methods on high-order Taylor models</article-title>
      <source>Reliable Computing</source>
      <year iso-8601-date="1998">1998</year>
      <volume>4</volume>
      <pub-id pub-id-type="doi">10.1023/A:1024467732637</pub-id>
      <fpage>361</fpage>
      <lpage>369</lpage>
    </element-citation>
  </ref>
  <ref id="ref-makino2005verified">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Makino</surname><given-names>K.</given-names></name>
        <name><surname>Berz</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>Verified global optimization with Taylor model based range bounders</article-title>
      <source>Transactions on computers</source>
      <year iso-8601-date="2005">2005</year>
      <volume>11</volume>
      <issue>4</issue>
      <uri>https://www.bmtdynamics.org/pub/papers/GOM05/GOM05.pdf</uri>
      <fpage>1611</fpage>
      <lpage>1618</lpage>
    </element-citation>
  </ref>
  <ref id="ref-FMMCPO2010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>H.</given-names></name>
        <name><surname>Berz</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>The fast multipole method in the differential algebra framework</article-title>
      <source>Nuclear Instruments and Methods A 645</source>
      <year iso-8601-date="2011">2011</year>
      <pub-id pub-id-type="doi">10.1016/j.nima.2011.01.053</pub-id>
      <fpage>338</fpage>
      <lpage>344</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cppTPSA">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>H.</given-names></name>
      </person-group>
      <article-title>cppTPSA: A C++ TPSA lib</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/zhanghe9704/tpsa</uri>
    </element-citation>
  </ref>
  <ref id="ref-AIEP108book">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Berz</surname><given-names>M.</given-names></name>
      </person-group>
      <source>Modern map methods in particle beam physics</source>
      <publisher-name>Academic Press</publisher-name>
      <publisher-loc>San Diego</publisher-loc>
      <year iso-8601-date="1999">1999</year>
      <isbn>0-12-014750-5</isbn>
      <pub-id pub-id-type="doi">10.1016/s1076-5670(08)x7018-1</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-chao2002lecture">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Chao</surname><given-names>A. W.</given-names></name>
      </person-group>
      <article-title>Lecture notes on topics in accelerator physics</article-title>
      <publisher-name>Stanford Linear Accelerator Center, Menlo Park, CA (US)</publisher-name>
      <year iso-8601-date="2002">2002</year>
      <pub-id pub-id-type="doi">10.2172/812598</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-COSYCAP04">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Makino</surname><given-names>K.</given-names></name>
        <name><surname>Berz</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>COSY INFINITY version 9</article-title>
      <source>Nuclear Instruments and Methods</source>
      <year iso-8601-date="2006">2006</year>
      <volume>558</volume>
      <pub-id pub-id-type="doi">10.1016/j.nima.2005.11.109</pub-id>
      <fpage>346</fpage>
      <lpage>350</lpage>
    </element-citation>
  </ref>
  <ref id="ref-forest2002introduction">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Forest</surname><given-names>Etienne</given-names></name>
        <name><surname>Schmidt</surname><given-names>Frank</given-names></name>
        <name><surname>McIntosh</surname><given-names>Eric</given-names></name>
      </person-group>
      <article-title>Introduction to the polymorphic tracking code</article-title>
      <source>KEK report</source>
      <year iso-8601-date="2002">2002</year>
      <volume>3</volume>
      <uri>https://inspirehep.net/literature/591979</uri>
      <fpage>2002</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-massari2018differential">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Massari</surname><given-names>M.</given-names></name>
        <name><surname>Di Lizia</surname><given-names>Pierluigi</given-names></name>
        <name><surname>Cavenago</surname><given-names>Francesco</given-names></name>
        <name><surname>Wittig</surname><given-names>Alexander</given-names></name>
      </person-group>
      <article-title>Differential algebra software library with automatic code generation for space embedded applications</article-title>
      <source>2018 AIAA information systems-AIAA infotech@ aerospace</source>
      <year iso-8601-date="2018">2018</year>
      <pub-id pub-id-type="doi">10.2514/6.2018-0398</pub-id>
      <fpage>0398</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-DACE">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Massari</surname><given-names>M.</given-names></name>
        <name><surname>Wittig</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>DACE: The differential algebra computational toolbox</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/dacelib/dace</uri>
    </element-citation>
  </ref>
  <ref id="ref-grote2003mad">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Grote</surname><given-names>H</given-names></name>
        <name><surname>Schmidt</surname><given-names>F</given-names></name>
      </person-group>
      <article-title>MAD-X-an upgrade from MAD8</article-title>
      <source>Proceedings of the 2003 particle accelerator conference</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2003">2003</year>
      <volume>5</volume>
      <pub-id pub-id-type="doi">10.1109/PAC.2003.1289960</pub-id>
      <fpage>3497</fpage>
      <lpage>3499</lpage>
    </element-citation>
  </ref>
  <ref id="ref-MADX">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Deniau</surname><given-names>L.</given-names></name>
        <name><surname>Skowronski</surname><given-names>P.</given-names></name>
        <name><surname>Roy</surname><given-names>G.</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>MAD-X: Methodical accelerator design</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <uri>https://github.com/MethodicalAcceleratorDesign/MAD-X</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.7900975</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-yang9array">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yang</surname><given-names>Lingyun</given-names></name>
      </person-group>
      <article-title>Array based truncated power series package</article-title>
      <source>Proceedings of the 10th Internaltional Computational Accelerator Physics Conference</source>
      <year iso-8601-date="2009">2009</year>
      <uri>https://https://accelconf.web.cern.ch/ICAP2009/papers/thpsc059.pdf</uri>
      <fpage>371</fpage>
      <lpage>373</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
