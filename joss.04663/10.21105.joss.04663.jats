<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4663</article-id>
<article-id pub-id-type="doi">10.21105/joss.04663</article-id>
<title-group>
<article-title><inline-formula><alternatives>
<tex-math><![CDATA[\rho\mu]]></tex-math>
<mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>:
A Java library of randomization enhancements and other math
utilities</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1072-8559</contrib-id>
<name>
<surname>Cicirello</surname>
<given-names>Vincent A.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Computer Science, School of Business, Stockton University,
Galloway, NJ 08205, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-08-02">
<day>2</day>
<month>8</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>76</issue>
<fpage>4663</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>randomization</kwd>
<kwd>pseudorandom numbers</kwd>
<kwd>sampling algorithms</kwd>
<kwd>math utilities</kwd>
<kwd>random number distributions</kwd>
<kwd>random streams</kwd>
<kwd>Java</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  library is a Java library of Randomization enHancements and Other Math
  Utilities. It originated as a core dependency for our other open
  source research software libraries, such as JavaPermutationTools
  (<xref alt="Cicirello, 2018b" rid="ref-Cicirello2018b" ref-type="bibr">Cicirello,
  2018b</xref>) and Chips-n-Salsa
  (<xref alt="Cicirello, 2020" rid="ref-Cicirello2020" ref-type="bibr">Cicirello,
  2020</xref>), providing these libraries with efficient randomization
  related algorithms. For example, Chips-n-Salsa is a library of
  stochastic local search and evolutionary algorithms, which requires
  fast generation of random indexes into arrays and other structures, as
  well as fast generation of non-uniform random numbers to implement
  Gaussian mutation, Cauchy mutation, etc. The
  <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  library includes implementations of efficient algorithms for randomly
  sampling indexes into arrays and other sequential structures, randomly
  sampling pairs and triples of distinct indexes, randomly sampling
  <inline-formula><alternatives>
  <tex-math><![CDATA[k]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>k</mml:mi></mml:math></alternatives></inline-formula>
  indexes, among others, and also includes efficient random number
  generation from non-uniform distributions, such as Gaussian, Cauchy,
  and Binomial. It also includes math functions required by the
  randomization utilities. The documentation is hosted on the web
  (<ext-link ext-link-type="uri" xlink:href="https://rho-mu.cicirello.org/">https://rho-mu.cicirello.org/</ext-link>),
  and source code on GitHub
  (<ext-link ext-link-type="uri" xlink:href="https://github.com/cicirello/rho-mu">https://github.com/cicirello/rho-mu</ext-link>),
  which includes a directory of example programs illustrating
  <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  usage.</p>
</sec>
<sec id="functionality">
  <title>Functionality</title>
  <p>The randomization enhancements provided by
  <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  include:</p>
  <list list-type="bullet">
    <list-item>
      <p>Faster generation of random integers subject to a bound or
      bound and origin, using the algorithm of Lemire
      (<xref alt="2019" rid="ref-Lemire2019" ref-type="bibr">2019</xref>),
      as well as faster generation of streams of bounded integers. A
      sample program demonstrates the speed advantage, where on average
      <inline-formula><alternatives>
      <tex-math><![CDATA[\rho\mu]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
      used 53.3% less CPU time than Java’s
      <monospace>RandomGenerator.nextInt(bound)</monospace>.</p>
    </list-item>
    <list-item>
      <p>Faster generation of Gaussian distributed random doubles, with
      a Java port of the GNU Scientific Library’s C implementation
      (<xref alt="Voss, 2014" rid="ref-Voss2014" ref-type="bibr">Voss,
      2014</xref>) of the Ziggurat algorithm
      (<xref alt="Leong et al., 2005" rid="ref-Leong2005" ref-type="bibr">Leong
      et al., 2005</xref>;
      <xref alt="Marsaglia &amp; Tsang, 2000" rid="ref-Marsaglia2000" ref-type="bibr">Marsaglia
      &amp; Tsang, 2000</xref>).</p>
    </list-item>
    <list-item>
      <p>Additional distributions available beyond what is supported by
      the Java API’s <monospace>RandomGenerator</monospace> classes,
      such as Binomial and Cauchy random variables.</p>
    </list-item>
    <list-item>
      <p>Ultrafast, but biased, <monospace>nextBiasedInt</monospace>
      methods that exclude rejection sampling to trade-off uniformity
      for speed, based on Lemire
      (<xref alt="2019" rid="ref-Lemire2019" ref-type="bibr">2019</xref>),
      as well as streams of such biased integers. A sample program shows
      the substantial speed advantage offered for cases where strict
      uniformity is not required, where on average
      <inline-formula><alternatives>
      <tex-math><![CDATA[\rho\mu]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>’s
      <monospace>nextBiasedInt(bound)</monospace> used 99.2% less CPU
      time than Java’s
      <monospace>RandomGenerator.nextInt(bound)</monospace>.</p>
    </list-item>
    <list-item>
      <p>Methods for generating random pairs and triples of integers
      without replacement.</p>
    </list-item>
    <list-item>
      <p>Methods for generating random samples of
      <inline-formula><alternatives>
      <tex-math><![CDATA[k]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>k</mml:mi></mml:math></alternatives></inline-formula>
      integers without replacement from a range of
      <inline-formula><alternatives>
      <tex-math><![CDATA[n]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>
      integers, including three alternative algorithms, reservoir
      sampling
      (<xref alt="Vitter, 1985" rid="ref-Vitter1985" ref-type="bibr">Vitter,
      1985</xref>), pool sampling
      (<xref alt="Ernvall &amp; Nevalainen, 1982" rid="ref-Ernvall1982" ref-type="bibr">Ernvall
      &amp; Nevalainen, 1982</xref>), and insertion sampling
      (<xref alt="Cicirello, 2022" rid="ref-Cicirello2022" ref-type="bibr">Cicirello,
      2022</xref>), as well as a method that chooses among these based
      on <inline-formula><alternatives>
      <tex-math><![CDATA[n]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>
      and <inline-formula><alternatives>
      <tex-math><![CDATA[k]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>k</mml:mi></mml:math></alternatives></inline-formula>.</p>
    </list-item>
    <list-item>
      <p>Streams from binomial, Cauchy, exponential, and Gaussian
      distributions.</p>
    </list-item>
  </list>
  <p>Comparisons used OpenJDK 17 and Windows 10 on an AMD A10-5700
  3.4GHz CPU with 8GB DDR3 RAM. The GitHub repository includes the data
  and t-Test results demonstrating the speed enhancements at extremely
  statistically significant levels.</p>
</sec>
<sec id="architecture">
  <title>Architecture</title>
  <p><xref alt="Figure 1" rid="figU003Auml">Figure 1</xref> provides a
  UML diagram illustrating the architecture of the library. Java 17
  introduced a <monospace>RandomGenerator</monospace> interface, and
  five nested subinterfaces for special types of random number
  generator. The <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  library provides a hierarchy of wrapper classes corresponding to Java
  17’s <monospace>RandomGenerator</monospace> interface hierarchy. This
  enables using <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>’s
  <monospace>EnhancedRandomGenerator</monospace>, and its subclasses, as
  drop-in replacements in existing applications.</p>
  <fig>
    <caption><p>UML diagram of <inline-formula><alternatives>
    <tex-math><![CDATA[\rho\mu]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.
    Java API interfaces in gray, and <inline-formula><alternatives>
    <tex-math><![CDATA[\rho\mu]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
    classes in
    blue.<styled-content id="figU003Auml"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/uml.png" xlink:title="" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>The original motivation for the <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  library is to provide efficient algorithms for randomization
  operations commonly needed by stochastic local search
  (<xref alt="Hoos &amp; Stützle, 2018" rid="ref-Hoos2018" ref-type="bibr">Hoos
  &amp; Stützle, 2018</xref>) and evolutionary algorithms
  (<xref alt="Doerr &amp; Neumann, 2019" rid="ref-Doerr2019" ref-type="bibr">Doerr
  &amp; Neumann, 2019</xref>;
  <xref alt="Petrowski &amp; Ben-Hamida, 2017" rid="ref-Petrowski2017" ref-type="bibr">Petrowski
  &amp; Ben-Hamida, 2017</xref>). Such algorithms rely heavily on
  randomized behavior, including the need to generate very many random
  indexes into linear structures such as vectors of bits. Sometimes
  independent random indexes are required, while other times (such as
  for a <inline-formula><alternatives>
  <tex-math><![CDATA[k]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>k</mml:mi></mml:math></alternatives></inline-formula>-point
  crossover) a random sample without replacement is necessary. For
  real-valued optimization problems, evolutionary algorithms require
  random numbers from non-uniform distributions such as for Gaussian
  mutation
  (<xref alt="Hinterding, 1995" rid="ref-Hinterding1995" ref-type="bibr">Hinterding,
  1995</xref>) or Cauchy mutation
  (<xref alt="Szu &amp; Hartley, 1987" rid="ref-Szu1987" ref-type="bibr">Szu
  &amp; Hartley, 1987</xref>). Our prior research showed that
  evolutionary algorithms are so reliant upon random number generation
  that one can achieve as much as a 25% speed up by optimizing choice of
  random number algorithms alone
  (<xref alt="Cicirello, 2018a" rid="ref-Cicirello2018a" ref-type="bibr">Cicirello,
  2018a</xref>).</p>
  <p>Efficient randomization has important research applications in a
  variety of other areas as well, such as in modeling and simulation
  (<xref alt="Greasley &amp; Edwards, 2021" rid="ref-Greasley2021" ref-type="bibr">Greasley
  &amp; Edwards, 2021</xref>;
  <xref alt="Rabe et al., 2020" rid="ref-Rabe2020" ref-type="bibr">Rabe
  et al., 2020</xref>;
  <xref alt="Zhang et al., 2019" rid="ref-Zhang2019" ref-type="bibr">Zhang
  et al., 2019</xref>), domain randomization
  (<xref alt="Tobin et al., 2017" rid="ref-Tobin2017" ref-type="bibr">Tobin
  et al., 2017</xref>) for sim-to-real transfer learning
  (<xref alt="Zhao et al., 2020" rid="ref-Zhao2020" ref-type="bibr">Zhao
  et al., 2020</xref>), among others.</p>
  <p>Java 17 introduced a substantial overhaul of its random number
  support, adding a hierarchy of interfaces, where no common interface
  previously existed; as well as adding several pseudorandom number
  generators (PRNG) along with a factory class. Java libraries exist,
  such as Apache Commons
  (<xref alt="The Apache Software Foundation, 2021" rid="ref-Apache2021" ref-type="bibr">The
  Apache Software Foundation, 2021</xref>), PRNGine
  (<xref alt="​Jenetics, 2022" rid="ref-Jenetics2022" ref-type="bibr">​Jenetics,
  2022</xref>), and Uncommons Maths
  (<xref alt="Dyer, 2014" rid="ref-Dyer2014" ref-type="bibr">Dyer,
  2014</xref>), that provide additional PRNGs and in some cases
  specialized algorithms for sampling, additional distributions, and
  other randomization operations. But, I believe that
  <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  is the first library to be designed around Java 17’s
  <monospace>RandomGenerator</monospace> interface hierarchy, providing
  a convenient mechanism to add support for additional specialized
  randomization operations to any of Java 17’s PRNGs or even those from
  other libraries like Apache Commons. <inline-formula><alternatives>
  <tex-math><![CDATA[\rho\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ρ</mml:mi><mml:mi>μ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>’s
  architecture provides a drop-in replacement approach enabling easily
  upgrading randomization functionality of existing PRNGs in existing
  applications.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Cicirello2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cicirello</surname><given-names>Vincent A.</given-names></name>
      </person-group>
      <article-title>Chips-n-salsa: A java library of customizable, hybridizable, iterative, parallel, stochastic, and self-adaptive local search algorithms</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>52</issue>
      <pub-id pub-id-type="doi">10.21105/joss.02448</pub-id>
      <fpage>2448</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Cicirello2018b">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cicirello</surname><given-names>Vincent A.</given-names></name>
      </person-group>
      <article-title>JavaPermutationTools: A java library of permutation distance metrics</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2018">2018</year>
      <volume>3</volume>
      <issue>31</issue>
      <pub-id pub-id-type="doi">10.21105/joss.00950</pub-id>
      <fpage>950</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Cicirello2018a">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Cicirello</surname><given-names>Vincent A.</given-names></name>
      </person-group>
      <article-title>Impact of random number generation on parallel genetic algorithms</article-title>
      <source>Proceedings of the thirty-first international florida artificial intelligence research society conference</source>
      <publisher-name>AAAI Press</publisher-name>
      <year iso-8601-date="2018-05">2018</year><month>05</month>
      <fpage>2</fpage>
      <lpage>7</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Cicirello2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cicirello</surname><given-names>Vincent A.</given-names></name>
      </person-group>
      <article-title>Cycle mutation: Evolving permutations via cycle induction</article-title>
      <source>Applied Sciences</source>
      <year iso-8601-date="2022">2022</year>
      <volume>12</volume>
      <issue>11</issue>
      <pub-id pub-id-type="doi">10.3390/app12115506</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Lemire2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lemire</surname><given-names>Daniel</given-names></name>
      </person-group>
      <article-title>Fast random integer generation in an interval</article-title>
      <source>ACM Transactions on Modeling and Computer Simulation</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2019">2019</year>
      <volume>29</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1145/3230636</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Marsaglia2000">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Marsaglia</surname><given-names>George</given-names></name>
        <name><surname>Tsang</surname><given-names>Wai Wan</given-names></name>
      </person-group>
      <article-title>The ziggurat method for generating random variables</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2000">2000</year>
      <volume>5</volume>
      <issue>8</issue>
      <pub-id pub-id-type="doi">10.18637/jss.v005.i08</pub-id>
      <fpage>1</fpage>
      <lpage>7</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Leong2005">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Leong</surname><given-names>Philip H. W.</given-names></name>
        <name><surname>Zhang</surname><given-names>Ganglie</given-names></name>
        <name><surname>Lee</surname><given-names>Dong-U</given-names></name>
        <name><surname>Luk</surname><given-names>Wayne</given-names></name>
        <name><surname>Villasenor</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>A comment on the implementation of the ziggurat method</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2005">2005</year>
      <volume>12</volume>
      <issue>7</issue>
      <pub-id pub-id-type="doi">10.18637/jss.v012.i07</pub-id>
      <fpage>1</fpage>
      <lpage>4</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Voss2014">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Voss</surname><given-names>Jochen</given-names></name>
      </person-group>
      <article-title>The ziggurat method for generating gaussian random numbers</article-title>
      <source>GNU Scientific Library</source>
      <publisher-name>GNU</publisher-name>
      <year iso-8601-date="2014">2014</year>
      <uri>https://www.seehuhn.de/pages/ziggurat</uri>
    </element-citation>
  </ref>
  <ref id="ref-Apache2021">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>The Apache Software Foundation</string-name>
      </person-group>
      <article-title>Apache commons RNG: Random numbers generators</article-title>
      <publisher-name>Apache</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://commons.apache.org/proper/commons-rng/</uri>
    </element-citation>
  </ref>
  <ref id="ref-Dyer2014">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dyer</surname><given-names>Daniel W.</given-names></name>
      </person-group>
      <article-title>Uncommons maths: Random number generators, probability distributions, combinatorics and statistics for java</article-title>
      <source>GitHub Repository</source>
      <publisher-name>​GitHub</publisher-name>
      <year iso-8601-date="2014">2014</year>
      <uri>https://github.com/dwdyer/uncommons-maths</uri>
    </element-citation>
  </ref>
  <ref id="ref-Jenetics2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>​Jenetics</surname></name>
      </person-group>
      <article-title>PRNGine - pseudo random number engines for monte carlo simulations</article-title>
      <source>​GitHub repository</source>
      <publisher-name>​GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/jenetics/prngine</uri>
    </element-citation>
  </ref>
  <ref id="ref-Vitter1985">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vitter</surname><given-names>Jeffrey S.</given-names></name>
      </person-group>
      <article-title>Random sampling with a reservoir</article-title>
      <source>ACM Transactions on Mathematical Software</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="1985">1985</year>
      <volume>11</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1145/3147.3165</pub-id>
      <fpage>37</fpage>
      <lpage>57</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Ernvall1982">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ernvall</surname><given-names>Jarmo</given-names></name>
        <name><surname>Nevalainen</surname><given-names>Olli</given-names></name>
      </person-group>
      <article-title>An algorithm for unbiased random sampling</article-title>
      <source>The Computer Journal</source>
      <year iso-8601-date="1982">1982</year>
      <volume>25</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1093/comjnl/25.1.45</pub-id>
      <fpage>45</fpage>
      <lpage>47</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hoos2018">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Hoos</surname><given-names>Holger H.</given-names></name>
        <name><surname>Stützle</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>Stochastic local search</article-title>
      <source>Handbook of approximation algorithms and metaheuristics methologies and traditional applications</source>
      <publisher-name>Chapman; Hall/CRC</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>1</volume>
      <edition>2nd</edition>
    </element-citation>
  </ref>
  <ref id="ref-Petrowski2017">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Petrowski</surname><given-names>A.</given-names></name>
        <name><surname>Ben-Hamida</surname><given-names>S.</given-names></name>
      </person-group>
      <source>Evolutionary algorithms</source>
      <publisher-name>Wiley</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <isbn>9781848218048</isbn>
      <pub-id pub-id-type="doi">10.1002/9781119136378</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Doerr2019">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Doerr</surname><given-names>B.</given-names></name>
        <name><surname>Neumann</surname><given-names>F.</given-names></name>
      </person-group>
      <source>Theory of evolutionary computation: Recent developments in discrete optimization</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <isbn>9783030294144</isbn>
    </element-citation>
  </ref>
  <ref id="ref-Tobin2017">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Tobin</surname><given-names>Josh</given-names></name>
        <name><surname>Fong</surname><given-names>Rachel</given-names></name>
        <name><surname>Ray</surname><given-names>Alex</given-names></name>
        <name><surname>Schneider</surname><given-names>Jonas</given-names></name>
        <name><surname>Zaremba</surname><given-names>Wojciech</given-names></name>
        <name><surname>Abbeel</surname><given-names>Pieter</given-names></name>
      </person-group>
      <article-title>Domain randomization for transferring deep neural networks from simulation to the real world</article-title>
      <source>2017 IEEE/RSJ international conference on intelligent robots and systems (IROS)</source>
      <year iso-8601-date="2017">2017</year>
      <pub-id pub-id-type="doi">10.1109/IROS.2017.8202133</pub-id>
      <fpage>23</fpage>
      <lpage>30</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Zhao2020">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Zhao</surname><given-names>Wenshuai</given-names></name>
        <name><surname>Queralta</surname><given-names>Jorge Peña</given-names></name>
        <name><surname>Westerlund</surname><given-names>Tomi</given-names></name>
      </person-group>
      <article-title>Sim-to-real transfer in deep reinforcement learning for robotics: A survey</article-title>
      <source>2020 IEEE symposium series on computational intelligence (SSCI)</source>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.1109/SSCI47803.2020.9308468</pub-id>
      <fpage>737</fpage>
      <lpage>744</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Zhang2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Lin</given-names></name>
        <name><surname>Zhou</surname><given-names>Longfei</given-names></name>
        <name><surname>Ren</surname><given-names>Lei</given-names></name>
        <name><surname>Laili</surname><given-names>Yuanjun</given-names></name>
      </person-group>
      <article-title>Modeling and simulation in intelligent manufacturing</article-title>
      <source>Computers in Industry</source>
      <year iso-8601-date="2019">2019</year>
      <volume>112</volume>
      <pub-id pub-id-type="doi">10.1016/j.compind.2019.08.004</pub-id>
      <fpage>103123</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Rabe2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rabe</surname><given-names>M.</given-names></name>
        <name><surname>Deininger</surname><given-names>M.</given-names></name>
        <name><surname>Juan</surname><given-names>A. A.</given-names></name>
      </person-group>
      <article-title>Speeding up computational times in simheuristics combining genetic algorithms with discrete-event simulation</article-title>
      <source>Simulation Modelling Practice and Theory</source>
      <year iso-8601-date="2020">2020</year>
      <volume>103</volume>
      <pub-id pub-id-type="doi">10.1016/j.simpat.2020.102089</pub-id>
      <fpage>102089</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Greasley2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Greasley</surname><given-names>Andrew</given-names></name>
        <name><surname>Edwards</surname><given-names>John Steven</given-names></name>
      </person-group>
      <article-title>Enhancing discrete-event simulation with big data analytics: A review</article-title>
      <source>Journal of the Operational Research Society</source>
      <publisher-name>Taylor &amp; Francis</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>72</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1080/01605682.2019.1678406</pub-id>
      <fpage>247</fpage>
      <lpage>267</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hinterding1995">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hinterding</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>Gaussian mutation and self-adaption for numeric genetic algorithms</article-title>
      <source>IEEE international conference on evolutionary computation</source>
      <year iso-8601-date="1995">1995</year>
      <volume>1</volume>
      <pub-id pub-id-type="doi">10.1109/ICEC.1995.489178</pub-id>
      <fpage>384</fpage>
      <lpage>389</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Szu1987">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Szu</surname><given-names>H. H.</given-names></name>
        <name><surname>Hartley</surname><given-names>R. L.</given-names></name>
      </person-group>
      <article-title>Nonconvex optimization by fast simulated annealing</article-title>
      <source>Proceedings of the IEEE</source>
      <year iso-8601-date="1987">1987</year>
      <volume>75</volume>
      <issue>11</issue>
      <pub-id pub-id-type="doi">10.1109/PROC.1987.13916</pub-id>
      <fpage>1538</fpage>
      <lpage>1540</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
