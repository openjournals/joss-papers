<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4822</article-id>
<article-id pub-id-type="doi">10.21105/joss.04822</article-id>
<title-group>
<article-title>GLUE Code: A framework handling communication and
interfaces between scales</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1246-0410</contrib-id>
<name>
<surname>Pachalieva</surname>
<given-names>Aleksandra</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0001-7913-9918</contrib-id>
<name>
<surname>Pavel</surname>
<given-names>Robert S.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2404-3975</contrib-id>
<name>
<surname>Santos</surname>
<given-names>Javier E.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6743-3255</contrib-id>
<name>
<surname>Diaw</surname>
<given-names>Abdourahmane</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9001-9973</contrib-id>
<name>
<surname>Lubbers</surname>
<given-names>Nicholas</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-2472-2879</contrib-id>
<name>
<surname>Mehana</surname>
<given-names>Mohamed</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2044-0885</contrib-id>
<name>
<surname>Haack</surname>
<given-names>Jeffrey R.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1178-9647</contrib-id>
<name>
<surname>Viswanathan</surname>
<given-names>Hari S.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-2367-1547</contrib-id>
<name>
<surname>Livescu</surname>
<given-names>Daniel</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6813-238X</contrib-id>
<name>
<surname>Germann</surname>
<given-names>Timothy C.</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0925-1458</contrib-id>
<name>
<surname>Junghans</surname>
<given-names>Christoph</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Center for Non-Linear Studies, Los Alamos National
Laboratory, Los Alamos, 87545 NM, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Earth and Environmental Sciences (EES) Division, Los Alamos
National Laboratory, Los Alamos, 87545 NM, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Computer, Computational and Statistical Sciences (CCS)
Division, Los Alamos National Laboratory, Los Alamos, 87545 NM,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Fusion Energy Division, Oak Ridge National Laboratory, 1
Bethel Valley Road, Oak Ridge, TN 37831, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Theoretical Division, Los Alamos National Laboratory, Los
Alamos, 87545 NM, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-09-20">
<day>20</day>
<month>9</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>80</issue>
<fpage>4822</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>Fortran</kwd>
<kwd>Python</kwd>
<kwd>multiscale simulations</kwd>
<kwd>active machine leanring</kwd>
<kwd>scale-bridging</kwd>
<kwd>ICF</kwd>
<kwd>MD</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Many scientific applications are inherently multiscale in nature.
  Such complex physical phenomena often require simultaneous execution
  and coordination of simulations spanning multiple time and length
  scales. This is possible by combining expensive small-scale
  simulations (such as molecular dynamics simulations) with larger scale
  simulations (such continuum limit/hydro solvers) to allow for
  considerably larger systems using task and data parallelism. However,
  the granularity of the tasks can be very large and often leads to load
  imbalance. Traditionally, we use approximations to streamline the
  computation of the more costly interactions and this introduces
  trade-offs between simulation cost and accuracy. In recent years, the
  available computational power and the advances in machine learning
  have made computing these scale-bridging interactions and multiscale
  simulations more feasible.</p>
  <p>One driving application has been plasma modeling in inertial
  confinement fusion (ICF), which is fundamentally multiscale in nature.
  This requires deep understanding of how to extrapolate microscopic
  information into macroscopically relevant scales. For example, in ICF
  one needs an accurate understanding of the connection between
  experimental observables and the underlying microphysics. The
  properties of the larger scales are often affected by the microscale
  behavior incorporated usually into the equations of state and ionic
  and electronic transport coefficients
  (<xref alt="Liboff, 1959" rid="ref-liboff1959transport" ref-type="bibr">Liboff,
  1959</xref>;
  <xref alt="Rinderknecht et al., 2014" rid="ref-rinderknecht2014first" ref-type="bibr">Rinderknecht
  et al., 2014</xref>;
  <xref alt="Rosenberg et al., 2015" rid="ref-rosenberg2015assessment" ref-type="bibr">Rosenberg
  et al., 2015</xref>;
  <xref alt="Ross et al., 2017" rid="ref-ross2017transition" ref-type="bibr">Ross
  et al., 2017</xref>). Instead of incorporating this information using
  reliable molecular dynamics (MD) simulations, one often needs to use
  theoretical models, due to the inability of MD to reach engineering
  scales
  (<xref alt="Glosli et al., 2007" rid="ref-glosli2007extending" ref-type="bibr">Glosli
  et al., 2007</xref>;
  <xref alt="Marinak et al., 1998" rid="ref-marinak1998comparison" ref-type="bibr">Marinak
  et al., 1998</xref>). One approach to resolve this issue is by
  coupling two MD simulations of different scales via force
  interpolation, e.g., the AdResS method
  (<xref alt="Krekeler et al., 2018" rid="ref-krekeler2018adaptive" ref-type="bibr">Krekeler
  et al., 2018</xref>;
  <xref alt="Nagarajan et al., 2013" rid="ref-nagarajan2013multiscale" ref-type="bibr">Nagarajan
  et al., 2013</xref>). Another approach, which we will pursue in the
  scope of this work, is by enabling scale bridging between MD
  simulations and meso/macro-scale models through the development and
  support of application programming interfaces that these different
  applications can interact through.</p>
</sec>
<sec id="state-of-the-art">
  <title>State of the art</title>
  <p>Traditionally, multiscale simulations combine multiple simulation
  methods that need to be simultaneously executed and coordinated. To
  achieve this, we use asynchronous task-based runtime systems that
  include load balancers. Such load balancers can schedule and migrate
  tasks to maintain throughput; however, the issue of fault tolerance
  remains
  (<xref alt="Cappello, 2009" rid="ref-cappello2009fault" ref-type="bibr">Cappello,
  2009</xref>). To avoid this, checkpointing is often used
  (<xref alt="Koo &amp; Toueg, 1987" rid="ref-koo1987checkpointing" ref-type="bibr">Koo
  &amp; Toueg, 1987</xref>), but it could be prohibitively expensive
  when its output frequency is high. Other works such as the
  <monospace>mystic</monospace> framework
  (<xref alt="Michael McKerns &amp; Aivazis, 2019" rid="ref-mysticGit" ref-type="bibr">Michael
  McKerns &amp; Aivazis, 2019</xref>) is more geared towards large-scale
  machine learning techniques
  (<xref alt="McKerns et al., 2011" rid="ref-mckerns2012building" ref-type="bibr">McKerns
  et al., 2011</xref>). Such codes are not designed toward coupling
  multiscale simulations but have been demonstrated to be highly
  effective at solving hard optimization problems.</p>
  <p>In this work, we propose the <monospace>G</monospace>eneric
  <monospace>L</monospace>earning <monospace>U</monospace>ser
  <monospace>E</monospace>nablement (<monospace>GLUE</monospace>) Code
  to facilitate the coupling between scales. The
  <monospace>GLUE</monospace> Code builds upon previous work on
  multiscale coupling
  (<xref alt="Haack et al., 2021" rid="ref-haack2021enabling" ref-type="bibr">Haack
  et al., 2021</xref>;
  <xref alt="Karra et al., 2022" rid="ref-karra2022predictive" ref-type="bibr">Karra
  et al., 2022</xref>;
  <xref alt="Lubbers et al., 2020" rid="ref-lubbers2020modeling" ref-type="bibr">Lubbers
  et al., 2020</xref>;
  <xref alt="R. Pavel et al., 2017" rid="ref-pavel2017using" ref-type="bibr">R.
  Pavel et al., 2017</xref>;
  <xref alt="R. S. Pavel et al., 2015" rid="ref-pavel2015database" ref-type="bibr">R.
  S. Pavel et al., 2015</xref>). At its simplest, we determine what
  physical properties must be exchanged between the various scales and
  derive application programming interfaces (APIs) from these.</p>
  <p>To take advantage of modern supercomputing and exascale platforms
  and we couple our framework directly with
  high-performance-computing-friendly job schedulers. This allows us to
  use one framework to generate training data with a minimal footprint
  (task scheduler can fire off all jobs) and perform “hero-runs” of
  multiscale simulations. At every point, we perform a fine grain
  simulation or utilize an upscaled result from the active learning
  model. The <monospace>GLUE</monospace> Code uses active learning to
  evaluate the level of uncertainty and executes fine grain simulations
  when more training data is required.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The <monospace>GLUE</monospace> Code is a modular framework
  designed to couple different scientific applications to support use
  cases, including multiscale methods and various forms of machine
  learning. The workflow was initially designed around supporting active
  learning as an alternative to coupled applications to support
  multiscale methods but has been written in a sufficiently modular way
  that different machine learning methods can be utilized. Application
  programming interfaces (API) are available for C, C++, Fortran, and
  Python with support for various storage formats. The code also
  provides direct coupling with high performance computing job
  schedulers such as SLURM
  (<xref alt="Yoo et al., 2003" rid="ref-yoo2003slurm" ref-type="bibr">Yoo
  et al., 2003</xref>) and Flux
  (<xref alt="Ahn et al., 2018" rid="ref-ahn2018workflows" ref-type="bibr">Ahn
  et al., 2018</xref>). An overview of the <monospace>GLUE</monospace>
  Code implementation is shown in Fig. 1, where the meso/macro-scale
  solvers BGK, CFDNS, and LBM are also defined.</p>
  <fig>
    <caption><p><styled-content id="figU003Aglue_impl"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="media/GLUEcode.jpeg" xlink:title="" />
  </fig>
  <p><named-content content-type="img_caption">Figure 1: Sample of the
  GLUE Code implementation of our microscale-macroscale coupling. On the
  macroscale simulation (left) sending a request, the GLUE Code (center)
  uses the active learning algorithms (center purple) to determine if
  the model’s uncertainty quantification is such that a new fine grain
  simulation (right) needs to be called. Then either the result of the
  fine grain simulation or the model’s prediction is returned to the
  macroscale simulation. This figure is adapted from Fig. 2 in Diaw et
  al.
  (<xref alt="2020" rid="ref-diaw2020multiscale" ref-type="bibr">2020</xref>).
  </named-content> </p>
  <p>The aim of the <monospace>GLUE</monospace> Code is to efficiently
  handle the communication and interfaces between the computing
  platform, surrogate model, coarse-scale code, and fine-scale code
  (<xref alt="Diaw et al., 2020" rid="ref-diaw2020multiscale" ref-type="bibr">Diaw
  et al., 2020</xref>). At its core, the <monospace>GLUE</monospace>
  Code determines what physical properties need to be exchanged between
  the scales of interest and spawns APIs using this information. The
  <monospace>GLUE</monospace> Code ensures that these physical
  properties are communicated between the various scientific codes
  needed for the given multiscale problem. The
  <monospace>GLUE</monospace> Code uses active learning algorithms to
  evaluate if the model has a high level of uncertainty, and thus, a
  fine grain simulation needs to be executed. At the end of each cycle,
  the framework returns either the result of the fine grain simulation
  or the model’s prediction of the macroscopic simulation.</p>
  <p>Characteristics of the <monospace>GLUE</monospace> code:</p>
  <list list-type="bullet">
    <list-item>
      <p>The <monospace>GLUE</monospace> Code has a modular lightweight
      structure, where each component can be swapped out for a different
      implementation. This is possible due to the APIs structure of the
      framework.</p>
    </list-item>
    <list-item>
      <p>The modularity of the <monospace>GLUE</monospace> code allows
      us to replace a scientific solver with a machine learning
      solution. The scale bridging structures are explicitly defined,
      which allows us to switch between a fine grain MD simulation and
      an ML solution. If a neural network is capable of reproducing the
      same outputs as an MD simulation from the same inputs, then they
      would be functionally identical.</p>
    </list-item>
    <list-item>
      <p>As shown in Fig. 1, the main components of the
      <monospace>GLUE</monospace> Code are a Coarse Grain Solver, an
      active learning backend, a relational database, a job scheduler,
      and the coupling and coordination logic.</p>
    </list-item>
    <list-item>
      <p>The <monospace>GLUE</monospace> Code is written with a
      collection of commodity software as the backend to most of these
      components. Currently, the relational database is supported via
      SQL(ite), while the job scheduler has support for SLURM
      (<xref alt="Yoo et al., 2003" rid="ref-yoo2003slurm" ref-type="bibr">Yoo
      et al., 2003</xref>), Lawrence Livermore National Laboratory’s
      Flux scheduler
      (<xref alt="Ahn et al., 2018" rid="ref-ahn2018workflows" ref-type="bibr">Ahn
      et al., 2018</xref>), and a rudimentary serialization model for
      debugging. Active learning is provided through PyTorch
      (<xref alt="Paszke et al., 2019" rid="ref-paszke2019pytorch" ref-type="bibr">Paszke
      et al., 2019</xref>) and Scikit-Learn
      (<xref alt="Pedregosa et al., 2011" rid="ref-pedregosa2011scikit" ref-type="bibr">Pedregosa
      et al., 2011</xref>).</p>
    </list-item>
    <list-item>
      <p>This approach relies on SQL(ite) for the communication as it is
      a guaranteed atomic read and write that simplifies a lot of our
      efforts at the cost of performance.</p>
    </list-item>
    <list-item>
      <p>For coarse grain simulations, we currently couple with the
      Multi-BGK
      (<xref alt="Los Alamos National Laboratory, n.d." rid="ref-lanl-bgk" ref-type="bibr">Los
      Alamos National Laboratory, n.d.</xref>) as well as additional ICF
      codes. Preliminary studies have been made of coupling with more
      general Lattice Boltzmann simulations for other fields of
      study.</p>
    </list-item>
    <list-item>
      <p>For fine scale simulations, we use a mixture of LAMMPS
      (<xref alt="Plimpton, 1995" rid="ref-plimpton1995fast" ref-type="bibr">Plimpton,
      1995</xref>) and proven analytic solutions; however, one could
      easily switch to another MD solution as long as they have similar
      capabilities.</p>
    </list-item>
    <list-item>
      <p>Since the effectiveness of machine learning methods varies
      depending on the available training data and problem, an
      additional check for any machine learning solution is added to the
      framework. In the <monospace>GLUE</monospace> Code, we query the
      models provided by the machine learning solution for the output
      associated with our inputs. The surrogate model then provides both
      the expected outputs and the uncertainty quantification to
      indicate its confidence that this specific model gave a valid
      answer. If the confidence is too low, the code falls back to
      calling the actual MD simulation and providing the data for the
      machine learning solution to retrain and generate a new surrogate
      model for future use.</p>
    </list-item>
  </list>
  <sec id="concurrent-multiscale-simulations">
    <title>Concurrent multiscale simulations</title>
    <p>As depicted in Fig. 1, the parallelism of the Coarse Grain Solver
    is fully dependent on the solver of choice; however, the
    <monospace>GLUECode_Library</monospace> provides MPI interfaces to
    support distributed applications and all couplings thus far (barring
    hand-written tests for CI purposes) were with distributed coarse
    grain simulations. Initial efforts were made to make the
    <monospace>GLUECode_Library</monospace> calls non-blocking (similar
    to non-blocking communication in MPI), but this was given low
    priority as the coarse grain solvers considered thus far have
    comparatively fast time steps relative to the fine grain solvers and
    do not have a significant amount of work that can be overlapped with
    the cost of the <monospace>GLUE</monospace> Code. Similarly, there
    was work on providing a thread-safe interface for on-node
    parallelism (e.g. OpenMP), but this was similarly given low
    priority.</p>
    <p>A single <monospace>GLUECode_Service</monospace> is primarily a
    series of sequential operations that occur in a persistent service
    and is built around monitoring a task queue. Said task queue allows
    for parallelism via the use of HPC Job Schedulers, but the actual
    computation/generation of ML models, as well as processing of
    requests and results, is sequential. That said, multiple
    <monospace>GLUECode_Service</monospace> instances can be run in
    parallel, and this has been done as a way to lessen congestion for
    particularly large simulation.</p>
    <p>The Fine Grain Solver is once again dependent on the solver. We
    have worked with both GPU-enabled LAMMPS and MPI-enabled LAMMPS and
    the SlurmScheduler and FluxScheduler parts of our json schema
    (<ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/GLUE/blob/1.0/docs/inputSchema.json">https://github.com/lanl/GLUE/blob/1.0/docs/inputSchema.json</ext-link>)
    are specifically set up to provide these configurations.</p>
    <p>The overall GLUECode has a high degree of concurrency and
    resembles fork-join parallelism/MapReduce in practice, even if it
    consists of sequential tasks/stages.</p>
  </sec>
  <sec id="load-imbalance">
    <title>Load imbalance</title>
    <p>We have implemented traditional approaches for load balancing
    used by asynchronous task-based runtimes that rely on some form of a
    task queue and then various work-stealing algorithms. However, due
    to the granularity of our tasks, we offload these tasks to HPC job
    schedulers like Slurm and Flux. By putting this work into a job
    queue, we can use proven tools to schedule those in an efficient
    manner.</p>
    <p>To reduce the load that need to be balanced, we preprocess the
    requests prior to calling functions/subroutines like
    <monospace>bgk_req_batch_subr_f()</monospace>. Aspects of this can
    be found in the function <monospace>preprocess_icf()</monospace>.
    Future work will include better domain-aware scheduling and
    optimizations but, at this stage, we have minimized this so as to
    stress-test the overall GLUECode interface as well as evaluate the
    benefits of active learning-based models.</p>
  </sec>
  <sec id="multiple-formats-and-parsing-tools">
    <title>Multiple formats and parsing tools</title>
    <p>We only provide the interfaces required for the coupling that we
    are working on, as one of the primary goals of this project was to
    provide a minimally invasive tool. Domain experts are the most
    knowledgeable in terms of what they need from each level of the
    simulation; therefore, we largely use co-design to define interfaces
    (e.g.,
    <ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/GLUE/blob/1.0/GLUECode_Library/src/include/alInterface.h">https://github.com/lanl/GLUE/blob/1.0/GLUECode_Library/src/include/alInterface.h</ext-link>)
    as well as using control variables in the overall system
    configuration to utilize the appropriate tools (e.g.,
    <ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/GLUE/blob/1.0/GLUECode_Service/processBGKResult.py">https://github.com/lanl/GLUE/blob/1.0/GLUECode_Service/processBGKResult.py</ext-link>)
    to generate and post-process results.</p>
    <p>The existing tools will be generalized as necessary as new
    couplings are added. However, we aim to keep the interface
    relatively clean, allowing domain experts to take advantage of their
    knowledge and experience with tools like LAMMPS rather than rely on
    us to provide all the interfaces they need.</p>
  </sec>
</sec>
<sec id="code-structure">
  <title>Code structure</title>
  <p>The <monospace>GLUE</monospace> code is organized as follows:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>GLUECode_Library</monospace> contains the C++
      library that is meant to be linked to the coarse grain solver.
      This allows existing applications to couple to the
      <monospace>GLUECode_Service</monospace> with minimal code
      alterations.</p>
    </list-item>
    <list-item>
      <p><monospace>GLUECode_Service</monospace> contains the Python
      scripts that the library communicates with and uses a combination
      of active learning and spawning of fine grain simulation jobs to
      enable and accelerate multiscale scientific applications.</p>
    </list-item>
    <list-item>
      <p><monospace>docs</monospace> contains documentation for the Flux
      scheduler.</p>
    </list-item>
    <list-item>
      <p><monospace>examples</monospace> contains sniff tests for the
      serial and the MPI versions of the code, and utility scripts, such
      as <monospace>pullICFData.py</monospace> that demonstrate how the
      <monospace>GLUE</monospace> Code framework can be used to access
      training data to perform deeper analysis.</p>
    </list-item>
    <list-item>
      <p><monospace>jsonFiles</monospace> contains example input decks
      for the <monospace>GLUE</monospace> Code service.</p>
    </list-item>
    <list-item>
      <p><monospace>lammpsFiles</monospace> contains LAMMPS example
      scripts (<monospace>in.Argon_Deuterium_masses</monospace> and
      <monospace>in.Argon_Deuterium_plasma</monospace>) that compute the
      mutual diffusion for a plasma composed of argon and deuterium at
      different concentrations and temperatures. More information about
      the test cases can be found within the files.</p>
    </list-item>
    <list-item>
      <p><monospace>training</monospace> contains training data required
      for active learning.</p>
    </list-item>
  </list>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The research presented in this article was supported by the
  Laboratory Directed Research and Development program of Los Alamos
  National Laboratory (LANL) under project number 20190005DR and used
  resources provided by the LANL Institutional Computing Program. We
  acknowledge the support of the U.S. Department of Energy through the
  LANL/LDRD Program for this work. AP and JS also acknowledge the Center
  for Non-Linear Studies at LANL. LANL is operated by Triad National
  Security, LLC, for the National Nuclear Security Administration of
  U.S. Department of Energy (Contract No. 89233218CNA000001). Assigned
  LA-UR-22-29746.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-diaw2020multiscale">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Diaw</surname><given-names>A</given-names></name>
        <name><surname>Barros</surname><given-names>K</given-names></name>
        <name><surname>Haack</surname><given-names>J</given-names></name>
        <name><surname>Junghans</surname><given-names>C</given-names></name>
        <name><surname>Keenan</surname><given-names>B</given-names></name>
        <name><surname>Li</surname><given-names>YW</given-names></name>
        <name><surname>Livescu</surname><given-names>D</given-names></name>
        <name><surname>Lubbers</surname><given-names>N</given-names></name>
        <name><surname>McKerns</surname><given-names>M</given-names></name>
        <name><surname>Pavel</surname><given-names>RS</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Multiscale simulation of plasma flows using active learning</article-title>
      <source>Physical Review E</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>102</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1103/physreve.102.023310</pub-id>
      <fpage>023310</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-liboff1959transport">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Liboff</surname><given-names>Richard L</given-names></name>
      </person-group>
      <article-title>Transport coefficients determined using the shielded Coulomb potential</article-title>
      <source>The Physics of Fluids</source>
      <publisher-name>American Institute of Physics</publisher-name>
      <year iso-8601-date="1959">1959</year>
      <volume>2</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1063/1.1724389</pub-id>
      <fpage>40</fpage>
      <lpage>46</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rosenberg2015assessment">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rosenberg</surname><given-names>MJ</given-names></name>
        <name><surname>Séguin</surname><given-names>FH</given-names></name>
        <name><surname>Amendt</surname><given-names>PA</given-names></name>
        <name><surname>Atzeni</surname><given-names>S</given-names></name>
        <name><surname>Rinderknecht</surname><given-names>HG</given-names></name>
        <name><surname>Hoffman</surname><given-names>NM</given-names></name>
        <name><surname>Zylstra</surname><given-names>AB</given-names></name>
        <name><surname>Li</surname><given-names>CK</given-names></name>
        <name><surname>Sio</surname><given-names>H</given-names></name>
        <name><surname>Gatu Johnson</surname><given-names>M</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Assessment of ion kinetic effects in shock-driven inertial confinement fusion implosions using fusion burn imaging</article-title>
      <source>Physics of Plasmas</source>
      <publisher-name>AIP Publishing LLC</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>22</volume>
      <issue>6</issue>
      <pub-id pub-id-type="doi">10.1063/1.4921935</pub-id>
      <fpage>062702</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-rinderknecht2014first">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rinderknecht</surname><given-names>HG</given-names></name>
        <name><surname>Sio</surname><given-names>H</given-names></name>
        <name><surname>Li</surname><given-names>CK</given-names></name>
        <name><surname>Zylstra</surname><given-names>AB</given-names></name>
        <name><surname>Rosenberg</surname><given-names>MJ</given-names></name>
        <name><surname>Amendt</surname><given-names>P</given-names></name>
        <name><surname>Delettrez</surname><given-names>J</given-names></name>
        <name><surname>Bellei</surname><given-names>C</given-names></name>
        <name><surname>Frenje</surname><given-names>JA</given-names></name>
        <name><surname>Johnson</surname><given-names>M Gatu</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>First observations of nonhydrodynamic mix at the fuel-shell interface in shock-driven inertial confinement implosions</article-title>
      <source>Physical Review Letters</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2014">2014</year>
      <volume>112</volume>
      <issue>13</issue>
      <pub-id pub-id-type="doi">10.1103/physrevlett.112.135001</pub-id>
      <fpage>135001</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ross2017transition">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ross</surname><given-names>JS</given-names></name>
        <name><surname>Higginson</surname><given-names>DP</given-names></name>
        <name><surname>Ryutov</surname><given-names>D</given-names></name>
        <name><surname>Fiuza</surname><given-names>F</given-names></name>
        <name><surname>Hatarik</surname><given-names>R</given-names></name>
        <name><surname>Huntington</surname><given-names>CM</given-names></name>
        <name><surname>Kalantar</surname><given-names>DH</given-names></name>
        <name><surname>Link</surname><given-names>A</given-names></name>
        <name><surname>Pollock</surname><given-names>BB</given-names></name>
        <name><surname>Remington</surname><given-names>BA</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Transition from collisional to collisionless regimes in interpenetrating plasma flows on the National Ignition Facility</article-title>
      <source>Physical Review Letters</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>118</volume>
      <issue>18</issue>
      <pub-id pub-id-type="doi">10.1103/PhysRevLett.118.185003</pub-id>
      <fpage>185003</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-marinak1998comparison">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Marinak</surname><given-names>MM</given-names></name>
        <name><surname>Haan</surname><given-names>SW</given-names></name>
        <name><surname>Dittrich</surname><given-names>TR</given-names></name>
        <name><surname>Tipton</surname><given-names>RE</given-names></name>
        <name><surname>Zimmerman</surname><given-names>GB</given-names></name>
      </person-group>
      <article-title>A comparison of three-dimensional multimode hydrodynamic instability growth on various National Ignition Facility capsule designs with HYDRA simulations</article-title>
      <source>Physics of Plasmas</source>
      <publisher-name>American Institute of Physics</publisher-name>
      <year iso-8601-date="1998">1998</year>
      <volume>5</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1063/1.872643</pub-id>
      <fpage>1125</fpage>
      <lpage>1132</lpage>
    </element-citation>
  </ref>
  <ref id="ref-glosli2007extending">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Glosli</surname><given-names>James N</given-names></name>
        <name><surname>Richards</surname><given-names>David F</given-names></name>
        <name><surname>Caspersen</surname><given-names>Kyle J</given-names></name>
        <name><surname>Rudd</surname><given-names>Robert E</given-names></name>
        <name><surname>Gunnels</surname><given-names>John A</given-names></name>
        <name><surname>Streitz</surname><given-names>Frederick H</given-names></name>
      </person-group>
      <article-title>Extending stability beyond CPU millennium: A micron-scale atomistic simulation of Kelvin-Helmholtz instability</article-title>
      <source>SC’07: Proceedings of the 2007 ACM/IEEE conference on supercomputing</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <pub-id pub-id-type="doi">10.1145/1362622.1362700</pub-id>
      <fpage>1</fpage>
      <lpage>11</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ahn2018workflows">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ahn</surname><given-names>D. H.</given-names></name>
        <name><surname>Bass</surname><given-names>N.</given-names></name>
        <name><surname>Chu</surname><given-names>A.</given-names></name>
        <name><surname>Garlick</surname><given-names>J.</given-names></name>
        <name><surname>Grondona</surname><given-names>M.</given-names></name>
        <name><surname>Herbein</surname><given-names>S.</given-names></name>
        <name><surname>Koning</surname><given-names>J.</given-names></name>
        <name><surname>Patki</surname><given-names>T.</given-names></name>
        <name><surname>Scogland</surname><given-names>T. R.</given-names></name>
        <name><surname>Springmeyer</surname><given-names>B.</given-names></name>
      </person-group>
      <article-title>Workflows in support of large-scale science (WORKS’18)</article-title>
      <source>Proceedings of the 2018 ACM/IEEE workflows in support of large-scale science (WORKS’18)</source>
      <publisher-name>IEEE, Los Alamitos, CA, 2018</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <fpage>10</fpage>
      <lpage>19</lpage>
    </element-citation>
  </ref>
  <ref id="ref-plimpton1995fast">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Plimpton</surname><given-names>Steve</given-names></name>
      </person-group>
      <article-title>Fast parallel algorithms for short-range molecular dynamics</article-title>
      <source>Journal of computational physics</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="1995">1995</year>
      <volume>117</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.2172/10176421</pub-id>
      <fpage>1</fpage>
      <lpage>19</lpage>
    </element-citation>
  </ref>
  <ref id="ref-yoo2003slurm">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Yoo</surname><given-names>Andy B</given-names></name>
        <name><surname>Jette</surname><given-names>Morris A</given-names></name>
        <name><surname>Grondona</surname><given-names>Mark</given-names></name>
      </person-group>
      <article-title>Slurm: Simple Linux utility for resource management</article-title>
      <source>Workshop on job scheduling strategies for parallel processing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2003">2003</year>
      <pub-id pub-id-type="doi">10.1007/10968987_3</pub-id>
      <fpage>44</fpage>
      <lpage>60</lpage>
    </element-citation>
  </ref>
  <ref id="ref-paszke2019pytorch">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>Gross</surname><given-names>Sam</given-names></name>
        <name><surname>Massa</surname><given-names>Francisco</given-names></name>
        <name><surname>Lerer</surname><given-names>Adam</given-names></name>
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Chanan</surname><given-names>Gregory</given-names></name>
        <name><surname>Killeen</surname><given-names>Trevor</given-names></name>
        <name><surname>Lin</surname><given-names>Zeming</given-names></name>
        <name><surname>Gimelshein</surname><given-names>Natalia</given-names></name>
        <name><surname>Antiga</surname><given-names>Luca</given-names></name>
        <name><surname>Desmaison</surname><given-names>Alban</given-names></name>
        <name><surname>Kopf</surname><given-names>Andreas</given-names></name>
        <name><surname>Yang</surname><given-names>Edward</given-names></name>
        <name><surname>DeVito</surname><given-names>Zachary</given-names></name>
        <name><surname>Raison</surname><given-names>Martin</given-names></name>
        <name><surname>Tejani</surname><given-names>Alykhan</given-names></name>
        <name><surname>Chilamkurthy</surname><given-names>Sasank</given-names></name>
        <name><surname>Steiner</surname><given-names>Benoit</given-names></name>
        <name><surname>Fang</surname><given-names>Lu</given-names></name>
        <name><surname>Bai</surname><given-names>Junjie</given-names></name>
        <name><surname>Chintala</surname><given-names>Soumith</given-names></name>
      </person-group>
      <article-title>PyTorch: An imperative style, high-performance deep learning library</article-title>
      <publisher-name>Curran Associates, Inc.</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <uri>http://papers.neurips.cc/paper/9015-pytorch-an-imperative-style-high-performance-deep-learning-library.pdf</uri>
      <fpage>8024</fpage>
      <lpage>8035</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pedregosa2011scikit">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Gramfort</surname><given-names>Alexandre</given-names></name>
        <name><surname>Michel</surname><given-names>Vincent</given-names></name>
        <name><surname>Thirion</surname><given-names>Bertrand</given-names></name>
        <name><surname>Grisel</surname><given-names>Olivier</given-names></name>
        <name><surname>Blondel</surname><given-names>Mathieu</given-names></name>
        <name><surname>Prettenhofer</surname><given-names>Peter</given-names></name>
        <name><surname>Weiss</surname><given-names>Ron</given-names></name>
        <name><surname>Dubourg</surname><given-names>Vincent</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Scikit-learn: Machine learning in Python</article-title>
      <source>the Journal of machine Learning research</source>
      <publisher-name>JMLR. org</publisher-name>
      <year iso-8601-date="2011">2011</year>
      <volume>12</volume>
      <fpage>2825</fpage>
      <lpage>2830</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mckerns2012building">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>McKerns</surname><given-names>Michael M</given-names></name>
        <name><surname>Strand</surname><given-names>Leif</given-names></name>
        <name><surname>Sullivan</surname><given-names>Tim</given-names></name>
        <name><surname>Fang</surname><given-names>Alta</given-names></name>
        <name><surname>Aivazis</surname><given-names>Michael AG</given-names></name>
      </person-group>
      <article-title>Building a framework for predictive science</article-title>
      <source>Proceedings of the 10th Python in Science Conference, arXiv preprint arXiv:1202.1056</source>
      <year iso-8601-date="2011">2011</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1202.1056</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mysticGit">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Michael McKerns</surname><given-names>Patrick Hung</given-names></name>
        <name><surname>Aivazis</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>Mystic: Highly-constrained non-convex optimization and UQ</article-title>
      <year iso-8601-date="2019">2019</year>
      <uri>https://uqfoundation.github.io/project/mystic</uri>
    </element-citation>
  </ref>
  <ref id="ref-pavel2015database">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Pavel</surname><given-names>Robert S</given-names></name>
        <name><surname>McPherson</surname><given-names>Allen L</given-names></name>
        <name><surname>Germann</surname><given-names>Timothy C</given-names></name>
        <name><surname>Junghans</surname><given-names>Christoph</given-names></name>
      </person-group>
      <article-title>Database assisted distribution to improve fault tolerance for multiphysics applications</article-title>
      <source>Proceedings of the 2nd international workshop on hardware-software co-design for high performance computing</source>
      <year iso-8601-date="2015">2015</year>
      <pub-id pub-id-type="doi">10.1145/2834899.2834908</pub-id>
      <fpage>1</fpage>
      <lpage>8</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pavel2017using">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Pavel</surname><given-names>Robert</given-names></name>
        <name><surname>Junghans</surname><given-names>Christoph</given-names></name>
        <name><surname>Mniszewski</surname><given-names>Susan M</given-names></name>
        <name><surname>Germann</surname><given-names>Timothy C</given-names></name>
      </person-group>
      <article-title>Using Charm++ to support multiscale multiphysics on the Trinity supercomputer</article-title>
      <source>Proceedings of the programming models and co-design meeting</source>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-haack2021enabling">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Haack</surname><given-names>Jeff</given-names></name>
        <name><surname>Diaw</surname><given-names>Abdourahmane</given-names></name>
        <name><surname>Pavel</surname><given-names>Robert</given-names></name>
        <name><surname>Sagert</surname><given-names>Irina</given-names></name>
        <name><surname>Keenan</surname><given-names>Brett</given-names></name>
        <name><surname>Livescu</surname><given-names>Daniel</given-names></name>
        <name><surname>Lubbers</surname><given-names>Nick</given-names></name>
        <name><surname>McKerns</surname><given-names>Mike</given-names></name>
        <name><surname>Junghans</surname><given-names>Christoph</given-names></name>
        <name><surname>Germann</surname><given-names>Timothy</given-names></name>
      </person-group>
      <article-title>Enabling predictive scale-bridging simulations through active learning</article-title>
      <source>APS division of plasma physics meeting abstracts</source>
      <year iso-8601-date="2021">2021</year>
      <volume>2021</volume>
      <fpage>ZO03</fpage>
      <lpage>012</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lanl-bgk">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Los Alamos National Laboratory</string-name>
      </person-group>
      <article-title>LANL/Multi-BGK: Conservative multispecies kinetic equation solver</article-title>
      <source>GitHub</source>
      <uri>https://github.com/lanl/Multi-BGK</uri>
    </element-citation>
  </ref>
  <ref id="ref-cappello2009fault">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cappello</surname><given-names>Franck</given-names></name>
      </person-group>
      <article-title>Fault tolerance in petascale/exascale systems: Current knowledge, challenges and research opportunities</article-title>
      <source>The International Journal of High Performance Computing Applications</source>
      <publisher-name>Sage Publications Sage UK: London, England</publisher-name>
      <year iso-8601-date="2009">2009</year>
      <volume>23</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1177/1094342009106189</pub-id>
      <fpage>212</fpage>
      <lpage>226</lpage>
    </element-citation>
  </ref>
  <ref id="ref-koo1987checkpointing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Koo</surname><given-names>Richard</given-names></name>
        <name><surname>Toueg</surname><given-names>Sam</given-names></name>
      </person-group>
      <article-title>Checkpointing and rollback-recovery for distributed systems</article-title>
      <source>IEEE Transactions on software Engineering</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="1987">1987</year>
      <issue>1</issue>
      <fpage>23</fpage>
      <lpage>31</lpage>
    </element-citation>
  </ref>
  <ref id="ref-krekeler2018adaptive">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Krekeler</surname><given-names>Christian</given-names></name>
        <name><surname>Agarwal</surname><given-names>Animesh</given-names></name>
        <name><surname>Junghans</surname><given-names>Christoph</given-names></name>
        <name><surname>Praprotnik</surname><given-names>Matej</given-names></name>
        <name><surname>Delle Site</surname><given-names>Luigi</given-names></name>
      </person-group>
      <article-title>Adaptive resolution molecular dynamics technique: Down to the essential</article-title>
      <source>The Journal of chemical physics</source>
      <publisher-name>AIP Publishing LLC</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>149</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1063/1.5031206</pub-id>
      <fpage>024104</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-nagarajan2013multiscale">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nagarajan</surname><given-names>Anu</given-names></name>
        <name><surname>Junghans</surname><given-names>Christoph</given-names></name>
        <name><surname>Matysiak</surname><given-names>Silvina</given-names></name>
      </person-group>
      <article-title>Multiscale simulation of liquid water using a four-to-one mapping for coarse-graining</article-title>
      <source>Journal of Chemical Theory and Computation</source>
      <publisher-name>ACS Publications</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <volume>9</volume>
      <issue>11</issue>
      <pub-id pub-id-type="doi">10.1021/ct400566j</pub-id>
      <fpage>5168</fpage>
      <lpage>5175</lpage>
    </element-citation>
  </ref>
  <ref id="ref-karra2022predictive">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Karra</surname><given-names>Satish</given-names></name>
        <name><surname>Mehana</surname><given-names>Mohamed</given-names></name>
        <name><surname>Lubbers</surname><given-names>Nicholas</given-names></name>
        <name><surname>Chen</surname><given-names>Yu</given-names></name>
        <name><surname>Diaw</surname><given-names>Abdourahmane</given-names></name>
        <name><surname>Santos</surname><given-names>Javier E</given-names></name>
        <name><surname>Pachalieva</surname><given-names>Aleksandra</given-names></name>
        <name><surname>Pavel</surname><given-names>Robert S</given-names></name>
        <name><surname>Haack</surname><given-names>Jeffrey R</given-names></name>
        <name><surname>McKerns</surname><given-names>Michael</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Predictive scale-bridging simulations through active learning</article-title>
      <source>arXiv preprint arXiv:2209.09811</source>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.48550/ARXIV.2209.09811</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-lubbers2020modeling">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lubbers</surname><given-names>Nicholas</given-names></name>
        <name><surname>Agarwal</surname><given-names>Animesh</given-names></name>
        <name><surname>Chen</surname><given-names>Yu</given-names></name>
        <name><surname>Son</surname><given-names>Soyoun</given-names></name>
        <name><surname>Mehana</surname><given-names>Mohamed</given-names></name>
        <name><surname>Kang</surname><given-names>Qinjun</given-names></name>
        <name><surname>Karra</surname><given-names>Satish</given-names></name>
        <name><surname>Junghans</surname><given-names>Christoph</given-names></name>
        <name><surname>Germann</surname><given-names>Timothy C</given-names></name>
        <name><surname>Viswanathan</surname><given-names>Hari S</given-names></name>
      </person-group>
      <article-title>Modeling and scale-bridging using machine learning: Nanoconfinement effects in porous media</article-title>
      <source>Scientific Reports</source>
      <publisher-name>Nature Publishing Group</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>10</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1038/s41598-020-69661-0</pub-id>
      <fpage>1</fpage>
      <lpage>13</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
