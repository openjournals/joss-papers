<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8622</article-id>
<article-id pub-id-type="doi">10.21105/joss.08622</article-id>
<title-group>
<article-title>matlab-igraph: bringing igraph to MATLAB</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4841-6756</contrib-id>
<name>
<surname>Connell</surname>
<given-names>David R.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Independent Researcher, United States</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-06-18">
<day>18</day>
<month>6</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>8622</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>matlab</kwd>
<kwd>graph algorithms</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>High-throughput lab techniques have enabled systems biology to view
  medicine through networks rather than through individual genes or gene
  pairs
  (<xref alt="Goh et al., 2007" rid="ref-goh07_human_diseas_networ" ref-type="bibr">Goh
  et al., 2007</xref>). Using graph approaches, we can learn generic
  patterns that apply to many sets of genes, proteins, diseases, etc.
  simultaneously, vastly improving the rate we can find disease genes
  and enabling the transfer of knowledge between disorders. I created
  <monospace>matlab-igraph</monospace>, a toolbox that integrates the
  efficient graph algorithms and tools of the igraph C library
  (<xref alt="Csardi &amp; Nepusz, 2006" rid="ref-csardi06_igrap_softw" ref-type="bibr">Csardi
  &amp; Nepusz, 2006</xref>) into MATLAB‚Äôs environment to aid in graph
  based research. By representing graphs using MATLAB‚Äôs builtin types, I
  maintain a simple syntax while leveraging compiled C code to simplify
  graph analysis without sacrificing efficiency, enabling users to focus
  on their experiments.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>MATLAB is a powerful tool for numerical analysis that is widely
  used in academia alongside Python and R, but unlike Python and R, it
  lacked support for igraph, a gap filled by
  <monospace>matlab-igraph</monospace>. Without
  <monospace>matlab-igraph</monospace>, researchers would need to
  rewrite algorithms specifically for MATLAB, which not only takes time
  but also risks errors. Development of
  <monospace>matlab-igraph</monospace> begun with work on the SpeakEasy2
  community detection algorithm
  (<xref alt="Gaiteri et al., 2023" rid="ref-gaiteri23_robus_scalab_infor_clust_diver_biolog_networ" ref-type="bibr">Gaiteri
  et al., 2023</xref>), which needed to score partitions, using methods
  like modularity and normalized mutual information, and compare results
  to current community detection algorithms such as Leiden and InfoMAP.
  By making graph algorithms available to MATLAB, the
  <monospace>matlab-igraph</monospace> toolbox allows easy comparisons
  against state-of-the-art methods. This package has two goals: to bring
  igraph functions into MATLAB for end users, and to ease development of
  new graph methods in C using the <monospace>mxIgraph</monospace>
  interface library and the <monospace>igutils</monospace>
  namespace.</p>
  <sec id="use-in-matlab">
    <title>Use in MATLAB</title>
    <p>To take advantage of MATLAB‚Äôs strong matrix support, I designed
    the toolbox to support representing graphs as adjacency matrices,
    allowing cooperation between MATLAB builtins and igraph functions.
    For graphs that require more metadata, MATLAB‚Äôs own
    <monospace>graph</monospace> and <monospace>digraph</monospace>
    classes can be used as well, which explicitly track directedness and
    can store igraph‚Äôs node and edge attributes. All functions that
    accept a graph can read <monospace>graph</monospace> classes or
    matrices and functions that return a graph accept the
    <monospace>repr</monospace> keyword to choose between a full matrix,
    sparse matrix, or graph class. This design choice streamlines
    workflows, allowing researchers to combine MATLAB‚Äôs native functions
    with igraph‚Äôs algorithms without the need for a new igraph specific
    data type, converting between representations, or redundant
    coding.</p>
  </sec>
  <sec id="comparison-to-builtin-graph-algorithms">
    <title>Comparison to builtin graph algorithms</title>
    <p>While MATLAB provides graph datatypes and a few algorithms for
    those graphs, the set of available graph algorithms is limited and
    does not provide recently published methods. The igraph library
    provides many missing algorithms made accessible to MATLAB through
    this toolbox, including those pertaining to generating graphs (such
    as through <monospace>generate</monospace> or
    <monospace>randgame</monospace> for stochastic graphs), reading and
    writing common graph file types, community detection, comparing
    community structure, and rewiring graphs. All methods supplied by
    <monospace>matlab-igraph</monospace> work on the graph datatypes but
    they can also be applied directly to matrices, in contrast to the
    builtin graph algorithms which can only be used with graphs types,
    allowing users to continue working with the matrix syntax
    experienced MATLAB programmers have become familiar with. For this
    reason, <monospace>matlab-igraph</monospace> provides replacements
    for several builtin functions like <monospace>numnodes</monospace>
    and <monospace>numedges</monospace>,
    <monospace>isisomorphic</monospace>, <monospace>degree</monospace>,
    etc. that will work equivalently on both adjacency matrices and
    graphs, making it simple to create higher level graph functions that
    can be used with either datatype.</p>
  </sec>
  <sec id="mxigraph">
    <title>mxIgraph</title>
    <p>In addition to the igraph functions, I provide a standard for
    creating new graph functions using MATLAB‚Äôs mex engine and the
    igraph C library to compile code for use in MATLAB. To aid with
    this, the toolbox includes the bridge C library
    <monospace>mxIgraph</monospace> for communicating between MATLAB‚Äôs C
    API and igraph and the <monospace>igutils</monospace> namespace for
    consistent argument handling throughout the toolbox. The
    <monospace>mxIgraph</monospace> library exposes functions for
    converting between MATLAB and igraph data types, predicates for
    working with graphs, and a set of methods for parsing argument
    structures created by MATLAB‚Äôs argument blocks in C. When large
    graphs are involved, C can reduce the memory demand over writing in
    MATLAB. Specifically, memory usage can be an issue in MATLAB when
    using ‚Äúpairwise‚Äìreduce‚Äù patterns or parallel computation. For
    computation on vectors, a common pattern is performing a pairwise
    function (like an outer-product) on two vectors and then reducing
    over an axis. For an <inline-formula><alternatives>
    <tex-math><![CDATA[m \times{} 1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>m</mml:mi><mml:mo>√ó</mml:mo><mml:mrow></mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    and an <inline-formula><alternatives>
    <tex-math><![CDATA[n \times{} 1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>n</mml:mi><mml:mo>√ó</mml:mo><mml:mrow></mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    vector, this leads to an <inline-formula><alternatives>
    <tex-math><![CDATA[m \times n]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>m</mml:mi><mml:mo>√ó</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
    intermediary matrix that is then reduced back down to a vector with
    a sum along the rows or similar operation. By using for-loops in C
    instead of high-level linear algebra packages, the final vector can
    be created directly. This reduces the <inline-formula><alternatives>
    <tex-math><![CDATA[\mathcal{O}(mn)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ùí™</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    memory requirements to <inline-formula><alternatives>
    <tex-math><![CDATA[\mathcal{O}(m)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ùí™</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>m</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.
    If the code can be written to run in parallel, C supports
    multithreading, in contrast to MATLAB‚Äôs parallel toolbox which is
    based on multiprocessing, a technique that requires cloning data
    across each worker, potentially exhausting memory when used with
    large graphs, while high overhead can cause performance to be worse
    than serial processing for smaller graphs. Multithreading allows
    memory to be shared across threads, enabling efficient parallel
    processing on graphs of all sizes and does not require the MATLAB
    parallel toolbox.</p>
    <p>The <monospace>igutils</monospace> namespace within the toolbox
    complements the <monospace>mxIgraph</monospace> by standardizing
    parsing of common arguments, ensuring consistency across functions.
    For example, <monospace>igutils</monospace> provides argument parser
    classes for functions that accept graphs and a second for those that
    return a graph, these classes organize common arguments and define
    acceptable values in a single location. If
    <monospace>mxIgraph</monospace> is extended to handle other types in
    the future, all MATLAB functions using the
    <monospace>igutils</monospace> classes and predicates for argument
    parsing will automatically be updated as well. Together, these
    components lower the barrier to implement efficient graph code for
    MATLAB.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-csardi06_igrap_softw">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Csardi</surname><given-names>Gabor</given-names></name>
        <name><surname>Nepusz</surname><given-names>Tamas</given-names></name>
      </person-group>
      <article-title>The igraph software</article-title>
      <source>Complex syst</source>
      <year iso-8601-date="2006">2006</year>
      <volume>1695</volume>
      <fpage>1</fpage>
      <lpage>9</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gaiteri23_robus_scalab_infor_clust_diver_biolog_networ">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gaiteri</surname><given-names>Chris</given-names></name>
        <name><surname>Connell</surname><given-names>David R.</given-names></name>
        <name><surname>Sultan</surname><given-names>Faraz A.</given-names></name>
        <name><surname>Iatrou</surname><given-names>Artemis</given-names></name>
        <name><surname>Ng</surname><given-names>Bernard</given-names></name>
        <name><surname>Szymanski</surname><given-names>Boleslaw K.</given-names></name>
        <name><surname>Zhang</surname><given-names>Ada</given-names></name>
        <name><surname>Tasaki</surname><given-names>Shinya</given-names></name>
      </person-group>
      <article-title>Robust, scalable, and informative clustering for diverse biological networks</article-title>
      <source>Genome Biology</source>
      <year iso-8601-date="2023">2023</year>
      <volume>24</volume>
      <issue>1</issue>
      <uri>http://dx.doi.org/10.1186/s13059-023-03062-0</uri>
      <pub-id pub-id-type="doi">10.1186/s13059-023-03062-0</pub-id>
      <fpage>228</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-goh07_human_diseas_networ">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Goh</surname><given-names>Kwang-Il</given-names></name>
        <name><surname>Cusick</surname><given-names>Michael E</given-names></name>
        <name><surname>Valle</surname><given-names>David</given-names></name>
        <name><surname>Childs</surname><given-names>Barton</given-names></name>
        <name><surname>Vidal</surname><given-names>Marc</given-names></name>
        <name><surname>Barab√°si</surname><given-names>Albert-L√°szl√≥</given-names></name>
      </person-group>
      <article-title>The human disease network</article-title>
      <source>Proceedings of the National Academy of Sciences</source>
      <year iso-8601-date="2007">2007</year>
      <volume>104</volume>
      <issue>21</issue>
      <uri>https://doi.org/10.1073/pnas.0701361104</uri>
      <pub-id pub-id-type="doi">10.1073/pnas.0701361104</pub-id>
      <fpage>8685</fpage>
      <lpage>8690</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
