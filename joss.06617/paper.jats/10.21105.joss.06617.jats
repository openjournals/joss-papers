<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6617</article-id>
<article-id pub-id-type="doi">10.21105/joss.06617</article-id>
<title-group>
<article-title>Empirical: A scientific software library for research,
education, and public engagement</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7216-5283</contrib-id>
<name>
<surname>Vostinar</surname>
<given-names>Anya</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0994-2718</contrib-id>
<name>
<surname>Lalejini</surname>
<given-names>Alexander</given-names>
</name>
<xref ref-type="aff" rid="aff-8"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2924-1732</contrib-id>
<name>
<surname>Ofria</surname>
<given-names>Charles</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8616-4898</contrib-id>
<name>
<surname>Dolson</surname>
<given-names>Emily</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4726-4479</contrib-id>
<name>
<surname>Moreno</surname>
<given-names>Matthew Andres</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="aff" rid="aff-5"/>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>BEACON Center for the Study of Evolution in Action,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Computer Science and Engineering, Michigan State
University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Ecology, Evolutionary Biology, and Behavior, Michigan State
University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Computer Science, Carleton College, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Ecology and Evolutionary Biology, University of Michigan,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Center for the Study of Complex Systems, University of
Michigan, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Michigan Institute for Data Science, University of
Michigan, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-8">
<institution-wrap>
<institution>Computer Science, Grand Valley State University,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-02-13">
<day>13</day>
<month>2</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>98</issue>
<fpage>6617</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>Simulation</kwd>
<kwd>Agent-based modeling</kwd>
<kwd>Emscripten</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Empirical is a C++ library designed to promote open science and
  facilitate the development of scientific software that is efficient,
  reliable, and easily distributable to researchers and non-experts
  alike. Specifically, the library sets out to fulfill the following
  goals:</p>
  <list list-type="order">
    <list-item>
      <p><bold>Utility:</bold> Empirical tools streamline common
      scientific computing tasks such as configuration, end-to-end data
      management, and mathematical manipulations.</p>
    </list-item>
    <list-item>
      <p><bold>Efficiency:</bold> Empirical implements general-purpose
      data structures and algorithms that emphasize computational
      efficiency to support scientific computing workloads.</p>
    </list-item>
    <list-item>
      <p><bold>Reliability:</bold> Empirical provides sophisticated
      debug-mode instrumentation including audited memory management and
      safety-checked versions of standard library containers.</p>
    </list-item>
    <list-item>
      <p><bold>Distributability:</bold> Empirical is highly portable,
      uses common data formats, and facilitates compile-to-web app
      development with object-oriented bindings for
      Emscripten/WebAssembly GUI elements, all with the goal of building
      broadly accessible scientific software.</p>
    </list-item>
  </list>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>High quality open-science tools improve code quality, scientific
  rigor, and ease of replication or extension for scientific software.
  Empirical’s debugging suite combats C++ programming pitfalls, such as
  iterator invalidation, memory leakage, and out-of-bounds indexing.
  Throughout, library design achieves both performance and safety
  through compile-time toggling of checks for undefined or incorrect
  behavior.</p>
  <p>Unfortunately, in practice, scientific software is often difficult
  to obtain, install, or use. Modern web-based interfaces give
  computational research the potential to better embody open science
  objectives by empowering easier and more complete access
  (<xref alt="Woelfle et al., 2011" rid="ref-woelfle2011open" ref-type="bibr">Woelfle
  et al., 2011</xref>). Empirical leverages modern web technology to
  provide browser-based interactive interfaces for C++ source code.</p>
</sec>
<sec id="empirical-features">
  <title>Empirical Features</title>
  <sec id="better-code-for-scientific-software">
    <title>Better Code for Scientific Software</title>
    <p>Empirical components are subjected to structured code review,
    unit testing with coverage tracking, and other best practices
    detailed
    <ext-link ext-link-type="uri" xlink:href="https://empirical.readthedocs.io/en/latest/dev/empirical-development-practices.html">in
    our documentation</ext-link>. Effort invested into optimization of
    the library’s utilities enables developer-users to more easily
    produce safe and efficient software, especially for new developers.
    We provide a
    <ext-link ext-link-type="uri" xlink:href="https://github.com/devosoft/cookiecutter-empirical-project">template
    project</ext-link> that streamlines laying out crosscompilation
    boilerplate.</p>
    <p>As an example of Emprical’s utility, the library provides a
    configuration framework that includes utilities to</p>
    <list list-type="bullet">
      <list-item>
        <p>create documented configuration parameters with default
        values in a single line of C++ code,</p>
      </list-item>
      <list-item>
        <p>adjust parameters via configuration files, command line
        flags, URL query parameters, or in-browser GUIs,</p>
      </list-item>
      <list-item>
        <p>perform on-the-fly configuration adjustments, and</p>
      </list-item>
      <list-item>
        <p>support independent configuration subsystems.</p>
      </list-item>
    </list>
    <p>High-quality software needs a robust, inclusive, and diverse
    community of users and contributors. Our
    <ext-link ext-link-type="uri" xlink:href="https://empirical.readthedocs.io/en/latest/dev/empirical-development-practices.html">development
    practices</ext-link> reflect this priority.</p>
  </sec>
  <sec id="realizing-the-promise-of-emscripten-based-web-uis">
    <title>Realizing the Promise of Emscripten-based Web UIs</title>
    <p>Educational editions of scientific software promote classroom
    learning and citizen science. The Emscripten compiler enables an
    existing native codebase to additionally compile to the web
    (<xref alt="Zakai, 2011" rid="ref-zakai2011emscripten" ref-type="bibr">Zakai,
    2011</xref>). Browser-based delivery can yield particularly
    effective public-facing apps due to easy access and compelling
    interfaces.</p>
    <p>Empirical amplifies Emscripten by fleshing out its interface for
    interaction with browser elements. DOM elements are bound to
    corresponding C++ objects (e.g., <monospace>emp::Button</monospace>
    manages a <monospace>&lt;button&gt;</monospace> and
    <monospace>emp::Canvas</monospace> manages a
    <monospace>&lt;canvas&gt;</monospace>) and are easily manipulated
    from within C++. Empirical also packages collections of
    prefabricated web widgets (e.g., configuration managers or
    collapsible data displays). These tools simplify generating a
    mobile-friendly, web-based GUI.</p>
    <p>A live demo of Empirical widgets, presented alongside their
    source C++ code, is available
    <ext-link ext-link-type="uri" xlink:href="https://devosoft.github.io/empirical-prefab-demo/empirical-prefab-demo">here</ext-link>.</p>
  </sec>
  <sec id="runtime-efficiency">
    <title>Runtime Efficiency</title>
    <p>WebAssembly’s runtime efficiency — achieving 50% to 90% of native
    performance
    (<xref alt="Jangda et al., 2019" rid="ref-jangda2019not" ref-type="bibr">Jangda
    et al., 2019</xref>) — has driven adoption in web development
    (<xref alt="Haas et al., 2017" rid="ref-haas2017bringing" ref-type="bibr">Haas
    et al., 2017</xref>) and enabled new possibilities for browser-based
    scientific computation. For example,
    <ext-link ext-link-type="uri" xlink:href="https://avida-ed.msu.edu/">Avida-ED</ext-link>
    leverages WebAssembly to incorporate sophisticated agent-based
    evolution models into classroom activities.</p>
    <p>More broadly, Empirical provides optimized tools for
    performance-critical tasks. For example,
    <monospace>emp::BitArray</monospace> and
    <monospace>emp::BitVector</monospace> are faster drop-in
    replacements for their standard library equivalents
    (<monospace>std::bitset</monospace> and
    <monospace>std::vector&lt;bool&gt;</monospace>) with extensive
    additional functionality. More fundamentally, Empirical’s
    header-only design prioritizes ease of use and runtime performance,
    albeit at the cost of longer compilation times.</p>
  </sec>
  <sec id="debugging">
    <title>Debugging</title>
    <p>Although performant, C++’s permissiveness to out-of-bounds
    indexing or memory management errors can undermine the validity of
    generated data and analyses. Standard library vendors — like
    <ext-link ext-link-type="uri" xlink:href="https://web.archive.org/web/20210118212109/https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html"><monospace>libstdc++</monospace></ext-link>,
    <ext-link ext-link-type="uri" xlink:href="https://web.archive.org/web/20210414014331/https://libcxx.llvm.org/docs/DesignDocs/DebugMode.html"><monospace>libc++</monospace></ext-link>,
    and
    <ext-link ext-link-type="uri" xlink:href="https://web.archive.org/web/20210121201948/https://docs.microsoft.com/en-us/cpp/standard-library/checked-iterators?view=msvc-160"><monospace>stl</monospace></ext-link>
    — provide some runtime safety features, but these are incomplete and
    poorly documented<xref ref-type="fn" rid="fn1">1</xref>. Empirical
    supplements vendor offerings with debug mode stand-ins for standard
    library containers and even raw pointers that can identify memory
    leaks and invalid memory access.</p>
    <p>Developers typically compensate for C++’s missing guardrails with
    external toolchains like Valgrind, GDB, and sanitizers. Although
    mature, such tooling suffers substantial
    limitations<xref ref-type="fn" rid="fn2">2</xref>, particularly for
    WASM compiled with Emscripten. Although Emscripten provides some
    <ext-link ext-link-type="uri" xlink:href="https://web.archive.org/web/20210513071104/https://emscripten.org/docs/debugging/Sanitizers.html">sanitizer
    support</ext-link> and
    <ext-link ext-link-type="uri" xlink:href="https://web.archive.org/web/20210513070806/https://emscripten.org/docs/porting/Debugging.html">other
    debugging features</ext-link>, Empirical’s safety features offset
    remaining limitations, such as the lack of a steppable debugger.</p>
  </sec>
</sec>
<sec id="outlook-and-future-plans">
  <title>Outlook and Future Plans</title>
  <p>Empirical remains under active development. Current priorities
  include web-friendly refinements (e.g., file management, rich text
  handling) and additional step-by-step tutorials for new users. That
  said, Empirical has largely converged to API stability, and releases
  are archived on Zenodo for those who depend on them
  (<xref alt="Ofria et al., 2020" rid="ref-empirical_2020" ref-type="bibr">Ofria
  et al., 2020</xref>).</p>
  <p>Empirical already underlies major projects within digital
  evolution, artificial life, and genetic programming. To benefit the
  broader scientific software and open science community, we look
  forward to welcoming new collaborations and supporting a wider
  collection of end-users.</p>
</sec>
<sec id="related-software-packages">
  <title>Related Software Packages</title>
  <p>Several projects pursue objectives related to Empirical’s.</p>
  <sec id="repasthpc">
    <title>RepastHPC</title>
    <p>RepastHPC, accessible at
    <ext-link ext-link-type="uri" xlink:href="https://repast.github.io/">https://repast.github.io/</ext-link>,
    is a C++ modeling framework targeted to high-performance computing
    (<xref alt="Collier &amp; North, 2013" rid="ref-collier2013parallel" ref-type="bibr">Collier
    &amp; North, 2013</xref>;
    <xref alt="North et al., 2013" rid="ref-north2013complex" ref-type="bibr">North
    et al., 2013</xref>). A Java-based counterpart, Repast Simphony,
    provides interactive GUI support.</p>
  </sec>
  <sec id="boost-c-libraries">
    <title>Boost C++ Libraries</title>
    <p>Boost C++ Libraries, available at
    <ext-link ext-link-type="uri" xlink:href="https://www.boost.org/">https://www.boost.org/</ext-link>,
    implement a broad portfolio of software components. However, Boost
    lacks tools for web-based GUI, configuration management, or data
    management tailored to scientific software.</p>
  </sec>
  <sec id="emscripten">
    <title>Emscripten</title>
    <p>Emscripten provides cross-compilation from C++ to WebAssembly and
    available at
    <ext-link ext-link-type="uri" xlink:href="https://emscripten.org/">https://emscripten.org/</ext-link>
    (<xref alt="Zakai, 2011" rid="ref-zakai2011emscripten" ref-type="bibr">Zakai,
    2011</xref>). Empirical furnishes a complementary high-level
    interface to Emscripten intrinsics.</p>
  </sec>
  <sec id="cheerp">
    <title>Cheerp</title>
    <p>Cheerp, another C++ to WebAssembly compiler, is available at
    <ext-link ext-link-type="uri" xlink:href="https://leaningtech.com/cheerp/">https://leaningtech.com/cheerp/</ext-link>.
    Like Emscripten, Cheerp provides primarily low-level APIs for
    browser interaction.</p>
  </sec>
  <sec id="non-c-comparable-software">
    <title>Non-C++ Comparable Software</title>
    <list list-type="bullet">
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://tinygo.org/">TinyGo</ext-link>
        </p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://juliagizmos.github.io/WebIO.jl/latest/">WebIO</ext-link>
        </p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="http://www.gwtproject.org/">GWT</ext-link>
        </p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://yew.rs/">yew</ext-link>
        </p>
      </list-item>
      <list-item>
        <p>Pyodide
        (<xref alt="Droettboom &amp; the Pyodide development team, 2021" rid="ref-developers2021pyodide" ref-type="bibr">Droettboom
        &amp; the Pyodide development team, 2021</xref>) </p>
      </list-item>
      <list-item>
        <p>Shiny
        (<xref alt="Chang et al., 2020" rid="ref-chang2020shiny" ref-type="bibr">Chang
        et al., 2020</xref>) </p>
      </list-item>
    </list>
  </sec>
  <sec id="projects-using-the-software">
    <title>Projects Using the Software</title>
    <list list-type="bullet">
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://lalejini.com/Aagos/web/Aagos.html">AAGOS</ext-link>
        (<xref alt="Gillespie et al., 2018" rid="ref-gillespie2018changing" ref-type="bibr">Gillespie
        et al., 2018</xref>): model to test impact of environmental
        change on genetic architecture evolution.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://uit.readthedocs.io">Conduit</ext-link>
        (<xref alt="Moreno &amp; Ofria, 2022" rid="ref-moreno2022best" ref-type="bibr">Moreno
        &amp; Ofria, 2022</xref>): library for best-effort communication
        in high-performance computing.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://mmore500.com/dishtiny">DISHTINY</ext-link>
        (<xref alt="Moreno &amp; Ofria, 2019" rid="ref-moreno2019toward" ref-type="bibr">Moreno
        &amp; Ofria, 2019</xref>): agent-based model to study major
        transitions in evolution.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://emilydolson.github.io/ecology_of_evolutionary_computation/web/interaction_networks.html">ecology
        in evolutionary computation explorer</ext-link>
        (<xref alt="Dolson &amp; Ofria, 2018" rid="ref-dolson2018evological" ref-type="bibr">Dolson
        &amp; Ofria, 2018</xref>): interactive visualization of
        ecological interaction networks in evolutionary computation.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://anyaevostinar.github.io/SymbulationEmp/web/symbulation.html">Symbulation</ext-link>
        (<xref alt="Vostinar, 2017" rid="ref-vostinar2017suicide" ref-type="bibr">Vostinar,
        2017</xref>): agent-based model for evolution of parasitism,
        mutualism, and commensalism.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://github.com/amlalejini/signalgp">SignalGP</ext-link>
        (<xref alt="Lalejini &amp; Ofria, 2018" rid="ref-Lalejini2018-GECCO" ref-type="bibr">Lalejini
        &amp; Ofria, 2018</xref>;
        <xref alt="Moreno et al., 2021" rid="ref-moreno2021signalgp" ref-type="bibr">Moreno
        et al., 2021</xref>): an event-driven genetic programming
        substrate.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="https://github.com/emilydolson/phylotrackpy">PhylotrackPy</ext-link>
        (<xref alt="Dolson et al., 2024" rid="ref-dolson2024phylotrack" ref-type="bibr">Dolson
        et al., 2024</xref>): a phylogeny-tracking tool for agent-based
        evolution, closely integrated with Empirical codebase.</p>
      </list-item>
      <list-item>
        <p><ext-link ext-link-type="uri" xlink:href="http://emilydolson.github.io/memic_model/web/memic_model.html">Model
        of cancer evolution on an oxygen gradient</ext-link>.</p>
      </list-item>
    </list>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This research was supported in part by NSF grants DEB-1655715 and
  DBI-0939454, by the National Science Foundation Graduate Research
  Fellowship under Grant No. DGE-1424871, by Michigan State University
  through the computational resources provided by the Institute for
  Cyber-Enabled Research, and by the Eric and Wendy Schmidt AI in
  Science Postdoctoral Fellowship, a Schmidt Futures program. Any
  opinions, findings, and conclusions or recommendations expressed in
  this material are those of the author(s) and do not necessarily
  reflect the views of the National Science Foundation.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-haas2017bringing">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Haas</surname><given-names>Andreas</given-names></name>
        <name><surname>Rossberg</surname><given-names>Andreas</given-names></name>
        <name><surname>Schuff</surname><given-names>Derek L</given-names></name>
        <name><surname>Titzer</surname><given-names>Ben L</given-names></name>
        <name><surname>Holman</surname><given-names>Michael</given-names></name>
        <name><surname>Gohman</surname><given-names>Dan</given-names></name>
        <name><surname>Wagner</surname><given-names>Luke</given-names></name>
        <name><surname>Zakai</surname><given-names>Alon</given-names></name>
        <name><surname>Bastien</surname><given-names>JF</given-names></name>
      </person-group>
      <article-title>Bringing the web up to speed with WebAssembly</article-title>
      <source>Proceedings of the 38th ACM SIGPLAN conference on programming language design and implementation</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <year iso-8601-date="2017-06">2017</year><month>06</month>
      <uri>http://dx.doi.org/10.1145/3062341.3062363</uri>
      <pub-id pub-id-type="doi">10.1145/3062341.3062363</pub-id>
      <fpage>185</fpage>
      <lpage>200</lpage>
    </element-citation>
  </ref>
  <ref id="ref-jangda2019not">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Jangda</surname><given-names>Abhinav</given-names></name>
        <name><surname>Powers</surname><given-names>Bobby</given-names></name>
        <name><surname>Berger</surname><given-names>Emery D.</given-names></name>
        <name><surname>Guha</surname><given-names>Arjun</given-names></name>
      </person-group>
      <article-title>Not so fast: Analyzing the performance of webassembly vs. Native code</article-title>
      <source>Proceedings of the 2019 USENIX conference on usenix annual technical conference</source>
      <publisher-name>USENIX Association</publisher-name>
      <publisher-loc>USA</publisher-loc>
      <year iso-8601-date="2019">2019</year>
      <isbn>9781939133038</isbn>
      <uri>https://www.usenix.org/conference/atc19/presentation/jangda</uri>
      <fpage>107</fpage>
      <lpage>120</lpage>
    </element-citation>
  </ref>
  <ref id="ref-zakai2011emscripten">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Zakai</surname><given-names>Alon</given-names></name>
      </person-group>
      <article-title>Emscripten: An LLVM-to-JavaScript compiler</article-title>
      <source>Proceedings of the ACM international conference companion on object oriented programming systems languages and applications companion</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <year iso-8601-date="2011-10">2011</year><month>10</month>
      <uri>http://dx.doi.org/10.1145/2048147.2048224</uri>
      <pub-id pub-id-type="doi">10.1145/2048147.2048224</pub-id>
      <fpage>301</fpage>
      <lpage>312</lpage>
    </element-citation>
  </ref>
  <ref id="ref-chang2020shiny">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Chang</surname><given-names>Winston</given-names></name>
        <name><surname>Cheng</surname><given-names>Joe</given-names></name>
        <name><surname>Allaire</surname><given-names>JJ</given-names></name>
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
        <name><surname>McPherson</surname><given-names>Jonathan</given-names></name>
      </person-group>
      <source>Shiny: Web application framework for R</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://CRAN.R-project.org/package=shiny</uri>
    </element-citation>
  </ref>
  <ref id="ref-developers2021pyodide">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Droettboom</surname><given-names>Michael</given-names></name>
        <string-name>the Pyodide development team</string-name>
      </person-group>
      <source>Pyodide/pyodide</source>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2021-08">2021</year><month>08</month>
      <uri>https://doi.org/10.5281/zenodo.5156931</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.5156931</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-vostinar2017suicide">
    <element-citation publication-type="thesis">
      <person-group person-group-type="author">
        <name><surname>Vostinar</surname><given-names>Anya E</given-names></name>
      </person-group>
      <article-title>Suicide, signals, and symbionts: Evolving cooperation in agent-based systems</article-title>
      <publisher-name>Michigan State University</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <isbn>978-0-355-07992-0</isbn>
      <uri>https://www.proquest.com/docview/1929231148</uri>
    </element-citation>
  </ref>
  <ref id="ref-gillespie2018changing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gillespie</surname><given-names>Lauren</given-names></name>
        <name><surname>Dolson</surname><given-names>Emily</given-names></name>
        <name><surname>Lalejini</surname><given-names>Alexander</given-names></name>
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>Changing environments drive the separation of genes and increased evolvability in NK-inspired landscapes</article-title>
      <source>Late breaking abstract at The 2018 Conference on Artificial Life</source>
      <year iso-8601-date="2018">2018</year>
    </element-citation>
  </ref>
  <ref id="ref-Lalejini2018-GECCO">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Lalejini</surname><given-names>Alexander</given-names></name>
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>Evolving event-driven programs with SignalGP</article-title>
      <source>Proceedings of the genetic and evolutionary computation conference on - GECCO ’18</source>
      <publisher-name>ACM Press</publisher-name>
      <publisher-loc>New York, New York, USA</publisher-loc>
      <year iso-8601-date="2018">2018</year>
      <isbn>9781450356183</isbn>
      <uri>http://arxiv.org/abs/1804.05445{\%}0Ahttp://dx.doi.org/10.1145/3205455.3205523 http://dl.acm.org/citation.cfm?doid=3205455.3205523</uri>
      <pub-id pub-id-type="doi">10.1145/3205455.3205523</pub-id>
      <fpage>1135</fpage>
      <lpage>1142</lpage>
    </element-citation>
  </ref>
  <ref id="ref-moreno2019toward">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Moreno</surname><given-names>Matthew Andres</given-names></name>
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>Toward open-ended fraternal transitions in individuality</article-title>
      <source>Artificial Life</source>
      <year iso-8601-date="2019-05">2019</year><month>05</month>
      <volume>25</volume>
      <issue>2</issue>
      <issn>1064-5462</issn>
      <uri>https://doi.org/10.1162/artl\_a\_00284</uri>
      <pub-id pub-id-type="doi">10.1162/artl_a_00284</pub-id>
      <fpage>117</fpage>
      <lpage>133</lpage>
    </element-citation>
  </ref>
  <ref id="ref-collier2013parallel">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Collier</surname><given-names>Nicholson</given-names></name>
        <name><surname>North</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>Parallel agent-based simulation with repast for high performance computing</article-title>
      <source>SIMULATION</source>
      <year iso-8601-date="2013-11">2013</year><month>11</month>
      <volume>89</volume>
      <issue>10</issue>
      <uri>
              https://doi.org/10.1177/0037549712462620

      </uri>
      <pub-id pub-id-type="doi">10.1177/0037549712462620</pub-id>
      <fpage>1215</fpage>
      <lpage>1235</lpage>
    </element-citation>
  </ref>
  <ref id="ref-north2013complex">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>North</surname><given-names>Michael J</given-names></name>
        <name><surname>Collier</surname><given-names>Nicholson T</given-names></name>
        <name><surname>Ozik</surname><given-names>Jonathan</given-names></name>
        <name><surname>Tatara</surname><given-names>Eric R</given-names></name>
        <name><surname>Macal</surname><given-names>Charles M</given-names></name>
        <name><surname>Bragen</surname><given-names>Mark</given-names></name>
        <name><surname>Sydelko</surname><given-names>Pam</given-names></name>
      </person-group>
      <article-title>Complex adaptive systems modeling with repast simphony</article-title>
      <source>Complex adaptive systems modeling</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2013-03">2013</year><month>03</month>
      <volume>1</volume>
      <issue>1</issue>
      <uri>https://doi.org/10.1186/2194-3206-1-3</uri>
      <pub-id pub-id-type="doi">10.1186/2194-3206-1-3</pub-id>
      <fpage>1</fpage>
      <lpage>26</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dolson2018evological">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Dolson</surname><given-names>Emily</given-names></name>
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>Ecological theory provides insights about evolutionary computation</article-title>
      <source>Proceedings of the genetic and evolutionary computation conference companion</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2018">2018</year>
      <isbn>9781450357647</isbn>
      <uri>https://doi.org/10.1145/3205651.3205780</uri>
      <pub-id pub-id-type="doi">10.1145/3205651.3205780</pub-id>
      <fpage>105</fpage>
      <lpage>106</lpage>
    </element-citation>
  </ref>
  <ref id="ref-empirical_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
        <name><surname>Moreno</surname><given-names>Matthew Andres</given-names></name>
        <name><surname>Dolson</surname><given-names>Emily</given-names></name>
        <name><surname>Lalejini</surname><given-names>Alex</given-names></name>
        <name><surname>rodsan0</surname></name>
        <name><surname>Fenton</surname><given-names>Jake</given-names></name>
        <name><surname>perryk12</surname></name>
        <name><surname>Jorgensen</surname><given-names>Steven</given-names></name>
        <name><surname>hoffmanriley</surname></name>
        <name><surname>grenewode</surname></name>
        <name><surname>al.</surname></name>
      </person-group>
      <article-title>Devosoft/empirical</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2020-10">2020</year><month>10</month>
      <pub-id pub-id-type="doi">10.5281/zenodo.2575606</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-woelfle2011open">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Woelfle</surname><given-names>Michael</given-names></name>
        <name><surname>Olliaro</surname><given-names>Piero</given-names></name>
        <name><surname>Todd</surname><given-names>Matthew H</given-names></name>
      </person-group>
      <article-title>Open science is a research accelerator</article-title>
      <source>Nature chemistry</source>
      <publisher-name>Nature Publishing Group UK London</publisher-name>
      <year iso-8601-date="2011">2011</year>
      <volume>3</volume>
      <issue>10</issue>
      <pub-id pub-id-type="doi">10.1038/nchem.1149</pub-id>
      <fpage>745</fpage>
      <lpage>748</lpage>
    </element-citation>
  </ref>
  <ref id="ref-moreno2021signalgp">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Moreno</surname><given-names>Matthew Andres</given-names></name>
        <name><surname>Papa</surname><given-names>Santiago Rodriguez</given-names></name>
        <name><surname>Lalejini</surname><given-names>Alexander</given-names></name>
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>SignalGP-lite: Event driven genetic programming library for large-scale artificial life applications</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://arxiv.org/abs/2108.00382</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.2108.00382</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-moreno2022best">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Moreno</surname><given-names>Matthew Andres</given-names></name>
        <name><surname>Ofria</surname><given-names>Charles</given-names></name>
      </person-group>
      <article-title>Best-effort communication improves performance and scales robustly on conventional hardware</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://arxiv.org/abs/2211.10897</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.2211.10897</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-dolson2024phylotrack">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dolson</surname><given-names>Emily</given-names></name>
        <name><surname>Rodriguez-Papa</surname><given-names>Santiago</given-names></name>
        <name><surname>Moreno</surname><given-names>Matthew Andres</given-names></name>
      </person-group>
      <article-title>Phylotrack: C++ and Python libraries for in silico phylogenetic tracking</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <uri>https://arxiv.org/abs/2405.09389</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.2405.09389</pub-id>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>For example, neither GCC 10.3 nor Clang 12.0.0
    detect <monospace>std::vector</monospace> iterator invalidation when
    appending to a <monospace>std::vector</monospace> happens to fall
    within existing allocated buffer space
    (<ext-link ext-link-type="uri" xlink:href="https://perma.cc/6WDU-3C8X">GCC
    live example</ext-link>;
    <ext-link ext-link-type="uri" xlink:href="https://perma.cc/6SU9-CUKY">Clang
    live example</ext-link>). Clang 12.0.0’s sanitizers also fail to
    detect this iterator invalidation
    (<ext-link ext-link-type="uri" xlink:href="https://perma.cc/4ECQ-D5LG">live
    example</ext-link>).</p>
  </fn>
  <fn id="fn2">
    <label>2</label><p>For example, neither GCC 10.3 nor Clang 12.0.0
    detect <monospace>std::vector</monospace> iterator invalidation when
    appending to a <monospace>std::vector</monospace> happens to fall
    within existing allocated buffer space
    (<ext-link ext-link-type="uri" xlink:href="https://perma.cc/6WDU-3C8X">GCC
    live example</ext-link>;
    <ext-link ext-link-type="uri" xlink:href="https://perma.cc/6SU9-CUKY">Clang
    live example</ext-link>). Clang 12.0.0’s sanitizers also fail to
    detect this iterator invalidation
    (<ext-link ext-link-type="uri" xlink:href="https://perma.cc/4ECQ-D5LG">live
    example</ext-link>).</p>
  </fn>
</fn-group>
</back>
</article>
