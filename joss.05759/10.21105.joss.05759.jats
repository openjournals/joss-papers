<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5759</article-id>
<article-id pub-id-type="doi">10.21105/joss.05759</article-id>
<title-group>
<article-title>automata: A Python package for simulating and
manipulating automata</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-8896-6800</contrib-id>
<name>
<surname>Evans</surname>
<given-names>Caleb</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1476-6715</contrib-id>
<name>
<surname>Robson</surname>
<given-names>Eliot W.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Independent Developer, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Computer Science, University of Illinois,
Urbana, IL, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-07-16">
<day>16</day>
<month>7</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>90</issue>
<fpage>5759</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>automata</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Automata are abstract machines used to represent models of
  computation, and are a central object of study in theoretical computer
  science
  (<xref alt="J. E. Hopcroft et al., 2006" rid="ref-Hopcroft06" ref-type="bibr">J.
  E. Hopcroft et al., 2006</xref>). Given an input string of characters
  over a fixed alphabet, these machines either accept or reject the
  string. A language corresponding to an automaton is the set of all
  strings it accepts. Three important families of automata in increasing
  order of generality are the following:</p>
  <list list-type="order">
    <list-item>
      <p>Finite-state automata</p>
    </list-item>
    <list-item>
      <p>Pushdown automata</p>
    </list-item>
    <list-item>
      <p>Turing machines</p>
    </list-item>
  </list>
  <p>The <monospace>automata</monospace> package facilitates working
  with these families by allowing simulation of reading input and
  higher-level manipulation of the corresponding languages using
  specialized algorithms.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Automata are a core component of both computer science education
  and research, seeing further theoretical work and applications in a
  wide variety of areas such as computational biology
  (<xref alt="Marschall, 2011" rid="ref-Marschall11" ref-type="bibr">Marschall,
  2011</xref>) and networking
  (<xref alt="Xu et al., 2016" rid="ref-Xu16" ref-type="bibr">Xu et al.,
  2016</xref>). Consequently, the manipulation of automata with software
  packages has seen significant attention from researchers in the past.
  The similarly named Mathematica package
  <monospace>Automata</monospace>
  (<xref alt="Sutner, 2003" rid="ref-Sutner03" ref-type="bibr">Sutner,
  2003</xref>) implements a number of algorithms for use with
  finite-state automata, including regular expression conversion and
  binary set operations. In Java, the Brics package
  (<xref alt="Møller, 2021" rid="ref-brics" ref-type="bibr">Møller,
  2021</xref>) implements similar algorithms, while the JFLAP package
  (<xref alt="Rodger, 2006" rid="ref-Rodger06" ref-type="bibr">Rodger,
  2006</xref>) places an emphasis on interactivity and simulation of
  more general families of automata.</p>
  <p><monospace>automata</monospace> serves the demand for such a
  package in the Python software ecosystem, implementing algorithms and
  allowing for simulation of automata in a manner comparable to the
  packages described previously. As a popular high-level language,
  Python enables significant flexibility and ease of use that directly
  benefits many users. The package includes a comprehensive test suite,
  support for modern language features (including type annotations), and
  has a large number of different automata, meeting the demands of users
  across a wide variety of use cases. In particular, the target audience
  is both researchers that wish to manipulate automata, and for those in
  educational contexts to reinforce understanding about how these models
  of computation function.</p>
</sec>
<sec id="the-automata-package">
  <title>The <monospace>automata</monospace> package</title>
  <p>The API of the package is designed to mimic the formal mathematical
  description of each automaton using built-in Python data structures
  (such as sets and dicts). This is for ease of use by those that are
  unfamiliar with these models of computation, while also providing
  performance suitable for tasks arising in research. In particular,
  algorithms in the package have been written for tackling performance
  on large inputs, incorporating optimizations such as only exploring
  the reachable set of states in the construction of a new finite-state
  automaton. The package also has native display integration with
  Jupyter notebooks, enabling easy visualization that allows students to
  interact with <monospace>automata</monospace> in an exploratory
  manner.</p>
  <p>Of note are some commonly used and technical algorithms implemented
  in the package for finite-state automata:</p>
  <list list-type="bullet">
    <list-item>
      <p>An optimized version of the Hopcroft-Karp algorithm to
      determine whether two deterministic finite automata (DFA) are
      equivalent
      (<xref alt="Almeida et al., 2010" rid="ref-AlmeidaMR10" ref-type="bibr">Almeida
      et al., 2010</xref>).</p>
    </list-item>
    <list-item>
      <p>The product construction algorithm for binary set operations
      (union, intersection, etc.) on the languages corresponding to two
      input DFAs
      (<xref alt="Sipser, 2012" rid="ref-Sipser12" ref-type="bibr">Sipser,
      2012</xref>).</p>
    </list-item>
    <list-item>
      <p>Thompson’s algorithm for converting regular expressions to
      equivalent nondeterministic finite automata (NFA)
      (<xref alt="Aho et al., 2006" rid="ref-AhoSU86" ref-type="bibr">Aho
      et al., 2006</xref>).</p>
    </list-item>
    <list-item>
      <p>Hopcroft’s algorithm for DFA minimization
      (<xref alt="J. Hopcroft, 1971" rid="ref-Hopcroft71" ref-type="bibr">J.
      Hopcroft, 1971</xref>;
      <xref alt="Knuutila, 2001" rid="ref-Knuutila01" ref-type="bibr">Knuutila,
      2001</xref>).</p>
    </list-item>
    <list-item>
      <p>A specialized algorithm for directly constructing a
      state-minimal DFA accepting a given finite language
      (<xref alt="Mihov &amp; Schulz, 2019" rid="ref-mihov_schulz_2019" ref-type="bibr">Mihov
      &amp; Schulz, 2019</xref>).</p>
    </list-item>
    <list-item>
      <p>A specialized algorithm for directly constructing a minimal DFA
      recognizing strings containing a given substring
      (<xref alt="Knuth et al., 1977" rid="ref-Knuth77" ref-type="bibr">Knuth
      et al., 1977</xref>).</p>
    </list-item>
  </list>
  <p>To the authors’ knowledge, this is the only Python package
  implementing all of the automata manipulation algorithms stated
  above.</p>
  <p><monospace>automata</monospace> has already been cited in
  publications
  (<xref alt="Jeff Erickson &amp; Solomon, 2023" rid="ref-Erickson23" ref-type="bibr">Jeff
  Erickson &amp; Solomon, 2023</xref>), and has seen use in multiple
  large undergraduate courses in introductory theoretical computer
  science at the University of Illinois Urbana-Champaign (roughly 2000
  students since Fall 2021). In this instance, the package is being used
  both as part of an autograder utility for finite-state automata
  created by students, and as an exploratory tool for use by students
  directly.</p>
</sec>
<sec id="example-usage">
  <title>Example usage</title>
  <fig>
    <caption><p>A visualization of
    <monospace>target_words_dfa</monospace>. Transitions on characters
    leading to immediate rejections are
    omitted.<styled-content id="figU003Atarget_words_dfa"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/finite_language_dfa.png" />
  </fig>
  <p>The following example is inspired by the use case described in
  Johnson
  (<xref alt="2010" rid="ref-Johnson_2010" ref-type="bibr">2010</xref>).
  We wish to determine which strings in a given set are within the
  target edit distance to a reference string. We will first initialize a
  DFA corresponding to a fixed set of target words over the alphabet of
  all lowercase ascii characters.</p>
  <code language="python">from automata.fa.dfa import DFA
from automata.fa.nfa import NFA
import string

target_words_dfa = DFA.from_finite_language(
  input_symbols=set(string.ascii_lowercase),
  language={'these', 'are', 'target', 'words', 'them', 'those'},
)</code>
  <p>A visualization of <monospace>target_words_dfa</monospace>,
  generated by the package in a Jupyter notebook, is depicted in
  <xref alt="[fig:target_words_dfa]" rid="figU003Atarget_words_dfa">[fig:target_words_dfa]</xref>.</p>
  <p>Next, we construct an NFA recognizing all strings within a target
  edit distance of a fixed reference string, and then immediately
  convert this to an equivalent DFA. The package provides builtin
  functions to make this construction easy, and we use the same alphabet
  as the DFA that was just created.</p>
  <code language="python">words_within_edit_distance_dfa = DFA.from_nfa(
  NFA.edit_distance(
    input_symbols=set(string.ascii_lowercase),
    reference_str='they',
    max_edit_distance=2,
  )
)</code>
  <p>Finally, we take the intersection of the two DFAs we have
  constructed and read all of the words in the output DFA into a list.
  The library makes this straightforward and idiomatic.</p>
  <code language="python">found_words_dfa = target_words_dfa &amp; words_within_edit_distance_dfa
found_words = list(found_words_dfa)</code>
  <p>The DFA <monospace>found_words_dfa</monospace> accepts strings in
  the intersection of the languages of the DFAs given as input, and
  <monospace>found_words</monospace> is a list containing this language.
  Note the power of this technique is that the DFA
  <monospace>words_within_edit_distance_dfa</monospace> has an infinite
  language, meaning we could not do this same computation just using the
  builtin sets in Python directly (as they always represent a finite
  collection), although the syntax used by
  <monospace>automata</monospace> is very similar to promote
  intuition.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Thanks (in no particular order) to GitHub users
  <ext-link ext-link-type="uri" xlink:href="https://github.com/YtvwlD">YtvwlD</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/dengl11">dengl11</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/Tagl">Tagl</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/lewiuberg">lewiuberg</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/CamiloMartinezM">CamiloMartinezM</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/abhinavsinha-adrino">abhinavsinha‑adrino</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/EduardoGoulart1">EduardoGoulart1</ext-link>,
  and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/khoda81">khoda81</ext-link>
  for their invaluable code contributions to this project.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Sutner03">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Sutner</surname><given-names>Klaus</given-names></name>
      </person-group>
      <article-title>Automata, a hybrid system for computational automata theory</article-title>
      <source>Implementation and application of automata</source>
      <person-group person-group-type="editor">
        <name><surname>Champarnaud</surname><given-names>Jean-Marc</given-names></name>
        <name><surname>Maurel</surname><given-names>Denis</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2003">2003</year>
      <isbn>978-3-540-44977-5</isbn>
      <uri>https://doi.org/10.1007/3-540-44977-9_21</uri>
      <pub-id pub-id-type="doi">10.1007/3-540-44977-9_21</pub-id>
      <fpage>221</fpage>
      <lpage>227</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brics">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Møller</surname><given-names>Anders</given-names></name>
      </person-group>
      <article-title>Dk.brics.automaton – finite-state automata and regular expressions for Java</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://www.brics.dk/automaton/</uri>
    </element-citation>
  </ref>
  <ref id="ref-AlmeidaMR10">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Almeida</surname><given-names>Marco</given-names></name>
        <name><surname>Moreira</surname><given-names>Nelma</given-names></name>
        <name><surname>Reis</surname><given-names>Rogério</given-names></name>
      </person-group>
      <article-title>Testing the equivalence of regular languages</article-title>
      <source>Journal of Automata, Languages and Combinatorics</source>
      <year iso-8601-date="2010">2010</year>
      <volume>15</volume>
      <issue>1/2</issue>
      <uri>https://doi.org/10.25596/jalc-2010-007</uri>
      <pub-id pub-id-type="doi">10.25596/jalc-2010-007</pub-id>
      <fpage>7</fpage>
      <lpage>25</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mihov_schulz_2019">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Mihov</surname><given-names>Stoyan</given-names></name>
        <name><surname>Schulz</surname><given-names>Klaus U.</given-names></name>
      </person-group>
      <article-title>The minimal deterministic finite-state automaton for a finite language</article-title>
      <source>Finite-state techniques: Automata, transducers and bimachines</source>
      <publisher-name>Cambridge University Press</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <pub-id pub-id-type="doi">10.1017/9781108756945.011</pub-id>
      <fpage>253</fpage>
      <lpage>278</lpage>
    </element-citation>
  </ref>
  <ref id="ref-AhoSU86">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Aho</surname><given-names>Alfred V.</given-names></name>
        <name><surname>Lam</surname><given-names>Monica S.</given-names></name>
        <name><surname>Sethi</surname><given-names>Ravi</given-names></name>
        <name><surname>Ullman</surname><given-names>Jeffrey D.</given-names></name>
      </person-group>
      <source>Compilers: Principles, techniques, and tools (2nd edition)</source>
      <publisher-name>Addison-Wesley Longman Publishing Co., Inc.</publisher-name>
      <publisher-loc>USA</publisher-loc>
      <year iso-8601-date="2006">2006</year>
      <isbn>0321486811</isbn>
      <fpage>152</fpage>
      <lpage>155</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hopcroft71">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Hopcroft</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>An n log n algorithm for minimizing states in a finite automaton</article-title>
      <source>Theory of machines and computations</source>
      <person-group person-group-type="editor">
        <name><surname>Kohavi</surname><given-names>Zvi</given-names></name>
        <name><surname>Paz</surname><given-names>Azaria</given-names></name>
      </person-group>
      <publisher-name>Academic Press</publisher-name>
      <year iso-8601-date="1971">1971</year>
      <isbn>978-0-12-417750-5</isbn>
      <uri>https://www.sciencedirect.com/science/article/pii/B9780124177505500221</uri>
      <pub-id pub-id-type="doi">10.1016/B978-0-12-417750-5.50022-1</pub-id>
      <fpage>189</fpage>
      <lpage>196</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Erickson23">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Jeff Erickson</surname><given-names>Eliot Wong Robson</given-names><suffix>Jason Xia</suffix></name>
        <name><surname>Solomon</surname><given-names>Brad</given-names></name>
      </person-group>
      <article-title>Auto-graded scaffolding exercises for theoretical computer science</article-title>
      <source>2023 ASEE annual conference &amp; exposition</source>
      <publisher-name>ASEE Conferences</publisher-name>
      <publisher-loc>Baltimore , Maryland</publisher-loc>
      <year iso-8601-date="2023">2023</year>
      <uri>https://peer.asee.org/42347</uri>
    </element-citation>
  </ref>
  <ref id="ref-Johnson_2010">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Johnson</surname><given-names>Nick</given-names></name>
      </person-group>
      <article-title>Damn cool algorithms: Levenshtein automata</article-title>
      <source>Nick’s Blog</source>
      <year iso-8601-date="2010-07">2010</year><month>07</month>
      <uri>http://blog.notdot.net/2010/07/Damn-Cool-Algorithms-Levenshtein-Automata</uri>
    </element-citation>
  </ref>
  <ref id="ref-Knuth77">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Knuth</surname><given-names>Donald E.</given-names></name>
        <name><surname>Morris</surname><given-names>James H.</given-names><suffix>Jr.</suffix></name>
        <name><surname>Pratt</surname><given-names>Vaughan R.</given-names></name>
      </person-group>
      <article-title>Fast pattern matching in strings</article-title>
      <source>SIAM Journal on Computing</source>
      <year iso-8601-date="1977">1977</year>
      <volume>6</volume>
      <issue>2</issue>
      <uri>https://doi.org/10.1137/0206024</uri>
      <pub-id pub-id-type="doi">10.1137/0206024</pub-id>
      <fpage>323</fpage>
      <lpage>350</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hopcroft06">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Hopcroft</surname><given-names>John E.</given-names></name>
        <name><surname>Motwani</surname><given-names>Rajeev</given-names></name>
        <name><surname>Ullman</surname><given-names>Jeffrey D.</given-names></name>
      </person-group>
      <source>Introduction to automata theory, languages, and computation (3rd edition)</source>
      <publisher-name>Addison-Wesley Longman Publishing Co., Inc.</publisher-name>
      <publisher-loc>USA</publisher-loc>
      <year iso-8601-date="2006">2006</year>
      <isbn>0321455363</isbn>
    </element-citation>
  </ref>
  <ref id="ref-Sipser12">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Sipser</surname><given-names>M.</given-names></name>
      </person-group>
      <source>Introduction to the theory of computation</source>
      <publisher-name>Cengage Learning</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <isbn>978-1-133-18781-3</isbn>
      <fpage>45</fpage>
      <lpage>47</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Marschall11">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Marschall</surname><given-names>Tobias</given-names></name>
      </person-group>
      <article-title>Construction of minimal deterministic finite automata from biological motifs</article-title>
      <source>Theoretical Computer Science</source>
      <year iso-8601-date="2011">2011</year>
      <volume>412</volume>
      <issue>8</issue>
      <issn>0304-3975</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0304397510006948</uri>
      <pub-id pub-id-type="doi">10.1016/j.tcs.2010.12.003</pub-id>
      <fpage>922</fpage>
      <lpage>930</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Knuutila01">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Knuutila</surname><given-names>Timo</given-names></name>
      </person-group>
      <article-title>Re-describing an algorithm by Hopcroft</article-title>
      <source>Theoretical Computer Science</source>
      <year iso-8601-date="2001">2001</year>
      <volume>250</volume>
      <issue>1</issue>
      <issn>0304-3975</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0304397599001504</uri>
      <pub-id pub-id-type="doi">10.1016/S0304-3975(99)00150-4</pub-id>
      <fpage>333</fpage>
      <lpage>363</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Xu16">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Xu</surname><given-names>Chengcheng</given-names></name>
        <name><surname>Chen</surname><given-names>Shuhui</given-names></name>
        <name><surname>Su</surname><given-names>Jinshu</given-names></name>
        <name><surname>Yiu</surname><given-names>S. M.</given-names></name>
        <name><surname>Hui</surname><given-names>Lucas C. K.</given-names></name>
      </person-group>
      <article-title>A survey on regular expression matching for deep packet inspection: Applications, algorithms, and hardware platforms</article-title>
      <source>IEEE Communications Surveys &amp; Tutorials</source>
      <year iso-8601-date="2016">2016</year>
      <volume>18</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/COMST.2016.2566669</pub-id>
      <fpage>2991</fpage>
      <lpage>3029</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Rodger06">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Rodger</surname><given-names>Susan H.</given-names></name>
      </person-group>
      <source>JFLAP: An interactive formal languages and automata package</source>
      <publisher-name>Jones; Bartlett Publishers, Inc.</publisher-name>
      <publisher-loc>USA</publisher-loc>
      <year iso-8601-date="2006">2006</year>
      <isbn>0763738344</isbn>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
