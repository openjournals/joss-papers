<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6618</article-id>
<article-id pub-id-type="doi">10.21105/joss.06618</article-id>
<title-group>
<article-title><monospace>G'MIC</monospace>: An Open-Source
Self-Extending Framework for Image Processing</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3454-5079</contrib-id>
<name>
<surname>Tschumperlé</surname>
<given-names>David</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9293-0771</contrib-id>
<name>
<surname>Fourey</surname>
<given-names>Sébastien</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Osgood</surname>
<given-names>Garry</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>GREYC Lab (IMAGE Team), CNRS, Normandie Univ, UNICAEN,
ENSICAEN, F-14000 Caen, France </institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Independent researcher, New York City, US</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-11-13">
<day>13</day>
<month>11</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>103</issue>
<fpage>6618</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2024</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>image processing</kwd>
<kwd>scripting language</kwd>
<kwd>user interfaces</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="abstract">
  <title>Abstract</title>
  <p>We present <monospace>G'MIC</monospace>, an open-source
  self-extending framework that defines an original, concise, scripting
  language for writing possibly complex image processing operators and
  pipelines. <monospace>G'MIC</monospace> provides several user
  interfaces allowing for the manipulation of digital images, adapted to
  different levels of user expertise, either from the command line, or
  as a <italic>C/C<monospace>++</monospace></italic> library, or as a
  user-friendly graphical plug-in that extends the capabilities of
  popular digital image retouching applications, such as
  <italic>GIMP</italic>, <italic>Krita</italic>,
  <italic>Photoshop</italic>, <italic>Affinity Photo</italic> and
  others.</p>
</sec>
<sec id="keywords">
  <title>Keywords</title>
  <p>Image Analysis and Processing, Scripting Language, User
  Interfaces.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <sec id="context">
    <title>Context</title>
    <p>Intrinsic to <monospace>G'MIC</monospace>’s design are means to
    map image processing pipelines to commands, advancing the tool as a
    self-extending language. Primal command pipelines may be further
    assembled into those having wider remits, these suitably named to
    bespeak their extended purposes and available for succeeding command
    prototyping.</p>
    <p><monospace>G'MIC</monospace> is distributed under the CeCILL
    licenses. The core language projects several user interfaces to
    convert, process or visualize <italic>image datasets</italic>.
    Allied with pipeline toolset, <monospace>G'MIC</monospace> embodies
    a highly flexible image model, ranging from 1D signals to 3D+t
    sequences of multi-spectral volumetric images, hence including 2D
    color images. This makes it a versatile tool for image processing,
    with a wide range of applications in research, industry and graphic
    design.</p>
  </sec>
  <sec id="history-and-motivation">
    <title>History and Motivation</title>
    <p>The <monospace>G'MIC</monospace> project was initiated in 2008 by
    research scientists of the IMAGE team at the <italic>GREYC</italic>
    laboratory, a public research lab in France. Their area of research
    focuses on development of image processing algorithms.</p>
    <p>To that end, they first began developing
    <ext-link ext-link-type="uri" xlink:href="http://cimg.eu"><monospace>CImg</monospace></ext-link>
    (<xref alt="Tschumperle et al., 2023" rid="ref-cimg" ref-type="bibr">Tschumperle
    et al., 2023</xref>), beginning in 1999 and continuing to the
    present. <monospace>CImg</monospace> is an open-source
    <italic>C<monospace>++</monospace></italic> library for generic
    image processing, which means a library that is able to address
    structurally diverse imagery: photographs, multi-spectral images,
    medical images (MRI, X-ray, tomography, etc.) and animations, among
    others.</p>
    <p>That said, <monospace>CImg</monospace> exhibits certain
    limitations for everyday research work:</p>
    <list list-type="order">
      <list-item>
        <p>When one simply wants to apply a predefined
        <monospace>CImg</monospace> algorithm to an image, one needs to
        write a small, <italic>C<monospace>++</monospace></italic>
        program. It is only a few lines long, but still must be compiled
        and linked before it can be executed. In the context of research
        work, such mechanics are so many distractions. Being able to run
        those algorithms directly from the command line is tempting.</p>
      </list-item>
      <list-item>
        <p>Over time, a large number of these purpose-specific programs
        has accumulated. They are not broadly useful for integration
        into <monospace>CImg</monospace> and have become an unruly
        “collection” of specialized algorithms. By design, they cannot
        be easily distributed and are difficult to maintain.</p>
      </list-item>
    </list>
    <p>These limitations motivated <monospace>G'MIC</monospace>’s
    development, in 2008. Two design objectives came to the fore:</p>
    <list list-type="order">
      <list-item>
        <p>Enable <italic>pipelines of image processing
        algorithms</italic> that may be directly invoked from the
        command line, without requiring compilation/linking steps.</p>
      </list-item>
      <list-item>
        <p>Gather the implementation of specialized algorithms in a
        single location, facilitating their evolution, maintenance and
        distribution.</p>
      </list-item>
    </list>
    <p>These objectives, in combination with a desire to write new image
    processing pipelines and algorithms in the most flexible and concise
    way possible, gave rise to the idea of
    <italic>self-extension</italic>. All these objectives led initially
    to the development of a specialized scripting language: the
    <monospace>G'MIC</monospace> language, and its associated
    interpreter.</p>
  </sec>
  <sec id="related-software">
    <title>Related Software</title>
    <list list-type="bullet">
      <list-item>
        <p><bold>Command-line Interfaces:</bold></p>
      </list-item>
    </list>
    <p>The CLI tool <monospace>gmic</monospace> has been originally
    inspired by <italic>ImageMagick</italic>
    (<xref alt="ImageMagick Studio LLC, 2023" rid="ref-imagemagick" ref-type="bibr">ImageMagick
    Studio LLC, 2023</xref>) and <italic>GraphicsMagick</italic>
    (<xref alt="GraphicsMagick Group, 2023" rid="ref-graphicsmagick" ref-type="bibr">GraphicsMagick
    Group, 2023</xref>), particularly the idea of being able to
    manipulate digital images from a shell. The main differences between
    <monospace>G'MIC</monospace> and
    <italic>ImageMagick</italic>/<italic>GraphicsMagick</italic> are
    that :</p>
    <list list-type="order">
      <list-item>
        <p>The type of images processed is more diverse in
        <monospace>G'MIC</monospace>.</p>
      </list-item>
      <list-item>
        <p>The possibilities offered by the scripting languages
        associated with each project are more extensive in
        <monospace>G'MIC</monospace>. It makes possible to have
        conditions, loops and multi-threaded pipelines, without having
        to resort to an external scripting tool, such as
        <monospace>sh</monospace>.</p>
      </list-item>
    </list>
    <list list-type="bullet">
      <list-item>
        <p><bold>Image Filter Collections:</bold></p>
      </list-item>
    </list>
    <p>There are also related software packages offering predefined
    filters to be applied to images. Popular examples are Mathmap
    (<xref alt="Probst, 2009" rid="ref-mathmap" ref-type="bibr">Probst,
    2009</xref>), Filter Forge
    (<xref alt="Ashbrook, 2018" rid="ref-filterforge" ref-type="bibr">Ashbrook,
    2018</xref>) and Pixelitor
    (<xref alt="Balázs-Csíki, 2023" rid="ref-pixelitor" ref-type="bibr">Balázs-Csíki,
    2023</xref>). While these software somehow allows the user to create
    its own image processing pipeline, their use case is restricted to
    the provided graphical user interfaces, with limited scripting
    possibilities.</p>
  </sec>
</sec>
<sec id="framework-environment">
  <title>Framework Environment</title>
  <sec id="core-components">
    <title>Core Components</title>
    <p>The current <monospace>G'MIC</monospace> framework architecture
    is depicted below.</p>
    <fig>
      <caption><p>Framework architecture.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="gmic_architecture.png" />
    </fig>
    <p>It revolves around a central component: the
    <bold><monospace>G'MIC</monospace> scripting language
    interpreter</bold> (yellow), which uses the native functionalities
    of the <bold><monospace>CImg</monospace> library</bold> (implemented
    in <italic>C<monospace>++</monospace></italic>, blue), but relies
    also on a set of commands, written in the
    <monospace>G'MIC</monospace> language themselves, constituting a
    <bold><italic>standard library</italic>
    (<monospace>stdlib</monospace>)</bold> for the framework (green).
    The other components (orange) stand for the various user interfaces
    provided by the framework. More than 1000 distinct commands are
    currently implemented, covering a large portion of image processing
    needs.</p>
    <p>The interpreter lets the user implements their own scripts, for
    tasks as varied as writing image filters or generative algorithms,
    or creating user interfaces for image manipulation.</p>
  </sec>
  <sec id="user-interfaces">
    <title>User Interfaces</title>
    <p>On top of the interpreter are the user interfaces. Several types
    of UI are implemented, adapted to varying degrees of user’s
    expertise:</p>
    <list list-type="bullet">
      <list-item>
        <p><bold><monospace>gmic</monospace></bold>, a
        <italic>command-line</italic> tool to control the
        <monospace>G'MIC</monospace> interpreter from a terminal (Fig.
        2).</p>
      </list-item>
      <list-item>
        <p><bold><italic>G’MIC-Qt</italic></bold>, a
        <italic>Qt</italic>-based
        (<xref alt="Qt, 2020" rid="ref-qt" ref-type="bibr">Qt,
        2020</xref>) graphical interface intended to be used as a
        <italic>plug-in</italic> for digital image retouching software,
        such as <italic>GIMP</italic>, <italic>Krita</italic>,
        <italic>DigiKam</italic>, <italic>Photoshop</italic>,
        <italic>Affinity Photo</italic> and others (Fig. 3).</p>
      </list-item>
      <list-item>
        <p><bold><monospace>G'MIC</monospace> Online</bold>, a website
        where users can upload color images and apply
        <italic>G’MIC-Qt</italic> filters on them.</p>
      </list-item>
      <list-item>
        <p><bold><monospace>libgmic</monospace></bold> and
        <bold><monospace>libcgmic</monospace></bold>, respectively
        <italic>C<monospace>++</monospace></italic> and
        <italic>C</italic> libraries which basically provide simple
        <italic>C/C<monospace>++</monospace></italic>
        <italic>APIs</italic> to run <monospace>G'MIC</monospace>
        pipelines on a set of input images.</p>
      </list-item>
      <list-item>
        <p><bold><italic>ZArt</italic></bold>, a
        <italic>Qt</italic>-based interface used mainly for
        demonstration purposes, which applies
        <monospace>G'MIC</monospace> filters on streamed webcam images
        in real-time.</p>
      </list-item>
    </list>
    <fig>
      <caption><p>The command-line interface
      <monospace>gmic</monospace>.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="gmic_cli2.png" />
    </fig>
    <fig>
      <caption><p>The <italic>G’MIC-Qt</italic> plug-in.</p></caption>
      <graphic mimetype="image" mime-subtype="jpeg" xlink:href="gmic_qt_330.jpg" />
    </fig>
  </sec>
  <sec id="visibility-and-community">
    <title>Visibility and Community</title>
    <p><monospace>G'MIC</monospace> has been developed since 2008, at
    the <italic>GREYC</italic> laboratory. The project web page is
    <ext-link ext-link-type="uri" xlink:href="https://gmic.eu">https://gmic.eu</ext-link>.
    This website brings together a range of resources, from software
    download links to documentation and tutorial pages.</p>
    <p>The core features of the <monospace>G'MIC</monospace> interpreter
    are developed by
    <ext-link ext-link-type="uri" xlink:href="https://tschumperle.users.greyc.fr/">David
    Tschumperlé</ext-link>, the <italic>G’MIC-Qt</italic> plug-in by
    <ext-link ext-link-type="uri" xlink:href="https://foureys.users.greyc.fr/">Sébastien
    Fourey</ext-link>, both being permanent researchers at
    <italic>GREYC</italic>. The other contributors (for documentation,
    creation of new filters, or implementation of other user interfaces)
    can be found on the
    <ext-link ext-link-type="uri" xlink:href="https://discuss.pixls.us/c/software/gmic/10">software’s
    forum</ext-link>, hosted by <italic>Pixls.Us</italic>, an
    association which promotes the use of open-source software dedicated
    to photography and image creation.</p>
    <p>The <monospace>G'MIC</monospace> source code is available on
    these various github repositories:
    <ext-link ext-link-type="uri" xlink:href="https://github.com/GreycLab/gmic/"><monospace>gmic</monospace></ext-link>
    (interpreter),
    <ext-link ext-link-type="uri" xlink:href="https://github.com/c-koi/gmic-qt/"><monospace>gmic-qt</monospace></ext-link>
    (plug-in) and
    <ext-link ext-link-type="uri" xlink:href="https://github.com/GreycLab/gmic-community/"><monospace>gmic-community</monospace></ext-link>
    (external contributions, documentation).</p>
  </sec>
</sec>
<sec id="examples-of-research-work-conducted-with-gmic">
  <title>Examples of Research Work Conducted With
  <monospace>G'MIC</monospace></title>
  <p>To demonstrate the utility of <monospace>G'MIC</monospace> for
  research, we provide several examples of image processing tasks
  conducted using <monospace>G'MIC</monospace> for algorithm development
  and prototyping. For each example, we reference its associated
  research publication.</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Patch-Based Image Inpainting</bold>:</p>
    </list-item>
  </list>
  <p><monospace>G'MIC</monospace> has been used to design and implement
  an original patch-based image <italic>inpainting</italic> algorithm in
  (<xref alt="Buyssens et al., 2015" rid="ref-buyssens2015exemplar" ref-type="bibr">Buyssens
  et al., 2015</xref>) (Fig. 4).</p>
  <fig>
    <caption><p>Left: input image. Middle: user-defined mask. Right:
    result of <monospace>G'MIC</monospace> inpainting.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="inpaint.png" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p><bold>Color LUT Compression</bold>:</p>
    </list-item>
  </list>
  <p>We used <monospace>G'MIC</monospace> to handle the problem of 3D
  <italic>CLUTs</italic> compression, for the efficient storage of
  generic color transformations
  (<xref alt="Tschumperlé et al., 2020" rid="ref-tschumperle2020reconstruction" ref-type="bibr">Tschumperlé
  et al., 2020</xref>). More than 1100 <italic>CLUTs</italic> are thus
  provided in <monospace>G'MIC</monospace>, requiring only 4MiB of data
  storage (Fig. 5).</p>
  <fig>
    <caption><p><monospace>G'MIC</monospace> color <italic>LUT</italic>
    compression: a <italic>CLUT</italic> (a) is analyzed, relevant
    keypoints are deduced and stored (b,c). A perceptual metric ensure
    that the difference between original/compressed CLUTs are
    imperceptible.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="clut_compression2.png" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p><bold>Semi-automatic Colorization of Line Arts</bold>:</p>
    </list-item>
  </list>
  <p>Colorizing line art drawings is a problem that illustrators are
  familiar with, as traditional digital tools (e.g. <italic>Bucket
  Fill</italic>) are not always working well, e.g. when lines are
  anti-aliased or contain gaps in the drawing. In
  (<xref alt="Fourey et al., 2018" rid="ref-fourey2018fast" ref-type="bibr">Fourey
  et al., 2018</xref>), we describe a <italic>“Smart coloring”</italic>
  algorithm, implemented in <monospace>G'MIC</monospace>, that analyzes
  the geometry of the contours and automatically deduces a reasonable
  flat-colored layer, from a user-defined set of colored strokes (Fig.
  6).</p>
  <fig>
    <caption><p>Color spot extrapolation for lineart
    colorization.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="lineart_cat.png" />
  </fig>
  <p>Note that this colorization algorithm has been subsequently
  implemented natively in <italic>GIMP</italic>
  (<xref alt="GIMP, 2018" rid="ref-jehan18" ref-type="bibr">GIMP,
  2018</xref>).</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Automatic Illumination of Flat-colored
      Drawings</bold>:</p>
    </list-item>
  </list>
  <p>In a similar vein, we have designed an algorithm to automatically
  illuminates flat-colorized drawings, by generating a light/shadow
  layer above a flat-colored layer
  (<xref alt="Tschumperlé et al., 2022" rid="ref-tschumperle2022automatic" ref-type="bibr">Tschumperlé
  et al., 2022</xref>) (Fig. 7).</p>
  <fig>
    <caption><p>Left: input image, Middle-left: estimated 3D normals.
    Right: examples of automatic illuminations obtained with different
    parameters.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="illumination.png" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p><bold>Patch-Based Image Style Transfer</bold>:</p>
    </list-item>
  </list>
  <p>Image stylization consists in transforming an input image to give
  it a pictorial style close to that of a second image (style image). In
  2022, were successfully developed a patch-based multi-scale algorithm,
  with low algorithmic cost
  (<xref alt="Samuth et al., 2022" rid="ref-samuth2022patch" ref-type="bibr">Samuth
  et al., 2022</xref>), which is now a part of
  <monospace>G'MIC</monospace> (Fig. 8).</p>
  <fig>
    <caption><p><monospace>G'MIC</monospace> style transfer. Input image
    (top left) is stylized according to different style images (top
    row).</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="style_transfer.png" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p><bold>Debanding of Astronomical Images</bold>:</p>
    </list-item>
  </list>
  <p><monospace>G'MIC</monospace> is used in the astronomy research
  community, in particular for processing images from the James Webb
  Space Telescope, which exhibits band frequency noise (efficiently
  mitigated with <monospace>G'MIC</monospace> filter <bold>Banding
  Denoise</bold>). <monospace>G'MIC</monospace> has been cited in
  (<xref alt="Ray et al., 2023" rid="ref-ray2023outflows" ref-type="bibr">Ray
  et al., 2023</xref>), where images from protostar
  <italic>HH211</italic> have been processed. One of those made the
  cover of <italic>Nature</italic> of October 2023 (Fig. 9).</p>
  <fig>
    <caption><p>Left: image of protostar, processed with
    <monospace>G'MIC</monospace> (courtesy of Mark McCaughrean/ESA).
    Right: effect of the <monospace>G'MIC</monospace> <bold>Banding
    Denoise</bold> algorithm on a JWST image (courtesy of Judy
    Schmidt).</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="nature.png" />
  </fig>
</sec>
<sec id="in-memoriam">
  <title>In Memoriam</title>
  <p>This article is dedicated to Sébastien Fourey, co-developer of the
  G’MIC project, who passed away in October 2024. He was the kindest,
  most caring person you’ll ever meet, as well as being extremely
  competent and passionate about computing, algorithms and software
  development as a whole. He has always believed in the magic of free
  software. The world has lost a talented developer, a great researcher
  and teacher, but above all a person of great humanity. Rest in peace,
  Sébastien.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-imagemagick">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>ImageMagick Studio LLC</string-name>
      </person-group>
      <article-title>ImageMagick</article-title>
      <year iso-8601-date="2023-01-04">2023</year><month>01</month><day>04</day>
      <uri>https://imagemagick.org</uri>
    </element-citation>
  </ref>
  <ref id="ref-graphicsmagick">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>GraphicsMagick Group</string-name>
      </person-group>
      <article-title>GraphicsMagick</article-title>
      <year iso-8601-date="2023-01-14">2023</year><month>01</month><day>14</day>
      <uri>http://www.graphicsmagick.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cimg">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Tschumperle</surname><given-names>David</given-names></name>
        <name><surname>Tilmant</surname><given-names>Christophe</given-names></name>
        <name><surname>Barra</surname><given-names>Vincent</given-names></name>
      </person-group>
      <source>Digital image processing with C++: Implementing reference algorithms with the Cimg Library (1st Ed.)</source>
      <publisher-name>CRC Press</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.1201/9781003323693</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-tschumperle2022automatic">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Tschumperlé</surname><given-names>David</given-names></name>
        <name><surname>Porquet</surname><given-names>Christine</given-names></name>
        <name><surname>Mahboubi</surname><given-names>Amal</given-names></name>
      </person-group>
      <article-title>Automatic illumination of flat-colored drawings by 3D augmentation of 2D silhouettes</article-title>
      <source>2022 IEEE international conference on image processing (ICIP)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.1109/icip46576.2022.9897386</pub-id>
      <fpage>371</fpage>
      <lpage>375</lpage>
    </element-citation>
  </ref>
  <ref id="ref-samuth2022patch">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Samuth</surname><given-names>Benjamin</given-names></name>
        <name><surname>Tschumperlé</surname><given-names>David</given-names></name>
        <name><surname>Rabin</surname><given-names>Julien</given-names></name>
      </person-group>
      <article-title>A patch-based approach for artistic style transfer via constrained multi-scale image matching</article-title>
      <source>2022 IEEE international conference on image processing (ICIP)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.1109/icip46576.2022.9897334</pub-id>
      <fpage>3490</fpage>
      <lpage>3494</lpage>
    </element-citation>
  </ref>
  <ref id="ref-fourey2018fast">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Fourey</surname><given-names>Sébastien</given-names></name>
        <name><surname>Tschumperlé</surname><given-names>David</given-names></name>
        <name><surname>Revoy</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>A fast and efficient semi-guided algorithm for flat coloring line-arts</article-title>
      <source>International symposium on vision, modeling and visualization</source>
      <year iso-8601-date="2018">2018</year>
    </element-citation>
  </ref>
  <ref id="ref-tschumperle2020reconstruction">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tschumperlé</surname><given-names>David</given-names></name>
        <name><surname>Porquet</surname><given-names>Christine</given-names></name>
        <name><surname>Mahboubi</surname><given-names>Amal</given-names></name>
      </person-group>
      <article-title>Reconstruction of smooth 3D color functions from keypoints: Application to lossy compression and exemplar-based generation of color LUTs</article-title>
      <source>SIAM Journal on Imaging Sciences</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>13</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1137/19m1306798</pub-id>
      <fpage>1511</fpage>
      <lpage>1535</lpage>
    </element-citation>
  </ref>
  <ref id="ref-buyssens2015exemplar">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Buyssens</surname><given-names>Pierre</given-names></name>
        <name><surname>Daisy</surname><given-names>Maxime</given-names></name>
        <name><surname>Tschumperlé</surname><given-names>David</given-names></name>
        <name><surname>Lézoray</surname><given-names>Olivier</given-names></name>
      </person-group>
      <article-title>Exemplar-based inpainting: Technical review and new heuristics for better geometric reconstructions</article-title>
      <source>IEEE transactions on image processing</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>24</volume>
      <issue>6</issue>
      <pub-id pub-id-type="doi">10.1109/tip.2015.2411437</pub-id>
      <fpage>1809</fpage>
      <lpage>1824</lpage>
    </element-citation>
  </ref>
  <ref id="ref-jehan18">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>GIMP</surname></name>
      </person-group>
      <article-title>Lineart Bucket Fill</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://developer.gimp.org/core/algorithm/line-art-bucket-fill/</uri>
    </element-citation>
  </ref>
  <ref id="ref-mathmap">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Probst</surname></name>
      </person-group>
      <article-title>The MathMap Image Processing Application</article-title>
      <year iso-8601-date="2009">2009</year>
      <uri>https://www.complang.tuwien.ac.at/schani/mathmap/</uri>
    </element-citation>
  </ref>
  <ref id="ref-pixelitor">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Balázs-Csíki</surname></name>
      </person-group>
      <article-title>Pixelitor</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://pixelitor.sourceforge.io/index.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-filterforge">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ashbrook</surname><given-names>Brad</given-names></name>
      </person-group>
      <article-title>Filter forge</article-title>
      <source>PSA Journal</source>
      <publisher-name>Photographic Society of America, Inc.</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>84</volume>
      <issue>2</issue>
      <fpage>8</fpage>
      <lpage>10</lpage>
    </element-citation>
  </ref>
  <ref id="ref-qt">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Qt</surname></name>
      </person-group>
      <article-title>A cross-platform software for creating graphical user interfaces</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://www.qt.io</uri>
    </element-citation>
  </ref>
  <ref id="ref-ray2023outflows">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ray</surname><given-names>Tom P</given-names></name>
        <name><surname>McCaughrean</surname><given-names>Mark J</given-names></name>
        <name><surname>Caratti o Garatti</surname><given-names>Alessio</given-names></name>
        <name><surname>Kavanagh</surname><given-names>PJ</given-names></name>
        <name><surname>Justtanont</surname><given-names>K</given-names></name>
        <name><surname>Dishoeck</surname><given-names>Ewine F van</given-names></name>
        <name><surname>Reitsma</surname><given-names>M</given-names></name>
        <name><surname>Beuther</surname><given-names>H</given-names></name>
        <name><surname>Francis</surname><given-names>L</given-names></name>
        <name><surname>Gieser</surname><given-names>C</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Outflows from the youngest stars are mostly molecular</article-title>
      <source>Nature</source>
      <publisher-name>Nature Publishing Group UK London</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>622</volume>
      <issue>7981</issue>
      <pub-id pub-id-type="doi">10.1038/s41586-023-06551-1</pub-id>
      <fpage>48</fpage>
      <lpage>52</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
