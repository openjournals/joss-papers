<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5711</article-id>
<article-id pub-id-type="doi">10.21105/joss.05711</article-id>
<title-group>
<article-title>CMakePPLang: An object-oriented extension to
CMake</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3161-9378</contrib-id>
<name>
<surname>Crandall</surname>
<given-names>Zachery</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Mulnix</surname>
<given-names>Blake</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Butler</surname>
<given-names>Branden</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6065-3167</contrib-id>
<name>
<surname>Windus</surname>
<given-names>Theresa L.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4235-5179</contrib-id>
<name>
<surname>Richard</surname>
<given-names>Ryan M.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Chemistry, Iowa State University,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Chemical and Biological Sciences, Ames National Laboratory,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-06-12">
<day>12</day>
<month>6</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>89</issue>
<fpage>5711</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>CMake</kwd>
<kwd>build tools</kwd>
<kwd>cross-platform</kwd>
<kwd>C++</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>CMakePPLang is an object-oriented extension to the CMake language
  written entirely using the original CMake language, with the goal of
  making projects built on CMake easier to create and maintain. That
  said, CMakePPLang has different coding practices, paradigms, and
  standards than the original CMake language, much in the same way that
  C coding differs from C coding despite some level of interoperability.
  Currently, CMakePPLang is used within the CMakePP organization
  (<xref alt="“CMakePP Organization,” 2023" rid="ref-cmakepp_org" ref-type="bibr">“CMakePP
  Organization,” 2023</xref>) as the foundation for two in-progress
  projects: CMakeTest
  (<xref alt="CMakeTest, 2023" rid="ref-cmaketest" ref-type="bibr"><italic>CMakeTest</italic>,
  2023</xref>) and CMaize
  (<xref alt="CMaize, 2022" rid="ref-cmaize" ref-type="bibr"><italic>CMaize</italic>,
  2022</xref>). CMakeTest provides a solution for unit testing CMake and
  CMakePPLang code. CMaize is a CMake tool to simplify interoperability
  between projects and writing their build systems.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>CMake
  (<xref alt="CMake, 2023" rid="ref-cmake" ref-type="bibr"><italic>CMake</italic>,
  2023</xref>) is an extensible build tool that exceeds at generating
  build systems for many combinations of platforms, compilers, and build
  configurations. CMake has become the <italic>de facto</italic>
  standard tool for building C, C, and Fortran programs of moderate to
  large size. However, as the size of a project increases, the
  complexity of the CMake build code tends to increase as well, and the
  need arises to make building projects with CMake easier and less error
  prone. The complexity of builds will also increase as scientific
  computing moves toward heterogeneous systems, requiring programs to
  leverage a combination of CPUs, GPUs, and other specialized hardware
  (<xref alt="Richard et al., 2023" rid="ref-richard_pluginplay_2023" ref-type="bibr">Richard
  et al., 2023</xref>). Better utilities and extensions in CMake can
  help alleviate these issues, but these tools must be able to be
  designed in a maintainable and testable way
  (<xref alt="“Software Quality,” 2005" rid="ref-pressman_142_2005" ref-type="bibr">“Software
  Quality,” 2005</xref>). Object-oriented programming excels at managing
  and maintaining large, complex code bases
  (<xref alt="Ambler, 1998" rid="ref-ambler_realistic_1998" ref-type="bibr">Ambler,
  1998</xref>;
  <xref alt="Wirth, 2006" rid="ref-wirth_good_2006" ref-type="bibr">Wirth,
  2006</xref>), and there is an increasing need for this in the CMake
  language.</p>
  <p>Tobias Becker
  (<xref alt="Becker et al., 2021" rid="ref-becker_cmake_2021" ref-type="bibr">Becker
  et al., 2021</xref>) recognized these issues and wrote a purely
  object-oriented language on top of CMake, called CMake (formerly
  oo-cmake). CMake contains an abundance of CMake extensions. Many of
  those extensions have direct overlap with extensions that are part of
  CMakePPLang. Features include (among many): maps, objects,
  tasks/promises. Unfortunately development of CMake has largely been
  done by a single developer and it appears to have been abandoned, as
  there have only been two commits since July 2017, both in 2021.</p>
  <p>One of the primary issues with CMake is the lack of documentation.
  While there is some high-level documentation, there is little to no
  API or detailed developer documentation. This makes it very
  challenging for a new developer to figure out what is going on.
  Initially, forking and expanding on CMake was considered, but it was
  determined that it would take similar time to decipher CMake as it
  would to develop CMakePPLang.</p>
  <p>CMakePPLang has been developed to provide extensions to the CMake
  language which provide objected-oriented functionality and other
  quality-of-life improvements. The main features of CMakePPLang are the
  object-oriented functionality, strong data typing, addition of a map
  structure, and backwards-compatibility with CMake. These features
  allow for easier general programming in CMake, which is key to writing
  complex build tools in the language. Although CMakePPLang is built on
  top of CMake, CMakePPLang mostly relies on fairly fundamental features
  of the CMake language, so it is versioned independently of CMake using
  semantic versioning
  (<xref alt="Semantic Versioning 2.0.0, 2023" rid="ref-semver" ref-type="bibr"><italic>Semantic
  Versioning 2.0.0</italic>, 2023</xref>).</p>
</sec>
<sec id="basic-usage">
  <title>Basic Usage</title>
  <p>CMakePPLang is developed using CMake, so it is inherently
  backwards-compatible with CMake code and can be combined with CMake in
  the same <monospace>CMakeLists.txt</monospace> or
  <monospace>*.cmake</monospace> files. To use CMakePPLang, it is simply
  included like any other CMake module after it is downloaded
  (<xref alt="[fig:include_cmakepplang]" rid="figU003Ainclude_cmakepplang">[fig:include_cmakepplang]</xref>).</p>
  <fig>
    <caption><p>Example of including CMakePPLang in an existing CMake
    file.<styled-content id="figU003Ainclude_cmakepplang"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig/include_cmakepplang.png" />
  </fig>
  <p>Native CMake is a weakly typed language where all values are
  strings, and, in certain circumstances, select values are interpreted
  as being of another type. A common example is when a string is used as
  an argument to CMake’s <monospace>if</monospace> statement, where the
  string is implicitly cast to a boolean. In practice, this weak typing
  can lead to subtle, hard-to-detect errors. CMakePPLang implements
  strong-typing in order to avoid/catch such errors. An example of weak
  typing causing issues is the ambiguity when passing a list as an
  argument to a function, which many CMake users are likely familiar
  with. In CMake’s <monospace>list(LENGTH</monospace> function, there
  are three different ways to pass a list to the function, yielding
  three different results as seen in
  <xref alt="[fig:cmake_list_length]" rid="figU003Acmake_list_length">[fig:cmake_list_length]</xref>.
  Looking at the function signature,
  <monospace>list(LENGTH &lt;list&gt; &lt;output variable&gt;)</monospace>
  (<xref alt="CMake List Length, 2023" rid="ref-cmake_list_length" ref-type="bibr"><italic>CMake
  List Length</italic>, 2023</xref>), it is unclear which version to use
  without trial and error. Conversely, using strong typing with
  CMakePPLang
  (<xref alt="[fig:cmakepplang_list_length]" rid="figU003Acmakepplang_list_length">[fig:cmakepplang_list_length]</xref>),
  it is immediately clear that the variable pointing to the list should
  be used from the types of the signature,
  <monospace>cpp_list(LENGTH cpp_list list* int*)</monospace>, where
  <monospace>list*</monospace> is a pointer to a list (colloquially it
  is the variable containing a list) and <monospace>int*</monospace> is
  a pointer to an integer where the resulting length will be stored. The
  other options now throw errors that prompt the user to reconsider the
  function signature and types being passed in.</p>
  <fig>
    <caption><p>Three different methods of passing a list to
    <monospace>list(LENGTH</monospace>, showing the results of each call
    in a comment on the following line. Only the first call returns the
    correct list length of three.
    <styled-content id="figU003Acmake_list_length"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig/cmake_list_length.png" />
  </fig>
  <fig>
    <caption><p>Three different methods of passing a list to a function,
    <monospace>cpp_list(LENGTH</monospace>, which wraps
    <monospace>list(LENGTH</monospace> and provides strong typing.
    Results of each call are shown in a comment on the proceeding line.
    Only the first call is correct and the other two result in errors.
    <styled-content id="figU003Acmakepplang_list_length"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig/cmakepplang_list_length.png" />
  </fig>
  <p>CMakePPLang conceptually has three classifications of types: CMake
  types, Quasi-CMake types, and pure CMakePPLang types.</p>
  <p>First, CMakePPLang recognizes the types that CMake may interpret a
  string to be in certain contexts. These types include: Boolean,
  Command, File path, Floating-point numbers, Generator expressions,
  Integers, and Targets.</p>
  <p>Quasi-CMake types are types which conceptually exist in traditional
  CMake, but are not explicitly defined. These types are: Description
  and Type. Descriptions are the subset of strings that have no other
  intrinsic type aside from being a string, i.e., they can only be
  interpreted as text. Types are string values used to represent the
  type of an object, in CMakePPLang they amount to strings reserved for
  the in-code keywords representing a type, like
  <monospace>str</monospace> for a string, <monospace>int</monospace>
  for an integer, and <monospace>desc</monospace> for a description.</p>
  <p>CMakePPLang also defines types that are outside of what can easily
  be represented in CMake: Class, Map, and Object. The Class type is
  used for objects which hold the specification of a user-defined type.
  Classes in CMakePPLang can contain attributes and functions and
  support inheritance. Instances of these user-defined classes can be
  created to be used in CMake modules. Currently, Classes are
  represented using Maps. An object of the Map type is an associative
  array for storing key-value pairs. The CMakePPLang Map provides the
  same basic functionality as a C <monospace>std::map</monospace>
  (<xref alt="“std::map,” 2023" rid="ref-cpp_stdmap_2023" ref-type="bibr">“<named-content content-type="nocase">std</named-content>::<named-content content-type="nocase">map</named-content>,”
  2023</xref>), Python
  <monospace>dictionary</monospace>(<xref alt="“Built-in Types,” 2023" rid="ref-python_map_2023" ref-type="bibr">“Built-in
  Types,” 2023</xref>), or JavaScript <monospace>Map</monospace>
  (<xref alt="“Map - JavaScript,” 2023" rid="ref-javascript_map_2023" ref-type="bibr">“Map
  - JavaScript,” 2023</xref>). Users can use maps in their code wherever
  they see fit, and maps are used in CMakePPLang to hold the state of
  object instances. Finally, the Object type is the base class for all
  user-defined classes. The CMakePPLang Object defines the default
  implementations for the equality, copy, and serialization
  functionalities.</p>
  <p>CMakePPLang is designed primarily to provide object-oriented
  funcionality for tools designed in CMake. The first step in this
  process is defining a class
  (<xref alt="[fig:class_example]" rid="figU003Aclass_example">[fig:class_example]</xref>).
  Strong typing of the member function parameters can be seen in the
  example as well.</p>
  <fig>
    <caption><p>Example of defining a CMakePPLang class, creating an
    instance, and calling a member function to print “Hello
    world!”.<styled-content id="figU003Aclass_example"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig/class_example.png" />
  </fig>
  <p>Users can also define a map to hold information, like a map that
  stores a color value under the “color” key
  (<xref alt="[fig:map_example]" rid="figU003Amap_example">[fig:map_example]</xref>),
  along with other relevant values.</p>
  <fig>
    <caption><p>Example of creating a CMakePPLang map, adding a
    key-value pair, and retrieving the value using the
    key.<styled-content id="figU003Amap_example"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig/map_example.png" />
  </fig>
  <p>Using these tools, CMakePPLang users can leverage the benefits of
  object- oriented programming to create more easily maintainable and
  testable utilities for CMake development.</p>
</sec>
<sec id="acknowledgement">
  <title>Acknowledgement</title>
  <p>This research was supported by the Exascale Computing Project
  (17-SC-20-SC), a collaborative effort of the U.S. Department of Energy
  Office of Science and the National Nuclear Security Administration.
  The software was developed in the NWChemEx subproject and the research
  was performed at the Ames National Laboratory, which is operated for
  the US DOE by Iowa State University under Contract
  No. DE-AC02-07CH11358.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-richard_pluginplay_2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Richard</surname><given-names>Ryan M.</given-names></name>
        <name><surname>Keipert</surname><given-names>Kristopher</given-names></name>
        <name><surname>Waldrop</surname><given-names>Jonathan</given-names></name>
        <name><surname>Keçeli</surname><given-names>Murat</given-names></name>
        <name><surname>Williams-Young</surname><given-names>David</given-names></name>
        <name><surname>Bair</surname><given-names>Raymond</given-names></name>
        <name><surname>Boschen</surname><given-names>Jeffery</given-names></name>
        <name><surname>Crandall</surname><given-names>Zachery</given-names></name>
        <name><surname>Gasperich</surname><given-names>Kevin</given-names></name>
        <name><surname>Mahmud</surname><given-names>Quazi Ishtiaque</given-names></name>
        <name><surname>Panyala</surname><given-names>Ajay</given-names></name>
        <name><surname>Valeev</surname><given-names>Edward</given-names></name>
        <name><surname>Dam</surname><given-names>Hubertus van</given-names></name>
        <name><surname>Jong</surname><given-names>Wibe A. de</given-names></name>
        <name><surname>Windus</surname><given-names>Theresa L.</given-names></name>
      </person-group>
      <article-title>PluginPlay: Enabling exascale scientific software one module at a time</article-title>
      <source>The Journal of Chemical Physics</source>
      <year iso-8601-date="2023-05">2023</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-07">2023</year><month>06</month><day>07</day></date-in-citation>
      <volume>158</volume>
      <issue>18</issue>
      <issn>0021-9606</issn>
      <uri>https://doi.org/10.1063/5.0147903</uri>
      <pub-id pub-id-type="doi">10.1063/5.0147903</pub-id>
      <fpage>184801</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-wirth_good_2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wirth</surname><given-names>N.</given-names></name>
      </person-group>
      <article-title>Good ideas, through the looking glass [computing history]</article-title>
      <source>Computer</source>
      <year iso-8601-date="2006-01">2006</year><month>01</month>
      <volume>39</volume>
      <issue>1</issue>
      <issn>1558-0814</issn>
      <pub-id pub-id-type="doi">10.1109/MC.2006.20</pub-id>
      <fpage>28</fpage>
      <lpage>39</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pressman_142_2005">
    <element-citation publication-type="chapter">
      <article-title>Software quality</article-title>
      <source>Software engineering: A practitioner’s approach</source>
      <publisher-name>Palgrave Macmillan</publisher-name>
      <year iso-8601-date="2005">2005</year>
      <edition>7</edition>
      <isbn>978-0-07-301933-8</isbn>
      <fpage>400</fpage>
      <lpage>406</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ambler_realistic_1998">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Ambler</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>A realistic look at object-oriented reuse</article-title>
      <source>Dr. Dobb’s</source>
      <year iso-8601-date="1998-01">1998</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-12">2023</year><month>06</month><day>12</day></date-in-citation>
      <uri>http://www.drdobbs.com/a-realistic-look-at-object-oriented-reus/184415594</uri>
    </element-citation>
  </ref>
  <ref id="ref-becker_cmake_2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Becker</surname><given-names>Tobias</given-names></name>
        <name><surname>Hück</surname><given-names>Alexander</given-names></name>
        <name><surname>Sánchez</surname><given-names>Manu</given-names></name>
        <name><surname>Baratov</surname><given-names>Ruslan</given-names></name>
        <name><surname>Loitsch</surname><given-names>Florian</given-names></name>
        <name><surname>Remes</surname><given-names>Juha</given-names></name>
      </person-group>
      <article-title>CMake++</article-title>
      <year iso-8601-date="2021-12">2021</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-12">2023</year><month>06</month><day>12</day></date-in-citation>
      <uri>https://github.com/toeb/cmakepp</uri>
    </element-citation>
  </ref>
  <ref id="ref-cmake">
    <element-citation>
      <article-title>CMake</article-title>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-26">2023</year><month>06</month><day>26</day></date-in-citation>
      <uri>https://cmake.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cmake_list_length">
    <element-citation>
      <article-title>CMake list length</article-title>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-09-05">2023</year><month>09</month><day>05</day></date-in-citation>
      <uri>https://cmake.org/cmake/help/latest/command/list.html#length</uri>
    </element-citation>
  </ref>
  <ref id="ref-semver">
    <element-citation>
      <article-title>Semantic versioning 2.0.0</article-title>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-09-05">2023</year><month>09</month><day>05</day></date-in-citation>
      <uri>https://semver.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cmakepp_org">
    <element-citation>
      <article-title>CMakePP organization</article-title>
      <source>cmakepp.github.io</source>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-26">2023</year><month>06</month><day>26</day></date-in-citation>
      <uri>https://cmakepp.github.io/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cmaize">
    <element-citation>
      <article-title>CMaize</article-title>
      <publisher-name>CMakePP</publisher-name>
      <year iso-8601-date="2022-03">2022</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-26">2023</year><month>06</month><day>26</day></date-in-citation>
      <uri>https://github.com/CMakePP/CMaize</uri>
    </element-citation>
  </ref>
  <ref id="ref-cmaketest">
    <element-citation>
      <article-title>CMakeTest</article-title>
      <publisher-name>CMakePP</publisher-name>
      <year iso-8601-date="2023-06">2023</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-26">2023</year><month>06</month><day>26</day></date-in-citation>
      <uri>https://github.com/CMakePP/CMakeTest</uri>
    </element-citation>
  </ref>
  <ref id="ref-cpp_stdmap_2023">
    <element-citation>
      <article-title>std::map</article-title>
      <source>cplusplus.com</source>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-12">2023</year><month>06</month><day>12</day></date-in-citation>
      <uri>https://cplusplus.com/reference/map/map/</uri>
    </element-citation>
  </ref>
  <ref id="ref-python_map_2023">
    <element-citation>
      <article-title>Built-in Types: Mapping Types - dict</article-title>
      <source>Python documentation</source>
      <year iso-8601-date="2023-06">2023</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-12">2023</year><month>06</month><day>12</day></date-in-citation>
      <uri>https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</uri>
    </element-citation>
  </ref>
  <ref id="ref-javascript_map_2023">
    <element-citation>
      <article-title>Map - JavaScript</article-title>
      <source>JavaScript Reference</source>
      <year iso-8601-date="2023-04">2023</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-12">2023</year><month>06</month><day>12</day></date-in-citation>
      <uri>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
