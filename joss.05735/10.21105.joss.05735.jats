<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5735</article-id>
<article-id pub-id-type="doi">10.21105/joss.05735</article-id>
<title-group>
<article-title>parafields: A generator for distributed, stationary
Gaussian processes</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6140-2332</contrib-id>
<name>
<surname>Kempf</surname>
<given-names>Dominic</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3295-7347</contrib-id>
<name>
<surname>Klein</surname>
<given-names>Ole</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0004-8123-4673</contrib-id>
<name>
<surname>Kutri</surname>
<given-names>Robert</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8493-4393</contrib-id>
<name>
<surname>Scheichl</surname>
<given-names>Robert</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Bastian</surname>
<given-names>Peter</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Scientific Software Center, Heidelberg University,
Heidelberg, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Interdisciplinary Center for Scientific Computing,
Heidelberg University, Heidelberg, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Institute for Mathematics, Heidelberg University,
Heidelberg, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Independent Researcher, Heidelberg, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-05-11">
<day>11</day>
<month>5</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>92</issue>
<fpage>5735</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>MPI</kwd>
<kwd>scientific computing</kwd>
<kwd>high performance computing</kwd>
<kwd>uncertainty quantification</kwd>
<kwd>random field generation</kwd>
<kwd>circulant embedding</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Parafields is a Python package for the generation of stationary
  Gaussian random fields with well-defined, known statistical
  properties. The use of such fields is a key ingredient of simulation
  workflows that involve uncertain, spatially heterogeneous parameters.
  As such, Gaussian random fields play a dominant role in geostatistics,
  e.g., in the modelling of particulate matter concentration,
  temperature distributions and subsurface flow
  (<xref alt="Cameletti et al., 2013" rid="ref-cameletti2013spatio" ref-type="bibr">Cameletti
  et al., 2013</xref>)
  (<xref alt="Sain et al., 2011" rid="ref-sain2011spatial" ref-type="bibr">Sain
  et al., 2011</xref>)
  (<xref alt="Dodwell et al., 2015" rid="ref-dodwell2015hierarchical" ref-type="bibr">Dodwell
  et al., 2015</xref>). Outside these traditional applications, Gaussian
  random fields are also used in biomedical imaging
  (<xref alt="Penny et al., 2005" rid="ref-penny2005bayesian" ref-type="bibr">Penny
  et al., 2005</xref>), material sciences
  (<xref alt="Torquato &amp; Haslach Jr, 2002" rid="ref-torquato2002random" ref-type="bibr">Torquato
  &amp; Haslach Jr, 2002</xref>) or within Markov-Chain Monte-Carlo
  methods in Bayesian estimation
  (<xref alt="Scheichl et al., 2017" rid="ref-scheichl2017quasi" ref-type="bibr">Scheichl
  et al., 2017</xref>).</p>
  <p>Parafields is also able to run in parallel using the Message
  Passing Interface (MPI) standard through mpi4py
  (<xref alt="Dalcin &amp; Fang, 2021" rid="ref-mpi4py" ref-type="bibr">Dalcin
  &amp; Fang, 2021</xref>). In this case, the computational domain is
  split and only the part of the random field relevant to a certain
  process is generated on that process. The generation process is
  implemented in a performance-oriented C<monospace>++</monospace>
  backend library and exposed in Python though an intuitive Python
  interface.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The simulation of large-scale Gaussian random fields is a
  computationally challenging task, particularly if the field being
  considered has a short correlation length when compared to its
  computational domain.</p>
  <p>However, when the random field in question is stationary, that is,
  its covariance function is translation invariant, fast and exact
  methods of simulation based on the Fast Fourier Transform have been
  proposed by Dietrich &amp; Newsam
  (<xref alt="1997" rid="ref-dietrich1997fast" ref-type="bibr">1997</xref>)
  and Wood &amp; Chan
  (<xref alt="1994" rid="ref-wood1994simulation" ref-type="bibr">1994</xref>).
  These can outperform more traditional, factorization-based methods in
  terms of both scaling as well as absolute performance.</p>
  <p>Through the combination of an efficient C<monospace>++</monospace>
  backend with an easy-to-use Python interface, this package aims to
  make these methods accessible for integration into existing workflows.
  This separation also allows the package to support large-scale,
  peformance-oriented applications, as well as providing a means to
  quickly generate working prototypes using just a few lines.</p>
  <p>Other packages for the generation of stationary Gaussian processes
  exist, e.g., the R package lgcp
  (<xref alt="Davies &amp; Bryant, 2013" rid="ref-davies2013lgcp" ref-type="bibr">Davies
  &amp; Bryant, 2013</xref>), the Julia package GaussianRandomFields.jl
  (<xref alt="Robbe, 2023" rid="ref-robbe2023grfjl" ref-type="bibr">Robbe,
  2023</xref>), and the Python package GSTools
  (<xref alt="Müller et al., 2022" rid="ref-mueller2022gstools" ref-type="bibr">Müller
  et al., 2022</xref>). In comparison with these alternative packages,
  parafields is specifically designed and adapted to the sampling of
  very large Gaussian random fields within a HPC workflow. This was a
  major concern in the development of the backend and is among other
  things, reflected in the ability to create Gaussian processes in an
  MPI-distributed fashion.</p>
</sec>
<sec id="implementation">
  <title>Implementation</title>
  <p>Parafields has over ten years of development history: it was first
  implemented as an extension to the Dune framework
  (<xref alt="Bastian et al., 2021" rid="ref-dune" ref-type="bibr">Bastian
  et al., 2021</xref>) for the numerical solution of partial
  differential equations. This restricted the potential userbase to
  users of that software framework, although there was quite some
  interest in the software from outside this community. In 2022, we
  started a huge refactoring: the previous C<monospace>++</monospace>
  code base
  (<xref alt="Klein, 2017" rid="ref-dune-randomfield" ref-type="bibr">Klein,
  2017</xref>) was rewritten to have a weaker dependency on Dune, which
  e.g. included a rewrite of the CMake build system
  (<xref alt="Klein &amp; Kempf, 2022" rid="ref-parafields-core" ref-type="bibr">Klein
  &amp; Kempf, 2022</xref>). In order to open up to a wider userbase, a
  Python interface written in pybind11
  (<xref alt="Jakob et al., 2017" rid="ref-pybind11" ref-type="bibr">Jakob
  et al., 2017</xref>) was added.</p>
  <p>When engineering the Python package, we put special emphasis on the
  following usability aspects: installability, customizability and
  embedding into existing user workflows.</p>
  <p>The recommended installation procedure for parafields is perfectly
  aligned with the state-of-the-art of the Python language: it is
  installable through <monospace>pip</monospace> and automatically
  compiles using the CMake build system of the project through
  scikit-build
  (<xref alt="Fillion-Robin et al., 2018" rid="ref-scikit-build" ref-type="bibr">Fillion-Robin
  et al., 2018</xref>). Required dependencies of the
  C<monospace>++</monospace> library are automatically fetched and built
  in the required configuration. For sequential usage we also provide
  pre-compiled Python wheels. They are built against the sequential MPI
  stub library FakeMPI
  (<xref alt="Kempf &amp; PetSc Developers, 2022" rid="ref-fakempi" ref-type="bibr">Kempf
  &amp; PetSc Developers, 2022</xref>), which allows us to build the
  sequential and the parallel version from the same code base. Users who
  want to leverage MPI through mpi4py will instead build the package
  from source against their system MPI library.</p>
  <p>It was a goal of the design of the Python API to expose as much of
  the flexibility of the underlying C<monospace>++</monospace> framework
  as possible. In order to do so, we use pybind11’s capabilities to pass
  Python callables to the C<monospace>++</monospace> backend. This
  allows users to, e.g., implement custom covariance functions or use
  different random number generators. Furthermore, we acknowledge the
  fact that many Python users write scientific applications within
  Jupyter: our fields render nicely as images in Jupyter and field
  generation can optionally be configured through an interactive widget
  frontend within Jupyter.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>The authors thank all contributors of the dune-randomfield project
  for their valuable contributions that are now part of the
  parafields-core library. Dominic Kempf is employed by the Scientific
  Software Center of Heidelberg University which is funded as part of
  the Excellence Strategy of the German Federal and State Governments.
  Ole Klein’s work is supported by the federal ministry of education and
  research of Germany (Bundesministerium für Bildung und Forschung) and
  the ministry of science, research and arts of the federal state of
  Baden-Württemberg (Ministerium für Wissenschaft, Forschung und Kunst
  Baden-Württemberg).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-dietrich1997fast">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dietrich</surname><given-names>Claude R</given-names></name>
        <name><surname>Newsam</surname><given-names>Garry N</given-names></name>
      </person-group>
      <article-title>Fast and exact simulation of stationary Gaussian processes through circulant embedding of the covariance matrix</article-title>
      <source>SIAM Journal on Scientific Computing</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="1997">1997</year>
      <volume>18</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1137/s1064827592240555</pub-id>
      <fpage>1088</fpage>
      <lpage>1107</lpage>
    </element-citation>
  </ref>
  <ref id="ref-parafields-core">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Klein</surname><given-names>Ole</given-names></name>
        <name><surname>Kempf</surname><given-names>Dominic</given-names></name>
      </person-group>
      <article-title>parafields-core</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/parafields/parafields-core</uri>
    </element-citation>
  </ref>
  <ref id="ref-mpi4py">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dalcin</surname><given-names>Lisandro</given-names></name>
        <name><surname>Fang</surname><given-names>Yao-Lung L.</given-names></name>
      </person-group>
      <article-title>mpi4py: Status update after 12 years of development</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <year iso-8601-date="2021">2021</year>
      <volume>23</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/MCSE.2021.3083216</pub-id>
      <fpage>47</fpage>
      <lpage>54</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dune">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bastian</surname><given-names>Peter</given-names></name>
        <name><surname>Blatt</surname><given-names>Markus</given-names></name>
        <name><surname>Dedner</surname><given-names>Andreas</given-names></name>
        <name><surname>Dreier</surname><given-names>Nils-Arne</given-names></name>
        <name><surname>Engwer</surname><given-names>Christian</given-names></name>
        <name><surname>Fritze</surname><given-names>René</given-names></name>
        <name><surname>Gräser</surname><given-names>Carsten</given-names></name>
        <name><surname>Grüninger</surname><given-names>Christoph</given-names></name>
        <name><surname>Kempf</surname><given-names>Dominic</given-names></name>
        <name><surname>Klöfkorn</surname><given-names>Robert</given-names></name>
        <name><surname>Ohlberger</surname><given-names>Mario</given-names></name>
        <name><surname>Sander</surname><given-names>Oliver</given-names></name>
      </person-group>
      <article-title>The dune framework: Basic concepts and recent developments</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="2021">2021</year>
      <volume>81</volume>
      <issn>0898-1221</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S089812212030256X</uri>
      <pub-id pub-id-type="doi">10.1016/j.camwa.2020.06.007</pub-id>
      <fpage>75</fpage>
      <lpage>112</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pybind11">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Jakob</surname><given-names>Wenzel</given-names></name>
        <name><surname>Rhinelander</surname><given-names>Jason</given-names></name>
        <name><surname>Moldovan</surname><given-names>Dean</given-names></name>
      </person-group>
      <article-title>pybind11 – seamless operability between C++11 and Python</article-title>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-dune-randomfield">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Klein</surname><given-names>Ole</given-names></name>
      </person-group>
      <article-title>Dune-randomfield - generation of Gaussian random fields in arbitrary dimensions, based on circulant embedding</article-title>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-fakempi">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Kempf</surname><given-names>Dominic</given-names></name>
        <name><surname>PetSc Developers</surname></name>
      </person-group>
      <article-title>FakeMPI - a sequential MPI stub</article-title>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-scikit-build">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Fillion-Robin</surname><given-names>Jean-Christophe</given-names></name>
        <name><surname>McCormick</surname><given-names>Matt</given-names></name>
        <name><surname>Padron</surname><given-names>Omar</given-names></name>
        <name><surname>Smolens</surname><given-names>Max</given-names></name>
        <name><surname>Grauer</surname><given-names>Michael</given-names></name>
        <name><surname>Sarahan</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>jcfr/scipy_2018_scikit-build_talk: SciPy 2018 talk | scikit-build: A build system generator for CPython C/C++/Fortran/Cython extensions</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2018-07">2018</year><month>07</month>
      <uri>https://doi.org/10.5281/zenodo.2565368</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.2565368</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-wood1994simulation">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Andrew TA</given-names></name>
        <name><surname>Chan</surname><given-names>Grace</given-names></name>
      </person-group>
      <article-title>Simulation of stationary Gaussian processes in [0, 1] d</article-title>
      <source>Journal of computational and graphical statistics</source>
      <publisher-name>Taylor &amp; Francis</publisher-name>
      <year iso-8601-date="1994">1994</year>
      <volume>3</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.2307/1390903</pub-id>
      <fpage>409</fpage>
      <lpage>432</lpage>
    </element-citation>
  </ref>
  <ref id="ref-davies2013lgcp">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Davies</surname><given-names>Tilman M.</given-names></name>
        <name><surname>Bryant</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>On circulant embedding for Gaussian random fields in R</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2013">2013</year>
      <volume>55</volume>
      <issue>9</issue>
      <uri>https://www.jstatsoft.org/index.php/jss/article/view/v055i09</uri>
      <pub-id pub-id-type="doi">10.18637/jss.v055.i09</pub-id>
      <fpage>1</fpage>
      <lpage>21</lpage>
    </element-citation>
  </ref>
  <ref id="ref-robbe2023grfjl">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Robbe</surname><given-names>Pieterjan</given-names></name>
      </person-group>
      <article-title>GaussianRandomFields.jl: A Julia package to generate and sample from Gaussian random fields</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>89</issue>
      <uri>https://doi.org/10.21105/joss.05595</uri>
      <pub-id pub-id-type="doi">10.21105/joss.05595</pub-id>
      <fpage>5595</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-mueller2022gstools">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Müller</surname><given-names>S.</given-names></name>
        <name><surname>Schüler</surname><given-names>L.</given-names></name>
        <name><surname>Zech</surname><given-names>A.</given-names></name>
        <name><surname>Heße</surname><given-names>F.</given-names></name>
      </person-group>
      <article-title>GSTools v1.3: A toolbox for geostatistical modelling in Python</article-title>
      <source>Geoscientific Model Development</source>
      <year iso-8601-date="2022">2022</year>
      <volume>15</volume>
      <issue>7</issue>
      <uri>https://gmd.copernicus.org/articles/15/3161/2022/</uri>
      <pub-id pub-id-type="doi">10.5194/gmd-15-3161-2022</pub-id>
      <fpage>3161</fpage>
      <lpage>3182</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cameletti2013spatio">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cameletti</surname><given-names>Michela</given-names></name>
        <name><surname>Lindgren</surname><given-names>Finn</given-names></name>
        <name><surname>Simpson</surname><given-names>Daniel</given-names></name>
        <name><surname>Rue</surname><given-names>Håvard</given-names></name>
      </person-group>
      <article-title>Spatio-temporal modeling of particulate matter concentration through the SPDE approach</article-title>
      <source>AStA Advances in Statistical Analysis</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <volume>97</volume>
      <pub-id pub-id-type="doi">10.1007/s10182-012-0196-3</pub-id>
      <fpage>109</fpage>
      <lpage>131</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sain2011spatial">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sain</surname><given-names>Stephan R</given-names></name>
        <name><surname>Furrer</surname><given-names>Reinhard</given-names></name>
        <name><surname>Cressie</surname><given-names>Noel</given-names></name>
      </person-group>
      <article-title>A spatial analysis of multivariate output from regional climate models</article-title>
      <source>The Annals of Applied Statistics</source>
      <publisher-name>JSTOR</publisher-name>
      <year iso-8601-date="2011">2011</year>
      <pub-id pub-id-type="doi">10.1214/10-AOAS369</pub-id>
      <fpage>150</fpage>
      <lpage>175</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dodwell2015hierarchical">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dodwell</surname><given-names>Tim J</given-names></name>
        <name><surname>Ketelsen</surname><given-names>Christian</given-names></name>
        <name><surname>Scheichl</surname><given-names>Robert</given-names></name>
        <name><surname>Teckentrup</surname><given-names>Aretha L</given-names></name>
      </person-group>
      <article-title>A hierarchical multilevel Markov chain Monte Carlo algorithm with applications to uncertainty quantification in subsurface flow</article-title>
      <source>SIAM/ASA Journal on Uncertainty Quantification</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>3</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1137/130915005</pub-id>
      <fpage>1075</fpage>
      <lpage>1108</lpage>
    </element-citation>
  </ref>
  <ref id="ref-penny2005bayesian">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Penny</surname><given-names>William D</given-names></name>
        <name><surname>Trujillo-Barreto</surname><given-names>Nelson J</given-names></name>
        <name><surname>Friston</surname><given-names>Karl J</given-names></name>
      </person-group>
      <article-title>Bayesian fMRI time series analysis with spatial priors</article-title>
      <source>NeuroImage</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2005">2005</year>
      <volume>24</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1016/j.neuroimage.2004.08.034</pub-id>
      <fpage>350</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-torquato2002random">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Torquato</surname><given-names>Salvatore</given-names></name>
        <name><surname>Haslach Jr</surname><given-names>HW</given-names></name>
      </person-group>
      <article-title>Random heterogeneous materials: Microstructure and macroscopic properties</article-title>
      <source>Appl. Mech. Rev.</source>
      <year iso-8601-date="2002">2002</year>
      <volume>55</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1115/1.1483342</pub-id>
      <fpage>B62</fpage>
      <lpage>B63</lpage>
    </element-citation>
  </ref>
  <ref id="ref-scheichl2017quasi">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Scheichl</surname><given-names>Robert</given-names></name>
        <name><surname>Stuart</surname><given-names>Andrew M</given-names></name>
        <name><surname>Teckentrup</surname><given-names>Aretha L</given-names></name>
      </person-group>
      <article-title>Quasi-monte carlo and multilevel Monte Carlo methods for computing posterior expectations in elliptic inverse problems</article-title>
      <source>SIAM/ASA Journal on Uncertainty Quantification</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>5</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1137/16m1061692</pub-id>
      <fpage>493</fpage>
      <lpage>518</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
