<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6292</article-id>
<article-id pub-id-type="doi">10.21105/joss.06292</article-id>
<title-group>
<article-title>CoSApp: a Python library to create, simulate and design
complex systems.</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6964-0044</contrib-id>
<name>
<surname>Lac</surname>
<given-names>Étienne</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0005-9828-0550</contrib-id>
<name>
<surname>De Spiegeleer</surname>
<given-names>Guy</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0001-8126-4045</contrib-id>
<name>
<surname>Delsalle</surname>
<given-names>Adrien</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-3579-3424</contrib-id>
<name>
<surname>Collonval</surname>
<given-names>Frédéric</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-0415-8399</contrib-id>
<name>
<surname>Lê</surname>
<given-names>Duc-Trung</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9740-4914</contrib-id>
<name>
<surname>Malandain</surname>
<given-names>Mathias</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Safran Tech, Digital Sciences &amp; Technologies
Department, France</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>twiinIT, France</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>WebScIT, France</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>QuantStack, France</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Inria centre at Rennes University, France</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-01-23">
<day>23</day>
<month>1</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>94</issue>
<fpage>6292</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Multidisciplinary Design Analysis and Optimization</kwd>
<kwd>System design</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>CoSApp, for <italic>Collaborative System Approach</italic>, is an
  object-oriented Python framework that allows domain experts and system
  architects to create, assemble, simulate and design complex systems.
  The API of CoSApp is focused on simplicity and explicit declaration of
  design problems. Special attention is given to modularity; a very
  flexible mechanism of solver assembly allows users to construct
  complex, customized simulation workflows. CoSApp handles steady-state
  simulation, as well as time-dependent dynamic systems, and multimode
  systems with event-based mode transitions.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The design of industrial products is usually a complex process,
  involving experts from multiple disciplines, and the interaction of
  many different components. Multidisciplinary Design Analysis and
  Optimization (MDAO) plays a crucial role in this process, by
  accounting for strong coupling between various components at early
  design stages, where the only way to assess the final product is to
  rely on physical simulation models. In this context, flexibility,
  rather than sheer performance, is key to assessing the value of new
  concepts and guiding design choices. Moreover, a clear separation
  between simulation models and resolution tools (solvers, optimizers,
  etc.) must be enforced to enable agile design processes.</p>
  <p>CoSApp addresses these needs by providing a user-friendly and
  comprehensive framework for creating both stand-alone and composite
  computational models, and solving mathematical problems based on
  specific design criteria. In particular, constraints can be added
  interactively in CoSApp workflows, which offers several
  advantages:</p>
  <list list-type="order">
    <list-item>
      <p>Problem complexity can be increased gradually, to help global
      convergence by starting from a physically sound state of the
      system.</p>
    </list-item>
    <list-item>
      <p>Engineering practices (referred to as <italic>design
      methods</italic> in CoSApp) can be coded within domain-specific
      models as a collection of algebraic problems that can be
      selectively activated in the context of a broader system.</p>
    </list-item>
  </list>
  <p>Thanks to its inherent agility, CoSApp caters to domain experts
  involved in model development, as well as system architects focused on
  designing high-level assemblies that model systems of interest.</p>
</sec>
<sec id="state-of-the-field">
  <title>State of the field</title>
  <p>There exist many MDAO frameworks. Among open-source,
  general-purpose libraries, three stand out in particular: OpenMDAO
  (<xref alt="Gray et al., 2019" rid="ref-Gray2019a" ref-type="bibr">Gray
  et al., 2019</xref>), GEMSEO
  (<xref alt="Gallard et al., 2018" rid="ref-gemseo_paper" ref-type="bibr">Gallard
  et al., 2018</xref>) and OpenModelica
  (<xref alt="Fritzson et al., 2020" rid="ref-openmodelica.orgU003AfritzsonU003AmicU003A2020" ref-type="bibr">Fritzson
  et al., 2020</xref>).</p>
  <p>OpenMDAO and GEMSEO are Python frameworks focused on optimization.
  They adopt a <italic>causal</italic> approach, meaning that each model
  (referred to as <italic>component</italic> in OpenMDAO, and a
  <italic>discipline</italic> in GEMSEO) has a predefined input/output
  interface associated with a transfer function representing causality.
  Both packages offer a large choice of numerical methods to solve and
  optimize multidisciplinary systems. Noticeably, they can take
  advantage of system-level gradients, when available (either coded
  inside the models or computed by automatic differentiation), which
  allows them to handle large numbers of unknowns (tens of thousands).
  At present, CoSApp evaluates gradients using finite differences, which
  limits the size of problems it can tackle (a few hundreds of unknowns,
  typically, which proves to be sufficient in early design phases).
  Among other features, OpenMDAO, developed by NASA, is a powerful tool
  to optimize trajectories, whereas GEMSEO, at present, does not support
  dynamic systems. Although both packages offer a wealth of valuable
  features, neither, to our knowledge, supports multimode systems with
  event-based transitions. A benchmark between OpenMDAO, GEMSEO and
  CoSApp was published by Di Giuseppe et al.
  (<xref alt="2023" rid="ref-DiGiuseppe.etalU003A2023" ref-type="bibr">2023</xref>).</p>
  <p>OpenModelica is based on the Modelica language, which supports
  acausal models. Depending on boundary conditions, the computation of a
  given model requires a prior automatic causality analysis, generating
  C code compiled into an executable artifact. Defining non-causal
  models is a great advantage for developers, who do not have to worry
  about information fluxes, and need only provide implicit relations
  between model variables. Moreover, the causality analysis reduces the
  number of unknowns to its minimum, and the use of a compiled language
  yields faster execution of the direct model, compared to interpreted
  languages such as Python. A significant drawback of this approach,
  though, is the lack of control in the choice of design parameters or
  iterative variables required to break algebraic loops, which may lead
  to poorly converging, hard-to-debug systems.</p>
</sec>
<sec id="overview">
  <title>Overview</title>
  <sec id="systems-and-ports">
    <title>Systems and Ports</title>
    <p>General assembly and execution semantics are coded within base
    classes, specialized for each model in derived classes. The basic
    bricks of CoSApp models are referred to as <italic>systems</italic>,
    represented by base class <monospace>System</monospace>. Systems are
    computational units with a defined input/output interface. Inputs
    and outputs are represented by collections of variables called
    <italic>ports</italic>. Like systems, custom ports, containing
    domain-specific variables, can be defined by specializing base class
    <monospace>Port</monospace>.</p>
    <p>Systems may have an arbitrary number of input and output ports.
    Higher-level assemblies are created by connecting ports of different
    systems in the context of a parent system. Hence, a CoSApp system is
    organized as a hierarchical tree of sub-models, referred to as
    <italic>child systems</italic>. By design, child systems are always
    computed prior to parent systems, such that direct sub-systems are
    always up-to-date when the parent system is executed.</p>
    <p>CoSApp systems can also be viewed as oriented graphs transforming
    input variables into output variables; upstream end nodes of such
    graphs are referred to as <italic>free inputs</italic>. One key
    feature of CoSApp is the ability to declare any free input as
    unknown, in order to solve inverse problems. Cyclic dependencies, if
    any, are automatically detected, and treated as inner constraints
    during system execution.</p>
  </sec>
  <sec id="drivers">
    <title>Drivers</title>
    <p>Drivers are algorithmic objects that modify the state of a given
    system, according to a specific simulation intent. Solvers,
    optimizers and time integrators are typical examples of drivers.
    Drivers are attached, as external objects, to the system they are
    intended to modify. Original properties of drivers are:</p>
    <list list-type="order">
      <list-item>
        <p><bold>Any number of drivers</bold> can be added to a single
        system. In this case, drivers are executed in sequence, each
        retrieving the owner system in the state determined by the
        previous driver.</p>
      </list-item>
      <list-item>
        <p>Much like systems, drivers can be <bold>organized as
        composite trees</bold>, executed in a bottom-up fashion. Such
        assemblies can, for instance, allow one to solve an optimization
        problem at every time step of a dynamic simulation, or,
        conversely, to compute a time trajectory at every iteration of
        an optimization problem.</p>
      </list-item>
      <list-item>
        <p>Drivers can be <bold>attached at different levels</bold> of a
        system tree. This property allows users to individually solve
        sub-parts of a system tree, in cases where this can help improve
        a complex convergence process for example.</p>
      </list-item>
    </list>
    <p>Combining these properties allows the construction of complex
    simulation workflows, tailored to specific needs. CoSApp comes with
    a set of predefined drivers, some of which are discussed below.
    However, users can also define their own drivers, to implement
    custom algorithms in their simulation cases.</p>
  </sec>
  <sec id="intrinsic-and-design-problems">
    <title>Intrinsic and Design Problems</title>
    <p>Designing a system consists of calculating input variables that
    satisfy a set of constraints on the system. CoSApp distinguishes
    between constraints resulting from the inner structure of the system
    (imposed by physics, or by algebraic loops in the system tree),
    referred to as <italic>intrinsic constraints</italic>, and
    constraints imposed to meet specific requirements, referred to as
    <italic>design constraints</italic>. For example, current balance at
    the nodes of an electric circuit yields intrinsic constraints, that
    must be satisfied no matter what. In contrast, seeking a resistance
    value, say, that ensures a particular current in specific operating
    conditions, is a design problem, declared outside the model. An
    analogy can be drawn with object-oriented programming by noting that
    intrinsic constraints are characteristic of a class, while design
    problems are specific to individual instances of a class.</p>
    <p>CoSApp solves both intrinsic and design problems jointly, as a
    single, aggregated algebraic problem. This avoids the use of two
    nested solvers, and guarantees that intrinsic constraints (in
    particular, coupling conditions) are only solved under desired
    design conditions, rather than at every iteration of an outer
    solver.</p>
  </sec>
</sec>
<sec id="main-features">
  <title>Main Features</title>
  <sec id="single--and-multi-point-design">
    <title>Single- and Multi-point Design</title>
    <p>In complex systems, parameters are designed under most critical
    constraints, that usually occur in different operating conditions.
    CoSApp offers a simple way of declaring such multi-point design
    problems.</p>
    <p>Each design point is defined by specific environment conditions.
    While intrinsic constraints are enforced in every design point,
    specific design constraints can be declared on individual points.
    Unknowns can be declared as point-specific, or globally, for all
    points. In the former case, local values are determined for the
    targeted design points; in the latter case, a unique value of the
    unknown is sought, and used on all points. Geometrical parameters,
    typically, are generally regarded as global design unknowns, since
    their values are independent of operating conditions.</p>
  </sec>
  <sec id="optimization">
    <title>Optimization</title>
    <p>Minimization or maximization of scalar quantities can be
    performed using a dedicated driver that encapsulates several
    algorithms from <monospace>scipy.optimize</monospace>. Both
    inequality and equality constraints may be specified. At present,
    multi-objective optimization is not supported.</p>
  </sec>
  <sec id="dynamic-and-multimode-systems">
    <title>Dynamic and Multimode Systems</title>
    <p>CoSApp encompasses dynamic systems, containing variables that are
    implicitly known through their time derivative. Given initial
    conditions, the continuous trajectory of a dynamic system can be
    integrated numerically, using dedicated time drivers. Such
    simulations are referred to as <italic>continuous-time</italic>
    simulations.</p>
    <p>Discontinuities, however, can be introduced with the occurrence
    of <italic>events</italic>, defined within a system. Events are
    triggerable objects that activate when a certain condition is
    detected in their owner system. Upon the occurrence of an event,
    systems may transition from one mode to another, possibly undergoing
    structural recomposition (new sub-system tree, new constraints,
    etc.)</p>
    <p>A tailor-made algorithm tracks event occurrences (including event
    cascades and subsequent system transitions), and updates the system
    during continous-time phases between events. This algorithm is said
    to be <italic>hybrid</italic>, as it handles both continuous- and
    discrete-time (event-based) evolutions of the system.</p>
  </sec>
  <sec id="surrogate-models">
    <title>Surrogate models</title>
    <p>Surrogate models can be trained at any level in the system tree
    (including for the head system), using a response surface computed
    from a given Design of Experiment (DoE). When present, surrogate
    models supersede the original behaviour of the system. Several
    classes of surrogate models are available in CoSApp, but users can
    also define custom meta-models by providing their own implementation
    of a specific API.</p>
  </sec>
</sec>
<sec id="example">
  <title>Example</title>
  <p>Many examples are available in
  <ext-link ext-link-type="uri" xlink:href="https://cosapp.readthedocs.io/en/latest/tutorials/00-Introduction.html#Tutorials">online
  tutorials</ext-link>. In the following section, we illustrate
  multi-point design of a CoSApp model with a short example.</p>
  <sec id="multi-point-design-of-a-supersonic-nozzle">
    <title>Multi-point design of a supersonic nozzle</title>
    <fig>
      <caption><p>Schematic representation of possible flow conditions
      in a supersonic nozzle, depending on atmospheric pressure. Left:
      normal shock in the diverging part; middle: oblique shock at
      outlet; right: isentropic Prandtl-Meyer expansion at outlet. The
      subsonic flow regime is
      omitted.<styled-content id="figU003Anozzle"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/images/nozzle.png" />
    </fig>
    <sec id="design-phase">
      <title>Design phase</title>
      <p>In the next code block, we consider a model named
      <monospace>NozzleAero</monospace> (not shown) which computes the
      flow regime (mass flowrate, Mach number, thrust, etc.) of a
      supersonic nozzle
      (<xref alt="[fig:nozzle]" rid="figU003Anozzle">[fig:nozzle]</xref>),
      given inlet flow conditions (stored in input port
      <monospace>flow_in</monospace>) and the atmospheric pressure at
      the outlet (stored as variable <monospace>p_atm</monospace>). In
      this example, two key parameters, namely nozzle throat area and
      exit section area, are jointly calculated to meet thrust targets
      at ground level (<inline-formula><alternatives>
      <tex-math><![CDATA[p_{\text{atm}} = 1\,\text{bar}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mtext mathvariant="normal">atm</mml:mtext></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mspace width="0.167em"></mml:mspace><mml:mtext mathvariant="normal">bar</mml:mtext></mml:mrow></mml:math></alternatives></inline-formula>)
      and in vacuum (<inline-formula><alternatives>
      <tex-math><![CDATA[p_{\text{atm}} = 0]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mtext mathvariant="normal">atm</mml:mtext></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>).</p>
      <code language="python">from propulsion.systems import NozzleAero
from cosapp.drivers import NonLinearSolver, RunSingleCase

# Instantiate model
nozzle = NozzleAero('nozzle')

# Initialize input port `flow_in` and specific heat ratio
nozzle.flow_in.Pt = 115e5
nozzle.flow_in.Tt = 1500
nozzle.gamma = 1.3

# Add solver to the model
solver = nozzle.add_driver(NonLinearSolver('solver'))

# Define design points `ground` and `vacuum` as children of `solver`
ground = solver.add_child(RunSingleCase('ground'))
vacuum = solver.add_child(RunSingleCase('vacuum'))

# Define point-specific conditions
ground.set_values({'p_atm': 1e5})
vacuum.set_values({'p_atm': 0.0})

# Define design unknowns, common to all points
solver.add_unknown(['throat.area', 'area_ratio'])

# Define point-specific constraints
ground.add_equation('thrust == 960e3')
vacuum.add_equation('thrust == 1340e3')

# Set initial guess
nozzle.throat.area = 1.0
nozzle.area_ratio = 25.0

# Solve
nozzle.run_drivers()

print(solver.problem)</code>
      <p>Result:</p>
      <preformat>Unknowns [2]
  throat.area = 0.059317698181515305
  area_ratio = 67.61637505773945
Equations [2]
  ground[thrust == 960e3] := -1.6763806343078613e-08
  vacuum[thrust == 1340e3] := 0.0</preformat>
      <p>where the number following symbol <monospace>:=</monospace>
      indicates the residue (<italic>left - right</italic>) of equation
      <italic>left == right</italic>.</p>
    </sec>
    <sec id="off-design-study">
      <title>Off-design study</title>
      <code language="python">import numpy

# Purge drivers
nozzle.drivers.clear()

for nozzle.p_atm in numpy.logspace(5, 2, 11):
    nozzle.run_drivers()  # update model
    print(
        f&quot;p_atm = {nozzle.p_atm * 1e-5:.3f} bar&quot;,
        f&quot;thrust = {nozzle.thrust * 1e-3:.1f} kN&quot;,
        f&quot;M_out = {nozzle.M_out:.2f}&quot;,
        f&quot;{nozzle.status}&quot;,
        sep=&quot;,\t&quot;,
    )</code>
      <p>Result:</p>
      <preformat>p_atm = 1.000 bar,  thrust = 960.0 kN,   M_out = 2.65,  Oblique shock (M=5.39)
p_atm = 0.501 bar,  thrust = 1094.6 kN,  M_out = 3.66,  Oblique shock (M=5.39)
p_atm = 0.251 bar,  thrust = 1158.3 kN,  M_out = 4.44,  Oblique shock (M=5.39)
p_atm = 0.126 bar,  thrust = 1192.6 kN,  M_out = 5.04,  Oblique shock (M=5.39)
p_atm = 0.063 bar,  thrust = 1215.8 kN,  M_out = 5.57,  Isentropic expansion
p_atm = 0.032 bar,  thrust = 1234.9 kN,  M_out = 6.13,  Isentropic expansion
p_atm = 0.016 bar,  thrust = 1250.9 kN,  M_out = 6.72,  Isentropic expansion
p_atm = 0.008 bar,  thrust = 1264.4 kN,  M_out = 7.36,  Isentropic expansion
p_atm = 0.004 bar,  thrust = 1275.8 kN,  M_out = 8.04,  Isentropic expansion
p_atm = 0.002 bar,  thrust = 1285.5 kN,  M_out = 8.77,  Isentropic expansion
p_atm = 0.001 bar,  thrust = 1293.7 kN,  M_out = 9.56,  Isentropic expansion</preformat>
    </sec>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Gray2019a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gray</surname><given-names>Justin S.</given-names></name>
        <name><surname>Hwang</surname><given-names>John T.</given-names></name>
        <name><surname>Martins</surname><given-names>Joaquim R. R. A.</given-names></name>
        <name><surname>Moore</surname><given-names>Kenneth T.</given-names></name>
        <name><surname>Naylor</surname><given-names>Bret A.</given-names></name>
      </person-group>
      <article-title>OpenMDAO: An open-source framework for multidisciplinary design, analysis, and optimization</article-title>
      <source>Structural and Multidisciplinary Optimization</source>
      <year iso-8601-date="2019">2019</year>
      <volume>59</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1007/s00158-019-02211-z</pub-id>
      <fpage>1075</fpage>
      <lpage>1104</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gemseo_paper">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Gallard</surname><given-names>F.</given-names></name>
        <name><surname>Vanaret</surname><given-names>C.</given-names></name>
        <name><surname>Guénot</surname><given-names>D.</given-names></name>
        <name><surname>Gachelin</surname><given-names>V.</given-names></name>
        <name><surname>Lafage</surname><given-names>R.</given-names></name>
        <name><surname>Pauwels</surname><given-names>B.</given-names></name>
        <name><surname>Barjhoux</surname><given-names>P.-J.</given-names></name>
        <name><surname>Gazaix</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>GEMS: A Python library for automation of multidisciplinary design optimization process generation</article-title>
      <source>2018 AIAA/ASCE/AHS/ASC structures, structural dynamics, and materials conference</source>
      <year iso-8601-date="2018">2018</year>
      <pub-id pub-id-type="doi">10.2514/6.2018-0657</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-openmodelica.orgU003AfritzsonU003AmicU003A2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fritzson</surname><given-names>Peter</given-names></name>
        <name><surname>Pop</surname><given-names>Adrian</given-names></name>
        <name><surname>Abdelhak</surname><given-names>Karim</given-names></name>
        <name><surname>Ashgar</surname><given-names>Adeel</given-names></name>
        <name><surname>Bachmann</surname><given-names>Bernhard</given-names></name>
        <name><surname>Braun</surname><given-names>Willi</given-names></name>
        <name><surname>Bouskela</surname><given-names>Daniel</given-names></name>
        <name><surname>Braun</surname><given-names>Robert</given-names></name>
        <name><surname>Buffoni</surname><given-names>Lena</given-names></name>
        <name><surname>Casella</surname><given-names>Francesco</given-names></name>
        <name><surname>Castro</surname><given-names>Rodrigo</given-names></name>
        <name><surname>Franke</surname><given-names>Rüdiger</given-names></name>
        <name><surname>Fritzson</surname><given-names>Dag</given-names></name>
        <name><surname>Gebremedhin</surname><given-names>Mahder</given-names></name>
        <name><surname>Heuermann</surname><given-names>Andreas</given-names></name>
        <name><surname>Lie</surname><given-names>Bernt</given-names></name>
        <name><surname>Mengist</surname><given-names>Alachew</given-names></name>
        <name><surname>Mikelsons</surname><given-names>Lars</given-names></name>
        <name><surname>Moudgalya</surname><given-names>Kannan</given-names></name>
        <name><surname>Ochel</surname><given-names>Lennart</given-names></name>
        <name><surname>Palanisamy</surname><given-names>Arunkumar</given-names></name>
        <name><surname>Ruge</surname><given-names>Vitalij</given-names></name>
        <name><surname>Schamai</surname><given-names>Wladimir</given-names></name>
        <name><surname>Sjölund</surname><given-names>Martin</given-names></name>
        <name><surname>Thiele</surname><given-names>Bernhard</given-names></name>
        <name><surname>Tinnerholm</surname><given-names>John</given-names></name>
        <name><surname>Östlund</surname><given-names>Per</given-names></name>
      </person-group>
      <article-title>The OpenModelica integrated environment for modeling, simulation, and model-based development</article-title>
      <source>Modeling, Identification and Control</source>
      <publisher-name>Norwegian Society of Automatic Control</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>41</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.4173/mic.2020.4.1</pub-id>
      <fpage>241</fpage>
      <lpage>295</lpage>
    </element-citation>
  </ref>
  <ref id="ref-DiGiuseppe.etalU003A2023">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Di Giuseppe</surname><given-names>Roberto</given-names></name>
        <name><surname>Delbecq</surname><given-names>Scott</given-names></name>
        <name><surname>Budinger</surname><given-names>Valérie</given-names></name>
        <name><surname>Pauvert</surname><given-names>Vincent</given-names></name>
      </person-group>
      <article-title>An exploratory study of open-source frameworks for MDAO</article-title>
      <source>AeroBest 2023, ECCOMAS, lisbon, 19–21 july</source>
      <publisher-name>ECCOMAS</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <isbn>978-989-53599-4-3</isbn>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
