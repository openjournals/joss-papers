<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7308</article-id>
<article-id pub-id-type="doi">10.21105/joss.07308</article-id>
<title-group>
<article-title>DemeterWatch: A Java tool to detect Law of Demeter
violations in Java collections</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0004-9334-5936</contrib-id>
<name>
<surname>de Aquino</surname>
<given-names>Juan Pablo P.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9054-8659</contrib-id>
<name>
<surname>de M. Firmino</surname>
<given-names>José Fernando</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Moreira</surname>
<given-names>Diogo D.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>de S. Job</surname>
<given-names>Ricardo</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Instituto Federal de Educação Ciência e Tecnologia da
Paraíba - IFPB, Brazil</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Universidade Federal da Paraíba - UFPB,
Brazil</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-09-10">
<day>10</day>
<month>9</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>107</issue>
<fpage>7308</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Java</kwd>
<kwd>software-engineering</kwd>
<kwd>metadata</kwd>
<kwd>source-code-analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Object-oriented languages brought important concepts and concerns
  to the software industry, such as inheritance, polymorphism, and
  coupling. Since the 1970s, these concepts have been studied, and in
  particular, coupling has emerged as an important mechanism that allows
  components to keep the details of their construction restricted
  (<xref alt="Parnas, 1972" rid="ref-PARNAS" ref-type="bibr">Parnas,
  1972</xref>). In this sense, when an object’s encapsulation is
  compromised, its implementation becomes exposed, and other parts of
  the code can directly alter its behavior, reducing the cohesion of the
  software. This coupling between components can cause critical problems
  in the development cycle, increasing the costs of its evolution and
  maintenance. This paper presents DemeterWatch, a tool to identify a
  specific case of coupling violations inside Java projects source
  code.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>One of the pillars of software engineering is the pursuit of
  continuous improvement of processes and practices, incorporating
  feedback and lessons throughout the software lifecycle. Proper
  documentation, efficient team collaboration, and ensuring quality are
  fundamental elements for success in this type of project.
  Additionally, the rapid evolution of technology requires software
  engineering professionals to stay up-to-date and ready to adapt to new
  trends and challenges in the industry, with software quality assurance
  being one of the key practices in the field
  (<xref alt="Pressman &amp; Maxim, 2014" rid="ref-PRESSMAN" ref-type="bibr">Pressman
  &amp; Maxim, 2014</xref>).</p>
  <p>During the process of software development, a recurring issue is
  the coupling created between classes, often due to inefficient
  modeling, resulting in code with classes and methods that are not very
  reusable and difficult to maintain during the other stages. A
  principle aimed at minimizing the problems mentioned above is the Law
  of Demeter (LoD) or the principle of the least knowledge
  (<xref alt="Lieberherr et al., 1988" rid="ref-LIEB" ref-type="bibr">Lieberherr
  et al., 1988</xref>). When a class does not comply with the LoD, other
  problems may arise. One such issue is the confinement break, which
  occurs when an object can change the state of another object without
  its knowledge, by calling methods that improperly expose their
  properties.</p>
  <p>Identifying principle violations in Java source code is
  challenging. Static analysis
  (<xref alt="Bardas &amp; others, 2010" rid="ref-static" ref-type="bibr">Bardas
  &amp; others, 2010</xref>), the method employed in this work, cannot
  pinpoint which methods alter an object’s state. Consequently, the
  analysis is focused on data structures within the Java Collections
  Framework
  (JCF)(<xref alt="Collections Framework Overview — Docs.oracle.com" rid="ref-JCF" ref-type="bibr"><italic>Collections
  Framework Overview — Docs.oracle.com</italic></xref>). The JCF is
  well-documented, and its documentation specifies which methods modify
  the state of collection objects.</p>
  <p>This approach is crucial as it highlights issues that are not
  readily apparent, including subtle and difficult-to-detect forms
  (<xref alt="Bock, 2018" rid="ref-BLOCK" ref-type="bibr">Bock,
  2018</xref>). It also provides a means to visualize detected breaches,
  facilitating corrections in the source code.</p>
</sec>
<sec id="state-of-field">
  <title>State of field</title>
  <p>Some works have already attempted to identify such violations in
  other software contexts and scopes. One example is Hou et al.
  (<xref alt="2004" rid="ref-LoDC" ref-type="bibr">2004</xref>), which
  presented a specification language for use by framework users,
  enabling them to mechanically check code compliance. This allows
  framework developers to create constraints on what others must avoid
  when coding with that framework in a C++ environment. It also
  demonstrates the creation of a Law of Demeter specification outlining
  which couplings are acceptable and which should be avoided.
  Unfortunately, it did not show any ways to detect when an object’s
  state is being changed, which is the focus of this project.</p>
  <p>In a second work, Chiba et al.
  (<xref alt="2010" rid="ref-LoDP" ref-type="bibr">2010</xref>) aimed to
  detect Law of Demeter (LoD) violations within Java as an Eclipse
  plugin, but it primarily focused on checking for dependencies between
  packages.</p>
  <p>Unlike the tools cited above, this work contributes to the state of
  the field by delving into the detection of not only pure LoD
  violations but also whether these violations change the object’s state
  without its consent, because this leads to a more unpredictable
  context and a more difficult software to maintain.</p>
</sec>
<sec id="example-use-case">
  <title>Example use case</title>
  <p>The complete dataset of experiments is available in the repository
  to further visualization containing forty randomly selected projects
  outputs, those projects are present at Qualitas.class corpus
  (<xref alt="Terra et al., 2013" rid="ref-QUALITAS" ref-type="bibr">Terra
  et al., 2013</xref>). Table 1 shows how many LoD violations were found
  in open source projects, some of them well-known projects used by Java
  developers:</p>
  <table-wrap>
    <table>
      <thead>
        <tr>
          <th align="center">Name</th>
          <th align="center">Violations found</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="center">Apache Collections</td>
          <td align="center">6</td>
        </tr>
        <tr>
          <td align="center">Apache Tomcat</td>
          <td align="center">20</td>
        </tr>
        <tr>
          <td align="center">Quartz</td>
          <td align="center">1</td>
        </tr>
        <tr>
          <td align="center">JGrapht</td>
          <td align="center">6</td>
        </tr>
        <tr>
          <td align="center">JMeter</td>
          <td align="center">6</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p><bold>Table 1.</bold> Example of violations found in real open
  source projects analyzed by the tool.</p>
  <p>In addition to textual output, the tool generates an HTML page with
  a graphical representation of method call chains in the source code.
  Nodes that violated LoD principle are highlighted in a distinct color.
  Each vertex’s weight indicates the frequency of method calls. Figure 1
  contains an illustrated example of a detected violation.</p>
  <p><inline-graphic mimetype="image" mime-subtype="png" xlink:href="ss.png" />
  <bold>Figure 1.</bold> DemeterWatch HTML output page.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The main author, Juan Pablo P. de Aquino, would like to express
  gratitude to the IFPB Institute which made this research project
  possible to be developed and offered the support needed.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-LIEB">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lieberherr</surname><given-names>K.</given-names></name>
        <name><surname>Holland</surname><given-names>I.</given-names></name>
        <name><surname>Riel</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>Object-oriented programming: An objective sense of style</article-title>
      <source>SIGPLAN Not.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="1988-01">1988</year><month>01</month>
      <volume>23</volume>
      <issue>11</issue>
      <issn>0362-1340</issn>
      <uri>https://doi.org/10.1145/62084.62113</uri>
      <pub-id pub-id-type="doi">10.1145/62084.62113</pub-id>
      <fpage>323</fpage>
      <lpage>334</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BLOCK">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bock</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>The paperboy, the wallet, and the Law of Demeter</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://www2.ccs.neu.edu/research/demeter/demeter-method/LawOfDemeter/paper-boy/demeter.pdf</uri>
    </element-citation>
  </ref>
  <ref id="ref-PARNAS">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Parnas</surname><given-names>D. L.</given-names></name>
      </person-group>
      <article-title>On the criteria to be used in decomposing systems into modules</article-title>
      <source>Commun. ACM</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="1972-12">1972</year><month>12</month>
      <volume>15</volume>
      <issue>12</issue>
      <issn>0001-0782</issn>
      <uri>https://doi.org/10.1145/361598.361623</uri>
      <pub-id pub-id-type="doi">10.1145/361598.361623</pub-id>
      <fpage>1053</fpage>
      <lpage>1058</lpage>
    </element-citation>
  </ref>
  <ref id="ref-QUALITAS">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Terra</surname><given-names>Ricardo</given-names></name>
        <name><surname>Miranda</surname><given-names>Luis Fernando</given-names></name>
        <name><surname>Valente</surname><given-names>Marco Tulio</given-names></name>
        <name><surname>Bigonha</surname><given-names>Roberto S.</given-names></name>
      </person-group>
      <article-title>Qualitas.class corpus: A compiled version of the qualitas corpus</article-title>
      <source>SIGSOFT Softw. Eng. Notes</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2013-08">2013</year><month>08</month>
      <volume>38</volume>
      <issue>5</issue>
      <issn>0163-5948</issn>
      <uri>https://doi.org/10.1145/2507288.2507314</uri>
      <pub-id pub-id-type="doi">10.1145/2507288.2507314</pub-id>
      <fpage>1</fpage>
      <lpage>4</lpage>
    </element-citation>
  </ref>
  <ref id="ref-PRESSMAN">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Pressman</surname><given-names>Roger S</given-names></name>
        <name><surname>Maxim</surname><given-names>Bruce R</given-names></name>
      </person-group>
      <source>Software engineering: A practitioner’s approach</source>
      <publisher-name>McGraw-Hill Professional</publisher-name>
      <publisher-loc>New York, NY</publisher-loc>
      <year iso-8601-date="2014-01">2014</year><month>01</month>
      <edition>8</edition>
      <isbn>9780078022128</isbn>
    </element-citation>
  </ref>
  <ref id="ref-LoDP">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Chiba</surname><given-names>Ryota</given-names></name>
        <name><surname>Hashiura</surname><given-names>Hiroaki</given-names></name>
        <name><surname>Komiya</surname><given-names>Seiichi</given-names></name>
      </person-group>
      <article-title>A tool for detecting detects on class implementation in object oriented program on the basis of the Law of Demeter: Focusing on dependency between packages</article-title>
      <source>Proceedings of the 10th WSEAS international conference on applied computer science</source>
      <publisher-name>World Scientific; Engineering Academy; Society (WSEAS)</publisher-name>
      <publisher-loc>Stevens Point, Wisconsin, USA</publisher-loc>
      <year iso-8601-date="2010">2010</year>
      <isbn>9789604742318</isbn>
      <fpage>315</fpage>
      <lpage>320</lpage>
    </element-citation>
  </ref>
  <ref id="ref-LoDC">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hou</surname><given-names>Daqing</given-names></name>
        <name><surname>Hoover</surname><given-names>H. J.</given-names></name>
        <name><surname>Rudnicki</surname><given-names>P.</given-names></name>
      </person-group>
      <article-title>Specifying the Law of Demeter and C++ programming guidelines with FCL</article-title>
      <source>Source code analysis and manipulation, fourth IEEE international workshop on</source>
      <publisher-name>IEEE Comput. Soc</publisher-name>
      <year iso-8601-date="2004">2004</year>
      <uri>http://dx.doi.org/10.1109/SCAM.2004.22</uri>
      <pub-id pub-id-type="doi">10.1109/scam.2004.22</pub-id>
      <fpage>119</fpage>
      <lpage>127</lpage>
    </element-citation>
  </ref>
  <ref id="ref-JCF">
    <element-citation>
      <article-title>Collections Framework Overview — docs.oracle.com</article-title>
      <publisher-name>https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html</publisher-name>
    </element-citation>
  </ref>
  <ref id="ref-static">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bardas</surname><given-names>Alexandru G</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Static code analysis</article-title>
      <source>Journal of Information Systems &amp; Operations Management</source>
      <publisher-name>Romanian-American University</publisher-name>
      <year iso-8601-date="2010">2010</year>
      <volume>4</volume>
      <issue>2</issue>
      <fpage>99</fpage>
      <lpage>107</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
