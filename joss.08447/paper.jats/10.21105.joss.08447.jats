<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8447</article-id>
<article-id pub-id-type="doi">10.21105/joss.08447</article-id>
<title-group>
<article-title>Syd: A package for making interactive data visualizations
in python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9105-1636</contrib-id>
<name>
<surname>Landau</surname>
<given-names>Andrew T.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>UCL Queen Square Institute of Neurology, University College
London, London, United Kingdom</institution>
<institution-id institution-id-type="ROR">02jx3x895</institution-id>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-05-01">
<day>1</day>
<month>5</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>112</issue>
<fpage>8447</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>neuroscience</kwd>
<kwd>data-science</kwd>
<kwd>data-visualization</kwd>
<kwd>interactive</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Gaining an intuitive feel for the patterns in scientific data is
  fundamental to the scientific process. However, in the era of large
  datasets, it is not only challenging to understand the patterns in the
  data, but it is often a significant technical burden to simply plot
  the data in a satisfactory manner. For example, typical neuroscience
  datasets can have thousands to millions of neurons, spanning across
  recordings sessions and experimental subjects. Each neuron might
  contain a hint of a discovery. Similarly, studying the inner- workings
  of large-language models often comes down to looking at the activation
  patterns of thousands of neurons to understand how they represent
  text.</p>
  <p><monospace>Syd</monospace> represents a solution that supports
  interactive data analysis of rich datasets. It provides a python
  interface that enables the rapid construction of interactive plots,
  which enable scientists to quickly and easily look through all their
  data.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Although many packages enable the construction of graphical user
  interfaces in python, they all require some level of bespoke
  implementation and often depend on significant levels of boilerplate
  code. <monospace>Syd</monospace> relieves this need by providing a
  simple and opinionated interface for defining <italic>what you want to
  plot</italic> and <italic>which parameters you want to be
  interactive</italic>; it handles all the behind the scenes action
  required to make an interface.</p>
  <p><monospace>Syd</monospace> “viewers” are made by defining a plot
  function which accepts a <monospace>state</monospace> dictionary as
  input and returns a <monospace>matplotlib</monospace>
  <monospace>figure</monospace> object
  (<xref alt="Hunter, 2007" rid="ref-Matplotlib" ref-type="bibr">Hunter,
  2007</xref>). Then, parameters are added to the viewer with simple
  declarative functions. If required, <monospace>Syd</monospace> also
  provides an intuitive system for callbacks that greatly minimizes
  boilerplate GUI code. The simplicity of the interface means that
  interactive data visualization tools can become a fundamental part of
  a data analyst’s typical workflow - as easy as making plots.</p>
  <p>Because <monospace>Syd</monospace> handles the behind-the-scenes
  implementation code, it permits a user to “deploy” viewers in multiple
  environments without any changes to the code. Viewers can be deployed
  in jupyter notebooks for fast and local analysis or deployed on web
  browsers for sharing across local networks. These deployment
  environments depend on <monospace>ipywidgets</monospace> and
  <monospace>flask</monospace>, respectively
  (<xref alt="JupyterDevelopmentTeam, 2025" rid="ref-ipywidgets" ref-type="bibr">JupyterDevelopmentTeam,
  2025</xref>;
  <xref alt="Pallets, 2024" rid="ref-Flask" ref-type="bibr">Pallets,
  2024</xref>). In this way, a scientist can study their data at their
  desk, then use the same code to share the results interactively with
  their advisor or with their lab at different computers.</p>
</sec>
<sec id="why-choose-syd">
  <title>Why choose Syd?</title>
  <p>There are many powerful packages in the python ecosystem for
  interactive data-visualization.</p>
  <p>So, why use Syd?</p>
  <p>Syd is a minimalist package that helps turn any matplotlib plot
  into an interactive data visualization tool with a few lines of code
  and minimal cognitive load. It is not a general-purpose, sophisticated
  dashboard framework. Researchers who need more advanced functionality
  or want to learn a more unique plotting package should turn to other
  options. However, Syd offers the simplest and most straightforward
  tools for enabling fast-paced, on-the-fly exploratory data
  analysis.</p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="35%" />
        <col width="14%" />
        <col width="14%" />
        <col width="10%" />
        <col width="14%" />
        <col width="12%" />
      </colgroup>
      <thead>
        <tr>
          <th>Capability / Package</th>
          <th align="center"><bold>Syd</bold></th>
          <th align="center"><bold>Panel</bold></th>
          <th align="center"><bold>Plotly</bold></th>
          <th align="center"><bold>Altair</bold></th>
          <th align="center"><bold>Streamlit</bold></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Interactive widgets (no full rerun)</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">No</td>
        </tr>
        <tr>
          <td>Runs <italic>inside</italic> Jupyter/IPython</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">No</td>
        </tr>
        <tr>
          <td>Boilerplate required for a simple GUI</td>
          <td align="center"><bold>Tiny</bold></td>
          <td align="center">Low</td>
          <td align="center">Medium</td>
          <td align="center">Low</td>
          <td align="center">Low</td>
        </tr>
        <tr>
          <td>Learning curve / cognitive load</td>
          <td align="center"><bold>Tiny</bold></td>
          <td align="center">Low</td>
          <td align="center">Medium</td>
          <td align="center">Medium</td>
          <td align="center">Low</td>
        </tr>
        <tr>
          <td>Native <bold>Matplotlib</bold> support</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">No</td>
          <td align="center">No</td>
          <td align="center">Yes</td>
        </tr>
        <tr>
          <td>“Bring-your-own-plot function”</td>
          <td align="center"><bold>First-class</bold></td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">Partly</td>
          <td align="center">Yes</td>
        </tr>
        <tr>
          <td>Separate web server needed</td>
          <td align="center">No</td>
          <td align="center">Yes</td>
          <td align="center">No</td>
          <td align="center">No</td>
          <td align="center">Yes</td>
        </tr>
        <tr>
          <td>Primarily for interactive plots</td>
          <td align="center">Yes</td>
          <td align="center">No</td>
          <td align="center">Yes</td>
          <td align="center">Yes</td>
          <td align="center">No</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <sec id="extra-points">
    <title>Extra points</title>
    <list list-type="bullet">
      <list-item>
        <p>Syd’s only abstraction is a state dict passed to your
        matplotlib function; nothing else to learn.</p>
      </list-item>
      <list-item>
        <p>Syd’s declarative style makes it’s code footprint tiny.</p>
      </list-item>
    </list>
  </sec>
</sec>
<sec id="example-viewer">
  <title>Example Viewer</title>
  <p>This is a simple example that demonstrates how easy it is to make
  interactive visualization tools with <monospace>Syd</monospace>.</p>
  <list list-type="order">
    <list-item>
      <p>A plot function is defined that accepts
      <monospace>state</monospace> as input.</p>
    </list-item>
    <list-item>
      <p>A viewer is created, and three parameters are added.</p>
    </list-item>
    <list-item>
      <p>(Optional) Callback functions are defined and attached to
      parameters.</p>
    </list-item>
    <list-item>
      <p>The viewer is deployed in the desired environment.</p>
    </list-item>
  </list>
  <code language="python">import numpy as np
import matplotlib.pyplot as plt
from syd import make_viewer

# Plot function
def plot(state):
    amplitude = state[&quot;amplitude&quot;]
    frequency = state[&quot;frequency&quot;]
    color = state[&quot;color&quot;]
    fig = plt.figure()
    t = np.linspace(0, 2 * np.pi, 1000)
    ax = plt.gca()
    ax.plot(t, amplitude * np.sin(frequency * t), color=color)
    return fig

# Viewer &amp; Parameters
viewer = make_viewer(plot)
viewer.add_float(&quot;amplitude&quot;, value=1.0, min=0.1, max=5.0)
viewer.add_float(&quot;frequency&quot;, value=1.0, min=0.1, max=5.0)
viewer.add_selection(&quot;color&quot;, options=[&quot;black&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;red&quot;])

# Deployment
viewer.show() # for viewing in a jupyter notebook
# viewer.share() # for viewing in a web browser</code>
  <fig>
    <caption><p>Example Syd Viewer</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="../docs/assets/viewer_screenshots/1-simple_example.png" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge the fantastic dependencies this package depends on,
  including <monospace>Matplotlib</monospace>,
  <monospace>ipywidgets</monospace>, and <monospace>Flask</monospace>.
  In addition, we acknowledge Jasmine Reggiani and members of the
  Cortexlab at UCL for their feedback.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-Matplotlib">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>John D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D graphics environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <year iso-8601-date="2007">2007</year>
      <volume>9</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ipywidgets">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>JupyterDevelopmentTeam</surname></name>
      </person-group>
      <article-title>Ipywidgets</article-title>
      <publisher-name>https://github.com/jupyter-widgets/ipywidgets; GitHub</publisher-name>
      <year iso-8601-date="2025">2025</year>
    </element-citation>
  </ref>
  <ref id="ref-Flask">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Pallets</surname></name>
      </person-group>
      <article-title>Flask</article-title>
      <publisher-name>https://github.com/pallets/flask; GitHub</publisher-name>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
