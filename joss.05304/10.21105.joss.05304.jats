<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5304</article-id>
<article-id pub-id-type="doi">10.21105/joss.05304</article-id>
<title-group>
<article-title>PyVISA: the Python instrumentation
package</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1165-4320</contrib-id>
<name>
<surname>Grecco</surname>
<given-names>Hernán E.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6451-0577</contrib-id>
<name>
<surname>Dartiailh</surname>
<given-names>Matthieu C.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="aff" rid="aff-5"/>
<xref ref-type="corresp" rid="cor-2"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3948-8045</contrib-id>
<name>
<surname>Thalhammer-Thurner</surname>
<given-names>Gregor</given-names>
</name>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5174-6684</contrib-id>
<name>
<surname>Bronger</surname>
<given-names>Torsten</given-names>
</name>
<xref ref-type="aff" rid="aff-7"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0004-5271-5363</contrib-id>
<name>
<surname>Bauer</surname>
<given-names>Florian</given-names>
</name>
<xref ref-type="aff" rid="aff-8"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Universidad de Buenos Aires, Facultad de Ciencias Exactas y
Naturales, Departamento de Física. Buenos Aires,
Argentina.</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>CONICET - Universidad de Buenos Aires, Instituto de Física
de Buenos Aires (IFIBA). Buenos Aires, Argentina</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Laboratoire Pierre Aigrain, Ecole Normale Supérieure.
Paris, France</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Center for Quantum Phenomena, New York University.
New-York, NY, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Institut Néel, CNRS. Grenoble, France</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Institute for Biomedical Physics, Medical University of
Innsbruck, Austria</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Forschungszentrum Jülich GmbH (ROR 02nv7yv05). Jülich,
Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-8">
<institution-wrap>
<institution>Independent Researcher, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
<corresp id="cor-2">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-01-20">
<day>20</day>
<month>1</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>84</issue>
<fpage>5304</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>instrumentation</kwd>
<kwd>VISA</kwd>
<kwd>measurement</kwd>
<kwd>acquisition</kwd>
<kwd>experiment control</kwd>
<kwd>hardware communication</kwd>
<kwd>GPIB</kwd>
<kwd>SERIAL</kwd>
<kwd>TCP/IP</kwd>
<kwd>USBTMC</kwd>
<kwd>VXI</kwd>
<kwd>PXI</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Data-driven science requires reliable data generation, and in
  modern instrumentation software plays a central role to achieve this
  goal. Computer-controlled experiments allow for complex
  synchronization of sensors and actuators. Moreover, as it was already
  recognized decades ago, they enable on-line analysis routines to steer
  the experiment in real time
  (<xref alt="Enke, 1982" rid="ref-EnkeU003A1982" ref-type="bibr">Enke,
  1982</xref>). When combined with programming best practices,
  instrumentation software fosters reproducible, traceable, and open
  science.</p>
  <p>An important step in the development of instrumentation software
  has been the definition of Virtual Instrument Software Architecture
  (VISA)
  (<xref alt="Cheij, 2002" rid="ref-CheijU003A2002" ref-type="bibr">Cheij,
  2002</xref>), which quickly became the most common API for test and
  measurement and is widely used both in industry and academia. It
  includes specifications for communication with resources over a
  variety of interfaces such as GPIB, PXI, VXI, SERIAL, TCP/IP, and USB.
  VISA abstracts away the (often complex) idiosyncrasies of those
  low-level protocols, so that the scientist can focus on the
  instrument-specific command set.</p>
  <p>The Python package <monospace>PyVISA</monospace> provides an
  easy-to-use interface to software libraries that implement the VISA
  standard, enabling communication between a host computer and
  instruments or other devices.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>PyVISA</monospace> has become the <italic>de
  facto</italic> standard for instrument control in Python. At the heart
  of every <monospace>PyVISA</monospace> program is a
  <monospace>ResourceManager</monospace> instance, which allows to list
  available resources (e.g., devices, instruments, boards). Opening one
  of such devices returns a <monospace>Resource</monospace> instance
  with methods to send and receives streams of data, control registers
  and device specific flags. While this high-level API serves most use
  cases, <monospace>PyVISA</monospace> still provides a convenient way
  to make low-level calls for those few applications that require
  it.</p>
  <p><monospace>PyVISA</monospace> was designed to be used in both
  simple acquisition scripts and also within large and complex
  codebases. It takes care of resource allocation, cleaning, stream
  parsing, data conversion, and provides introspection capabilities.
  <monospace>Resource</monospace> instances are fully configurable in
  terms of termination characters and format of the data stream,
  defaulting to sensible values while allowing full control if
  necessary. Logging is used extensively throughout the library to help
  with debugging.</p>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p><monospace>PyVISA</monospace> can be installed using pip or conda.
  <monospace>PyVISA-py</monospace> and <monospace>PyVISA-sim</monospace>
  can be installed using the same tools. <monospace>PyVISA</monospace>
  currently supports Python 3.8+.</p>
  <p>While the <monospace>PyVISA</monospace> documentation
  (<xref alt="The PyVISA authors, 2020a" rid="ref-pyvisaU003Adocs" ref-type="bibr">The
  PyVISA authors, 2020a</xref>) provides a full description of its API
  and several typical use cases, we provide here a few simple code
  samples to illustrate the package. The first step is to create a
  <monospace>ResourceManager</monospace>, which can be used to list
  available devices:</p>
  <code language="python">&gt;&gt;&gt; import pyvisa
&gt;&gt;&gt; rm = pyvisa.ResourceManager()
&gt;&gt;&gt; rm.list_resources()
('ASRL1::INSTR', 'ASRL2::INSTR', 'USB0::0x0699::0x0363::C065089::INSTR')</code>
  <p>We open a connection to the resource:</p>
  <code language="python">&gt;&gt;&gt; osci = rm.open_resource('USB0::0x0699::0x0363::C065089::INSTR')</code>
  <p>Basic methods for communication with a resource are
  <monospace>write()</monospace> and <monospace>read()</monospace>,
  which send and receive data (as strings). As this is often performed
  together, the <monospace>query()</monospace> method provides this with
  a single call.</p>
  <p>Next we ask for an identification by sending the
  <monospace>*IDN?</monospace> command, which is defined in the IEEE
  488.2 standard and also belongs to the standard commands for
  programmable instruments (SCPI); most instruments support this
  command.</p>
  <code language="python">&gt;&gt;&gt; osci.query(&quot;*IDN?&quot;)
TEKTRONIX,TDS 1002B,C102220,CF:91.1CT FV:v22.11\n</code>
  <p>The instrument is a Tektronix oscilloscope. We set the channel 1
  vertical scale to 100 mV/div and request the curve on the display.</p>
  <code language="python">&gt;&gt;&gt; osci.write(&quot;CH1:SCALE 100E-3&quot;)
&gt;&gt;&gt; data = osci.query_ascii_values('CURV?')</code>
  <p><monospace>PyVISA</monospace> parses the instrument’s response and
  returns the data as a Python <monospace>list</monospace> containing
  the values from the device.</p>
  <p>This oscilloscope also supports binary data transfer. We activate
  this mode at the device with two commands and then request the binary
  values to be returned in a NumPy array.</p>
  <code language="python">&gt;&gt;&gt; osci.write('DAT:ENC RPB')
&gt;&gt;&gt; osci.write('DAT:WID 1')
&gt;&gt;&gt; data = osci.query_binary_values('CURV?',
                                    datatype='B',
                                    container=np.array)</code>
</sec>
<sec id="structure-of-pyvisa">
  <title>Structure of PyVISA</title>
  <p><bold>Backends</bold>: To provide the main functionality for
  communication with external devices <monospace>PyVISA</monospace>
  calls code in external libraries. Typically these are provided by
  vendors that implement the VISA library specification.
  <monospace>PyVISA</monospace> is not limited to a specific VISA
  vendor, but is rather a frontend for multiple backends. The default
  backend wraps the Interchangeable Virtual Instrumentation (IVI) VISA
  library provided by vendors like National Instruments, Keysight VISA,
  R&amp;S VISA, tekVISA and others. Alternative backends have also been
  developed. For example, <monospace>PyVISA-py</monospace> uses Python
  packages such as <monospace>PySerial</monospace>,
  <monospace>PyUSB</monospace> and others to create a VISA backend. This
  has been very useful to avoid relying on proprietary libraries, and to
  support OS or architectures not supported by commercial vendors.
  <monospace>PyVISA-sim</monospace> is a backend that provides limited
  support to simulated instruments, thereby allowing testing complex
  application even if the device is not available.</p>
  <p>The interface of <monospace>PyVISA</monospace> is organized in
  several layers providing different levels of abstraction:</p>
  <p><bold>Layer 1 (low level)</bold>: provides bindings to a compiled
  library preserving the original function names. The wrapper defines
  the argument types and response types of each function, as well as the
  conversions between Python objects and foreign types. Some backends,
  like <monospace>PyVISA-py</monospace>, do not define this layer as
  they rely on other Python packages. Direct access to these functions
  is neither required nor recommended.</p>
  <p><bold>Layer 2 (mid level)</bold>: provides a function-oriented
  Pythonic API with comprehensive and Python-friendly documentation.
  Access to this layer is rarely needed, only used to control certain
  specific aspects of the VISA library which are not implemented by the
  corresponding resource class. In the default backend (which wraps the
  IVI-VISA binary library), these functions call the low-level
  counterparts, adding some code to deal with type conversions for
  functions that return values by reference. In other backends like
  <monospace>PyVISA-py</monospace>, the backend implements the protocols
  defined in the VISA standard and calls other Python libraries (like
  <monospace>PyUSB</monospace>) to communicate.</p>
  <p><bold>Layer 3 (high level)</bold> defines the previously mentioned
  <monospace>ResourceManager</monospace> class and the
  <monospace>Resource</monospace> class and its specific subclasses
  (<monospace>GPIBInstrument</monospace>,
  <monospace>USBInstrument</monospace>, etc). It also defines
  <monospace>VisaLibraryBase</monospace>, which serves as a modular
  interchangeable abstraction layer. Specific backends implement
  communication with devices in subclasses of
  <monospace>VisaLibraryBase</monospace> (e.g.
  <monospace>IVIVisaLibrary</monospace> and
  <monospace>PyVisaLibrary</monospace>), and contain layer 2 functions
  as bound methods.</p>
  <p><monospace>PyVISA</monospace> also implements routines to parse and
  filter resources names as defined in the VISA standard. Moreover, it
  provides functions to convert between data structures and data streams
  used by most equipment. While these routines are found in many IVI
  binary libraries, providing a pure Python version lowers the entry
  barrier to generate new backends.</p>
  <p>Finally, at the very early stages of <monospace>PyVISA</monospace>
  development, it became clear that a <bold>command line tool</bold> was
  necessary to help with bug reporting and community testing. Indeed,
  one of the challenges when supporting users was reproducing the issue,
  given the broad range of software and hardware being used with PyVISA.
  For tackling this problem, the <monospace>visa</monospace> command
  line tool was born. <monospace>visa info</monospace> provides
  information about the running machine (OS, version, processor, etc),
  Python interpreter (version, compiler), <monospace>PyVISA</monospace>
  and its backends, and the Python and binary libraries it depends on.
  While gathering this information, it tries to instantiate all backends
  for obtaining valuable information. <monospace>visa shell</monospace>
  provides an interactive text-based session that allows listing
  resources, opening them, and sending and receiving messages.</p>
  <p>However, this name of this tool conflicted with the
  <monospace>visa</monospace> package related to credit cards, so
  <monospace>visa info</monospace> became
  <monospace>pyvisa-info</monospace> and
  <monospace>visa shell</monospace> became
  <monospace>pyvisa-shell</monospace>.</p>
</sec>
<sec id="future-of-pyvisa">
  <title>Future of PyVISA</title>
  <p>Like other projects in the Python scientific ecosystem,
  <monospace>PyVISA</monospace> started and leveraged Python’s success
  as a glue language
  (<xref alt="Oliphant, 2015" rid="ref-OliphantU003A2015" ref-type="bibr">Oliphant,
  2015</xref>), being a simple wrapper around
  <monospace>NI-VISA</monospace>. But Python grew beyond, and so did
  <monospace>PyVISA</monospace>. One the biggest most recent additions
  to Python is the native support to write concurrent code using the
  async/await syntax
  (<xref alt="Selivanov, 2015" rid="ref-pepU003A492" ref-type="bibr">Selivanov,
  2015</xref>). This is well-suited for IO-bound code with the need for
  concurrency, and most instrumentation code fits this description.
  While IVI libraries have supported async reads and writes for a long
  time, this has not reached most instrumentation code. Most
  applications are synchronous or use the less appropriate
  multithreading or multiprocessing Python libraries. By providing
  <monospace>async/await</monospace> versions of its functions and
  methods, <monospace>PyVISA</monospace> will allow to write safe,
  concurrent instrumentation code even in complex programs.</p>
  <p>However, evolving <monospace>PyVISA</monospace> is a slow process
  due to the difficulty to thoroughly test it. Typical continuous
  integration (CI) systems cannot provide access to actual instruments
  to test against. Through a cooperation with Keysight,
  <monospace>PyVISA</monospace> developers now have access to a virtual
  instrument that is more flexible to perform tests than a real
  instrument, however robust CI has not yet been set up.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p><monospace>PyVISA</monospace> has been developed over the course of
  many years. Following open source best practices
  (<xref alt="Raymond, 1999" rid="ref-raymondU003A1999" ref-type="bibr">Raymond,
  1999</xref>), we fostered a community of users that became developers,
  and passed project leadership onto the people that can devote time and
  energy. This vision has been achieved by the establishment of a
  <monospace>PyVISA</monospace> organization on GitHub, moving the
  project out of a personal repository
  (<xref alt="The PyVISA authors, 2020b" rid="ref-pyvisaU003Agithub" ref-type="bibr">The
  PyVISA authors, 2020b</xref>). We appreciate greatly the contributions
  of the <monospace>PyVISA</monospace> global community that made all
  this possible.</p>
</sec>
<sec id="section">
  <title></title>
</sec>
<sec id="section-1">
  <title></title>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-CheijU003A2002">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cheij</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>Software architecture for building</article-title>
      <source>IEEE Aerospace and Electronic Systems Magazine</source>
      <year iso-8601-date="2002">2002</year>
      <volume>17</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1109/62.978361</pub-id>
      <fpage>27</fpage>
      <lpage>30</lpage>
    </element-citation>
  </ref>
  <ref id="ref-OliphantU003A2015">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Oliphant</surname><given-names>T. E.</given-names></name>
      </person-group>
      <source>Guide to NumPy: 2nd edition</source>
      <publisher-name>CreateSpace Independent Publishing Platform</publisher-name>
      <year iso-8601-date="2015">2015</year>
    </element-citation>
  </ref>
  <ref id="ref-pyvisaU003Agithub">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>The PyVISA authors</string-name>
      </person-group>
      <article-title>PyVISA: A Python package for support of the Virtual Instrument Software Architecture</article-title>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/pyvisa/pyvisa</uri>
    </element-citation>
  </ref>
  <ref id="ref-pyvisaU003Adocs">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>The PyVISA authors</string-name>
      </person-group>
      <article-title>PyVISA: A Python package for support of the Virtual Instrument Software Architecture</article-title>
      <publisher-name>Read the Docs</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <uri>https://pyvisa.readthedocs.io</uri>
    </element-citation>
  </ref>
  <ref id="ref-pepU003A492">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Selivanov</surname><given-names>Y.</given-names></name>
      </person-group>
      <article-title>PEP 492 – coroutines with async and await syntax</article-title>
      <source>Python</source>
      <publisher-name>Python</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <uri>https://peps.python.org/pep-0492/</uri>
    </element-citation>
  </ref>
  <ref id="ref-EnkeU003A1982">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Enke</surname><given-names>C. G.</given-names></name>
      </person-group>
      <article-title>Computers in scientific instrumentation</article-title>
      <source>Science</source>
      <year iso-8601-date="1982">1982</year>
      <volume>215</volume>
      <issue>4534</issue>
      <uri>https://www.science.org/doi/abs/10.1126/science.215.4534.785</uri>
      <pub-id pub-id-type="doi">10.1126/science.215.4534.785</pub-id>
      <fpage>785</fpage>
      <lpage>791</lpage>
    </element-citation>
  </ref>
  <ref id="ref-raymondU003A1999">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Raymond</surname><given-names>Eric</given-names></name>
      </person-group>
      <article-title>The cathedral and the bazaar</article-title>
      <source>Know Techn Pol</source>
      <year iso-8601-date="1999-09">1999</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-04-24">2023</year><month>04</month><day>24</day></date-in-citation>
      <volume>12</volume>
      <issue>3</issue>
      <issn>1874-6314</issn>
      <uri>https://doi.org/10.1007/s12130-999-1026-0</uri>
      <pub-id pub-id-type="doi">10.1007/s12130-999-1026-0</pub-id>
      <fpage>23</fpage>
      <lpage>49</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
