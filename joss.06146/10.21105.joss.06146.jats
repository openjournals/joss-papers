<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6146</article-id>
<article-id pub-id-type="doi">10.21105/joss.06146</article-id>
<title-group>
<article-title>The MOOSE Thermal Hydraulics Module</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6782-5275</contrib-id>
<name>
<surname>Hansel</surname>
<given-names>Joshua</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8913-902X</contrib-id>
<name>
<surname>Andrs</surname>
<given-names>David</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6343-6990</contrib-id>
<name>
<surname>Charlot</surname>
<given-names>Lise</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9714-4382</contrib-id>
<name>
<surname>Giudicelli</surname>
<given-names>Guillaume</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Idaho National Laboratory</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-10-11">
<day>11</day>
<month>10</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>94</issue>
<fpage>6146</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>multiphysics</kwd>
<kwd>system analysis</kwd>
<kwd>thermal hydraulics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Multiphysics Object-Oriented Simulation Environment (MOOSE) is
  an open-source object-oriented finite element framework written in C++
  (<xref alt="Lindsay et al., 2022" rid="ref-lindsay2022moose" ref-type="bibr">Lindsay
  et al., 2022</xref>). The Thermal Hydraulics Module (THM) is an
  optional MOOSE physics module that provides capabilities for studying
  thermal hydraulic systems. Its core capability lies in assembling a
  network of coupled components, for instance, pipes, junctions, and
  valves.</p>
  <p>THM provides several new systems to MOOSE to enable and facilitate
  thermal hydraulic simulations, most notably the
  <monospace>Components</monospace> system, which provides a
  higher-level syntax to MOOSE’s lower-level objects. This system is
  extensible by the user, but the current library primarily includes
  components based on a one-dimensional, single-phase, variable-area,
  compressible flow model, as well as heat conduction.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Numerous engineering applications employ fluids as media for
  transferring heat. Power generation applications notably transfer heat
  from a source, such as a boiler, to an energy conversion system, such
  as a turbine. Thermal hydraulic systems are well-suited for the task,
  due to their ability to move energy efficiently over the scale of a
  plant. These systems vary widely in their size and complexity and may
  feature a large number of coupled components.</p>
  <p>A notable example requiring thermal hydraulic systems analysis is a
  nuclear reactor system. These systems typically involve a large
  network of components to convert nuclear power to electrical power and
  additional heat transfer components to remove the heat during
  accidental transients. For example, there may be a primary flow “loop”
  of pipes that extract heat from the fuel, pumps to force circulation,
  one or more heat exchangers exchanging heat between this primary loop
  and a secondary loop, and turbomachinery components like turbines and
  generators. Accurate systems analyses require models that capture the
  coupling between all of these components.</p>
  <p>A wide variety of applications have been built using the MOOSE
  framework. A suite of applications supporting various domains of
  nuclear reactor systems analysis is under active development at Idaho
  National Laboratory. THM provides a foundation for thermal hydraulic
  applications in this area, including RELAP-7
  (<xref alt="Berry et al., 2018" rid="ref-relap7theory" ref-type="bibr">Berry
  et al., 2018</xref>), which models two-phase flow in light-water
  reactors and coolant flow in gas-cooled reactors, and Sockeye
  (<xref alt="Hansel et al., 2021" rid="ref-hansel2021sockeye" ref-type="bibr">Hansel
  et al., 2021</xref>), which models heat pipes used in nuclear
  microreactors.</p>
</sec>
<sec id="core-capabilities">
  <title>Core capabilities</title>
  <sec id="components-system">
    <title><monospace>Components</monospace> system</title>
    <p>The <monospace>Components</monospace> system allows users to add
    “components”, which are very flexible in their use, but in general
    represent “pieces” of a simulation, which may be coupled together.
    Common uses for components include adding meshes (one-, two-, or
    three-dimensional), variables, equations, and output. Components
    provide a higher level syntax that hides lower level MOOSE objects,
    such as <monospace>Kernel</monospace>s and
    <monospace>BoundaryCondition</monospace>s. While
    <monospace>Action</monospace>s can also be used to create a
    higher-level syntax, components provide much more convenience,
    particularly when multiple components interact.</p>
    <p>Usually, components represent physical pieces in a system, such
    as pipes, solid bodies, or junctions; however, they can also be
    abstract, for example, coupling other components together, providing
    some source or boundary conditions, or just adding any other MOOSE
    objects in a convenient manner.</p>
    <p>The <monospace>Components</monospace> system is abstract and
    provides several base classes that could be utilized by a variety of
    physical applications. All components share the base class
    <monospace>Component</monospace>; some intermediate base classes
    are:</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>Component1D</monospace>: generates a
        one-dimensional (1D) mesh in three-dimensional (3D) space,
        defined by a starting point, direction, length, and
        discretization.</p>
      </list-item>
      <list-item>
        <p><monospace>Component2D</monospace>: generates a
        two-dimensional (2D) mesh in 3D space, defined by the same axial
        parameters as <monospace>Component1D</monospace>, plus
        transverse direction, length, and discretization. This may
        represent either a Cartesian or axisymmetric coordinate
        system.</p>
      </list-item>
      <list-item>
        <p><monospace>FileMeshComponent</monospace>: generates a mesh
        read from an external file (any dimension).</p>
      </list-item>
      <list-item>
        <p><monospace>Component1DBoundary</monospace>: used for applying
        boundary conditions to a <monospace>Component1D</monospace>
        component.</p>
      </list-item>
      <list-item>
        <p><monospace>Component1DJunction</monospace>: used for applying
        coupled boundary conditions between
        <monospace>Component1D</monospace> components.</p>
      </list-item>
    </list>
    <p>The following subsections describe some of the currently
    available components.</p>
    <sec id="flow-components">
      <title>Flow components</title>
      <p>THM has numerous components that support a 1D, variable-area,
      single-phase compressible flow model
      (<xref alt="Berry et al., 2018" rid="ref-relap7theory" ref-type="bibr">Berry
      et al., 2018</xref>). Components related to this flow model use
      the suffix <monospace>1Phase</monospace>, with the main component
      being the straight-channel component called
      <monospace>FlowChannel1Phase</monospace>. Other components related
      to this flow model are summarized as follows:</p>
      <list list-type="bullet">
        <list-item>
          <p>Boundary conditions, such as inlets and outlets (with
          various formulations) and walls.</p>
        </list-item>
        <list-item>
          <p>Junctions, which allow flow to occur between multiple flow
          channels by providing coupled boundary conditions to each
          connected channel. These also include valves, which can
          partially or completely close flow paths.</p>
        </list-item>
        <list-item>
          <p>Volumetric heat sources, such as heat from a provided
          function, a convection condition, or a coupled heat flux.</p>
        </list-item>
        <list-item>
          <p>Volumetric form loss sources, such as those arising from
          flow blockages.</p>
        </list-item>
        <list-item>
          <p>Turbomachinery components, such as pumps, compressors, and
          turbines, which are particular types of junctions that add
          source terms to the momentum and energy equations to simulate
          turbomachinery.</p>
        </list-item>
      </list>
      <p>In addition to these components, there is also
      <monospace>FlowComponentNS</monospace>, which leverages a
      selection of flow formulations from MOOSE’s Navier–Stokes module
      (<xref alt="Lindsay et al., 2023" rid="ref-lindsay2023moose" ref-type="bibr">Lindsay
      et al., 2023</xref>), with a mesh provided by an external
      file.</p>
      <p>The fluid properties needed by these components are defined
      using the MOOSE Fluid Properties module. For simulations with
      multiple loops with different fluids, a
      <monospace>FluidProperties</monospace> object can be created for
      each fluid and used in the corresponding THM flow components.</p>
    </sec>
    <sec id="heat-conduction-components">
      <title>Heat conduction components</title>
      <p>Thermal hydraulic systems feature not only flow components but
      also solid bodies that transfer heat with the flow, such as the
      walls of a heat exchanger. In THM, these bodies are 2D or 3D
      components referred to as “heat structures,” which solve the
      transient heat conduction equation:</p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>HeatStructurePlate</monospace>: derived from
          <monospace>Component2D</monospace> and using a Cartesian
          coordinate system, representing a “plate” geometry.</p>
        </list-item>
        <list-item>
          <p><monospace>HeatStructureCylindrical</monospace>: derived
          from <monospace>Component2D</monospace> and using an
          axisymmetric coordinate system, representing a “cylinder” or
          “shell” geometry.</p>
        </list-item>
        <list-item>
          <p><monospace>HeatStructureFromFile3D</monospace>: derived
          from <monospace>FileMeshComponent</monospace>, representing a
          general 3D geometry.</p>
        </list-item>
      </list>
      <p>In addition to the heat structure components themselves, there
      are components that interact with them:</p>
      <list list-type="bullet">
        <list-item>
          <p>Boundary conditions, such as Dirichlet, provided heat flux
          function, convection, and radiation.</p>
        </list-item>
        <list-item>
          <p>Volumetric heat sources.</p>
        </list-item>
        <list-item>
          <p>Interface conditions, which couple heat structures to other
          heat structures or to flow channels.</p>
        </list-item>
      </list>
    </sec>
  </sec>
  <sec id="closures-system">
    <title><monospace>Closures</monospace> system</title>
    <p>The <monospace>Closures</monospace> system allows users to create
    MOOSE objects (usually <monospace>Material</monospace>s) that
    specify closures for their component models. For example, a flow
    channel may require definitions of quantities such as friction
    factors and heat transfer coefficients. The selection of closure
    relations may depend on the application. Closure relations may be
    generic correlations or custom relations, such as correlations from
    experimentally measured data.</p>
    <p>While these definitions could be made inside a component, it is
    advantageous to have closure definitions separately both for
    code-reuse purposes and to avoid duplicating objects. There may be a
    large number of closure choices, each with their own user
    parameters. In large systems of components,
    <monospace>Closures</monospace> objects can be reused when the
    closures apply to many objects.</p>
  </sec>
  <sec id="controllogic-system">
    <title><monospace>ControlLogic</monospace> system</title>
    <p>The <monospace>ControlLogic</monospace> system is an extension of
    MOOSE’s <monospace>Controls</monospace> system, which is used to
    control input parameters to various objects during a simulation.
    Unlike standard controls objects, control logic objects may declare
    new control data that is not associated with input parameters and
    may retrieve control data declared in other control logic objects,
    allowing control operations to be chained together, which is not
    possible in the standard <monospace>Controls</monospace> system.
    This is necessary to mirror real control systems in thermal
    hydraulic systems, which may feature various controllers in series.
    Examples of controls in THM’s library include a transient function
    control, a proportional-integral-derivative control, a delay
    control, a trip control, and a termination control.</p>
  </sec>
  <sec id="integrity-checking">
    <title>Integrity checking</title>
    <p>Systems simulations can have a very large number of components,
    and the input for such large models is potentially complex and
    error-prone, perhaps involving tens or hundreds of input errors in a
    user’s first attempt. To enable a practical input file-writing
    workflow, it is important that errors can be reported in batch,
    instead of stopping execution at the first error encountered, which
    is the usual behavior in MOOSE. To address this need, THM provides a
    logging capability. An application creates a single “logger” object,
    and then various objects (such as components and closures objects)
    can log errors and warnings. Execution continues until the
    application chooses to print out all of the errors and warnings, in
    a very palatable, condensed format. The user can then view and
    address these errors all at once, significantly decreasing the
    number of input file iterations.</p>
  </sec>
</sec>
<sec id="documentation">
  <title>Documentation</title>
  <p>THM’s documentation is extensive and follows the same structure as
  the code base. Each object is accompanied by a documentation page
  that:</p>
  <list list-type="bullet">
    <list-item>
      <p>Describes it, including its equations or a figure as
      relevant</p>
    </list-item>
    <list-item>
      <p>Lists its parameters along with metadata about the
      parameters</p>
    </list-item>
    <list-item>
      <p>Lists all the input files in the repository that use this
      object</p>
    </list-item>
    <list-item>
      <p>Lists all the classes deriving from this object.</p>
    </list-item>
  </list>
  <p>Major groups of objects, usually derived from a single base class,
  are documented through the syntax documentation, which describes how
  these objects are instantiated and used in a simulation. For example,
  <monospace>Components</monospace> and <monospace>Closures</monospace>
  are examples of syntax unique to THM that also correspond to base
  classes of groups of THM objects.</p>
  <p>This documentation page is hosted on the
  <ext-link ext-link-type="uri" xlink:href="https://mooseframework.inl.gov/modules/thermal_hydraulics/index.html">module
  website</ext-link>. The website also hosts the software quality
  assurance (SQA) records, such as the testing requirement matrix and
  failure analysis reports.</p>
</sec>
<sec id="testing">
  <title>Testing</title>
  <p>The module relies on CIVET
  (<xref alt="Slaughter et al., 2021" rid="ref-slaughter2021continuous" ref-type="bibr">Slaughter
  et al., 2021</xref>) for continuous integration. Every pull request to
  the module runs the entire test suite for MOOSE, including the tests
  for THM. The test suite is comprehensive and aims to cover every
  feature available in the module. It consists of unit and regression
  tests, described in this section. The entire test suite is run with a
  wide variety of configurations, from compiling with the oldest and
  newest supported compilers, to running with several shared memory
  threads and distributed memory processes, on a variety of operating
  systems. The code is also checked for memory leaks using Valgrind
  (<xref alt="Nethercote &amp; Seward, 2007" rid="ref-valgrind" ref-type="bibr">Nethercote
  &amp; Seward, 2007</xref>).</p>
  <p>Unit tests in THM are targeted at specific routines that can be
  accessed by creating the relevant object with example parameters. For
  example, in a <monospace>Flux</monospace> object, we can check that
  the formulation of the numerical flux is both consistent and
  symmetric.</p>
  <p>Regression tests are typically created for every object to ensure
  that their behavior does not vary on a relevant test case. For
  example, a <monospace>Function</monospace> object can be tested on a
  simple mesh to ensure the field it produces is consistent. Components
  are often tested in the minimal configuration sufficient to satisfy
  the test requirement, for example, to prove conservation of mass and
  energy on a flow channel.</p>
  <p>In addition to the automated testing provided by CIVET, proposed
  changes to the module are reviewed by at least one member of the MOOSE
  change control board, as detailed in MOOSE’s SQA plan
  (<xref alt="Slaughter et al., 2021" rid="ref-slaughter2021continuous" ref-type="bibr">Slaughter
  et al., 2021</xref>), in addition to any other interested reviewers.
  Reviewers determine if the proposed changes have an acceptable design,
  follow coding standards, and are sufficiently tested.</p>
</sec>
<sec id="demonstration">
  <title>Demonstration</title>
  <p>THM can be used as a foundation for other MOOSE-based applications
  or as a stand-alone software to model a variety of systems, including
  nuclear systems, power conversion cycles, and geothermal piping
  networks. The flexibility of THM is demonstrated with a two-loop
  system that is typical of a nuclear reactor system. This model is the
  final step of the single-phase flow THM tutorial available on the
  <ext-link ext-link-type="uri" xlink:href="https://mooseframework.inl.gov/modules/thermal_hydraulics/index.html">THM
  website</ext-link>.</p>
  <fig>
    <caption><p>System diagram (left) and temperature distribution
    (right)
    <styled-content id="figU003Ademo"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/demo_dia_T.png" />
  </fig>
  <p>The system is shown in
  <xref alt="[fig:demo]" rid="figU003Ademo">[fig:demo]</xref>. Helium
  circulates in the primary loop (displayed in light gray color) and
  extracts heat from a rod (<monospace>core_hs</monospace>). Heat is
  transferred to liquid water in a secondary system (displayed in light
  blue color) through a heat exchanger (<monospace>hx/*</monospace>).
  The cold helium then enters a pump, before flowing into the heated
  section again. Each part of the system shown in
  <xref alt="[fig:demo]" rid="figU003Ademo">[fig:demo]</xref> is defined
  using the appropriate <monospace>Component</monospace> object. The
  <monospace>ControlLogic</monospace> system is used to set the pump
  head to match a target mass flow rate in the primary loop. The
  secondary side is a flow channel with water. This example features two
  sets of <monospace>Closures</monospace> objects. The first set is of
  type <monospace>Closures1PhaseTHM</monospace> and uses classic
  engineering correlations for the heat transfer coefficient and
  friction factor; the second set is of type
  <monospace>Closures1PhaseNone</monospace>, used to define custom
  relations for the various closures for the primary side of the heat
  exchanger. THM can then calculate quantities of interest, such as
  pressure, temperature, and mass flow rate.</p>
</sec>
<sec id="conclusions">
  <title>Conclusions</title>
  <p>THM provides a flexible framework for performing thermal hydraulic
  systems simulations within the MOOSE framework, with many useful
  capabilities that extend beyond the field of thermal hydraulics. The
  <monospace>Components</monospace> system provides an ideal structure
  for setting up large systems of connected components in MOOSE,
  significantly reducing the user input burden, since the higher level
  components syntax hides the multitude of lower level MOOSE objects.
  The <monospace>ControlLogic</monospace> system extends the usability
  of MOOSE’s <monospace>Controls</monospace> system, allowing control
  units to be chained together.</p>
  <p>The development of the module is driven by user application needs.
  Future work to THM may include improvement of existing components, as
  well as additional components related to single-phase flow and heat
  conduction. Depending on future needs, additional flow models may be
  added as well. Further abstraction of the way the discretization of an
  equation is created on a component is underway, and should allow for
  the definition of a general multiphysics component, able to
  instantiate any equation discretized in MOOSE.</p>
  <p>External contributions to the module are encouraged, and support
  will be provided to comply with MOOSE’s SQA standard.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would first like to thank Richard Martineau for his strong
  support and efforts to acquire funding for the project. We would also
  like to acknowledge the time and effort of THM’s many contributors,
  most notably Jack Cavaluzzi, Thomas Freyman, Luiz Aldeia, and Rachel
  Beall.</p>
  <p>This work was funded by the Department of Energy Nuclear Energy
  Advanced Modeling and Simulation (NEAMS) program. This manuscript has
  been authored by Battelle Energy Alliance, LLC under Contract
  No. DE-AC07-05ID14517 with the US Department of Energy. The United
  States Government retains and the publisher, by accepting the article
  for publication, acknowledges that the United States Government
  retains a nonexclusive, paid-up, irrevocable, worldwide license to
  publish or reproduce the published form of this manuscript, or allow
  others to do so, for United States Government purposes.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-lindsay2022moose">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lindsay</surname><given-names>Alexander D.</given-names></name>
        <name><surname>Gaston</surname><given-names>Derek R.</given-names></name>
        <name><surname>Permann</surname><given-names>Cody J.</given-names></name>
        <name><surname>Miller</surname><given-names>Jason M.</given-names></name>
        <name><surname>Andrš</surname><given-names>David</given-names></name>
        <name><surname>Slaughter</surname><given-names>Andrew E.</given-names></name>
        <name><surname>Kong</surname><given-names>Fande</given-names></name>
        <name><surname>Hansel</surname><given-names>Joshua</given-names></name>
        <name><surname>Carlsen</surname><given-names>Robert W.</given-names></name>
        <name><surname>Icenhour</surname><given-names>Casey</given-names></name>
        <name><surname>Harbour</surname><given-names>Logan</given-names></name>
        <name><surname>Giudicelli</surname><given-names>Guillaume L.</given-names></name>
        <name><surname>Stogner</surname><given-names>Roy H.</given-names></name>
        <name><surname>German</surname><given-names>Peter</given-names></name>
        <name><surname>Badger</surname><given-names>Jacob</given-names></name>
        <name><surname>Biswas</surname><given-names>Sudipta</given-names></name>
        <name><surname>Chapuis</surname><given-names>Leora</given-names></name>
        <name><surname>Green</surname><given-names>Christopher</given-names></name>
        <name><surname>Hales</surname><given-names>Jason</given-names></name>
        <name><surname>Hu</surname><given-names>Tianchen</given-names></name>
        <name><surname>Jiang</surname><given-names>Wen</given-names></name>
        <name><surname>Jung</surname><given-names>Yeon Sang</given-names></name>
        <name><surname>Matthews</surname><given-names>Christopher</given-names></name>
        <name><surname>Miao</surname><given-names>Yinbin</given-names></name>
        <name><surname>Novak</surname><given-names>April</given-names></name>
        <name><surname>Peterson</surname><given-names>John W.</given-names></name>
        <name><surname>Prince</surname><given-names>Zachary M.</given-names></name>
        <name><surname>Rovinelli</surname><given-names>Andrea</given-names></name>
        <name><surname>Schunert</surname><given-names>Sebastian</given-names></name>
        <name><surname>Schwen</surname><given-names>Daniel</given-names></name>
        <name><surname>Spencer</surname><given-names>Benjamin W.</given-names></name>
        <name><surname>Veeraraghavan</surname><given-names>Swetha</given-names></name>
        <name><surname>Recuero</surname><given-names>Antonio</given-names></name>
        <name><surname>Yushu</surname><given-names>Dewen</given-names></name>
        <name><surname>Wang</surname><given-names>Yaqi</given-names></name>
        <name><surname>Wilkins</surname><given-names>Andy</given-names></name>
        <name><surname>Wong</surname><given-names>Christopher</given-names></name>
      </person-group>
      <article-title>2.0 - MOOSE: Enabling massively parallel multiphysics simulation</article-title>
      <source>SoftwareX</source>
      <year iso-8601-date="2022">2022</year>
      <volume>20</volume>
      <issn>2352-7110</issn>
      <pub-id pub-id-type="doi">10.1016/j.softx.2022.101202</pub-id>
      <fpage>101202</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-relap7theory">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Berry</surname><given-names>R. A.</given-names></name>
        <name><surname>Zou</surname><given-names>L.</given-names></name>
        <name><surname>Zhao</surname><given-names>H.</given-names></name>
        <name><surname>Zhang</surname><given-names>H.</given-names></name>
        <name><surname>Peterson</surname><given-names>J. W.</given-names></name>
        <name><surname>Martineau</surname><given-names>R. C.</given-names></name>
        <name><surname>Kadioglu</surname><given-names>S. Y.</given-names></name>
        <name><surname>Andrs</surname><given-names>D.</given-names></name>
        <name><surname>Hansel</surname><given-names>Joshua E.</given-names></name>
      </person-group>
      <article-title>RELAP-7 theory manual</article-title>
      <publisher-name>Idaho National Laboratory</publisher-name>
      <year iso-8601-date="2018-03">2018</year><month>03</month>
      <pub-id pub-id-type="doi">10.2172/1498781</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hansel2021sockeye">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hansel</surname><given-names>Joshua E.</given-names></name>
        <name><surname>Berry</surname><given-names>Ray A.</given-names></name>
        <name><surname>Andrs</surname><given-names>David</given-names></name>
        <name><surname>Kunick</surname><given-names>Matthias S.</given-names></name>
        <name><surname>Martineau</surname><given-names>Richard C.</given-names></name>
      </person-group>
      <article-title>Sockeye: A one-dimensional, two-phase, compressible flow heat pipe application</article-title>
      <source>Nuclear Technology</source>
      <publisher-name>Taylor &amp; Francis</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>207</volume>
      <issue>7</issue>
      <pub-id pub-id-type="doi">10.1080/00295450.2020.1861879</pub-id>
      <fpage>1096</fpage>
      <lpage>1117</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lindsay2023moose">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lindsay</surname><given-names>Alexander D.</given-names></name>
        <name><surname>Giudicelli</surname><given-names>Guillaume</given-names></name>
        <name><surname>German</surname><given-names>Peter</given-names></name>
        <name><surname>Peterson</surname><given-names>John</given-names></name>
        <name><surname>Wang</surname><given-names>Yaqi</given-names></name>
        <name><surname>Freile</surname><given-names>Ramiro</given-names></name>
        <name><surname>Andrs</surname><given-names>David</given-names></name>
        <name><surname>Balestra</surname><given-names>Paolo</given-names></name>
        <name><surname>Tano</surname><given-names>Mauricio</given-names></name>
        <name><surname>Hu</surname><given-names>Rui</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>MOOSE Navier–Stokes module</article-title>
      <source>SoftwareX</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>23</volume>
      <pub-id pub-id-type="doi">10.1016/j.softx.2023.101503</pub-id>
      <fpage>101503</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-slaughter2021continuous">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Slaughter</surname><given-names>Andrew E.</given-names></name>
        <name><surname>Permann</surname><given-names>Cody J.</given-names></name>
        <name><surname>Miller</surname><given-names>Jason M.</given-names></name>
        <name><surname>Alger</surname><given-names>Brian K.</given-names></name>
        <name><surname>Novascone</surname><given-names>Stephen R.</given-names></name>
      </person-group>
      <article-title>Continuous integration, in-code documentation, and automation for nuclear quality assurance conformance</article-title>
      <source>Nuclear Technology</source>
      <publisher-name>Taylor &amp; Francis</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>207</volume>
      <issue>7</issue>
      <pub-id pub-id-type="doi">10.1080/00295450.2020.1826804</pub-id>
      <fpage>923</fpage>
      <lpage>930</lpage>
    </element-citation>
  </ref>
  <ref id="ref-valgrind">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nethercote</surname><given-names>Nicholas</given-names></name>
        <name><surname>Seward</surname><given-names>Julian</given-names></name>
      </person-group>
      <article-title>Valgrind: A framework for heavyweight dynamic binary instrumentation</article-title>
      <source>SIGPLAN Not.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2007-06">2007</year><month>06</month>
      <volume>42</volume>
      <issue>6</issue>
      <issn>0362-1340</issn>
      <pub-id pub-id-type="doi">10.1145/1273442.1250746</pub-id>
      <fpage>89</fpage>
      <lpage>100</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
