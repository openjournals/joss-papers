<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8259</article-id>
<article-id pub-id-type="doi">10.21105/joss.08259</article-id>
<title-group>
<article-title><monospace>pyScienceMode</monospace>: an Open-Source
Python Package to control electro-stimulator through the Hasomed’s
science mode protocol</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0009-0248-3548</contrib-id>
<name>
<surname>Co</surname>
<given-names>Kevin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7854-9410</contrib-id>
<name>
<surname>Ceglia</surname>
<given-names>Amedeo</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4107-9160</contrib-id>
<name>
<surname>Begon</surname>
<given-names>Mickael</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>School of Kinesiology and Human Kinetics, University of
Montreal, Montreal, QC, Canada</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Institute of Biomedical Engineering, Faculty of Medicine,
University of Montreal, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-03-31">
<day>31</day>
<month>3</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>111</issue>
<fpage>8259</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
<kwd>functional electrical stimulation</kwd>
<kwd>stimulator control</kwd>
<kwd>Rehastim</kwd>
<kwd>ScienceMode</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>pyScienceMode</monospace> is an open-source Python
  package that simplifies advanced and customizable functional
  electrical stimulation (FES) protocols and offers straightforward
  integration into research pipelines. The package supports the
  Rehastim2 and the P24 stimulator devices (Hasomed Inc., Magdeburg,
  Germany), enabling the creation of customized stimulation protocols by
  allowing the user to control key stimulation parameters such as
  frequency, pulse intensity, pulse width, and pulse train duration.
  Additionally, pyScienceMode supports the combined use of the MOTOmed
  rehabilitation bike (Reck-Technik GmbH &amp; Co. KG, Betzenweiler,
  Germany) and the Rehastim2 stimulator, allowing pedal angle–based
  stimulation control (Figure 1), as well as direct adjustment of the
  bike’s speed and resistance. Furthermore, pyScienceMode is designed to
  work with a variety of experimental tools including encoders,
  electromyography sensors, and force plates making it easy to build new
  stimulation strategies and control approach for research. By enabling
  an interface for multiple devices, this package helps researchers
  flexibly to implement and customize FES protocols for a range of
  clinical or experimental applications.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>To enhance FES rehabilitation, it is essential to provide optimized
  and personalized stimulation for both the patient and the performed
  task. Advanced control technology is needed to deliver new stimulation
  protocols
  (<xref alt="Ibitoye et al., 2016" rid="ref-ibitoye2016strategies" ref-type="bibr">Ibitoye
  et al., 2016</xref>;
  <xref alt="Rouse et al., 2019" rid="ref-rouse2019fes" ref-type="bibr">Rouse
  et al., 2019</xref>) that can enhance motion
  (<xref alt="Molazadeh et al., 2021" rid="ref-molazadeh2021shared" ref-type="bibr">Molazadeh
  et al., 2021</xref>) or increase muscle force production
  (<xref alt="Doll et al., 2018" rid="ref-doll2018dynamic" ref-type="bibr">Doll
  et al., 2018</xref>). However, most commercially available electrical
  stimulators lack flexible device control, and customization is often
  restricted to manufacturer-provided interfaces, limiting real-time
  adaptation to experimental conditions. Hasomed’s stimulators are
  widely used in research because their ScienceMode API facilitates
  advanced stimulation customization. Building on this API,
  <monospace>pyScienceMode</monospace> was developed to provide full and
  intuitive control of stimulator devices through the Python programming
  language. Furthermore, the package can be updated to integrate any new
  stimulation device that provides an API, ensuring ongoing adaptability
  and innovation in FES research. This capability is essential for
  testing new rehabilitation protocols and to gain a deeper
  understanding of the underlying mechanisms of FES.</p>
  <p>Although similar packages exist, including a LabVIEW-based
  interface for the Rehastim2 device
  (<xref alt="RaviChandran et al., 2022" rid="ref-ravichandran2022labview" ref-type="bibr">RaviChandran
  et al., 2022</xref>) and a C library for the P24 stimulator
  (<ext-link ext-link-type="uri" xlink:href="https://github.com/ScienceMode/ScienceMode4_c_library">https://github.com/ScienceMode/ScienceMode4_c_library</ext-link>),the
  development of <monospace>pyScienceMode</monospace> in Python is
  particularly beneficial for fast prototyping, given Python’s free and
  widely adopted programming language. pyScienceMode is the first
  open-source package enabling the customization of stimulation patterns
  for the Rehastim2 stimulator in Python. The P24 stimulator control was
  also included to the package (based on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ScienceMode/ScienceMode4_python_wrapper">https://github.com/ScienceMode/ScienceMode4_python_wrapper</ext-link>)
  to provide a unified interface and a user-friendly coding environment,
  accessible from a simple installation procedure. It can also integrate
  other sensors and devices that have their own libraries via
  multiprocessing (example below). This will enable the scientific
  community to control the FES for different tasks and goals, for
  instance triggered onset/offset for the drop foot correction and
  cycling events. The package supports customization of stimulation
  parameters (e.g., doublets, triplets, ramp modifications) to address
  challenges such as muscle fatigue, pain reduction, and motion
  smoothness. By unifying these advanced controls in a single platform,
  <monospace>pyScienceMode</monospace> enables reproducible and
  adaptable FES interventions that help researchers to pursue their
  challenging research and to design innovative rehabilitation
  strategies.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p>The main <monospace>pyScienceMode</monospace> features are:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>Stimulator interfaces</monospace>: Allow for
      switching between stimulators easily</p>
    </list-item>
    <list-item>
      <p><monospace>Acks</monospace>: Retrieve the device logs for
      debugging</p>
    </list-item>
    <list-item>
      <p><monospace>Channel(s) configuration</monospace>: Enables the
      configuration of each stimulator channel and the customization of
      the stimulation’s parameters (frequency, duration and
      intensity).</p>
    </list-item>
    <list-item>
      <p><monospace>Motomed</monospace>: real-time communication between
      the computer and Motomed.</p>
    </list-item>
  </list>
  <sec id="a-stimulation-example-electro-stimulation-pipeline">
    <title>A Stimulation example: Electro stimulation pipeline</title>
    <p>This example shows how to combine the
    <monospace>pyScienceMode</monospace> package with another library
    <monospace>Biosiglive</monospace>
    (<xref alt="Ceglia et al., 2023" rid="ref-ceglia2023biosiglive" ref-type="bibr">Ceglia
    et al., 2023</xref>) to control the Rehastim 2 stimulator for a drop
    foot correction on an instrumented treadmill (left images in
    Figure1).</p>
    <code language="python">import numpy as np
from biosiglive.interfaces.vicon_interface import ViconClient
from biosiglive.processing.data_processing import RealTimeProcessing
from biosiglive.gui.plot import LivePlot
from time import sleep, time
from pyScienceMode2 import Stimulator as St
from pyScienceMode2 import Channel as Ch
import multiprocessing as mp

def stream(foot_strike):
    vicon_interface = ViconClient(init_now=True)
    vicon_interface.add_device(&quot;Treadmill&quot;,
                               &quot;generic_device&quot;,
                               rate=2000,
                               system_rate=100)
    vicon_interface.devices[-1].set_process_method(RealTimeProcessing().get_peaks)
    nb_min_frame = vicon_interface.devices[-1].rate * 10
    time_to_sleep = 1 / vicon_interface.devices[-1].system_rate
    count = 0
    force_z, force_z_process = [], []
    is_one = [False, False]
    
    while True:
        tic = time()
        vicon_interface.get_frame()
        data = vicon_interface.get_device_data(device_name=&quot;Treadmill&quot;)
        force_z_tmp = data[0][[2, 8], :]
        (cadence,
         force_z_process,
         force_z,
         is_one) = vicon_interface.devices[0].process_method(
                                                    new_sample=force_z_tmp,
                                                    signal=force_z,
                                                    signal_proc=force_z_process,
                                                    threshold=0.2,
                                                    nb_min_frame=nb_min_frame,
                                                    is_one=is_one,
                                                    min_peaks_interval=1300)
        if np.count_nonzero(force_z_process[:, -20:]):
            print(&quot;set&quot;)
            foot_strike.set()
            count += 1
        loop_time = time() - tic
        real_time_to_sleep = time_to_sleep - loop_time
        if real_time_to_sleep &gt; 0:
            sleep(time_to_sleep - loop_time)

def stim(foot_strike, stimulation_delay, stimulation_duration):
    list_channels = []
    
    # Channel creation
    channel_1 = Ch.Channel(&quot;Single&quot;,
                           no_channel=1,
                           amplitude=50,
                           pulse_width=100,
                           stimulation_interval=33,
                           name=&quot;Soleus&quot;)
    list_channels.append(channel_1)
    stimulator = St.Stimulator(list_channels, &quot;COM34&quot;)
    count = 0
    while True:
        foot_strike.wait()
        sleep(stimulation_delay * 0.001)
        stimulator.start_stimulation(stimulation_duration)
        print(&quot;stim_started&quot;)
        foot_strike.clear()

if __name__ == &quot;__main__&quot;:
    stimulation_delay = 10  # ms
    stimulation_duration = 0.33  # s
    foot_strike = mp.Event()
    stim_proc = mp.Process(name=&quot;stim&quot;,
                           target=stim,
                           args=(foot_strike,
                                 stimulation_delay,
                                 stimulation_duration))
    stream_proc = mp.Process(name=&quot;stream&quot;, target=stream, args=(foot_strike,))
    stim_proc.start()
    stream_proc.start()
    stim_proc.join()
    stream_proc.join()</code>
    <fig>
      <caption><p>Figure 1</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="drop_foot_figure.png" />
    </fig>
    <p><italic>Figure 1: FES for foot drop correction on a treadmill
    (left) and arm cycling on a MOTOmed (right). The left panel shows
    the left foot ground reaction force (green) and the stimulation of
    the left soleus muscle (blue). The right panel displays the crank
    angle (green) along with the stimulation of the biceps and anterior
    deltoid (blue) and the triceps and posterior deltoid
    (orange).</italic></p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The software development was supported by the “Ingénierie de
  technologies interactives en réadaptation” group (INTER) #160
  OptiStim.</p>
  <p>A special thanks to Arsene Baert and Benjamin Faresin for their
  contribution to the package development and documentation writing.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-ibitoye2016strategies">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ibitoye</surname><given-names>Morufu Olusola</given-names></name>
        <name><surname>Hamzaid</surname><given-names>Nur Azah</given-names></name>
        <name><surname>Hasnan</surname><given-names>Nazirah</given-names></name>
        <name><surname>Abdul Wahab</surname><given-names>Ahmad Khairi</given-names></name>
        <name><surname>Davis</surname><given-names>Glen M</given-names></name>
      </person-group>
      <article-title>Strategies for rapid muscle fatigue reduction during FES exercise in individuals with spinal cord injury: A systematic review</article-title>
      <source>PloS one</source>
      <publisher-name>Public Library of Science San Francisco, CA USA</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>11</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1371/journal.pone.0149024</pub-id>
      <fpage>e0149024</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-rouse2019fes">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rouse</surname><given-names>Courtney A</given-names></name>
        <name><surname>Downey</surname><given-names>Ryan J</given-names></name>
        <name><surname>Gregory</surname><given-names>Chris M</given-names></name>
        <name><surname>Cousin</surname><given-names>Christian A</given-names></name>
        <name><surname>Duenas</surname><given-names>Victor H</given-names></name>
        <name><surname>Dixon</surname><given-names>Warren E</given-names></name>
      </person-group>
      <article-title>FES cycling in stroke: Novel closed-loop algorithm accommodates differences in functional impairments</article-title>
      <source>IEEE Transactions on Biomedical Engineering</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>67</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1109/TBME.2019.2920346</pub-id>
      <fpage>738</fpage>
      <lpage>749</lpage>
    </element-citation>
  </ref>
  <ref id="ref-molazadeh2021shared">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Molazadeh</surname><given-names>Vahidreza</given-names></name>
        <name><surname>Zhang</surname><given-names>Qiang</given-names></name>
        <name><surname>Bao</surname><given-names>Xuefeng</given-names></name>
        <name><surname>Dicianno</surname><given-names>Brad E</given-names></name>
        <name><surname>Sharma</surname><given-names>Nitin</given-names></name>
      </person-group>
      <article-title>Shared control of a powered exoskeleton and functional electrical stimulation using iterative learning</article-title>
      <source>Frontiers in Robotics and AI</source>
      <publisher-name>Frontiers Media SA</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>8</volume>
      <pub-id pub-id-type="doi">10.3389/frobt.2021.711388</pub-id>
      <fpage>711388</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-doll2018dynamic">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Doll</surname><given-names>Brian D</given-names></name>
        <name><surname>Kirsch</surname><given-names>Nicholas A</given-names></name>
        <name><surname>Bao</surname><given-names>Xuefeng</given-names></name>
        <name><surname>Dicianno</surname><given-names>Brad E</given-names></name>
        <name><surname>Sharma</surname><given-names>Nitin</given-names></name>
      </person-group>
      <article-title>Dynamic optimization of stimulation frequency to reduce isometric muscle fatigue using a modified hill-huxley model</article-title>
      <source>Muscle &amp; nerve</source>
      <publisher-name>Wiley Online Library</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>57</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1002/mus.25777</pub-id>
      <fpage>634</fpage>
      <lpage>641</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ravichandran2022labview">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>RaviChandran</surname><given-names>Narrendar</given-names></name>
        <name><surname>Aw</surname><given-names>Kean</given-names></name>
        <name><surname>McDaid</surname><given-names>Andrew</given-names></name>
      </person-group>
      <article-title>A LabVIEW interface for RehaStim 2</article-title>
      <publisher-name>TechRxiv</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.36227/techrxiv.21302865.v1</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ceglia2023biosiglive">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ceglia</surname><given-names>Amedeo</given-names></name>
        <name><surname>Verdugo</surname><given-names>Felipe</given-names></name>
        <name><surname>Begon</surname><given-names>Mickael</given-names></name>
      </person-group>
      <article-title>Biosiglive: An open-source python package for real-time biosignal processing</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>83</issue>
      <pub-id pub-id-type="doi">10.21105/joss.05091</pub-id>
      <fpage>5091</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
