<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4896</article-id>
<article-id pub-id-type="doi">10.21105/joss.04896</article-id>
<title-group>
<article-title>OpenMSIStream: A Python package for facilitating
integration of streaming data in diverse laboratory
environments</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4591-2225</contrib-id>
<name>
<surname>Eminizer</surname>
<given-names>Margaret</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Tabrisky</surname>
<given-names>Sam</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4100-4898</contrib-id>
<name>
<surname>Sharifzadeh</surname>
<given-names>Amir</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2267-938X</contrib-id>
<name>
<surname>DiMarco</surname>
<given-names>Christopher</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7905-4260</contrib-id>
<name>
<surname>Diamond</surname>
<given-names>Jacob M.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2659-4698</contrib-id>
<name>
<surname>Ramesh</surname>
<given-names>K. T.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6373-9377</contrib-id>
<name>
<surname>Hufnagel</surname>
<given-names>Todd C.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="aff" rid="aff-5"/>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8493-4630</contrib-id>
<name>
<surname>McQueen</surname>
<given-names>Tyrel M.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="aff" rid="aff-5"/>
<xref ref-type="aff" rid="aff-7"/>
<xref ref-type="aff" rid="aff-8"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2292-180X</contrib-id>
<name>
<surname>Elbert</surname>
<given-names>David</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Institute for Data Intensive Engineering and Science
(IDIES), The Johns Hopkins University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Biology, Dartmouth College, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Computer Science, Dartmouth College,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Hopkins Extreme Materials Institute (HEMI), The Johns
Hopkins University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Department of Materials Science and Engineering, The Johns
Hopkins University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Department of Mechanical Engineering, The Johns Hopkins
University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Department of Chemistry, The Johns Hopkins University,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-8">
<institution-wrap>
<institution>Institute for Quantum Matter (IQM), William H. Miller III
Department of Physics and Astronomy, The Johns Hopkins University,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-09-27">
<day>27</day>
<month>9</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>83</issue>
<fpage>4896</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>data streaming</kwd>
<kwd>science data</kwd>
<kwd>Apache Kafka</kwd>
<kwd>materials science</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>OpenMSIStream provides seamless connection of scientific data
  stores with streaming infrastructure to allow researchers to leverage
  the power of decoupled, real-time data streaming architectures. Data
  streaming is the process of transmitting, ingesting, and processing
  data continuously rather than in batches. Access to streaming data has
  revolutionized many industries in the past decade and created entirely
  new standards of practice and types of analytics. While not yet
  commonly used in scientific research, data streaming has the potential
  to become a key technology to drive rapid advances in scientific data
  collection (e.g., Brookhaven National Lab
  (<xref alt="2022" rid="ref-bluesky" ref-type="bibr">2022</xref>)).
  This paucity of streaming infrastructures linking complex scientific
  systems is due to a lack of tools that facilitate streaming in the
  diverse and distributed systems common in modern research.
  OpenMSIStream closes this gap between underlying streaming systems and
  common scientific infrastructure. Closing this gap empowers novel
  streaming applications for scientific data including automation of
  data curation, reduction, and analysis; real-time experiment
  monitoring and control; and flexible deployment of AI/ML to guide
  autonomous research.</p>
  <p>Streaming data generally refers to data continuously generated from
  multiple sources and passed in small packets (termed messages).
  Streaming data messages are typically organized in groups called
  topics and persist for periods of time conducive to processing for
  multiple uses either sequentially or in small groups. The resulting
  flows of raw data, metadata, and processing results form “ecosystems”
  that automate varied data-driven tasks. A strength of data streaming
  ecosystems is the use of publish-subscribe (“pub/sub”) messaging
  backbones that decouple data senders (publishers) and recipients
  (subscribers). Popular message-focused middleware solutions such as
  RabbitMQ
  (<xref alt="VMware, 2022" rid="ref-rabbitMQ" ref-type="bibr">VMware,
  2022</xref>), Apache Pulsar
  (<xref alt="Apache Software Foundation, 2022b" rid="ref-pulsar" ref-type="bibr">Apache
  Software Foundation, 2022b</xref>), and Apache Kafka
  (<xref alt="Apache Software Foundation, 2022a" rid="ref-kafka" ref-type="bibr">Apache
  Software Foundation, 2022a</xref>) all provide differing capabilities
  as backbones. OpenMSIStream provides robust and efficient, yet easy,
  access to the rich data streaming systems of Apache Kafka.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>The majority of scientific research today relies on semi-automated
  collection, reduction, and analysis of data. Vast improvements in
  instrumentation and computational modeling, however, have rapidly
  increased the volume and quality of that data, providing an
  opportunity for transformative acceleration of science. Such
  transformation will require scalable integration of data resources for
  development and real-time deployment of AI and machine learning, so as
  to facilitate pervasive laboratory automation and the development of
  autonomous decision-making in research.</p>
  <p>OpenMSIStream development was driven by needs in materials science
  research with its central goal of discovering novel materials to meet
  urgent societal needs in fields as diverse as energy, health, the
  environment, and security. It provides a tool to accelerate materials
  research through the development and integration of data and data
  platform resources in the Materials Innovative Infrastructures
  prioritized by the Materials Genome Initiative (MGI)
  (<xref alt="U.S. White House Office of Science and Technology Policy, 2021" rid="ref-mgisp" ref-type="bibr">U.S.
  White House Office of Science and Technology Policy, 2021</xref>).
  Specifically, OpenMSIStream simplifies the process of standing up
  streaming systems by abstracting details while still providing full
  functionality and configurability. It provides file-oriented tools to
  align with the prevailing paradigms of scientific instrumentation and
  data analysis. The suite of tools manage chunking of data files of any
  type to form manageable messages in independently-configured topics.
  Records can be read back to reconstruct the original data file
  contents and trigger flexible processing code to run as entire files
  become available from the stream in real time.</p>
  <p>The messaging backend for OpenMSIStream is provided by the
  <inline-formula><alternatives>
  <tex-math><![CDATA[\texttt{confluent\_kafka}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝚌𝚘𝚗𝚏𝚕𝚞𝚎𝚗𝚝_𝚔𝚊𝚏𝚔𝚊</mml:mtext></mml:math></alternatives></inline-formula>
  Python wrapper
  (<xref alt="Confluent, 2022" rid="ref-confluentkafka" ref-type="bibr">Confluent,
  2022</xref>) around Apache Kafka. A Kafka “broker” persistently stores
  messages in ordered, append-only logs called “topics”. “Producer”
  programs send messages to be appended to topics, while “consumer”
  programs read messages stored in those topics.</p>
  <p>OpenMSIStream producers provide flexibility to upload single files
  to Kafka topics, and persistently watch directory trees on file
  systems for files to upload. OpenMSIStream consumers can download
  files uploaded to topics to disk, or transfer files to object stores
  through S3 API compliance
  (<xref alt="Amazon Web Services, 2022" rid="ref-awssss" ref-type="bibr">Amazon
  Web Services, 2022</xref>). OpenMSIStream also includes base classes
  that users can extend to invoke individualized Python code on the
  contents of reconstructed files and save processing results locally or
  produce them as messages to different topics, including a specific
  implementation for automated extraction and re-production of metadata
  keys and values.</p>
  <p>OpenMSIStream programs (or extensions thereof) can be run from the
  command line, in Docker containers, or installed to run persistently
  in the background as Windows Services or Linux daemons, all using the
  same simple interface. Producer and consumer programs and the central
  Kafka broker exist independently of one another, so they can run on
  computers where data are being generated by instruments, on machines
  hosting data storage, or on more powerful servers for analysis as
  necessary. The Kafka backend is fully customizable through a simple
  configuration file interface, and data uploaded to topics can
  optionally be encrypted on the broker using KafkaCrypto
  (<xref alt="McQueen, 2022" rid="ref-kafkacrypto" ref-type="bibr">McQueen,
  2022</xref>).</p>
  <p>OpenMSIStream was designed for deployment in diverse science
  laboratory environments. Lab scientist or student users need only
  minimal computing experience to set up a directory on an instrument
  computer to watch for data files and start running another program on
  a different computer to automate backups or transfers to local disks
  or cloud storage solutions. Slightly more advanced users can adapt
  their existing analysis codes to automatically perform analyses in
  real time and save results locally or send them off to another Kafka
  topic.</p>
  <p>In materials science projects, it is common to see iterative
  scientific design workflows integrating contributions from several
  different labs that focus on material production, simulation, and
  characterization. Using data streaming to pass raw data, metadata, and
  analysis or simulation results automatically between these groups
  increases interoperability to tighten the materials design loop.</p>
  <p>OpenMSIStream has been adopted as the streaming solution for the
  Open Material Semantic Infrastructure (OpenMSI) within the
  NSF-sponsored Designing Materials to Revolutionize and Engineer our
  Future (DMREF) collaboration at the Hopkins Extreme Materials
  Institute (HEMI). OpenMSIStream is also currently used to automate
  data transfer and analysis between electron microscopy laboratories at
  Cornell University and Johns Hopkins University as part of the
  NSF-sponsored PARADIM Materials Innovation Platform, and for similar
  purposes for X-ray instruments at the Materials Characterization and
  Processing (MCP) Facility at Johns Hopkins University. Further,
  OpenMSIStream will be deployed in the near future as part of the data
  streaming solutions for the ARL-sponsored High-Throughput Materials
  Discovery for Extreme Conditions (HTMDEC) project, as well as in the
  Integrated Materials Design and Processing Applications to Recycled
  Plastics DMREF project (NSF).</p>
  <p>There are many existing open source Python libraries that implement
  streaming data workflows. For example, Bytewax
  (<xref alt="Bytewax, 2022" rid="ref-bytewax" ref-type="bibr">Bytewax,
  2022</xref>) is a library for managing data flow with streaming
  components that can integrate with Kafka, providing an interface to
  different data sources and generalized operators at the single-message
  level. The Bluesky data collection framework
  (<xref alt="Brookhaven National Lab, 2022" rid="ref-bluesky" ref-type="bibr">Brookhaven
  National Lab, 2022</xref>) implements a DataBroker class that can
  access local and remote files, registering incremental updates to them
  as data are collected. Other libraries like Streamz
  (<xref alt="Rocklin, 2022" rid="ref-streamz" ref-type="bibr">Rocklin,
  2022</xref>) can be used to build components of local streaming
  architectures that don’t access or publish data remotely. While
  OpenMSIStream can integrate with any of these Python tools, it also
  fills their common gap by providing full stream processing capability
  using a remote broker while remaining lightweight and accessible to
  laboratory investigators accustomed to writing Python code to analyze
  files stored on disk. OpenMSIStream also interfaces seamlessly with
  other existing components of scientific software stacks such as
  <inline-formula><alternatives>
  <tex-math><![CDATA[\texttt{NumPy}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝙽𝚞𝚖𝙿𝚢</mml:mtext></mml:math></alternatives></inline-formula>
  (<xref alt="Harris et al., 2020" rid="ref-harris2020array" ref-type="bibr">Harris
  et al., 2020</xref>), <inline-formula><alternatives>
  <tex-math><![CDATA[\texttt{SciPy}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝚂𝚌𝚒𝙿𝚢</mml:mtext></mml:math></alternatives></inline-formula>
  (<xref alt="Virtanen et al., 2020" rid="ref-2020SciPy-NMeth" ref-type="bibr">Virtanen
  et al., 2020</xref>), and <inline-formula><alternatives>
  <tex-math><![CDATA[\texttt{pandas}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝚙𝚊𝚗𝚍𝚊𝚜</mml:mtext></mml:math></alternatives></inline-formula>
  (<xref alt="McKinney, 2010" rid="ref-mckinney-proc-scipy-2010" ref-type="bibr">McKinney,
  2010</xref>;
  <xref alt="The pandas development team, 2020" rid="ref-reback2020pandas" ref-type="bibr">The
  pandas development team, 2020</xref>). The use of the Kafka backend
  allows users even more familiar with the Kafka ecosystem to take full
  advantage of non-Python tools like Kafka Streams
  (<xref alt="Apache Software Foundation, 2022c" rid="ref-kafkastreams" ref-type="bibr">Apache
  Software Foundation, 2022c</xref>) for further data handling outside
  of OpenMSIStream.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>The development of OpenMSIStream has been financially supported by
  NSF Awards #1921959 and #2129051. Tyrel M. McQueen and the development
  of KafkaCrypto were supported by the Platform for the Accelerated
  Realization, Analysis, and Discovery of Interface Materials (PARADIM),
  a NSF Materials Innovation Platform, under cooperative agreement
  #1539918.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-rabbitMQ">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>VMware</surname><given-names>Inc.</given-names></name>
      </person-group>
      <article-title>RabbitMQ</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.rabbitmq.com/</uri>
    </element-citation>
  </ref>
  <ref id="ref-pulsar">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Apache Software Foundation</string-name>
      </person-group>
      <article-title>Apache Pulsar</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://pulsar.apache.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-kafka">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Apache Software Foundation</string-name>
      </person-group>
      <article-title>Apache Kafka</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://kafka.apache.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-confluentkafka">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Confluent</surname><given-names>Inc.</given-names></name>
      </person-group>
      <article-title>Confluent-kafka-python: Confluent’s Kafka Python client</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/confluentinc/confluent-kafka-python</uri>
    </element-citation>
  </ref>
  <ref id="ref-awssss">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Amazon Web Services</string-name>
      </person-group>
      <article-title>Amazon Simple Storage Service</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://aws.amazon.com/s3/</uri>
    </element-citation>
  </ref>
  <ref id="ref-kafkacrypto">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>McQueen</surname><given-names>Tyrel M.</given-names></name>
      </person-group>
      <article-title>kafkacrypto: Message layer encryption for Kafka</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/tmcqueen-materials/kafkacrypto</uri>
    </element-citation>
  </ref>
  <ref id="ref-harris2020array">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-2020SciPy-NMeth">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
        <name><surname>van der Walt</surname><given-names>Stéfan J.</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
        <name><surname>Jones</surname><given-names>Eric</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Larson</surname><given-names>Eric</given-names></name>
        <name><surname>Carey</surname><given-names>C J</given-names></name>
        <name><surname>Polat</surname><given-names>İlhan</given-names></name>
        <name><surname>Feng</surname><given-names>Yu</given-names></name>
        <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
        <name><surname>Perktold</surname><given-names>Josef</given-names></name>
        <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
        <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
        <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
        <name><surname>Ribeiro</surname><given-names>Antônio H.</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>van Mulbregt</surname><given-names>Paul</given-names></name>
        <string-name>SciPy 1.0 Contributors</string-name>
      </person-group>
      <article-title>SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python</article-title>
      <source>Nature Methods</source>
      <year iso-8601-date="2020">2020</year>
      <volume>17</volume>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      <fpage>261</fpage>
      <lpage>272</lpage>
    </element-citation>
  </ref>
  <ref id="ref-reback2020pandas">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>The pandas development team</string-name>
      </person-group>
      <article-title>Pandas-dev/pandas: pandas</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2020-02">2020</year><month>02</month>
      <uri>https://doi.org/10.5281/zenodo.3509134</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3509134</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mckinney-proc-scipy-2010">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>McKinney</surname></name>
      </person-group>
      <article-title>Data Structures for Statistical Computing in Python</article-title>
      <source>Proceedings of the 9th Python in Science Conference</source>
      <person-group person-group-type="editor">
        <name><surname>Walt</surname></name>
        <name><surname>Millman</surname></name>
      </person-group>
      <year iso-8601-date="2010">2010</year>
      <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id>
      <fpage>56 </fpage>
      <lpage> 61</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bluesky">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Brookhaven National Lab</string-name>
      </person-group>
      <article-title>Bluesky — an experiment specification &amp; orchestration engine</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/bluesky/bluesky</uri>
    </element-citation>
  </ref>
  <ref id="ref-kafkastreams">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Apache Software Foundation</string-name>
      </person-group>
      <article-title>Kafka Streams</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://kafka.apache.org/documentation/streams/</uri>
    </element-citation>
  </ref>
  <ref id="ref-mgisp">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <string-name>U.S. White House Office of Science and Technology Policy</string-name>
      </person-group>
      <article-title>Materials genome initiative strategic plan</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://www.mgi.gov/sites/default/files/documents/MGI-2021-Strategic-Plan.pdf</uri>
    </element-citation>
  </ref>
  <ref id="ref-bytewax">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bytewax</surname><given-names>Inc.</given-names></name>
      </person-group>
      <article-title>Bytewax - Python stateful stream processing framework</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/bytewax/bytewax</uri>
    </element-citation>
  </ref>
  <ref id="ref-streamz">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Rocklin</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>Streamz</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/python-streamz/streamz</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
