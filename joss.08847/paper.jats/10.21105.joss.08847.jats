<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8847</article-id>
<article-id pub-id-type="doi">10.21105/joss.08847</article-id>
<title-group>
<article-title>pychoco: all-inclusive Python bindings for the
Choco-solver constraint programming library</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4129-0764</contrib-id>
<name>
<surname>Justeau-Allaire</surname>
<given-names>Dimitri</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4546-9027</contrib-id>
<name>
<surname>Prud’homme</surname>
<given-names>Charles</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>AMAP, Univ Montpellier, CIRAD, CNRS, INRAE, IRD,
Montpellier, France</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>TASC, IMT-Atlantique, LS2N-CNRS, Nantes,
France</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-04-23">
<day>23</day>
<month>4</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>8847</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>bindings</kwd>
<kwd>native-image</kwd>
<kwd>constraint programming</kwd>
<kwd>constraint satisfaction problem</kwd>
<kwd>constraint optimisation problem</kwd>
<kwd>decision support</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Constraint Programming (CP) is a well-established and powerful
  Artificial Intelligence (AI) paradigm for modelling and solving
  complex combinatorial problems
  (<xref alt="Rossi et al., 2006" rid="ref-rossi_2006" ref-type="bibr">Rossi
  et al., 2006</xref>). Many CP solvers are currently available, and
  despite a generally shared common base, each solver exhibits specific
  features that make it more or less suited to certain types of problems
  and tasks. Performance and flexibility are important features of CP
  solvers, which is why most state-of-the-art solvers rely on statically
  typed and compiled programming languages, such as Java or C++. Because
  of this, CP has long remained a niche field that is difficult for
  non-specialists to access. Recently, the emergence of high-level,
  solver-independent modelling languages such as MiniZinc
  (<xref alt="Nethercote et al., 2007" rid="ref-nethercote_2007" ref-type="bibr">Nethercote
  et al., 2007</xref>), XCSP³
  (<xref alt="Audemard et al., 2020" rid="ref-audemard_2020" ref-type="bibr">Audemard
  et al., 2020</xref>), and CPMpy
  (<xref alt="Guns, 2019" rid="ref-guns_2019" ref-type="bibr">Guns,
  2019</xref>) has made CP more accessible by allowing users to
  seamlessly use state-of-the-art solvers from user-friendly interpreted
  languages such as Python. To make CP even more accessible to a wider
  audience, we developed pychoco, a Python library that provides an
  all-inclusive binding to the Java Choco-solver library
  (<xref alt="Prud’homme &amp; Fages, 2022" rid="ref-prudhomme_2022" ref-type="bibr">Prud’homme
  &amp; Fages, 2022</xref>). By all-inclusive, we mean that pychoco has
  no external dependencies and does not require the installation of
  Choco-solver or Java on the user’s system. The choice of Python was
  motivated by its widespread use in the data science and AI
  communities, as well as its extensive use in education. The pychoco
  Python library supports almost all features of Choco-solver, is
  regularly updated, and is automatically built and distributed through
  PyPI for Linux, Windows, and MacOSX at each release. As a result,
  pychoco can seamlessly integrate into high-level constraint modelling
  Python libraries such as CPMpy
  (<xref alt="Guns, 2019" rid="ref-guns_2019" ref-type="bibr">Guns,
  2019</xref>) and PyCSP³
  (<xref alt="Lecoutre &amp; Szczepanski, 2024" rid="ref-lecoutre_2024" ref-type="bibr">Lecoutre
  &amp; Szczepanski, 2024</xref>). Moreover, users who need to use
  features specific to Choco-solver (e.g., graph variables and
  constraints) can now rely on pychoco without prior knowledge of Java
  programming. We believe that along with initiatives such as CPMpy and
  PyCSP, the availability of CP technologies in the Python ecosystem
  will foster new uses and the appropriation of CP by a wider scientific
  and industrial public.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Constraint programming (CP) offers an expressive and flexible
  modelling paradigm which has proven efficient and useful in many
  industrial and academic applications: production optimization,
  aircraft scheduling, nurse scheduling
  (<xref alt="Wallace, 1996" rid="ref-wallace_1996" ref-type="bibr">Wallace,
  1996</xref>), music
  (<xref alt="Hooker, 2016" rid="ref-hooker_2016" ref-type="bibr">Hooker,
  2016</xref>), cryptography
  (<xref alt="Gerault et al., 2016" rid="ref-gerault_2016" ref-type="bibr">Gerault
  et al., 2016</xref>), bioinformatics
  (<xref alt="Barahona et al., 2011" rid="ref-barahona_2011" ref-type="bibr">Barahona
  et al., 2011</xref>), biodiversity conservation
  (<xref alt="Deléglise et al., 2024" rid="ref-deleglise_2024" ref-type="bibr">Deléglise
  et al., 2024</xref>), agroecology
  (<xref alt="Challand et al., 2025" rid="ref-challand_2025" ref-type="bibr">Challand
  et al., 2025</xref>), wine blending
  (<xref alt="Vismara et al., 2016" rid="ref-vismara_2016" ref-type="bibr">Vismara
  et al., 2016</xref>), etc. However, most CP solvers are difficult for
  non-specialists to access because they mostly rely on statically typed
  and compiled programming languages such as Java or C++. As most data
  science and AI technologies are available in the Python ecosystem, it
  seems timely to make CP technologies more easily accessible in Python.
  High-level Python modelling libraries such as CPMpy
  (<xref alt="Guns, 2019" rid="ref-guns_2019" ref-type="bibr">Guns,
  2019</xref>) and PyCSP³
  (<xref alt="Lecoutre &amp; Szczepanski, 2024" rid="ref-lecoutre_2024" ref-type="bibr">Lecoutre
  &amp; Szczepanski, 2024</xref>) have opened up many perspectives in
  this direction, but several solvers still require a separate
  installation, especially commercial ones and those based on JVM (Java
  Virtual Machine) languages, such as Choco-solver. For most Python
  users, this can be an obstacle. It also limits direct solver access
  and the use of specific features and fine-tuning options that may not
  be available in high-level modelling libraries. Making Choco-solver
  more accessible to Python users and facilitating its integration as a
  backend solver into high-level modelling libraries were the main
  motivations for the creation of pychoco. In addition, the widespread
  use of Python in education was also an argument in favour of pychoco’s
  implementation.</p>
</sec>
<sec id="design">
  <title>Design</title>
  <p>For several years, the main obstacle to implementing Python
  bindings for Choco-solver was the necessity to set up communication
  between the Python interpreter and the Java Virtual Machine (JVM).
  Indeed, we believe that the main interest of such bindings was to
  offer Python users a way to use Choco-solver without installing the
  JVM. The
  <ext-link ext-link-type="uri" xlink:href="https://www.graalvm.org/">GraalVM</ext-link>
  project removed this obstacle with the ahead-of-time Native image Java
  compilation feature. Inspired by the work of
  (<xref alt="Michail et al., 2020" rid="ref-michail_2020" ref-type="bibr">Michail
  et al., 2020</xref>) to make Python bindings for the JGraphT Java
  library, we implemented
  <ext-link ext-link-type="uri" xlink:href="https://github.com/chocoteam/choco-solver-capi">choco-solver-capi</ext-link>,
  which contains entry points to the Choco-solver library that GraalVM
  compiles as a shared C library. This shared library is embedded into
  pychoco with the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/swig/swig">SWIG</ext-link>
  wrapper. pychoco’s API relies on this SWIG interface and has been
  designed to mirror the main concepts of the Choco-solver API while
  simplifying its usage in a Pythonic way. We implemented pychoco with
  software quality standards: unit tests, code review, and continuous
  integration. We also rely on the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pypa/cibuildwheel">cibuildwheel</ext-link>
  Python library to automatically build and publish Python wheels on
  PyPI for Windows, MacOSX, and Linux, from Python 3.6 to Python 3.13.
  Finally, in addition to comprehensive code documentation, we
  integrated pychoco code snippets in Choco-solver online documentation
  (https://choco-solver.org/) and we designed a Cheat Sheet to summarize
  the main features of pychoco’s API
  <xref alt="[fig1]" rid="fig1">[fig1]</xref>.</p>
  <fig>
    <caption><p>The
    <ext-link ext-link-type="uri" xlink:href="https://github.com/chocoteam/pychoco/blob/master/docs/pychoco-cheatsheet.pdf">pychoco
    Cheat Sheet</ext-link> provides a concise reference for discovering
    the API.<styled-content id="fig1"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="pychoco_cheat_sheet.png" />
  </fig>
</sec>
<sec id="a-classical-example-the-sudoku-solver">
  <title>A classical example: the Sudoku solver</title>
  <p>We illustrate the use of pychoco with one of the most emblematic CP
  examples: the Sudoku. In the following code, we instantiate a Sudoku
  instance.</p>
  <code language="python">sudoku = [
    [4, 0, 2, 0, 0, 0, 9, 7, 3],
    [0, 0, 0, 7, 4, 0, 6, 0, 8],
    [8, 0, 0, 0, 0, 9, 5, 1, 4],
    [7, 0, 0, 0, 0, 8, 0, 0, 0],
    [5, 9, 3, 0, 0, 6, 1, 8, 0],
    [0, 2, 8, 0, 0, 0, 0, 5, 9],
    [3, 1, 0, 0, 0, 2, 8, 9, 5],
    [0, 0, 0, 0, 8, 0, 0, 4, 1],
    [9, 0, 7, 1, 0, 4, 2, 0, 6]
]</code>
  <p>As a reminder, the goal of Sudoku is to fill every empty cell (in
  our case, zeros) with a number between 1 and 9 such that each row,
  each column, and each of the nine 3x3 subgrids contains the numbers
  from 1 to 9 without repetition. It is easy to model our Sudoku solver
  with pychoco.</p>
  <code language="python">from pychoco import * # Import pychoco

model = Model(&quot;Sudoku Solver&quot;) # Instantiate a model object

# Instantiate the variables of the model
intvars = []
for row in range(0, 9):
    var_row = []
    for col in range(0, 9):
        value = sudoku[row][col]
        # integer variable with a lower/bound or a fixed value
        is_fixed = value != 0
        intvar = model.intvar(value) if is_fixed else model.intvar(1, 9)
        var_row.append(intvar)
    intvars.append(var_row)

# For each row, post an all_different constraint
for row in range(0, 9):
    var_row = intvars[row]
    model.all_different(var_row).post()

# For each column, post an all_different constraint
for col in range(0, 9):
    var_column = [row[col] for row in intvars]
    model.all_different(var_column).post()

# For each 3x3 subgrid, post an all_different constraint
for i in range(0, 3):
    line = intvars[i * 3 : i * 3 + 3]
    for j in range(0, 3):
        var_subgrid = sum([l[j * 3 : j * 3 + 3] for l in line], [])
        model.all_different(var_subgrid).post()</code>
  <p>We can now solve our Sudoku by calling the solver, and then we can
  display the solution.</p>
  <code language="python">solver = model.get_solver()
solution = solver.find_solution() # Call the solver to retrieve a solution
for row in range(0, 9):
    line = [solution.get_int_val(v) for v in intvars[row]]
    print(line)

# Output: 
#    [4, 5, 2, 8, 6, 1, 9, 7, 3]
#    [1, 3, 9, 7, 4, 5, 6, 2, 8]
#    [8, 7, 6, 2, 3, 9, 5, 1, 4]
#    [7, 4, 1, 5, 9, 8, 3, 6, 2]
#    [5, 9, 3, 4, 2, 6, 1, 8, 7]
#    [6, 2, 8, 3, 1, 7, 4, 5, 9]
#    [3, 1, 4, 6, 7, 2, 8, 9, 5]
#    [2, 6, 5, 9, 8, 3, 7, 4, 1]
#    [9, 8, 7, 1, 5, 4, 2, 3, 6]</code>
  <p>Note that, although this problem is a constraint satisfaction
  problem with exactly one solution (by definition of the classic
  Sudoku), pychoco supports solving constrained optimisation problems,
  and enumerating multiple solutions. Several search strategies are also
  available, as well as parallel portfolio search, as defined in
  Choco-solver. Other usage examples are available as a Jupyter notebook
  in
  <ext-link ext-link-type="uri" xlink:href="https://github.com/chocoteam/pychoco/tree/master/examples/notebooks">pychoco’s
  GitHub repository</ext-link>.</p>
</sec>
<sec id="current-usages-and-perspectives">
  <title>Current usages and perspectives</title>
  <p>Since its first release in October 2022, pychoco has been
  downloaded more than 100k times from PyPI. It is available as a
  backend solver in the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/CPMpy/cpmpy">CPMpy</ext-link>
  high-level modelling library. We also witness academic uses of pychoco
  that seem to be made possible or facilitated by the Python ecosystem.
  For example, the availability of pychoco in CPMpy seems to facilitate
  comparative analyses between different solvers accessible from Python
  (<xref alt="Bleukx et al., 2024" rid="ref-bleukx_2024" ref-type="bibr">Bleukx
  et al., 2024</xref>). The richness of Python’s ecosystem also fosters
  the integration of CP in workflows involving several AI techniques
  (<xref alt="Hotz et al., 2024" rid="ref-hotz_2024" ref-type="bibr">Hotz
  et al., 2024</xref>) and the development of new tools based on CP
  (e.g.,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/philippevismara/pyagroplan">pyagroplan</ext-link>).
  Finally, as Python is increasingly used in teaching and training, it
  seems natural to teach CP using Python, especially for
  non-computer-scientist audiences (e.g.,
  <ext-link ext-link-type="uri" xlink:href="https://ai-ecol.github.io/">AI
  for ecologists’ training course</ext-link>).</p>
</sec>
<sec id="acknowledgement">
  <title>Acknowledgement</title>
  <p>We acknowledge the developers of Python-JGraphT, whose work
  inspired the development of pychoco, and all contributors to
  pychoco.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-rossi_2006">
    <element-citation publication-type="book">
      <source>Handbook of constraint programming</source>
      <person-group person-group-type="editor">
        <name><surname>Rossi</surname><given-names>Francesca</given-names></name>
        <name><surname>Beek</surname><given-names>Peter van</given-names></name>
        <name><surname>Walsh</surname><given-names>Toby</given-names></name>
      </person-group>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2006">2006</year>
      <volume>2</volume>
      <isbn>978-0-444-52726-4</isbn>
      <uri>https://www.sciencedirect.com/science/bookseries/15746526/2</uri>
    </element-citation>
  </ref>
  <ref id="ref-nethercote_2007">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Nethercote</surname><given-names>Nicholas</given-names></name>
        <name><surname>Stuckey</surname><given-names>Peter J.</given-names></name>
        <name><surname>Becket</surname><given-names>Ralph</given-names></name>
        <name><surname>Brand</surname><given-names>Sebastian</given-names></name>
        <name><surname>Duck</surname><given-names>Gregory J.</given-names></name>
        <name><surname>Tack</surname><given-names>Guido</given-names></name>
      </person-group>
      <article-title>MiniZinc: Towards a standard CP modelling language</article-title>
      <source>Principles and Practice of Constraint Programming – CP 2007</source>
      <person-group person-group-type="editor">
        <name><surname>Bessière</surname><given-names>Christian</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2007">2007</year>
      <volume>4741</volume>
      <isbn>978-3-540-74969-1</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-540-74970-7_38</pub-id>
      <fpage>529</fpage>
      <lpage>543</lpage>
    </element-citation>
  </ref>
  <ref id="ref-audemard_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Audemard</surname><given-names>Gilles</given-names></name>
        <name><surname>Boussemart</surname><given-names>Frédéric</given-names></name>
        <name><surname>Lecoutre</surname><given-names>Christophe</given-names></name>
        <name><surname>Piette</surname><given-names>Cédric</given-names></name>
        <name><surname>Roussel</surname><given-names>Olivier</given-names></name>
      </person-group>
      <article-title>XCSP3 and its ecosystem</article-title>
      <source>Constraints</source>
      <year iso-8601-date="2020-04">2020</year><month>04</month>
      <volume>25</volume>
      <issue>1</issue>
      <issn>1572-9354</issn>
      <pub-id pub-id-type="doi">10.1007/s10601-019-09307-9</pub-id>
      <fpage>47</fpage>
      <lpage>69</lpage>
    </element-citation>
  </ref>
  <ref id="ref-guns_2019">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Guns</surname><given-names>Tias</given-names></name>
      </person-group>
      <article-title>Increasing modeling language convenience with a universal n-dimensional array, CPpy as Python-embedded example</article-title>
      <source>Proceedings of the 18th workshop on constraint modelling and reformulation at CP (modref 2019)</source>
      <year iso-8601-date="2019">2019</year>
      <volume>19</volume>
    </element-citation>
  </ref>
  <ref id="ref-prudhomme_2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Prud’homme</surname><given-names>Charles</given-names></name>
        <name><surname>Fages</surname><given-names>Jean-Guillaume</given-names></name>
      </person-group>
      <article-title>Choco-solver: A Java library for constraint programming</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2022-10">2022</year><month>10</month>
      <volume>7</volume>
      <issue>78</issue>
      <issn>2475-9066</issn>
      <pub-id pub-id-type="doi">10.21105/joss.04708</pub-id>
      <fpage>4708</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-lecoutre_2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lecoutre</surname><given-names>Christophe</given-names></name>
        <name><surname>Szczepanski</surname><given-names>Nicolas</given-names></name>
      </person-group>
      <article-title>PyCSP3: Modeling combinatorial constrained problems in Python</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2024-08">2024</year><month>08</month>
      <pub-id pub-id-type="doi">10.48550/arXiv.2009.00326</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-wallace_1996">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wallace</surname><given-names>Mark</given-names></name>
      </person-group>
      <article-title>Practical applications of constraint programming</article-title>
      <source>Constraints</source>
      <year iso-8601-date="1996-09">1996</year><month>09</month>
      <volume>1</volume>
      <issue>1-2</issue>
      <issn>1383-7133</issn>
      <pub-id pub-id-type="doi">10.1007/BF00143881</pub-id>
      <fpage>139</fpage>
      <lpage>168</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hooker_2016">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hooker</surname><given-names>John N</given-names></name>
      </person-group>
      <article-title>Finding alternative musical scales</article-title>
      <source>International conference on principles and practice of constraint programming</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-44953-1_47</pub-id>
      <fpage>753</fpage>
      <lpage>768</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gerault_2016">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Gerault</surname><given-names>David</given-names></name>
        <name><surname>Minier</surname><given-names>Marine</given-names></name>
        <name><surname>Solnon</surname><given-names>Christine</given-names></name>
      </person-group>
      <article-title>Constraint programming models for chosen key differential cryptanalysis</article-title>
      <source>International conference on principles and practice of constraint programming</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-44953-1_37</pub-id>
      <fpage>584</fpage>
      <lpage>601</lpage>
    </element-citation>
  </ref>
  <ref id="ref-barahona_2011">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Barahona</surname><given-names>Pedro</given-names></name>
        <name><surname>Krippahl</surname><given-names>Ludwig</given-names></name>
        <name><surname>Perriquet</surname><given-names>Olivier</given-names></name>
      </person-group>
      <article-title>Bioinformatics: A challenge to constraint programming</article-title>
      <source>Hybrid optimization</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2011">2011</year>
      <pub-id pub-id-type="doi">10.1007/978-1-4419-1644-0_14</pub-id>
      <fpage>463</fpage>
      <lpage>487</lpage>
    </element-citation>
  </ref>
  <ref id="ref-deleglise_2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Deléglise</surname><given-names>Hugo</given-names></name>
        <name><surname>Justeau-Allaire</surname><given-names>Dimitri</given-names></name>
        <name><surname>Mulligan</surname><given-names>Mark</given-names></name>
        <name><surname>Espinoza</surname><given-names>Jhan-Carlo</given-names></name>
        <name><surname>Isasi-Catalá</surname><given-names>Emiliana</given-names></name>
        <name><surname>Alvarez</surname><given-names>Cecilia</given-names></name>
        <name><surname>Condom</surname><given-names>Thomas</given-names></name>
        <name><surname>Palomo</surname><given-names>Ignacio</given-names></name>
      </person-group>
      <article-title>Integrating multi-objective optimization and ecological connectivity to strengthen Peru’s protected area system towards the 30*2030 target</article-title>
      <source>Biological Conservation</source>
      <year iso-8601-date="2024-11">2024</year><month>11</month>
      <volume>299</volume>
      <issn>0006-3207</issn>
      <pub-id pub-id-type="doi">10.1016/j.biocon.2024.110799</pub-id>
      <fpage>110799</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-challand_2025">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Challand</surname><given-names>Margot</given-names></name>
        <name><surname>Vismara</surname><given-names>Philippe</given-names></name>
        <name><surname>de Tourdonnet</surname><given-names>Stephane</given-names></name>
      </person-group>
      <article-title>Combining constraint programming and a participatory approach to design agroecological cropping systems</article-title>
      <source>Agricultural Systems</source>
      <year iso-8601-date="2025-01">2025</year><month>01</month>
      <volume>222</volume>
      <issn>0308-521X</issn>
      <pub-id pub-id-type="doi">10.1016/j.agsy.2024.104154</pub-id>
      <fpage>104154</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-vismara_2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vismara</surname><given-names>Philippe</given-names></name>
        <name><surname>Coletta</surname><given-names>Remi</given-names></name>
        <name><surname>Trombettoni</surname><given-names>Gilles</given-names></name>
      </person-group>
      <article-title>Constrained global optimization for wine blending</article-title>
      <source>Constraints</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>21</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1007/s10601-015-9235-5</pub-id>
      <fpage>597</fpage>
      <lpage>615</lpage>
    </element-citation>
  </ref>
  <ref id="ref-michail_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Michail</surname><given-names>Dimitrios</given-names></name>
        <name><surname>Kinable</surname><given-names>Joris</given-names></name>
        <name><surname>Naveh</surname><given-names>Barak</given-names></name>
        <name><surname>Sichi</surname><given-names>John V</given-names></name>
      </person-group>
      <article-title>JGraphT—a Java library for graph data structures and algorithms</article-title>
      <source>ACM Transactions on Mathematical Software (TOMS)</source>
      <publisher-name>ACM New York, NY, USA</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>46</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1145/3381449</pub-id>
      <fpage>1</fpage>
      <lpage>29</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bleukx_2024">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Bleukx</surname><given-names>Ignace</given-names></name>
        <name><surname>Verhaeghe</surname><given-names>Hélène</given-names></name>
        <name><surname>Tsouros</surname><given-names>Dimos</given-names></name>
        <name><surname>Guns</surname><given-names>Tias</given-names></name>
      </person-group>
      <article-title>Efficient modeling of half-reified global constraints</article-title>
      <source>The 23rd workshop on constraint modelling and reformulation, date: 2024/09/02-2024/09/02, location: Gerona, spain</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-hotz_2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hotz</surname><given-names>Lothar</given-names></name>
        <name><surname>Bähnisch</surname><given-names>Christian</given-names></name>
        <name><surname>Lubos</surname><given-names>Sebastian</given-names></name>
        <name><surname>Felfernig</surname><given-names>Alexander</given-names></name>
        <name><surname>Haag</surname><given-names>Albert</given-names></name>
        <name><surname>Twiefel</surname><given-names>Johannes</given-names></name>
      </person-group>
      <article-title>Exploiting large language models for the automated generation of constraint satisfaction problems</article-title>
      <year iso-8601-date="2024">2024</year>
      <volume>3812</volume>
      <fpage>91</fpage>
      <lpage>100</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
