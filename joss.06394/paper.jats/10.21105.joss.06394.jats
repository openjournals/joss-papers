<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6394</article-id>
<article-id pub-id-type="doi">10.21105/joss.06394</article-id>
<title-group>
<article-title>extendr: Frictionless bindings for R and
Rust</article-title>
<subtitle>interfacing Rust code within R packages</subtitle>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0007-9297-1523</contrib-id>
<name>
<surname>Reimert</surname>
<given-names>Mossa Merhi</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9910-865X</contrib-id>
<name>
<surname>Parry</surname>
<given-names>Josiah D.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5212-4273</contrib-id>
<name>
<surname>Denwood</surname>
<given-names>Matt</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5634-5903</contrib-id>
<name>
<surname>Gussmann</surname>
<given-names>Maya Katrin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7470-9261</contrib-id>
<name>
<surname>Wilke</surname>
<given-names>Claus O.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5563-7840</contrib-id>
<name>
<surname>Kosenkov</surname>
<given-names>Ilia</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8965-2595</contrib-id>
<name>
<surname>Milton</surname>
<given-names>Michael</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8240-1614</contrib-id>
<name>
<surname>Thomason</surname>
<given-names>Amy</given-names>
</name>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Section for Animal Welfare and Disease Control, Department
of Veterinary and Animal Sciences, University of Copenhagen,
Denmark</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Environmental Systems Research Institute (Esri), Redlands,
CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Integrative Biology, The University of Texas
at Austin, Austin, TX, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Independent researcher, Finland</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Walter and Eliza Hall Institute of Medical Research,
Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Atomic Increment Ltd., United Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-07-01">
<day>1</day>
<month>7</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>99</issue>
<fpage>6394</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>R</kwd>
<kwd>Rust</kwd>
<kwd>FFI</kwd>
<kwd>bindings</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The programming language
  <ext-link ext-link-type="uri" xlink:href="https://www.rust-lang.org">Rust</ext-link>
  continues to gain popularity with developers due to a strong emphasis
  on safety, performance, and productivity
  (<xref alt="Perkel, 2020" rid="ref-perkelWhyScientistsAre2020" ref-type="bibr">Perkel,
  2020</xref>). As a general-purpose, low-level programming language,
  Rust has a wide variety of potential uses in both commercial and
  research applications where performance is important. Commercial
  examples include web development and game development, and in the
  research domain Rust is increasingly being used in a wide range of
  contexts including change point detection
  (<xref alt="Londschien et al., 2023" rid="ref-JMLRU003Av24U003A22-0512" ref-type="bibr">Londschien
  et al., 2023</xref>), high-performance GIF encoding
  (<xref alt="Ooms et al., 2023" rid="ref-gifski_cran" ref-type="bibr">Ooms
  et al., 2023</xref>), and agent-based models of disease spread
  (<xref alt="Antelmi et al., 2019" rid="ref-eval_rust_for_custom_abm" ref-type="bibr">Antelmi
  et al., 2019</xref>;
  <xref alt="Forth et al., 2022" rid="ref-forth_african_2022-1" ref-type="bibr">Forth
  et al., 2022</xref>;
  <xref alt="Kshirsagar et al., 2021" rid="ref-epirust_paper" ref-type="bibr">Kshirsagar
  et al., 2021</xref>).</p>
  <p>However, typical workflows in research domains, such as disease
  modelling, often rely on higher-level programming languages due to
  lower entry barriers. This results in broader adoption within
  scientific communities, compared to the use of low-level languages
  like C++ and Rust. The statistical programming language
  <ext-link ext-link-type="uri" xlink:href="https://www.r-project.org">R</ext-link>
  is one of the most widely used high-level languages in research. R’s
  official interpreter is written in C, and it provides a C API as well
  as tools for building dynamic libraries in Fortran/C/C++ natively. The
  ‘Extending R’ book
  (<xref alt="Chambers, 2017" rid="ref-chambers2017extending" ref-type="bibr">Chambers,
  2017</xref>) also describes interfacing with other languages such as
  Python and Julia.</p>
  <p>The strength of R is its ecosystem of packages, the vast majority
  of which are available from
  <ext-link ext-link-type="uri" xlink:href="https://cran.r-project.org">CRAN</ext-link>.
  They are primarily written by research scientists, specialists, and
  professionals. Another important use case of R packages is being a
  front-end for other languages. Automated tooling that provides
  scaffolding and boilerplate code is widely used to simplify
  cross-language integration. For example, embedding C++ code is a good
  way to resolve performance bottlenecks within R packages, and this can
  be easily accomplished using cpp11
  (<xref alt="Vaughan et al., 2023" rid="ref-cpp11" ref-type="bibr">Vaughan
  et al., 2023</xref>) or Rcpp
  (<xref alt="Eddelbuettel &amp; François, 2011" rid="ref-rcpp_jss" ref-type="bibr">Eddelbuettel
  &amp; François, 2011</xref>). Rust demonstrates similar performance to
  C++, but it also offers other beneficial features such as declarative
  memory management, which provides compile-time guarantees for memory
  safety in the absence of a garbage collector.</p>
  <p>We note that other scientific computing communities have already
  introduced plug-ins for Rust, including Python via
  <ext-link ext-link-type="uri" xlink:href="https://github.com/PyO3/pyo3">PyO3</ext-link>,
  and Julia via
  <ext-link ext-link-type="uri" xlink:href="https://github.com/Taaitaaiger/jlrs">jlrs</ext-link>.</p>
  <p>This paper introduces a collection of four Rust crates and an R
  package that collectively make up the ‘extendr’ project. The goal of
  this project is to provide (automatic) binding of Rust to R, using an
  opinionated and ergonomics-focused suite of tools that facilitate the
  use of Rust code within R packages. This is achieved by offering
  emulation of the R data model within Rust, integration of Rust tooling
  in the R-package build systems, a Rust developer experience in R, and
  functions for preparing Rust-powered R-packages for submission to
  CRAN. An overview of the ‘extendr’ crates and packages as well as
  comprehensive API documentation is available at
  <ext-link ext-link-type="uri" xlink:href="https://extendr.github.io/">extendr.github.io</ext-link>.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>R provides tools for compiling and embedding Fortran, C, and C++
  code, with binding through R’s C-API. However, these raw bindings are
  not easy for users to navigate. This makes frameworks facilitating
  interfacing other languages to R extremely popular. Rcpp
  (<xref alt="Eddelbuettel &amp; François, 2011" rid="ref-rcpp_jss" ref-type="bibr">Eddelbuettel
  &amp; François, 2011</xref>) and cpp11
  (<xref alt="Vaughan et al., 2023" rid="ref-cpp11" ref-type="bibr">Vaughan
  et al., 2023</xref>) for C++, Java via rJava
  (<xref alt="Urbanek, 2023" rid="ref-rJava" ref-type="bibr">Urbanek,
  2023</xref>), Python with <monospace>reticulate</monospace>
  (<xref alt="Ushey et al., 2023" rid="ref-reticulate_cran" ref-type="bibr">Ushey
  et al., 2023</xref>), and JavaScript on the V8 runtime and the V8
  R-package
  (<xref alt="Ooms, 2023" rid="ref-v8_cran" ref-type="bibr">Ooms,
  2023</xref>) are among the most used. In contrast, bindings between
  Rust and R, such as
  <ext-link ext-link-type="uri" xlink:href="https://crates.io/crates/gifski"><monospace>gifski</monospace></ext-link>
  (<xref alt="Ooms et al., 2023" rid="ref-gifski_cran" ref-type="bibr">Ooms
  et al., 2023</xref>), are currently mostly written by hand.</p>
  <p>We note that other software packages providing bindings between R
  and Rust exist. The Rust crate / R-package
  <monospace>roxido</monospace> /
  <ext-link ext-link-type="uri" xlink:href="https://github.com/dbdahl/cargo-framework"><monospace>cargo</monospace></ext-link>
  (<xref alt="Dahl, 2021" rid="ref-cargo_cran" ref-type="bibr">Dahl,
  2021</xref>) provides a mechanism for embedding Rust code within R
  packages. The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/yutannihilation/savvy">savvy</ext-link>
  interface represents a distilled byproduct of ‘extendr’. However,
  ‘extendr’ differs from these implementations in that ‘extendr’ aims at
  providing an opinionated API, with a focus on an ergonomic API design
  inspired by features from Rcpp and cpp11.</p>
  <p>Several existing projects already utilize ‘extendr’. The DataFrame
  library
  <ext-link ext-link-type="uri" xlink:href="https://pola.rs/">Polars</ext-link>
  has bindings to Python (via
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pola-rs/polars/tree/main/py-polars"><monospace>py-polars</monospace></ext-link>)
  and to R via
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pola-rs/r-polars"><monospace>polars</monospace></ext-link>,
  where the latter is built with ‘extendr’. The CRAN package
  <ext-link ext-link-type="uri" xlink:href="https://cran.r-project.org/web/packages/rsgeo/"><monospace>rsgeo</monospace></ext-link>
  provides bindings to
  <ext-link ext-link-type="uri" xlink:href="https://crates.io/crates/geo"><monospace>geo-rust</monospace></ext-link>,
  allowing R users to take advantage of highly performant geometric
  primitives and algorithms written and optimized in Rust.</p>
  <p>Another example of scientific work enabled by ‘extendr’ is the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/mlondschien/changeforest/"><monospace>changeforest</monospace></ext-link>
  package
  (<xref alt="Londschien et al., 2023" rid="ref-JMLRU003Av24U003A22-0512" ref-type="bibr">Londschien
  et al., 2023</xref>).</p>
</sec>
<sec id="design">
  <title>Design</title>
  <sec id="overview">
    <title>Overview</title>
    <p>The extendr project provides a suite of software packages, where
    the aim is to provide a mechanism for interfacing Rust to R that is
    comparable in scope to the R/C++ interfaces provided by Rcpp and
    cpp11. It consists of the following components:</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>extendr-api</monospace>: a Rust crate integrating
        R’s data model in Rust, which underlies the functionality of
        extendr</p>
      </list-item>
      <list-item>
        <p><monospace>extendr-macros</monospace>: a Rust crate
        responsible for auto-generating R wrappers for embedding Rust
        within R code</p>
      </list-item>
      <list-item>
        <p><monospace>extendr-engine</monospace>: a Rust crate that
        enables launching R sessions from within Rust code, similar to
        <monospace>RInside</monospace>
        (<xref alt="Eddelbuettel et al., 2023" rid="ref-rinside_cran" ref-type="bibr">Eddelbuettel
        et al., 2023</xref>)</p>
      </list-item>
      <list-item>
        <p><monospace>rextendr</monospace>: an R package that simplifies
        the process of embedding Rust code within an R package,
        including helping the user to adhere to CRAN rules for
        publishing Rust-powered R packages</p>
      </list-item>
      <list-item>
        <p><monospace>libR-sys</monospace>: a Rust crate providing
        auto-generated Rust bindings to R’s C-API</p>
      </list-item>
    </list>
    <p>Using ‘extendr’ requires both Rust and R to be installed, but no
    other dependencies are required. API documentation for all the
    ‘extendr’ packages are available at
    <ext-link ext-link-type="uri" xlink:href="https://extendr.github.io/">extendr.github.io</ext-link>,
    and the repositories for ‘extendr’-packages are freely available
    from GitHub
    <ext-link ext-link-type="uri" xlink:href="https://github.com/extendr/">github.com/extendr</ext-link>,
    under an MIT license. All hardware/software platforms supported by
    Rust and R are also supported by extendr.</p>
  </sec>
  <sec id="technical-details">
    <title>Technical details</title>
    <p>Most R data is vector-based, including scalar values (which are
    length-1 vectors). These vectors are represented in Rust as slices
    <monospace>&amp;[T]</monospace> /
    <monospace>&amp;mut [T]</monospace>. R data may be allocated in
    Rust, but these are invisible to R’s garbage collector, and thus
    have to be protected. <monospace>extendr-api</monospace> registers R
    allocated data in an internal hash-map / dictionary, that stores a
    reference count for Rust allocated R data.</p>
    <p>A C-function is callable in R if it returns an
    <monospace>SEXP</monospace> and all of its arguments are
    <monospace>SEXP</monospace> - these are opaque pointers to an
    internal R representation of data. These are callable in R via
    <monospace>.Call</monospace>. A Rust function that is exported to R
    must have all of its arguments and return values convertible to
    <monospace>SEXP</monospace>. Annotating it with
    <monospace>#[extendr]</monospace> will add a callable C-function in
    R that converts the custom data types into
    <monospace>SEXP</monospace> types.</p>
    <p>The <monospace>rextendr</monospace> package also provides R-level
    functions: <monospace>rust_source</monospace>, which allows
    arbitrary Rust code to be evaluated, returning the last value in the
    block; and <monospace>rust_function</monospace>, which compiles,
    wraps, and returns arbitrary Rust functions as callable R functions.
    These two functions are very similar in scope to the
    <monospace>evalCpp</monospace> and
    <monospace>cppFunction</monospace> functions provided by Rcpp, and
    are very versatile, as they can also be used to include third-party
    crates.</p>
  </sec>
  <sec id="creating-rust-powered-r-packages">
    <title>Creating Rust-powered R packages</title>
    <p>The <monospace>rextendr::use_extendr()</monospace> function can
    be used to auto-edit an existing user-specified R package (for
    example created using
    <monospace>usethis::create_package()</monospace>) to include all of
    the details necessary to embed Rust code within the package. This
    includes Makevars files that adapt the compilation process of the R
    package to generate the embedded Rust binary using R’s internal
    build system.</p>
    <p>This should then be followed by calling
    <monospace>rextendr::document()</monospace>, which provides R
    wrapper functions, within which the Rust functions are invoked via
    the <monospace>.Call</monospace> foreign function interface.</p>
    <p>For many R package authors, being able to publish their code on
    CRAN is essential. However, CRAN has strict rules for publishing
    packages, including that the number of threads that a package uses
    at build &amp; testing must not exceed 2. Uniquely, Rust has a
    package manager, which means that R packages have third-party
    dependencies external to R and CRAN. These must be “vendored” to
    ensure package stability (see
    <ext-link ext-link-type="uri" xlink:href="https://cran.r-project.org/web/packages/using_rust.html">“Using
    Rust in CRAN packages”</ext-link>). The
    <monospace>rextendr::use_cran_defaults()</monospace> and
    <monospace>rextendr::vendor_pkgs()</monospace> will ensure that
    dependencies are built entirely offline and from vendored sources,
    which ensures that the resulting R package is fully
    CRAN-compliant.</p>
  </sec>
</sec>
<sec id="getting-started">
  <title>Getting started</title>
  <p>Ensure that both
  <ext-link ext-link-type="uri" xlink:href="https://www.r-project.org">R</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://www.rust-lang.org/tools/install">Rust</ext-link>
  are installed. Then in an R terminal, the
  <monospace>rextendr</monospace> package can be installed via:</p>
  <code language="r script">install.packages(&quot;rextendr&quot;) </code>
  <p>Or, for the latest development version:</p>
  <code language="r script">remotes::install_github(&quot;extendr/rextendr&quot;) # installs latest dev-version</code>
  <p>Then, an R-package should be constructed - optionally using the
  <monospace>usethis</monospace> R-package
  (<xref alt="Wickham et al., 2023" rid="ref-usethis_cran" ref-type="bibr">Wickham
  et al., 2023</xref>), which inspires the design principles of
  <monospace>rextendr</monospace>:</p>
  <code language="r script">usethis::create_package(&quot;exampleRustRpkg&quot;)
rextendr::use_extendr()</code>
  <p>Finally, the function <monospace>use_extendr</monospace> should be
  used to set up the necessary boilerplate for compiling Rust code
  within an R package, and <monospace>document</monospace> used to
  refresh the R function wrappers (this augments a call to
  <monospace>devtools::document()</monospace>).</p>
  <code language="r script">rextendr::document()</code>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Project lead Amy Thomason received a grant from the R-consortium
  (<xref alt="R Consortium, 2023" rid="ref-consortiumConsortiumFundedProject2023" ref-type="bibr">R
  Consortium, 2023</xref>).</p>
  <p>Mossa Merhi Reimert received funding from the Danish Food and
  Veterinary Administration for his PhD project.</p>
  <p>Claus O. Wilke acknowledges funding from the University of Texas at
  Austin (Reeder Centennial Fellowship in Systematic and Evolutionary
  Biology, Blumberg Centennial Professor in Molecular Evolution).</p>
  <p>We would like to acknowledge Jeroen Ooms for his
  <ext-link ext-link-type="uri" xlink:href="https://github.com/r-rust/hellorust">hellorust</ext-link>
  (<xref alt="Ooms &amp; Authors of the dependency Rust crates, 2023" rid="ref-hellorust_cran" ref-type="bibr">Ooms
  &amp; Authors of the dependency Rust crates, 2023</xref>), and
  continuous maintenance of a hand-written embedding of Rust in an R
  proof-of-concept project. Their
  <ext-link ext-link-type="uri" xlink:href="https://github.com/r-rust">github.com/r-rust</ext-link>
  contains several examples of hand-crafted bindings to Rust packages
  for R, such as <monospace>gifski</monospace>
  (<xref alt="Ooms et al., 2023" rid="ref-gifski_cran" ref-type="bibr">Ooms
  et al., 2023</xref>).</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-rcpp_jss">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Eddelbuettel</surname><given-names>Dirk</given-names></name>
        <name><surname>François</surname><given-names>Romain</given-names></name>
      </person-group>
      <article-title>Rcpp: Seamless R and C++ integration</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2011">2011</year>
      <volume>40</volume>
      <issue>8</issue>
      <pub-id pub-id-type="doi">10.18637/jss.v040.i08</pub-id>
      <fpage>1</fpage>
      <lpage>18</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cpp11">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Vaughan</surname><given-names>Davis</given-names></name>
        <name><surname>Hester</surname><given-names>Jim</given-names></name>
        <name><surname>François</surname><given-names>Romain</given-names></name>
      </person-group>
      <source>cpp11: A C++11 interface for R’s C interface</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=cpp11</uri>
      <pub-id pub-id-type="doi">10.32614/cran.package.cpp11</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-rJava">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Urbanek</surname><given-names>Simon</given-names></name>
      </person-group>
      <source>rJava: Low-level R to Java interface</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=rJava</uri>
      <pub-id pub-id-type="doi">10.32614/cran.package.rjava</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-v8_cran">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Ooms</surname><given-names>Jeroen</given-names></name>
      </person-group>
      <source>V8: Embedded JavaScript and WebAssembly engine for R</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=V8</uri>
      <pub-id pub-id-type="doi">10.32614/cran.package.v8</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-reticulate_cran">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Ushey</surname><given-names>Kevin</given-names></name>
        <name><surname>Allaire</surname><given-names>JJ</given-names></name>
        <name><surname>Tang</surname><given-names>Yuan</given-names></name>
      </person-group>
      <source>reticulate: Interface to Python</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=reticulate</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.reticulate</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-perkelWhyScientistsAre2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Perkel</surname><given-names>Jeffrey M.</given-names></name>
      </person-group>
      <article-title>Why scientists are turning to Rust</article-title>
      <source>Nature</source>
      <publisher-name>Nature Publishing Group</publisher-name>
      <year iso-8601-date="2020-12-01">2020</year><month>12</month><day>01</day>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-01-16">2024</year><month>01</month><day>16</day></date-in-citation>
      <volume>588</volume>
      <issue>7836, 7836</issue>
      <uri>https://www.nature.com/articles/d41586-020-03382-2</uri>
      <pub-id pub-id-type="doi">10.1038/d41586-020-03382-2</pub-id>
      <fpage>185</fpage>
      <lpage>186</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cargo_cran">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dahl</surname><given-names>David B.</given-names></name>
      </person-group>
      <article-title>Writing R extensions in Rust</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://arxiv.org/abs/2108.07179</uri>
    </element-citation>
  </ref>
  <ref id="ref-consortiumConsortiumFundedProject2023">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <string-name>R Consortium</string-name>
      </person-group>
      <article-title>R Consortium funded project extendr provides Rust extensions for R</article-title>
      <publisher-name>R Consortium</publisher-name>
      <year iso-8601-date="2023-07-06">2023</year><month>07</month><day>06</day>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-01-16">2024</year><month>01</month><day>16</day></date-in-citation>
      <uri>https://www.r-consortium.org/blog/2023/07/06/r-consortium-funded-project-extendr-provides-rust-extensions-for-r</uri>
    </element-citation>
  </ref>
  <ref id="ref-chambers2017extending">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Chambers</surname><given-names>J. M.</given-names></name>
      </person-group>
      <source>Extending R</source>
      <publisher-name>CRC Press</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <isbn>978-1-4987-7572-4</isbn>
      <uri>https://books.google.dk/books?id=kxxjDAAAQBAJ</uri>
      <pub-id pub-id-type="doi">10.1201/9781315381305</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-JMLRU003Av24U003A22-0512">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Londschien</surname><given-names>Malte</given-names></name>
        <name><surname>Bühlmann</surname><given-names>Peter</given-names></name>
        <name><surname>Kovács</surname><given-names>Solt</given-names></name>
      </person-group>
      <article-title>Random forests for change point detection</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2023">2023</year>
      <volume>24</volume>
      <issue>216</issue>
      <uri>http://jmlr.org/papers/v24/22-0512.html</uri>
      <pub-id pub-id-type="doi">10.3929/ethz-b-000585774</pub-id>
      <fpage>1</fpage>
      <lpage>45</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hellorust_cran">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Ooms</surname><given-names>Jeroen</given-names></name>
        <string-name>Authors of the dependency Rust crates</string-name>
      </person-group>
      <source>hellorust: Minimal examples of using Rust code in R</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=hellorust</uri>
      <pub-id pub-id-type="doi">10.32614/cran.package.hellorust</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-usethis_cran">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Bryan</surname><given-names>Jennifer</given-names></name>
        <name><surname>Barrett</surname><given-names>Malcolm</given-names></name>
        <name><surname>Teucher</surname><given-names>Andy</given-names></name>
      </person-group>
      <source>usethis: Automate package and project setup</source>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.32614/cran.package.usethis</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-rinside_cran">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Eddelbuettel</surname><given-names>Dirk</given-names></name>
        <name><surname>Francois</surname><given-names>Romain</given-names></name>
        <name><surname>Bachmeier</surname><given-names>Lance</given-names></name>
      </person-group>
      <source>RInside: C++ classes to embed R in C++ (and C) applications</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=RInside</uri>
      <pub-id pub-id-type="doi">10.32614/cran.package.rinside</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-eval_rust_for_custom_abm">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Antelmi</surname><given-names>Alessia</given-names></name>
        <name><surname>Cordasco</surname><given-names>Gennaro</given-names></name>
        <name><surname>D’Auria</surname><given-names>Matteo</given-names></name>
        <name><surname>De Vinco</surname><given-names>Daniele</given-names></name>
        <name><surname>Negro</surname><given-names>Alberto</given-names></name>
        <name><surname>Spagnuolo</surname><given-names>Carmine</given-names></name>
      </person-group>
      <article-title>On evaluating Rust as a programming language for the future of massive agent-based simulations</article-title>
      <source>Communications in computer and information science</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2019-10-30">2019</year><month>10</month><day>30</day>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-06-30">2021</year><month>06</month><day>30</day></date-in-citation>
      <volume>1094</volume>
      <isbn>9789811510779</isbn>
      <uri>https://link.springer.com/chapter/10.1007/978-981-15-1078-6_2</uri>
      <pub-id pub-id-type="doi">10.1007/978-981-15-1078-6_2</pub-id>
      <fpage>15</fpage>
      <lpage>28</lpage>
    </element-citation>
  </ref>
  <ref id="ref-epirust_paper">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kshirsagar</surname><given-names>Jayanta K.</given-names></name>
        <name><surname>Dewan</surname><given-names>Akshay</given-names></name>
        <name><surname>Hayatnagarkar</surname><given-names>Harshal G.</given-names></name>
      </person-group>
      <article-title>EpiRust: Towards a framework for large-scale agent-based epidemiological simulations using Rust language</article-title>
      <source>SIMS conference on simulation and modelling (SIMS 2020)</source>
      <year iso-8601-date="2021-03-03">2021</year><month>03</month><day>03</day>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-10-23">2023</year><month>10</month><day>23</day></date-in-citation>
      <uri>https://ep.liu.se/en/conference-article.aspx?series=ecp&amp;issue=176&amp;Article_No=67</uri>
      <pub-id pub-id-type="doi">10.3384/ecp20176475</pub-id>
      <fpage>475</fpage>
      <lpage>482</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gifski_cran">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Ooms</surname><given-names>Jeroen</given-names></name>
        <string-name>Kornel Lesiński</string-name>
        <string-name>authors of the dependency Rust crates</string-name>
      </person-group>
      <source>Gifski: Highest quality GIF encoder</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=gifski</uri>
      <pub-id pub-id-type="doi">10.32614/cran.package.gifski</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-forth_african_2022-1">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Forth</surname><given-names>Jan H.</given-names></name>
        <name><surname>Calvelage</surname><given-names>Sten</given-names></name>
        <name><surname>Fischer</surname><given-names>Melina</given-names></name>
        <name><surname>Hellert</surname><given-names>Jan</given-names></name>
        <name><surname>Sehl-Ewert</surname><given-names>Julia</given-names></name>
        <name><surname>Roszyk</surname><given-names>Hanna</given-names></name>
        <name><surname>Deutschmann</surname><given-names>Paul</given-names></name>
        <name><surname>Reichold</surname><given-names>Adam</given-names></name>
        <name><surname>Lange</surname><given-names>Martin</given-names></name>
        <name><surname>Thulke</surname><given-names>Hans-Hermann</given-names></name>
        <name><surname>Sauter-Louis</surname><given-names>Carola</given-names></name>
        <name><surname>Höper</surname><given-names>Dirk</given-names></name>
        <name><surname>Mandyhra</surname><given-names>Svitlana</given-names></name>
        <name><surname>Sapachova</surname><given-names>Maryna</given-names></name>
        <name><surname>Beer</surname><given-names>Martin</given-names></name>
        <name><surname>Blome</surname><given-names>Sandra</given-names></name>
      </person-group>
      <article-title>African swine fever virus – variants on the rise</article-title>
      <year iso-8601-date="2022-09-08">2022</year><month>09</month><day>08</day>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-01-19">2024</year><month>01</month><day>19</day></date-in-citation>
      <uri>https://www.biorxiv.org/content/10.1101/2022.09.07.506908v1</uri>
      <pub-id pub-id-type="doi">10.1101/2022.09.07.506908</pub-id>
      <fpage>2022.09.07.506908</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
