<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5147</article-id>
<article-id pub-id-type="doi">10.21105/joss.05147</article-id>
<title-group>
<article-title>SATLLA0: A Flight Software Platform for Aerospace and
STEM Education</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1300-5236</contrib-id>
<name>
<surname>Ronen</surname>
<given-names>Rony</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0003-5492-4014</contrib-id>
<name>
<surname>Britvin</surname>
<given-names>Michael</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1580-5421</contrib-id>
<name>
<surname>Moshe</surname>
<given-names>Boaz Ben</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>School of Computer Science, Ariel University, 47100,
Israel</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Faculty of Engineering, Ariel University, 47100,
Israel</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-12-19">
<day>19</day>
<month>12</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>86</issue>
<fpage>5147</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Arduino</kwd>
<kwd>CubeSat</kwd>
<kwd>PicoSat</kwd>
<kwd>New-space</kwd>
<kwd>Lora</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Nanosatellites are becoming a preferred platform for testing
  innovative technologies and conducting academic research in space.
  Flight Software (FSW) is a software program that operates on a
  processor embedded within the satellite structure
  (<xref alt="Miranda et al., 2019" rid="ref-miranda2019comparative" ref-type="bibr">Miranda
  et al., 2019</xref>). It assumes the crucial responsibility of
  managing various aspects of satellite operations, including activity
  control, data processing, and ensuring satellite health and safety. By
  fulfilling these tasks, the FSW empowers the satellite to execute all
  actions essential for achieving its scientific objectives.</p>
  <p><ext-link ext-link-type="uri" xlink:href="https://github.com/kcglab/satllazero">SATLLA-0</ext-link>
  is an open-source platform designed for academic institutions and
  school students to build and explore laboratory nanosatellites. It is
  based on the flight software utilized by the
  <ext-link ext-link-type="uri" xlink:href="https://tinygs.com/satellite/SATLLA-2B">SATLLA-2B</ext-link>
  nanosatellite, which was developed and constructed by the
  Nanosatellite Research Laboratory of Ariel University. The successful
  launch of the SATLLA-2B nanosatellite took place on January 13, 2022,
  aboard a Falcon 9 launch vehicle. Since its launch, SATLLA-2B has been
  operating seamlessly, with its transmissions being received daily by a
  wide range of users on tinyGS.com.</p>
  <p>SATLLA-0 is divided into three main libraries, with the main
  library,
  <ext-link ext-link-type="uri" xlink:href="../software/SAT0_Master">SAT0_Master</ext-link>,
  responsible for the ongoing operation of the satellite, the
  <ext-link ext-link-type="uri" xlink:href="../software/SAT0_OBC">SAT0_OBC</ext-link>
  library responsible for the operation of the satellite’s research
  objective, and the
  <ext-link ext-link-type="uri" xlink:href="../software/SAT0_Ground">SAT0_Ground</ext-link>
  library responsible for transmitting telecommand to the satellite and
  receiving satellite transmissions and routing the data for further
  analysis.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Building a nanosatellite and developing flight software is
  challenging for newcomers to the space (i.e., new-space) field due to
  the lack of literature and high cost. There are open-source frameworks
  for space projects developed by space agencies, universities, or
  commercial companies to serve as reference designs and encourage code
  reuse in their future projects
  (<xref alt="Jamie et al., 2017" rid="ref-jamie2017basic" ref-type="bibr">Jamie
  et al., 2017</xref>). These frameworks have not yet gained significant
  adoption outside of their host organizations
  (<xref alt="Miranda et al., 2019" rid="ref-miranda2019comparative" ref-type="bibr">Miranda
  et al., 2019</xref>) for the following reasons:</p>
  <list list-type="bullet">
    <list-item>
      <p>Flight software is tailored to a satellite of a specific design
      and is not transferable to another design.</p>
    </list-item>
    <list-item>
      <p>Flight software is not based on open source software or the
      entire flight software has not been released as open source
      software.</p>
    </list-item>
    <list-item>
      <p>Flight software is too complicated and may not be suitable for
      organizations just starting out or for STEM education.</p>
    </list-item>
  </list>
  <p>At the same time, using an existing software framework leads to a
  shorter development program at lower costs and better quality. These
  effects are beneficial for organizations such as universities or
  schools that want to enter the space field. These reasons have led us
  to release the SATLLA-2B flight software as open-source code with
  additional documents to build a nanosatellite.</p>
</sec>
<sec id="description">
  <title>Description</title>
  <p>The SATLLA-0 core flight system serves as open-source flight
  software utilized by the SATLLA-2B satellite. Its purpose is to
  provide a foundational framework for academic institutions or schools
  interested in constructing or experimenting with laboratory or
  functional nanosatellites. As previously mentioned, this system
  comprises three distinct components. The primary library encompasses
  the satellite’s flight software, employing the Arduino programming
  language, which is based on C/C++, renowned for its open-source nature
  and ease of comprehension. The primary focus during the development of
  the main library was to cater to the specific requirements of the
  Teensy 3.x/4.x microcontroller family, which functions as the central
  microprocessor unit (MPU) for the SATLLA-2B nanosatellite. However, it
  is worth noting that the library incorporates accessible definitions
  that enable the compilation of the library for alternative
  microcontrollers, expanding its compatibility beyond the Teensy
  series.</p>
  <fig>
    <caption><p>SATLLA-0 FSW two main states: Initialization and
    Operation.<styled-content id="figU003Afigure1_1"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figure1_1.png" />
  </fig>
  <p>The FSW consists of two primary states, as deduced from the system
  requirements of a state machine
  (<xref alt="Gonzalez et al., 2019" rid="ref-gonzalez2019architecture" ref-type="bibr">Gonzalez
  et al., 2019</xref>)
  (<xref alt="[fig:figure1_1]" rid="figU003Afigure1_1">[fig:figure1_1]</xref>).</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Initialization</bold>: During the initialization phase,
      the FSW undertakes the initial configuration process by accessing
      the initialization parameters stored in the flash memory of the
      MCU. Upon the initial startup or following a complete reset, the
      FSW utilizes predefined default values. Simultaneously, this state
      encompasses the initialization of different satellite modules,
      such as the IMU, GPS, and communication systems. Subsequently, the
      satellite’s state is evaluated to ascertain the operational mode,
      which can be categorized as Panic, Reduced Operation, or Normal
      Operation.</p>
    </list-item>
    <list-item>
      <p><bold>Operation</bold>: After concluding the initialization
      state and establishing the operational mode, the FSW proceeds to
      enter iterative loops. These loops enable the FSW to query the
      diverse modules and sensors, subsequently responding appropriately
      to the received data. Additionally, the FSW periodically transmits
      a heartbeat signal to the watchdog, ensuring it does not reach a
      critical state. This proactive measure of sending regular
      heartbeats prevents the watchdog from reaching a zero point or
      malfunctioning.</p>
    </list-item>
  </list>
  <fig>
    <caption><p>SATLLA-0 Power and Protocol
    interfaces.<styled-content id="figU003Afigure2_1"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figure2_1.png" />
  </fig>
  <p>A technical overview of the power, data, and RF interfaces used in
  the SATLLA-0 system is available in
  <xref alt="[fig:figure2_1]" rid="figU003Afigure2_1">[fig:figure2_1]</xref>.
  The specific interface used for each component is determined by the
  communication type integrated into that particular component. Some
  components possess multiple communication interfaces, such as
  Integrated Communications (I2C), Serial Peripheral Interface (SPI), or
  Universal Asynchronous Receiver Transmitter (UART). In such cases, the
  preferred communication type is selected based on the component’s
  requirements. For example, both the On-Board Computer (OBC) and the
  GPS module communicate with the microcontroller unit (MCU) using a
  UART interface. This approach ensures the MCU remains operational
  while collecting necessary data. Additionally, the power supply
  interface regulates voltage levels (3.3 V) for the satellite’s
  avionics and payloads.</p>
  <p>For a full documentation of <monospace>SATLLA-0</monospace>, the
  reader is referred to our
  <ext-link ext-link-type="uri" xlink:href="https://github.com/kcglab/satllazero">GitHub
  page</ext-link>.</p>
</sec>
<sec id="acknowledgement">
  <title>Acknowledgement</title>
  <p>The authors acknowledge the great work and dedication of the entire
  SATLLA team and the support of the Department of Computer Science at
  Ariel University. Special thanks are extended to the students who
  participated in the mission design for the nanosatellite: Zachi
  Ben-Shitrit, Assaf Chia, Shaya Sonnenberg, Shai Aharon, Michael Twito,
  Revital Marble, and Aharon Got. This work has been partially supported
  by the Ariel Cyber Innovation Center.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-jamie2017basic">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jamie</surname><given-names>Chin</given-names></name>
        <name><surname>Roland</surname><given-names>Coelho</given-names></name>
        <name><surname>Justin</surname><given-names>Foley</given-names></name>
        <name><surname>Alicia</surname><given-names>Johnstone</given-names></name>
      </person-group>
      <article-title>Basic concepts and processes for first-time CubeSat developers</article-title>
      <source>CubeSat101, CaliforDesign of a CubeSat Testbednia</source>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-gonzalez2019architecture">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gonzalez</surname><given-names>Carlos E</given-names></name>
        <name><surname>Rojas</surname><given-names>Camilo J</given-names></name>
        <name><surname>Bergel</surname><given-names>Alexandre</given-names></name>
        <name><surname>Diaz</surname><given-names>Marcos A</given-names></name>
      </person-group>
      <article-title>An architecture-tracking approach to evaluate a modular and extensible flight software for cubesat nanosatellites</article-title>
      <source>IEEE Access</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>7</volume>
      <pub-id pub-id-type="doi">10.1109/ACCESS.2019.2927931</pub-id>
      <fpage>126409</fpage>
      <lpage>126429</lpage>
    </element-citation>
  </ref>
  <ref id="ref-miranda2019comparative">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Miranda</surname><given-names>Danilo José Franzim</given-names></name>
        <name><surname>Ferreira</surname><given-names>Maurı́cio</given-names></name>
        <name><surname>Kucinskis</surname><given-names>Fabricio</given-names></name>
        <name><surname>McComas</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>A comparative survey on flight software frameworks for ‘new space’ nanosatellite missions</article-title>
      <source>Journal of Aerospace Technology and Management</source>
      <publisher-name>SciELO Brasil</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>11</volume>
      <pub-id pub-id-type="doi">10.5028/jatm.v11.1081</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
