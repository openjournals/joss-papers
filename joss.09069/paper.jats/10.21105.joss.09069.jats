<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">9069</article-id>
<article-id pub-id-type="doi">10.21105/joss.09069</article-id>
<title-group>
<article-title>CommaSuite: Monitoring and Testing of OpenAPI and
AsyncAPI Software Interfaces</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0003-3783-405X</contrib-id>
<name>
<surname>Kurtev</surname>
<given-names>Ivan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>van der Munnik</surname>
<given-names>Daan</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0002-4166-288X</contrib-id>
<name>
<surname>Schuts</surname>
<given-names>Mathijs</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>TU/e, The Netherlands</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Philips, The Netherlands</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>TNO-ESI, The Netherlands</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-07-17">
<day>17</day>
<month>7</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>114</issue>
<fpage>9069</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>ComMA</kwd>
<kwd>CommaSuite</kwd>
<kwd>OpenAPI</kwd>
<kwd>AsyncAPI</kwd>
<kwd>Runtime Monitoring</kwd>
<kwd>Model-Based Testing</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>A broad spectrum of scientific software engineering research can
  benefit from the use of precise component descriptions.
  <monospace>CommaSuite</monospace><xref ref-type="fn" rid="fn1">1</xref>
  is an open-source research tool designed to support the specification
  and design of software interfaces and components
  (<xref alt="Kurtev et al., 2024" rid="ref-kurtev2024model" ref-type="bibr">Kurtev
  et al., 2024</xref>). It utilizes DSLs (Domain Specific Languages) to
  model interface and component behavior in an implementation technology
  agnostic notation. <monospace>CommaSuite</monospace>’s main capability
  is to generate a runtime monitor
  (<xref alt="Falcone et al., 2021" rid="ref-falcone2021taxonomy" ref-type="bibr">Falcone
  et al., 2021</xref>) from these models. This monitor enables
  verification of whether the component interactions conform to the
  specified behavior. A recent addition to
  <monospace>CommaSuite</monospace> includes support for MBT
  (Model-Based Testing)
  (<xref alt="Utting et al., 2012" rid="ref-utting2012taxonomy" ref-type="bibr">Utting
  et al., 2012</xref>) of component implementations. With this
  capability, test applications are automatically generated from
  models.</p>
  <p>Since 2015, <monospace>CommaSuite</monospace> has been used in
  applied research projects within the Dutch high-tech industry.
  Initially, only proprietary, company-specific interface technologies
  that are closed-source were supported. In this paper, we present a
  major new release of <monospace>CommaSuite</monospace> that includes
  support for widely used, open-source software interface
  technologies.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Verification of high-tech systems remains a dynamic and evolving
  area of research. Key solution approaches are being explored across
  several research directions such as interface definition languages,
  runtime monitoring, and model-based testing.</p>
  <p>CPSs (Cyber-Physical Systems)–such as autonomous vehicles
  (<xref alt="Araujo et al., 2023" rid="ref-araujo2023testing" ref-type="bibr">Araujo
  et al., 2023</xref>), robots
  (<xref alt="Caldas et al., 2024" rid="ref-caldas2024runtime" ref-type="bibr">Caldas
  et al., 2024</xref>), and drones
  (<xref alt="Islam et al., 2024" rid="ref-islam2024adam" ref-type="bibr">Islam
  et al., 2024</xref>)–are increasingly driven by AI (Artificial
  Intelligence)
  (<xref alt="Rahman et al., 2021" rid="ref-rahman2021run" ref-type="bibr">Rahman
  et al., 2021</xref>). To ensure the safe operation of these AI-enabled
  systems, runtime monitoring can be employed to detect and respond to
  deviations from the specified behavior. For systems that do not rely
  on AI, MBT offers a promising approach for pre-release acquiring
  confidence in the correctness.</p>
  <p>Although <monospace>CommaSuite</monospace> is based on technology
  agnostic specification languages, the generated artefacts have to
  interact or consume data via concrete interface technologies. This
  requires development of converters and adaptors. For example, the
  observed messages to and from components are usually interface
  technology specific and need to be converted to a format
  understandable by the generated runtime monitor. Similarly, the
  generated test applications need to use a concrete interface
  technology to access the intended component under test.</p>
  <p>In the 3.0.0 release<xref ref-type="fn" rid="fn2">2</xref> of
  <monospace>CommaSuite</monospace>, support has been added for two
  widely adopted open-source software interface technologies: OpenAPI
  and AsyncAPI. OpenAPI
  (<xref alt="Karavisileiou et al., 2020" rid="ref-karavisileiou2020ontology" ref-type="bibr">Karavisileiou
  et al., 2020</xref>) is extensively used in both web development and
  CPSs, and is supported by a broad ecosystem of
  tools<xref ref-type="fn" rid="fn3">3</xref>. AsyncAPI
  (<xref alt="Gómez et al., 2020" rid="ref-gomez2020model" ref-type="bibr">Gómez
  et al., 2020</xref>) is commonly used in the development of IoT
  (Internet-of-Things) applications and CPSs, and also benefits from a
  rich set of supporting tools<xref ref-type="fn" rid="fn4">4</xref>. By
  integrating these technologies into the open-source version of
  <monospace>CommaSuite</monospace>, researchers and practitioners can
  benefit from <monospace>CommaSuite</monospace> across a wider range of
  active research and application domains, and can experiment with the
  verification of applications based on these technologies.</p>
</sec>
<sec id="functionality">
  <title>Functionality</title>
  <p>To tailor <monospace>CommaSuite</monospace> to specific interface
  technologies, dedicated translators and generators are required.
  <xref alt="[fig:overview]" rid="figU003Aoverview">[fig:overview]</xref>
  illustrates the architecture of <monospace>CommaSuite</monospace>,
  which includes DSLs at its core along with the translators and
  generators that handle technology-specific artifacts. In the following
  sections, we describe the generation of interface technology-specific
  specifications, and the translation of Wireshark captures into
  <monospace>CommaSuite</monospace>’s input format for runtime
  monitoring. Additionally, we explain the generation of adapters for
  <monospace>CommaSuite</monospace>’s model-based testing
  application.</p>
  <fig>
    <caption><p>Overview of <monospace>CommaSuite</monospace>’s
    translators and
    generators<styled-content id="figU003Aoverview"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="overview.png" />
  </fig>
  <sec id="generating-specifications">
    <title>Generating Specifications</title>
    <p>As illustrated in
    <xref alt="[fig:overview]" rid="figU003Aoverview">[fig:overview]</xref>,
    <monospace>CommaSuite</monospace> can generate OpenAPI and AsyncAPI
    interface specifications directly from
    <monospace>CommaSuite</monospace> models. These specifications are
    produced in YAML (YAML Ain’t Markup Language) format
    (<xref alt="Evans et al., 2017" rid="ref-ben2009yaml" ref-type="bibr">Evans
    et al., 2017</xref>), which serves as input for the various
    supporting tools referenced earlier. Since OpenAPI and AsyncAPI
    share a common format for defining data types, the
    <monospace>CommaSuite</monospace> generator avoids duplication by
    creating a separate YAML file containing all data type definitions.
    This shared data types file is then imported into the OpenAPI and
    AsyncAPI interface specifications.</p>
  </sec>
  <sec id="runtime-monitoring">
    <title>Runtime Monitoring</title>
    <p>Runtime Monitoring
    (<xref alt="Kurtev et al., 2017" rid="ref-kurtev2017runtime" ref-type="bibr">Kurtev
    et al., 2017</xref>;
    <xref alt="Kurtev &amp; Hooman, 2022" rid="ref-kurtev2022runtime" ref-type="bibr">Kurtev
    &amp; Hooman, 2022</xref>) is the main capability of
    <monospace>CommaSuite</monospace>. It includes the interface
    technology agnostic Events DSL, a core part of
    <monospace>CommaSuite</monospace>, which serves as an input language
    for the runtime monitor. The Events DSL is used to encode the
    observed component interactions in terms of exchanged messages. To
    enable runtime monitoring for OpenAPI and AsyncAPI software
    interfaces, a dedicated translator has been developed. This allows
    interactions between components–observable at the software interface
    level such as using Wireshark
    (<xref alt="Jain, 2022" rid="ref-bock2022learn" ref-type="bibr">Jain,
    2022</xref>)–to be captured and translated into the
    <monospace>CommaSuite</monospace>’s Events DSL format.</p>
  </sec>
  <sec id="model-based-testing">
    <title>Model-Based Testing</title>
    <p>MBT
    (<xref alt="Schuts et al., 2025" rid="ref-schuts2025online" ref-type="bibr">Schuts
    et al., 2025</xref>) is another capability of
    <monospace>CommaSuite</monospace>. From
    <monospace>CommaSuite</monospace> models, a test application can be
    automatically generated. This test application is interface
    technology agnostic by design. However, to test a SUT (System Under
    Test) that uses OpenAPI and/or AsyncAPI interfaces, a dedicated test
    adapter is required. This adapter, which bridges the test
    application and the SUT, can also be generated from
    <monospace>CommaSuite</monospace> models.</p>
  </sec>
  <sec id="application-at-philips-igt">
    <title>Application at Philips IGT</title>
    <p>Earlier versions of <monospace>CommaSuite</monospace> have been
    successfully applied in industrial research projects at Philips IGT.
    In these projects, both runtime monitoring
    (<xref alt="Kurtev et al., 2017" rid="ref-kurtev2017runtime" ref-type="bibr">Kurtev
    et al., 2017</xref>), and MBT
    (<xref alt="Schuts et al., 2025" rid="ref-schuts2025online" ref-type="bibr">Schuts
    et al., 2025</xref>) were employed using a proprietary,
    Philips-specific interface technology.</p>
    <p>More recently, the newly added support for OpenAPI and AsyncAPI
    has been utilized at Philips IGT for the definition, design,
    implementation, and verification of new software interfaces. This
    demonstrates <monospace>CommaSuite</monospace>’s applicability to
    open-source interface standards in a large, industrial
    application.</p>
  </sec>
</sec>
<sec id="state-of-the-field">
  <title>State of the field</title>
  <p>There exist a number of tools that support development of APIs such
  as Postman<xref ref-type="fn" rid="fn5">5</xref>,
  SwaggerHub<xref ref-type="fn" rid="fn6">6</xref>, AsyncAPI
  Studio<xref ref-type="fn" rid="fn7">7</xref> among others. These tools
  usually support technology-specific notations for specifying the APIs
  and data schemas, for example YAML files.</p>
  <p><monospace>CommaSuite</monospace> provides interface technology
  agnostic modeling notation at a higher level of abstraction where the
  models can be used for multiple purposes. Furthermore,
  <monospace>CommaSuite</monospace> supports the specification of the
  allowed order of API calls in the form of state machines and the
  expected timing behavior. While some of the existing tools provide a
  degree of test automation, in most of the cases the developers still
  need to develop the test cases manually.
  <monospace>CommaSuite</monospace> via its MBT support enables
  automatic generation of test cases and test adapters.</p>
  <p>It should be noted that our approach does not aim at generating
  implementation of the OpenAPI and AsyncAPI specifications. Some of the
  mentioned existing tools provide support for this task.</p>
</sec>
<sec id="documentation">
  <title>Documentation</title>
  <p>Comprehensive documentation for the newly added OpenAPI and
  AsyncAPI support is available at
  <ext-link ext-link-type="uri" xlink:href="https://eclipse.dev/comma/generators/generators.html">https://eclipse.dev/comma/generators/generators.html</ext-link>,
  navigate to “OpenAPI and AsyncAPI Support” from the left-hand side
  menu.</p>
  <p>The <monospace>CommaSuite</monospace> version 3.0.0 release
  includes an example project that demonstrates how to use
  <monospace>CommaSuite</monospace> with OpenAPI and AsyncAPI software
  interfaces. The example project provides users with a concrete
  starting point to explore and apply the described
  capabilities<xref ref-type="fn" rid="fn8">8</xref>.</p>
  <p>Note that the limitations of the described capabilities are part of
  the referenced documentation.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The research is carried out as part of the “Model-Based Testing
  with ComMA” program under the responsibility of TNO-ESI in cooperation
  with Philips. Model-Based Testing with <monospace>ComMA</monospace> is
  funded by Holland High Tech | TKI HSTM via the PPP Innovation Scheme
  (PPP-I) for public-private partnerships.</p>
  <p>We would like to thank Jordi Betting and Dheeraj Kulkarni from
  Philips for their valuable discussions and feedback on the prototype
  implementations.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-kurtev2024model">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kurtev</surname><given-names>Ivan</given-names></name>
        <name><surname>Hooman</surname><given-names>Jozef</given-names></name>
        <name><surname>Schuts</surname><given-names>Mathijs</given-names></name>
        <name><surname>Munnik</surname><given-names>Daan van der</given-names></name>
      </person-group>
      <article-title>Model based component development and analysis with ComMA</article-title>
      <source>Science of Computer Programming</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <volume>233</volume>
      <pub-id pub-id-type="doi">10.1016/j.scico.2023.103067</pub-id>
      <fpage>103067</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-falcone2021taxonomy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Falcone</surname><given-names>Yliès</given-names></name>
        <name><surname>Krstić</surname><given-names>Sran</given-names></name>
        <name><surname>Reger</surname><given-names>Giles</given-names></name>
        <name><surname>Traytel</surname><given-names>Dmitriy</given-names></name>
      </person-group>
      <article-title>A taxonomy for classifying runtime verification tools</article-title>
      <source>International Journal on Software Tools for Technology Transfer</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>23</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1007/s10009-021-00609-z</pub-id>
      <fpage>255</fpage>
      <lpage>284</lpage>
    </element-citation>
  </ref>
  <ref id="ref-utting2012taxonomy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Utting</surname><given-names>Mark</given-names></name>
        <name><surname>Pretschner</surname><given-names>Alexander</given-names></name>
        <name><surname>Legeard</surname><given-names>Bruno</given-names></name>
      </person-group>
      <article-title>A taxonomy of model-based testing approaches</article-title>
      <source>Software testing, verification and reliability</source>
      <publisher-name>Wiley Online Library</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <volume>22</volume>
      <issue>5</issue>
      <pub-id pub-id-type="doi">10.1002/stvr.456</pub-id>
      <fpage>297</fpage>
      <lpage>312</lpage>
    </element-citation>
  </ref>
  <ref id="ref-araujo2023testing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Araujo</surname><given-names>Hugo</given-names></name>
        <name><surname>Mousavi</surname><given-names>Mohammad Reza</given-names></name>
        <name><surname>Varshosaz</surname><given-names>Mahsa</given-names></name>
      </person-group>
      <article-title>Testing, validation, and verification of robotic and autonomous systems: A systematic review</article-title>
      <source>ACM Transactions on Software Engineering and Methodology</source>
      <publisher-name>ACM New York, NY</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>32</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1145/3542945</pub-id>
      <fpage>1</fpage>
      <lpage>61</lpage>
    </element-citation>
  </ref>
  <ref id="ref-caldas2024runtime">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Caldas</surname><given-names>Ricardo</given-names></name>
        <name><surname>Garcı́a</surname><given-names>Juan Antonio Piñera</given-names></name>
        <name><surname>Schiopu</surname><given-names>Matei</given-names></name>
        <name><surname>Pelliccione</surname><given-names>Patrizio</given-names></name>
        <name><surname>Rodrigues</surname><given-names>Genaı́na</given-names></name>
        <name><surname>Berger</surname><given-names>Thorsten</given-names></name>
      </person-group>
      <article-title>Runtime verification and field-based testing for ROS-based robotic systems</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <pub-id pub-id-type="doi">10.1109/tse.2024.3444697</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-islam2024adam">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Islam</surname><given-names>Md Nafee Al</given-names></name>
        <name><surname>Cleland-Huang</surname><given-names>Jane</given-names></name>
        <name><surname>Vierhauser</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>Adam: Adaptive monitoring of runtime anomalies in small uncrewed aerial systems</article-title>
      <source>Proceedings of the 19th international symposium on software engineering for adaptive and self-managing systems</source>
      <year iso-8601-date="2024">2024</year>
      <pub-id pub-id-type="doi">10.1145/3643915.3644092</pub-id>
      <fpage>44</fpage>
      <lpage>55</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rahman2021run">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rahman</surname><given-names>Quazi Marufur</given-names></name>
        <name><surname>Corke</surname><given-names>Peter</given-names></name>
        <name><surname>Dayoub</surname><given-names>Feras</given-names></name>
      </person-group>
      <article-title>Run-time monitoring of machine learning for robotic perception: A survey of emerging trends</article-title>
      <source>IEEE Access</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>9</volume>
      <pub-id pub-id-type="doi">10.1109/access.2021.3055015</pub-id>
      <fpage>20067</fpage>
      <lpage>20075</lpage>
    </element-citation>
  </ref>
  <ref id="ref-karavisileiou2020ontology">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Karavisileiou</surname><given-names>Aikaterini</given-names></name>
        <name><surname>Mainas</surname><given-names>Nikolaos</given-names></name>
        <name><surname>Petrakis</surname><given-names>Euripides GM</given-names></name>
      </person-group>
      <article-title>Ontology for openapi rest services descriptions</article-title>
      <source>2020 IEEE 32nd international conference on tools with artificial intelligence (ICTAI)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.1109/ictai50040.2020.00016</pub-id>
      <fpage>35</fpage>
      <lpage>40</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gomez2020model">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Gómez</surname><given-names>Abel</given-names></name>
        <name><surname>Iglesias-Urkia</surname><given-names>Markel</given-names></name>
        <name><surname>Urbieta</surname><given-names>Aitor</given-names></name>
        <name><surname>Cabot</surname><given-names>Jordi</given-names></name>
      </person-group>
      <article-title>A model-based approach for developing event-driven architectures with AsyncAPI</article-title>
      <source>Proceedings of the 23rd ACM/IEEE international conference on model driven engineering languages and systems</source>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.1145/3365438.3410948</pub-id>
      <fpage>121</fpage>
      <lpage>131</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ben2009yaml">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Evans</surname><given-names>Clark</given-names></name>
        <name><surname>Ben-Kiki</surname><given-names>Oren</given-names></name>
        <name><surname>Net</surname><given-names>I döt</given-names></name>
      </person-group>
      <article-title>YAML ain’t markup language (YAML™) version 1.2.</article-title>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-kurtev2017runtime">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Kurtev</surname><given-names>Ivan</given-names></name>
        <name><surname>Hooman</surname><given-names>Jozef</given-names></name>
        <name><surname>Schuts</surname><given-names>Mathijs</given-names></name>
      </person-group>
      <source>Runtime monitoring based on interface specifications</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-68270-9_17</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kurtev2022runtime">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Kurtev</surname><given-names>Ivan</given-names></name>
        <name><surname>Hooman</surname><given-names>Jozef</given-names></name>
      </person-group>
      <article-title>Runtime verification of compound components with ComMA</article-title>
      <source>A journey from process algebra via timed automata to model learning: Essays dedicated to frits vaandrager on the occasion of his 60th birthday</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.1007/978-3-031-15629-8_21</pub-id>
      <fpage>382</fpage>
      <lpage>402</lpage>
    </element-citation>
  </ref>
  <ref id="ref-schuts2025online">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schuts</surname><given-names>Mathijs</given-names></name>
        <name><surname>Hooman</surname><given-names>Jozef</given-names></name>
        <name><surname>Kurtev</surname><given-names>Ivan</given-names></name>
        <name><surname>Tlili</surname><given-names>Issam</given-names></name>
        <name><surname>Oerlemans</surname><given-names>Erik</given-names></name>
      </person-group>
      <article-title>Online model-based testing reusing multiple design models in an industrial setting</article-title>
      <source>Journal of Object Technology</source>
      <year iso-8601-date="2025-05">2025</year><month>05</month>
      <volume>24</volume>
      <issue>2</issue>
      <issn>1660-1769</issn>
      <uri>http://www.jot.fm/contents/issue_2025_02/a6.html</uri>
      <pub-id pub-id-type="doi">10.5381/jot.2025.24.2.a6</pub-id>
      <fpage>2:1</fpage>
      <lpage>14</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bock2022learn">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Jain</surname><given-names>Vinit</given-names></name>
      </person-group>
      <source>Introduction to wireshark</source>
      <publisher-name>Apress</publisher-name>
      <publisher-loc>Berkeley, CA</publisher-loc>
      <year iso-8601-date="2022">2022</year>
      <isbn>978-1-4842-8002-7</isbn>
      <uri>https://doi.org/10.1007/978-1-4842-8002-7_1</uri>
      <pub-id pub-id-type="doi">10.1007/978-1-4842-8002-7_1</pub-id>
      <fpage>1</fpage>
      <lpage>34</lpage>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p><ext-link ext-link-type="uri" xlink:href="https://eclipse.dev/comma/">https://eclipse.dev/comma/</ext-link></p>
  </fn>
  <fn id="fn2">
    <label>2</label><p><ext-link ext-link-type="uri" xlink:href="https://gitlab.eclipse.org/eclipse/comma/comma/-/releases/v3.0.0">https://gitlab.eclipse.org/eclipse/comma/comma/-/releases/v3.0.0</ext-link></p>
  </fn>
  <fn id="fn3">
    <label>3</label><p><ext-link ext-link-type="uri" xlink:href="https://tools.openapis.org/">https://tools.openapis.org/</ext-link></p>
  </fn>
  <fn id="fn4">
    <label>4</label><p><ext-link ext-link-type="uri" xlink:href="https://www.asyncapi.com/tools">https://www.asyncapi.com/tools</ext-link></p>
  </fn>
  <fn id="fn5">
    <label>5</label><p><ext-link ext-link-type="uri" xlink:href="https://www.postman.com/">https://www.postman.com/</ext-link></p>
  </fn>
  <fn id="fn6">
    <label>6</label><p><ext-link ext-link-type="uri" xlink:href="https://tools.openapis.org/">https://tools.openapis.org/</ext-link></p>
  </fn>
  <fn id="fn7">
    <label>7</label><p><ext-link ext-link-type="uri" xlink:href="https://www.asyncapi.com/tools">https://www.asyncapi.com/tools</ext-link></p>
  </fn>
  <fn id="fn8">
    <label>8</label><p>See
    <ext-link ext-link-type="uri" xlink:href="https://eclipse.dev/comma/site/download.html">https://eclipse.dev/comma/site/download.html</ext-link>;
    the example can be obtained via File <inline-formula><alternatives>
    <tex-math><![CDATA[\rightarrow]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mo>→</mml:mo></mml:math></alternatives></inline-formula>
    New <inline-formula><alternatives>
    <tex-math><![CDATA[\rightarrow]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mo>→</mml:mo></mml:math></alternatives></inline-formula>
    Example… <inline-formula><alternatives>
    <tex-math><![CDATA[\rightarrow]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mo>→</mml:mo></mml:math></alternatives></inline-formula>
    Vending Machine Test Application REST Example; the README file of
    this example contains more information, e.g., on the execution of
    the SUT and test application, and about creating a Wireshark
    capture.</p>
  </fn>
</fn-group>
</back>
</article>
