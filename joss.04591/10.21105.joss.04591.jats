<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4591</article-id>
<article-id pub-id-type="doi">10.21105/joss.04591</article-id>
<title-group>
<article-title>Mallob: Scalable SAT Solving On Demand With Decentralized
Job Scheduling</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3330-9349</contrib-id>
<name>
<surname>Sanders</surname>
<given-names>Peter</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4185-1851</contrib-id>
<name>
<surname>Schreiber</surname>
<given-names>Dominik</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Karlsruhe Institute of Technology, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-06-30">
<day>30</day>
<month>6</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>76</issue>
<fpage>4591</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>online job scheduling</kwd>
<kwd>malleability</kwd>
<kwd>load balancing</kwd>
<kwd>propositional satisfiability</kwd>
<kwd>SAT solving</kwd>
<kwd>parallel processing</kwd>
<kwd>HPC</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Propositional satisfiability (SAT) is the problem of finding a
  variable assignment for a given propositional formula (i.e., a
  composition of Boolean variables using logical operators NOT, AND, OR)
  such that the formula evaluates to <bold>true</bold>, or reporting
  that no such assignment exists. The platform <bold>Mallob</bold>
  (<bold>Mal</bold>leable <bold>Lo</bold>ad <bold>B</bold>alancer, or
  <bold>Ma</bold>ssively P<bold>a</bold>ra<bold>ll</bold>el
  <bold>Lo</bold>gic <bold>B</bold>ackend) enables processing SAT jobs
  in a (massively) parallel and distributed system on demand. Mallob’s
  flexible, fair, and decentralized approach to online job scheduling
  results in scheduling latencies in the range of milliseconds,
  near-optimal system utilization, and high resource efficiency.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Despite SAT being a notoriously difficult problem
  (<xref alt="S. A. Cook, 1971" rid="ref-cook1971complexity" ref-type="bibr">S.
  A. Cook, 1971</xref>), practically efficient SAT solving approaches
  have empowered a wide range of real-world applications for SAT such as
  software verification
  (<xref alt="Kleine-Büning et al., 2019" rid="ref-buning2019using" ref-type="bibr">Kleine-Büning
  et al., 2019</xref>), circuit design
  (<xref alt="Goldberg et al., 2001" rid="ref-goldberg2001using" ref-type="bibr">Goldberg
  et al., 2001</xref>), cryptography
  (<xref alt="Massacci &amp; Marraro, 2000" rid="ref-massacci2000logical" ref-type="bibr">Massacci
  &amp; Marraro, 2000</xref>), automated planning
  (<xref alt="Schreiber, 2021a" rid="ref-schreiber2021lilotane" ref-type="bibr">Schreiber,
  2021a</xref>), and theorem proving
  (<xref alt="Heule et al., 2016" rid="ref-heule2016solving" ref-type="bibr">Heule
  et al., 2016</xref>). With respect to modern computing paradigms such
  as cloud computing and high-performance computing (HPC), the limited
  scalability of established parallel and distributed SAT solvers has
  become a pressing issue
  (<xref alt="Hamadi &amp; Wintersteiger, 2012" rid="ref-hamadi2012seven" ref-type="bibr">Hamadi
  &amp; Wintersteiger, 2012</xref>). Moreover, since processing times of
  SAT jobs are unknown in advance, conventional HPC scheduling
  approaches applied to such jobs can lead to prohibitively large
  scheduling latencies and to suboptimal utilization of computational
  resources. Instead, we suggest making use of so-called
  <italic>malleable scheduling</italic>. A parallel computing task is
  called malleable if the amount of computational resources allotted
  (i.e., the number of cores or machines) can be adjusted during its
  execution
  (<xref alt="Feitelson, 1997" rid="ref-feitelson1997job" ref-type="bibr">Feitelson,
  1997</xref>). Malleability is a powerful paradigm in the field of job
  scheduling and load balancing as it allows scheduling incoming jobs
  rapidly and continuously rebalancing the present tasks according to
  their priority and other properties.</p>
  <p>We believe that a cloud service that combines a scalable SAT
  solving engine with malleable job scheduling can significantly improve
  many SAT-related academic and industrial workflows in terms of
  productivity and (resource-)efficiency. Moreover, our decentralized
  scheduling approach is applicable to further applications beyond SAT
  where processing times are unknown in advance and a modest amount of
  data is transferred between the workers.</p>
</sec>
<sec id="system-overview">
  <title>System overview</title>
  <p>Mallob is a C++ application designed for parallel and distributed
  systems between 16 and 10000 cores; it allows resolving propositional
  problems in a (massively) parallel manner. Our SAT solving engine
  scales up to two thousand cores
  (<xref alt="Schreiber &amp; Sanders, 2021" rid="ref-schreiber2021scalable" ref-type="bibr">Schreiber
  &amp; Sanders, 2021</xref>) using a portfolio of established
  sequential SAT solvers
  (<xref alt="Audemard &amp; Simon, 2009" rid="ref-audemard2009predicting" ref-type="bibr">Audemard
  &amp; Simon, 2009</xref>;
  <xref alt="Biere, 2017" rid="ref-biere2017cadical" ref-type="bibr">Biere,
  2017</xref>;
  <xref alt="Biere et al., 2020" rid="ref-biere2020cadical" ref-type="bibr">Biere
  et al., 2020</xref>) and a careful exchange of information among them.
  Our submissions of Mallob to the International SAT Competitions
  (<xref alt="Schreiber, 2020" rid="ref-schreiber2020engineering" ref-type="bibr">Schreiber,
  2020</xref>,
  <xref alt="2021b" rid="ref-schreiber2021mallob" ref-type="bibr">2021b</xref>)
  won multiple prizes
  (<xref alt="Balyo et al., 2021" rid="ref-balyo2021results" ref-type="bibr">Balyo
  et al., 2021</xref>;
  <xref alt="Froleyks et al., 2021" rid="ref-froleyks2021sat" ref-type="bibr">Froleyks
  et al., 2021</xref>). Following this success, Mallob has been referred
  to as “by a <italic>wide</italic> margin, the most powerful SAT solver
  on the planet”
  (<xref alt="B. Cook, 2022" rid="ref-cook2022automated" ref-type="bibr">B.
  Cook, 2022</xref>). Each distributed SAT solving task is malleable,
  allowing users to submit formulae to Mallob at will, with scheduling
  latencies in the range of milliseconds
  (<xref alt="Sanders &amp; Schreiber, 2022b" rid="ref-sanders2022decentralized" ref-type="bibr">Sanders
  &amp; Schreiber, 2022b</xref>). Computational resources are allotted
  proportionally to each job’s priority and also respecting each job’s
  (maximum) demand for resources. Our scheduling approach is fully
  decentralized and uses a small part of each worker’s CPU time (&lt;
  5%) to perform scheduling negotiations. As such, Mallob achieves
  optimal system utilization, i.e., either all processes are utilized or
  all resource demands are fully met. We achieve this feat by arranging
  each active job as a binary tree of workers and growing or shrinking
  each job tree dynamically based on the current system state. For an
  in-depth discussion of these techniques, we refer to Schreiber &amp;
  Sanders
  (<xref alt="2021" rid="ref-schreiber2021scalable" ref-type="bibr">2021</xref>),
  Sanders &amp; Schreiber
  (<xref alt="2022a" rid="ref-sanders2022artifact" ref-type="bibr">2022a</xref>),
  and Sanders &amp; Schreiber
  (<xref alt="2022b" rid="ref-sanders2022decentralized" ref-type="bibr">2022b</xref>).</p>
  <fig>
    <caption><p>Technology stack of
    Mallob.<styled-content id="figU003Amallob-stack"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/mallob_stack.pdf" />
  </fig>
  <p>The further development of Mallob is an ongoing effort. As such, we
  are in the process of integrating engines for NP-hard applications
  beyond SAT, such as k-Means clustering or hierarchical planning, into
  Mallob.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We wish to thank the numerous people whose code we make thankful
  use of, including Balyo et al.
  (<xref alt="2015" rid="ref-balyo2015hordesat" ref-type="bibr">2015</xref>),
  Biere et al.
  (<xref alt="2020" rid="ref-biere2020cadical" ref-type="bibr">2020</xref>),
  Audemard &amp; Simon
  (<xref alt="2009" rid="ref-audemard2009predicting" ref-type="bibr">2009</xref>),
  Eén &amp; Sörensson
  (<xref alt="2003" rid="ref-een2003extensible" ref-type="bibr">2003</xref>),
  Lohmann
  (<xref alt="2022" rid="ref-lohmann2022json" ref-type="bibr">2022</xref>),
  Goetghebuer-Planchon
  (<xref alt="2022" rid="ref-goetghebuer2022implementation" ref-type="bibr">2022</xref>),
  Ankerl
  (<xref alt="2022" rid="ref-ankerl2022robin" ref-type="bibr">2022</xref>),
  and Dusíková
  (<xref alt="2022" rid="ref-dusikova2022compile" ref-type="bibr">2022</xref>).
  The authors gratefully acknowledge the Gauss Centre for Supercomputing
  e.V. (www.gauss-centre.eu) for funding this project by providing
  computing time on the GCS Supercomputer SuperMUC-NG at Leibniz
  Supercomputing Centre (www.lrz.de). Moreover, some of this work was
  performed on the HoreKa supercomputer funded by the Ministry of
  Science, Research and the Arts Baden-Württemberg and by the Federal
  Ministry of Education and Research. This project has received funding
  from the European Research Council (ERC) under the European Union’s
  Horizon 2020 research and innovation programme (grant agreement
  No. 882500).</p>
  <graphic mimetype="image" mime-subtype="jpeg" xlink:href="media/logo_erc_eu_tight.jpg" />
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-audemard2009predicting">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Audemard</surname><given-names>Gilles</given-names></name>
        <name><surname>Simon</surname><given-names>Laurent</given-names></name>
      </person-group>
      <article-title>Predicting learnt clauses quality in modern SAT solvers</article-title>
      <source>International joint conference on artificial intelligence</source>
      <year iso-8601-date="2009">2009</year>
      <fpage>399</fpage>
      <lpage>404</lpage>
    </element-citation>
  </ref>
  <ref id="ref-biere2020cadical">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Biere</surname><given-names>Armin</given-names></name>
        <name><surname>Fazekas</surname><given-names>Katalin</given-names></name>
        <name><surname>Fleury</surname><given-names>Mathias</given-names></name>
        <name><surname>Heisinger</surname><given-names>Maximilian</given-names></name>
      </person-group>
      <article-title>CaDiCaL, kissat, paracooba, plingeling and treengeling entering the SAT competition 2020</article-title>
      <source>SAT Competition 2020</source>
      <year iso-8601-date="2020">2020</year>
      <fpage>50</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-biere2017cadical">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Biere</surname><given-names>Armin</given-names></name>
      </person-group>
      <article-title>Cadical, lingeling, plingeling, treengeling and yalsat entering the SAT competition 2018</article-title>
      <source>SAT Competition</source>
      <year iso-8601-date="2017">2017</year>
      <fpage>14</fpage>
      <lpage>15</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cook1971complexity">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Cook</surname><given-names>Stephen A</given-names></name>
      </person-group>
      <article-title>The complexity of theorem-proving procedures</article-title>
      <source>ACM symposium on theory of computing</source>
      <year iso-8601-date="1971">1971</year>
      <pub-id pub-id-type="doi">10.7551/mitpress/12274.003.0036</pub-id>
      <fpage>151</fpage>
      <lpage>158</lpage>
    </element-citation>
  </ref>
  <ref id="ref-feitelson1997job">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Feitelson</surname><given-names>Dror G</given-names></name>
      </person-group>
      <article-title>Job scheduling in multiprogrammed parallel systems</article-title>
      <publisher-name>Citeseer</publisher-name>
      <year iso-8601-date="1997">1997</year>
    </element-citation>
  </ref>
  <ref id="ref-goldberg2001using">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Goldberg</surname><given-names>Evguenii I</given-names></name>
        <name><surname>Prasad</surname><given-names>Mukul R</given-names></name>
        <name><surname>Brayton</surname><given-names>Robert K</given-names></name>
      </person-group>
      <article-title>Using SAT for combinational equivalence checking</article-title>
      <source>Proceedings design, automation and test in europe. Conference and exhibition 2001</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2001">2001</year>
      <pub-id pub-id-type="doi">10.1109/date.2001.915010</pub-id>
      <fpage>114</fpage>
      <lpage>121</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hamadi2012seven">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hamadi</surname><given-names>Youssef</given-names></name>
        <name><surname>Wintersteiger</surname><given-names>Christoph</given-names></name>
      </person-group>
      <article-title>Seven challenges in parallel SAT solving</article-title>
      <source>Proceedings of the AAAI conference on artificial intelligence</source>
      <year iso-8601-date="2012">2012</year>
      <volume>26</volume>
      <pub-id pub-id-type="doi">10.1609/aimag.v34i2.2450</pub-id>
      <fpage>2120</fpage>
      <lpage>2125</lpage>
    </element-citation>
  </ref>
  <ref id="ref-heule2016solving">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Heule</surname><given-names>Marijn JH</given-names></name>
        <name><surname>Kullmann</surname><given-names>Oliver</given-names></name>
        <name><surname>Marek</surname><given-names>Victor W</given-names></name>
      </person-group>
      <article-title>Solving and verifying the boolean pythagorean triples problem via cube-and-conquer</article-title>
      <source>International conference on theory and applications of satisfiability testing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-40970-2_15</pub-id>
      <fpage>228</fpage>
      <lpage>245</lpage>
    </element-citation>
  </ref>
  <ref id="ref-buning2019using">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kleine-Büning</surname><given-names>Marko</given-names></name>
        <name><surname>Balyo</surname><given-names>Tomáš</given-names></name>
        <name><surname>Sinz</surname><given-names>Carsten</given-names></name>
      </person-group>
      <article-title>Using DimSpec for bounded and unbounded software model checking</article-title>
      <source>International conference on formal engineering methods</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <pub-id pub-id-type="doi">10.1007/978-3-030-32409-4_2</pub-id>
      <fpage>19</fpage>
      <lpage>35</lpage>
    </element-citation>
  </ref>
  <ref id="ref-froleyks2021sat">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Froleyks</surname><given-names>Nils</given-names></name>
        <name><surname>Heule</surname><given-names>Marijn</given-names></name>
        <name><surname>Iser</surname><given-names>Markus</given-names></name>
        <name><surname>Järvisalo</surname><given-names>Matti</given-names></name>
        <name><surname>Suda</surname><given-names>Martin</given-names></name>
      </person-group>
      <article-title>SAT competition 2020</article-title>
      <source>Artificial Intelligence</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>301</volume>
      <pub-id pub-id-type="doi">10.1016/j.artint.2021.103572</pub-id>
      <fpage>103572</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-balyo2021results">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Balyo</surname><given-names>Tomáš</given-names></name>
        <name><surname>Froleyks</surname><given-names>Nils</given-names></name>
        <name><surname>Heule</surname><given-names>Marijn JH</given-names></name>
        <name><surname>Iser</surname><given-names>Markus</given-names></name>
        <name><surname>Järvisalo</surname><given-names>Matti</given-names></name>
        <name><surname>Suda</surname><given-names>Martin</given-names></name>
      </person-group>
      <article-title>The results of SAT competition 2021</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://satcompetition.github.io/2021/slides/ISC2021-fixed.pdf</uri>
    </element-citation>
  </ref>
  <ref id="ref-massacci2000logical">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Massacci</surname><given-names>Fabio</given-names></name>
        <name><surname>Marraro</surname><given-names>Laura</given-names></name>
      </person-group>
      <article-title>Logical cryptanalysis as a SAT problem</article-title>
      <source>Journal of Automated Reasoning</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2000">2000</year>
      <volume>24</volume>
      <issue>1</issue>
      <fpage>165</fpage>
      <lpage>203</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sanders2022artifact">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sanders</surname><given-names>Peter</given-names></name>
        <name><surname>Schreiber</surname><given-names>Dominik</given-names></name>
      </person-group>
      <article-title>Artifact and instructions to generate experimental results for the Euro-Par 2022 paper: “Decentralized Online Scheduling of Malleable NP-hard Jobs”</article-title>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.6084/m9.figshare.20000642</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-sanders2022decentralized">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Sanders</surname><given-names>Peter</given-names></name>
        <name><surname>Schreiber</surname><given-names>Dominik</given-names></name>
      </person-group>
      <article-title>Decentralized online scheduling of malleable NP-hard jobs</article-title>
      <source>European international conference on parallel processing</source>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-schreiber2021lilotane">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schreiber</surname><given-names>Dominik</given-names></name>
      </person-group>
      <article-title>Lilotane: A lifted SAT-based approach to hierarchical planning</article-title>
      <source>Journal of Artificial Intelligence Research</source>
      <year iso-8601-date="2021">2021</year>
      <volume>70</volume>
      <pub-id pub-id-type="doi">10.1613/jair.1.12520</pub-id>
      <fpage>1117</fpage>
      <lpage>1181</lpage>
    </element-citation>
  </ref>
  <ref id="ref-schreiber2021scalable">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Schreiber</surname><given-names>Dominik</given-names></name>
        <name><surname>Sanders</surname><given-names>Peter</given-names></name>
      </person-group>
      <article-title>Scalable SAT solving in the cloud</article-title>
      <source>International conference on theory and applications of satisfiability testing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.1007/978-3-030-80223-3_35</pub-id>
      <fpage>518</fpage>
      <lpage>534</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cook2022automated">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Cook</surname><given-names>Byron</given-names></name>
      </person-group>
      <article-title>Automated reasoning’s scientific frontiers</article-title>
      <publisher-name>Amazon Science</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.amazon.science/blog/automated-reasonings-scientific-frontiers</uri>
    </element-citation>
  </ref>
  <ref id="ref-dusikova2022compile">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Dusíková</surname><given-names>Hana</given-names></name>
      </person-group>
      <article-title>Compile time regular expressions</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/hanickadot/compile-time-regular-expressions</uri>
    </element-citation>
  </ref>
  <ref id="ref-ankerl2022robin">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Ankerl</surname><given-names>Martin</given-names></name>
      </person-group>
      <article-title>robin_hood unordered map &amp; set</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/martinus/robin-hood-hashing</uri>
    </element-citation>
  </ref>
  <ref id="ref-goetghebuer2022implementation">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Goetghebuer-Planchon</surname><given-names>Thibaut</given-names></name>
      </person-group>
      <article-title>A C++ implementation of a fast hash map and hash set using robin hood hashing</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/Tessil/robin-map</uri>
    </element-citation>
  </ref>
  <ref id="ref-lohmann2022json">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Lohmann</surname><given-names>Niels</given-names></name>
      </person-group>
      <article-title>JSON for modern C++</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/nlohmann/json</uri>
    </element-citation>
  </ref>
  <ref id="ref-balyo2015hordesat">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Balyo</surname><given-names>Tomáš</given-names></name>
        <name><surname>Sanders</surname><given-names>Peter</given-names></name>
        <name><surname>Sinz</surname><given-names>Carsten</given-names></name>
      </person-group>
      <article-title>Hordesat: A massively parallel portfolio SAT solver</article-title>
      <source>International conference on theory and applications of satisfiability testing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-24318-4_12</pub-id>
      <fpage>156</fpage>
      <lpage>172</lpage>
    </element-citation>
  </ref>
  <ref id="ref-een2003extensible">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Eén</surname><given-names>Niklas</given-names></name>
        <name><surname>Sörensson</surname><given-names>Niklas</given-names></name>
      </person-group>
      <article-title>An extensible SAT-solver</article-title>
      <source>International conference on theory and applications of satisfiability testing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2003">2003</year>
      <pub-id pub-id-type="doi">10.1007/978-3-540-24605-3_37</pub-id>
      <fpage>502</fpage>
      <lpage>518</lpage>
    </element-citation>
  </ref>
  <ref id="ref-schreiber2020engineering">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schreiber</surname><given-names>Dominik</given-names></name>
      </person-group>
      <article-title>Engineering HordeSat towards malleability: Mallob-mono in the SAT 2020 cloud track</article-title>
      <source>SAT Competition 2020</source>
      <year iso-8601-date="2020">2020</year>
      <fpage>45</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-schreiber2021mallob">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schreiber</surname><given-names>Dominik</given-names></name>
      </person-group>
      <article-title>Mallob in the SAT competition 2021</article-title>
      <source>SAT Competition 2021</source>
      <year iso-8601-date="2021">2021</year>
      <fpage>38</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
