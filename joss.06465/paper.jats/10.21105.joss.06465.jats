<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6465</article-id>
<article-id pub-id-type="doi">10.21105/joss.06465</article-id>
<title-group>
<article-title>pyGCodeDecode: A Python package for time-accurate GCode
simulation in material extrusion processes</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0008-8663-8721</contrib-id>
<name>
<surname>Knirsch</surname>
<given-names>Jonathan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2575-4752</contrib-id>
<name>
<surname>Frölich</surname>
<given-names>Felix</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-4931-2409</contrib-id>
<name>
<surname>Hof</surname>
<given-names>Lukas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8693-7264</contrib-id>
<name>
<surname>Wittemann</surname>
<given-names>Florian</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6534-6518</contrib-id>
<name>
<surname>Kärger</surname>
<given-names>Luise</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Institute of Vehicle System Technology - Lightweight
Engineering, Karlsruhe Institute of Technology (KIT), Rintheimer
Querallee 2, Karlsruhe, 76131, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-08-21">
<day>21</day>
<month>8</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>99</issue>
<fpage>6465</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>GCode</kwd>
<kwd>Simulation</kwd>
<kwd>Material Extrusion</kwd>
<kwd>Fused Filament Fabrication</kwd>
<kwd>Fused Deposition Modeling</kwd>
<kwd>Additive Manufacturing</kwd>
<kwd>3D Printing</kwd>
<kwd>Machine Code</kwd>
<kwd>Firmware</kwd>
<kwd>FFF</kwd>
<kwd>FDM</kwd>
<kwd>MEX</kwd>
<kwd>Process Simulation</kwd>
<kwd>Engineering</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Machine instructions for material extrusion processes (MEX),
  such as the fused filament fabrication (FFF) process, are typically
  provided as GCode, which can be generated by a variety of slicer
  programs. The 3D model of the part is sliced into multiple layers and
  a tool path is created for each according to the parameters for
  infill, perimeters supports and other structures
  (<xref alt="Gibson et al., 2021" rid="ref-GibsonU003A2021" ref-type="bibr">Gibson
  et al., 2021</xref>). The exported GCode consists of a list of
  commands specifying target points in space for the tool as well as the
  amount of material to be extruded. Additionally, process parameters
  such as temperatures, velocities or cooling fan speeds are set and
  changed during printing according to the GCode.</p>
  <p>However, the GCode itself does not accurately reflect the eventual
  printing process. It is interpreted by the printer’s firmware that
  plans the trajectory taking into account the machine’s limitations. In
  particular, the specified maximum printing speed, acceleration and
  jerk have an influence on the resulting path velocities. These
  influence both the mechanical properties such as the resulting
  crystallinity when processing semi-crystalline thermoplastics
  (<xref alt="Luzanin et al., 2019" rid="ref-LuzaninU003A2019" ref-type="bibr">Luzanin
  et al., 2019</xref>) and the tensile strength or surface roughness
  (<xref alt="Altan et al., 2018" rid="ref-AltanU003A2018" ref-type="bibr">Altan
  et al., 2018</xref>). The direct influence of firmware parameters such
  as “jerk settings” and acceleration on surface roughness was also
  shown in
  (<xref alt="Yadav et al., 2023" rid="ref-YadavU003A2023" ref-type="bibr">Yadav
  et al., 2023</xref>). This means that print results and print times
  for the same GCode path can vary when using different printers, even
  if many printers use similar firmware.</p>
  <p>Setting a higher target printing velocity on a machine with
  insufficient acceleration capabilities will lead to a large difference
  between target and actual printing velocity as illustrated in
  <xref alt="[fig:acc_comp]" rid="figU003Aacc_comp">[fig:acc_comp]</xref>.
  This can lead to unexpected behavior and a slower print than
  anticipated. Many slicers will predict the progression of the print
  but these predictions might deviate significantly from the actual
  process. A good understanding and accurate modeling of trajectory
  behaviors can contribute significantly to the improvement of slicing
  algorithms and printer hardware through the virtual evaluation of
  GCode. In addition, modeling of those behaviors enables more accurate
  virtual replication of the process through process simulations such as
  thermomechanical modeling and small-scale fluid simulations.
  <sc>pyGCodeDecode</sc> is a Python package for GCode interpretation
  and MEX Firmware simulation. The package was developed to enable
  researchers and users to better understand time-dependent process
  variables and enable a more accurate study of the printing
  process.</p>
  <fig>
    <caption><p>Printing velocity of the raw GCode (left) in comparison
    to the printing velocity with simulated acceleration (right).
    <styled-content id="figU003Aacc_comp"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="comparison.png" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>There are several software tools to visualize GCode file data. For
  example, in various slicer programs such as <sc>Prusa Slicer</sc>
  (<xref alt="Prusa Research a.s., 2024" rid="ref-prusa_slicer" ref-type="bibr">Prusa
  Research a.s., 2024</xref>) or <sc>Cura</sc>
  (<xref alt="Ultimaker B.V., 2023" rid="ref-cura" ref-type="bibr">Ultimaker
  B.V., 2023</xref>), but also in web applications and printer control
  applications such as <sc>Octoprint</sc>
  (<xref alt="Gina Häußge, 2023" rid="ref-octoprint" ref-type="bibr">Gina
  Häußge, 2023</xref>), <sc>Repetier-Host</sc>
  (<xref alt="Hot-World GmbH &amp; Co. KG, 2024" rid="ref-repetier_host" ref-type="bibr">Hot-World
  GmbH &amp; Co. KG, 2024</xref>), <sc>NC Viewer</sc>
  (<xref alt="Xander Luciano, 2018" rid="ref-ncviewer" ref-type="bibr">Xander
  Luciano, 2018</xref>) or <sc>gCode Viewer</sc>
  (<xref alt="Alex Ustyantsev, 2020" rid="ref-gcodeviewer" ref-type="bibr">Alex
  Ustyantsev, 2020</xref>). These tools can read the position of the
  GCode coordinates and interpolate between the points to create motion
  paths. It is possible to distinguish between printing and traversing
  motions to preview the part. The additional information in the GCode,
  such as target print speed or temperature, can also be displayed in
  most cases. However, currently available tools are unable to
  accurately simulate the behavior of the printer, including
  acceleration and deceleration. This can lead to inaccurate time
  predictions and potentially undetected deviations from expected
  process conditions.</p>
  <p>The variety of software tools available underscores the importance
  of being able to analyze the GCode. In addition, the constant and
  rapid advancement of printing technologies requires a deeper
  understanding of printer-specific process conditions, which must take
  into account hardware and firmware limitations. To fill this gap,
  <sc>pyGCodeDecode</sc> has been developed as an open source firmware
  simulation tool. It enables more detailed and accurate simulation
  models for MEX-based processes by taking into account the behavior of
  the firmware.</p>
</sec>
<sec id="methodology">
  <title>Methodology</title>
  <p><sc>pyGCodeDecode’s</sc> class-based structure and separation of
  modules allow for simple and extensive modifications or additions. Its
  GCode parser transfers individual commands into a state class
  containing every command’s parameters as well as the GCode history and
  user-set firmware parameters. Most printers use a trapezoidal velocity
  profile for each move which is constrained by its entry, target and
  exit velocities, as well as the maximum acceleration. While the
  maximum acceleration and target velocity are configured in the
  firmware settings and the GCode respectively, the entry and exit
  velocities are calculated using a variety of different cornering
  algorithms. Usually some limited instantaneous change in velocity is
  allowed, while taking the change in travel direction into account.
  Smaller changes in direction generally require less reduction in
  travel speed. <sc>pyGCodeDecode</sc> provides models of cornering
  algorithms for several firmwares. They are implemented as classes
  according to the respective documentation, e.g., <sc>Marlin</sc>
  classic jerk, <sc>Marlin</sc> junction deviation and <sc>Klipper</sc>
  (<xref alt="Jeon, 2021" rid="ref-grbl" ref-type="bibr">Jeon,
  2021</xref>;
  <xref alt="Klipper3d, 2023" rid="ref-klipper_doc" ref-type="bibr">Klipper3d,
  2023</xref>;
  <xref alt="Lahteine, 2024b" rid="ref-marlin" ref-type="bibr">Lahteine,
  2024b</xref>,
  <xref alt="2024a" rid="ref-marlin_doc" ref-type="bibr">2024a</xref>).
  The junction velocities are calculated using the selected cornering
  algorithm. Then the trajectory modeling connects all states by
  planning accelerating, constant velocity, and decelerating segments
  matching the junction velocities. This is achieved by solving the
  equations of the surface area under the trapezoidal velocity profile
  shown in
  <xref alt="[fig:trapezoid]" rid="figU003Atrapezoid">[fig:trapezoid]</xref>
  for the missing parameters.</p>
  <fig>
    <caption><p>Trapezoidal velocity
    profile.<styled-content id="figU003Atrapezoid"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="trapezoid_profile_render.svg" />
  </fig>
  <p>Using <disp-formula><alternatives>
  <tex-math><![CDATA[
  S = S_{\mathrm{acc}} + S_{\mathrm{const}} + S_{\mathrm{dec},} \tag{1}
  ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></disp-formula>
  the sum of all segment distances is the total planner block distance
  <inline-formula><alternatives>
  <tex-math><![CDATA[S]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>S</mml:mi></mml:math></alternatives></inline-formula>.
  The individual distances for linear acceleration
  <inline-formula><alternatives>
  <tex-math><![CDATA[S_{\mathrm{acc}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>,
  constant velocity <inline-formula><alternatives>
  <tex-math><![CDATA[S_{\mathrm{const}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  and deceleration <inline-formula><alternatives>
  <tex-math><![CDATA[S_{\mathrm{dec}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  are given by <disp-formula><alternatives>
  <tex-math><![CDATA[
  S_{\mathrm{acc}} = \frac{1}{2} (v_{\mathrm{const}} + v_{\mathrm{0}}) \Delta t_{\mathrm{acc}} \tag{2}
  ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:mfrac><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn mathvariant="normal">0</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>Δ</mml:mi><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></disp-formula>
  <disp-formula><alternatives>
  <tex-math><![CDATA[
  S_{\mathrm{const}} =  v_{\mathrm{const}} \Delta t_{\mathrm{const}} \tag{3}
  ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mi>Δ</mml:mi><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></disp-formula>
  <disp-formula><alternatives>
  <tex-math><![CDATA[
  S_{\mathrm{dec}} = \frac{1}{2} (v_{\mathrm{1}} + v_{\mathrm{const}}) \Delta t_{\mathrm{dec}}. \tag{4}
  ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:mfrac><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn mathvariant="normal">1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>Δ</mml:mi><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula>
  With the initial velocity <inline-formula><alternatives>
  <tex-math><![CDATA[v_{\mathrm{0}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>v</mml:mi><mml:mn mathvariant="normal">0</mml:mn></mml:msub></mml:math></alternatives></inline-formula>,
  the target velocity <inline-formula><alternatives>
  <tex-math><![CDATA[v_{\mathrm{const}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  and ending velocity <inline-formula><alternatives>
  <tex-math><![CDATA[v_{\mathrm{1}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>v</mml:mi><mml:mn mathvariant="normal">1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
  of the planner block given and using a constant printing acceleration
  <inline-formula><alternatives>
  <tex-math><![CDATA[a]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>a</mml:mi></mml:math></alternatives></inline-formula>
  resp. corresponding deceleration <inline-formula><alternatives>
  <tex-math><![CDATA[-a]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>−</mml:mi><mml:mi>a</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
  one can solve for the acceleration time <inline-formula><alternatives>
  <tex-math><![CDATA[t_{\mathrm{acc}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>,
  the constant velocity time <inline-formula><alternatives>
  <tex-math><![CDATA[t_{\mathrm{const}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  and the deceleration time <inline-formula><alternatives>
  <tex-math><![CDATA[t_{\mathrm{dec}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">c</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  to construct the trapezoid. In the simplest case, the planner can fit
  a complete trapezoid to the boundary conditions. Since real life GCode
  is often finely discretized, especially for curved surfaces this is
  not always possible and <inline-formula><alternatives>
  <tex-math><![CDATA[v_{\mathrm{const}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">c</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:mi mathvariant="normal">n</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
  or <inline-formula><alternatives>
  <tex-math><![CDATA[v_{\mathrm{1}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>v</mml:mi><mml:mn mathvariant="normal">1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
  cannot be reached with the given acceleration settings. In these
  cases, the parameters which are being solved change accordingly and
  the velocity profile is truncated. The junction velocities in corners
  are calculated with the junction deviation model based on the specific
  firmware implementation. All segments of a single move are stored
  together with its enclosing states in a planner block class. The
  package is designed to allow for modifications to both the
  interpretation and trajectory modeling as well as overwriting the
  GCode simulation inputs, e.g., states or acceleration modeling, to
  create parameter studies without much effort.</p>
  <p><sc>pyGCodeDecode</sc> provides examples for simple GCode analysis
  with 3D color plots of the trajectory and velocity using
  <sc>pyVista</sc> or visualizing the axis velocities and positions in
  <sc>Matplotlib</sc>. Moreover, it is also possible to generate an
  input file for the “AM Modeler” plug-in for the finite element
  analysis software <sc>Abaqus</sc> to use the real process conditions
  in a process simulation.</p>
</sec>
<sec id="validation">
  <title>Validation</title>
  <p><sc>pyGCodeDecode</sc> has been validated with experiments on a FFF
  printer running a <sc>Marlin</sc> derived firmware by Prusa (Prusa
  Mini). In order to measure the accuracy of the simulation, a test
  GCode containing a simple repeating triangular path has been chosen to
  emulate a printed layer. After each layer, a layer change is simulated
  by moving the Z-Axis.The time was measured for each layer using a
  camera by analyzing the footage. By changing the “jerk setting” in the
  firmware through a GCode command, this test pattern can validate the
  simulation for several different configurations. In
  <xref alt="[fig:validation]" rid="figU003Avalidation">[fig:validation]</xref>
  the layer duration is plotted over different jerk values ranging from
  one to 30 mm/s, which is equal to the target velocity set in the test
  GCode.</p>
  <fig>
    <caption><p>Validation of the simulation by measuring layer
    duration.<styled-content id="figU003Avalidation"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="plot.svg" />
  </fig>
  <p>For the chosen case the layer duration is highly dependant on the
  set jerk values. For jerk values equal to the target printing
  velocity, the calculated time is expected to approach a constant
  velocity solution calculated analytically. Therefore, the acceleration
  and cornering algorithms have no influence on the print time of a
  layer. This case represents the current state of the art, in which no
  further modeling is done. A comparison between state of the art and
  the modeled solution is shown in
  <xref alt="[fig:acc_comp]" rid="figU003Aacc_comp">[fig:acc_comp]</xref>.
  For jerk values close to zero, the printer is expected to slow almost
  to a full stop for each turn in the path. This result is similar to
  the simplest velocity trapezoid where entry and exit velocities are
  zero. The layer time for this edge case was validated by an analytical
  calculation. The comparison to experimental data for jerk values
  between these edge cases shows that the implemented cornering
  algorithm models the Prusa Mini firmware behavior well. The maximum
  discrepancy in layer time between the experiment and the simulation is
  <inline-formula><alternatives>
  <tex-math><![CDATA[0.9 \%]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>0.9</mml:mn><mml:mi>%</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  observed for a jerk value of <inline-formula><alternatives>
  <tex-math><![CDATA[15 \mathrm{\frac{mm}{s}}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>15</mml:mn><mml:mfrac><mml:mrow><mml:mi mathvariant="normal">m</mml:mi><mml:mi mathvariant="normal">m</mml:mi></mml:mrow><mml:mi mathvariant="normal">s</mml:mi></mml:mfrac></mml:mrow></mml:math></alternatives></inline-formula>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank the Baden-Württemberg Ministry of Science, Research and
  the Arts (MWK) for the funding the projects “Efficient process design
  for the processing of polylactide (PLA) in fused filament fabrication
  (F³FastSim)” and “Basics of a remanufacturing process chain for
  functional, hybridized polymer components to increase reusability and
  optimize resource utilization (Restore)” as part of the
  InnovationCampus Future Mobility (ICM) in which this work was carried
  out, as well as the German Research Foundation (DFG) for funding the
  professorship of Prof. Kärger’s Heisenberg professorship.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-grbl">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Jeon</surname><given-names>Sungeun K.</given-names></name>
      </person-group>
      <article-title>GRBL firmware</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/grbl/grbl</uri>
    </element-citation>
  </ref>
  <ref id="ref-marlin">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Lahteine</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>Marlin firmware</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/MarlinFirmware/Marlin</uri>
    </element-citation>
  </ref>
  <ref id="ref-marlin_doc">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lahteine</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>Marlin documentation</article-title>
      <source></source>
      <year iso-8601-date="2024">2024</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-04-09">2024</year><month>04</month><day>09</day></date-in-citation>
      <uri>https://marlinfw.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-klipper_doc">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Klipper3d</surname></name>
      </person-group>
      <article-title>Klipper documentation</article-title>
      <source></source>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-04-09">2024</year><month>04</month><day>09</day></date-in-citation>
      <uri>https://www.klipper3d.org/Kinematics.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-GibsonU003A2021">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Gibson</surname><given-names>Ian</given-names></name>
        <name><surname>Rosen</surname><given-names>David</given-names></name>
        <name><surname>Stucker</surname><given-names>Brent</given-names></name>
        <name><surname>Khorasani</surname><given-names>Mahyar</given-names></name>
      </person-group>
      <source>Additive Manufacturing Technologies - Chapter 6: Material Extrusion</source>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham, Switzerland</publisher-loc>
      <year iso-8601-date="2021">2021</year>
      <edition>3</edition>
      <isbn>978-3-030-56126-0</isbn>
      <uri>https://link.springer.com/10.1007/978-3-030-56127-7</uri>
      <pub-id pub-id-type="doi">10.1007/978-3-030-56127-7</pub-id>
      <fpage>171</fpage>
      <lpage>200</lpage>
    </element-citation>
  </ref>
  <ref id="ref-YadavU003A2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yadav</surname><given-names>Krishna</given-names></name>
        <name><surname>Rohilla</surname><given-names>Shivam</given-names></name>
        <name><surname>Ali</surname><given-names>Arshad</given-names></name>
        <name><surname>Yadav</surname><given-names>Mohit</given-names></name>
        <name><surname>Chhabra</surname><given-names>Deepak</given-names></name>
      </person-group>
      <article-title>Effect of Speed, Acceleration, and Jerk on Surface Roughness of FDM-Fabricated Parts</article-title>
      <source>Journal of Materials Engineering and Performance</source>
      <year iso-8601-date="2023">2023</year>
      <issn>1544-1024</issn>
      <uri>https://doi.org/10.1007/s11665-023-08476-2</uri>
      <pub-id pub-id-type="doi">10.1007/s11665-023-08476-2</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-LuzaninU003A2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Luzanin</surname><given-names>Ognjan</given-names></name>
        <name><surname>Movrin</surname><given-names>Dejan</given-names></name>
        <name><surname>Stathopoulos</surname><given-names>Vassilis</given-names></name>
        <name><surname>Pandis</surname><given-names>Pavlos</given-names></name>
        <name><surname>Radusin</surname><given-names>Tanja</given-names></name>
        <name><surname>Guduric</surname><given-names>Vera</given-names></name>
      </person-group>
      <article-title>Impact of processing parameters on tensile strength, in-process crystallinity and mesostructure in FDM-fabricated PLA specimens</article-title>
      <source>Rapid Prototyping Journal</source>
      <year iso-8601-date="2019">2019</year>
      <volume>25</volume>
      <issue>8</issue>
      <pub-id pub-id-type="doi">10.1108/RPJ-12-2018-0316</pub-id>
      <fpage>1398</fpage>
      <lpage>1410</lpage>
    </element-citation>
  </ref>
  <ref id="ref-AltanU003A2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Altan</surname><given-names>Mirigul</given-names></name>
        <name><surname>Eryildiz</surname><given-names>Meltem</given-names></name>
        <name><surname>Gumus</surname><given-names>Beril</given-names></name>
        <name><surname>Kahraman</surname><given-names>Yusuf</given-names></name>
      </person-group>
      <article-title>Effects of process parameters on the quality of PLA products fabricated by fused deposition modeling (FDM): Surface roughness and tensile strength</article-title>
      <source>Materials Testing</source>
      <publisher-name>Walter de Gruyter GmbH</publisher-name>
      <year iso-8601-date="2018-05">2018</year><month>05</month>
      <volume>60</volume>
      <issue>5</issue>
      <issn>0025-5300</issn>
      <pub-id pub-id-type="doi">10.3139/120.111178</pub-id>
      <fpage>471</fpage>
      <lpage>477</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cura">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Ultimaker B.V.</string-name>
      </person-group>
      <article-title>Ultimaker Cura</article-title>
      <year iso-8601-date="2023-07">2023</year><month>07</month>
      <uri>https://github.com/Ultimaker/Cura</uri>
    </element-citation>
  </ref>
  <ref id="ref-prusa_slicer">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Prusa Research a.s.</string-name>
      </person-group>
      <article-title>PrusaSlicer</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/prusa3d/PrusaSlicer</uri>
    </element-citation>
  </ref>
  <ref id="ref-octoprint">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Gina Häußge</string-name>
      </person-group>
      <article-title>OctoPrint</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/OctoPrint/OctoPrint</uri>
    </element-citation>
  </ref>
  <ref id="ref-ncviewer">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Xander Luciano</string-name>
      </person-group>
      <article-title>NC Viewer</article-title>
      <year iso-8601-date="2018">2018</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-04-09">2024</year><month>04</month><day>09</day></date-in-citation>
      <uri>https://ncviewer.com/</uri>
    </element-citation>
  </ref>
  <ref id="ref-gcodeviewer">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Alex Ustyantsev</string-name>
      </person-group>
      <article-title>gCodeViewer</article-title>
      <year iso-8601-date="2020">2020</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-04-09">2024</year><month>04</month><day>09</day></date-in-citation>
      <uri>https://gcode.ws/</uri>
    </element-citation>
  </ref>
  <ref id="ref-repetier_host">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Hot-World GmbH &amp; Co. KG</string-name>
      </person-group>
      <article-title>Repetier-Host</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://www.repetier.com/</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
