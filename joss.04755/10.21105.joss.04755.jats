<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4755</article-id>
<article-id pub-id-type="doi">10.21105/joss.04755</article-id>
<title-group>
<article-title>Fastsubtrees: simple and efficient subtrees extractions
in Python with applications to NCBI taxonomy</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">0000-0002-9843-7133</contrib-id>
<name>
<surname>Modi</surname>
<given-names>Aman</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0003-3900-5397</contrib-id>
<name>
<surname>Gonnella</surname>
<given-names>Giorgio</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Bioinformatics (IMG), University of
Göttingen, Göttingen, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Center for Bioinformatics (ZBH), University of Hamburg,
Hamburg, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-07-08">
<day>8</day>
<month>7</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>79</issue>
<fpage>4755</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>tree</kwd>
<kwd>subtrees extraction</kwd>
<kwd>bioinformatics</kwd>
<kwd>taxonomy</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Tree data structures are commonly used for representing
  hierarchical data. A prominent example in bioinformatics are taxonomic
  trees, representing the biological classification of organisms,
  currently containing millions of nodes. An interesting operation for
  such trees is the extraction of the IDs and other associated values
  for each node in a given subtree. Here we present
  <italic>fastsubtrees</italic>, a Python package which provides a
  simple and efficient way to perform this operation, by storing the
  tree data in a suitable representation. The package provides a command
  line interface and a application programming interface. While the
  software is written in a generic way and can be applied to other trees
  as well, it is mainly aimed at working with the NCBI taxonomy
  tree.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Tree data structures are commonly used in different fields of
  computer science to represent hierarchical information
  (<xref alt="Knuth, 1997" rid="ref-KnuthU003A1997" ref-type="bibr">Knuth,
  1997</xref>). In phylogenetics, trees are used to represent the common
  ancestry of organisms or macromolecules. Based on phylogenetics is the
  hierarchical biological classification of organisms, which is also
  representable as a tree. An example of this is the NCBI taxonomy
  database
  (<xref alt="Schoch et al., 2020" rid="ref-SchochU003A2020" ref-type="bibr">Schoch
  et al., 2020</xref>).</p>
  <p>If the taxonomic tree is annotated with data associated to taxa,
  hereafter called <italic>attributes</italic> (e.g. sequence or
  annotation statistics), an interesting operation is the extraction of
  the values distribution of an attribute in a given subtree, or in
  multiple subtrees, which are compared to each other. This, for
  instance, allows for the identification of uncommon values in some
  members of a taxon, which in turn can be used in a primer for new
  biological hypotheses.</p>
  <p>No package currently allows for a simple and efficient extraction
  of a subtree, including data associated with the subtree nodes. While
  software exists for visualizing data associated with phylogenetic or
  taxonomic subtrees, e.g. AnnoTree
  (<xref alt="Mendler et al., 2019" rid="ref-MendlerU003A2019" ref-type="bibr">Mendler
  et al., 2019</xref>) and Treehouse
  (<xref alt="Steenwyk &amp; Rokas, 2019" rid="ref-SteenwykU003A2019" ref-type="bibr">Steenwyk
  &amp; Rokas, 2019</xref>), these are standalone software not simple to
  integrate in other applications.</p>
</sec>
<sec id="the-fastsubtrees-python-package">
  <title>The fastsubtrees Python package</title>
  <p>Here we present the <italic>fastsubtrees</italic> Python package
  which was developed for storing tree information using a compact
  representation, suitable for fast extraction of any subtree. This
  package can be applied to any tree in which the nodes are labeled by
  non-negative integers. Although it was designed and tested mainly for
  the NCBI taxonomy tree, it is thus not limited to it.</p>
  <p>It can be installed using
  <monospace>pip install fastsubtrees</monospace>. The package
  functionality can be used through either a command line script or an
  API, which can be employed from other Python programs. Manuals are
  provided for both kind of interfaces. A complete test suite based on
  <italic>pytest</italic> is provided. Running the complete tests,
  comparative benchmarks and the example application (see below)
  requires a database installation and setup; however, a Docker image is
  provided, which allows to simply run benchmarks, tests and the example
  application without this hassle.</p>
  <p>The first step when using <italic>fastsubtrees</italic> is
  constructing its tree representation and storing it to file. Any
  source can be used as input (e.g. tabular files, or database tables)
  by defining a generation function (examples are provided). A separate
  wrapper package <italic>ntsubtree</italic>, installable by
  <monospace>pip install ntsubtree</monospace>, is provided (version
  1.1; directory <monospace>ntsubtree</monospace> of the source code
  repository), which simplifies working with the NCBI taxonomy tree.
  Besides the NCBI taxonomy tree, other trees can be represented using
  <italic>fastsubtrees</italic>. For this, each node must be labeled by
  a unique non-negative integer ID. Furthermore, the IDs space must be
  compact, i.e. the numbers must not be necessarily all consecutive, but
  the largest node ID (<italic>idmax</italic>) should not be much larger
  than the total number of nodes, because the memory consumption is in
  <italic>O(idmax)</italic>.</p>
  <p>In the tree representation, the node numbers and the subtree sizes
  under each node are stored in depth-first traversal order.
  Furthermore, an index table is provided which gives the ordinal
  position of each node in the depth-first representation. Finally, any
  number of numerical or string attributes can be associated to the
  nodes: these are stored in separate files, in the same order as the
  node identifiers. Thus, from the tree representation, any node and its
  associated data can be found in constant time and the subtree under a
  node can be output in time proportional to the subtree size. The
  representation is dynamic, i.e. it is possible to add and remove
  subtrees.</p>
</sec>
<sec id="subtree-extraction-benchmarks">
  <title>Subtree extraction benchmarks</title>
  <p>Benchmarks were performed on a MacBook Pro 2021 with an Apple M1
  Pro CPU and 32 GB RAM. Running times were measured as an average of 3
  runs using GNU time version 1.9
  (<xref alt="Gordon, 2018" rid="ref-GNUtime" ref-type="bibr">Gordon,
  2018</xref>). Thereby, CPU time was computed as the sum of user and
  system time. For the tests Python version 3.10.2 was used. The tested
  version of <italic>fastsubtrees</italic> was 2.1.</p>
  <p>The NCBI taxonomy tree used for the tests was downloaded on October
  7, 2022 from the NCBI FTP website
  (<xref alt="NCBI, 2022" rid="ref-NCBIU003AFTP" ref-type="bibr">NCBI,
  2022</xref>). For downloading and keeping up-to-date a copy of the
  dump files using Python we developed the <italic>ntdownload</italic>
  package (version 1.7; directory <monospace>ntdownload</monospace> of
  the source code repository) installable using
  <monospace>pip install ntdownload</monospace>. The tree contained
  2447574 nodes. The generation of the tree representation of the NCBI
  taxonomy tree from the dump files using the <italic>fastsubtrees
  construct</italic> command required 12.5 seconds (average of 3
  runs).</p>
  <p>An alternative to the use of <italic>fastsubtrees</italic> is to
  store the tree data in a SQL database and extract subtrees using
  hierarchical SQL queries. We implemented this solution in a package
  <italic>ntmirror</italic> (version 1.4; directory
  <monospace>ntmirror</monospace> of the repository). First, the dump
  data downloaded by <italic>ntdownload</italic> is loaded into a
  MariaDB database (version 10.6.10) using the script
  <italic>ntmirror-dbload</italic>, requiring 28.8 seconds (average of 3
  runs). Thereafter, subtrees are extracted using the script
  <italic>ntmirror-extract-subtree</italic>, based on SQLAlchemy,
  implementing a hierarchical SQL query. The installation of
  <italic>ntmirror</italic> using
  <monospace>pip install ntmirror</monospace> requires the installation
  of MariaDB and its Python connector (<italic>mariadb</italic>
  package).</p>
  <p>To select subtrees of different sizes for the benchmarks, we
  started from the taxonomy ID of <italic>Escherichia coli</italic> K12
  MG1655 (511145) and climbed up the taxonomy tree, including all parent
  nodes in the benchmarks, up to the Bacteria node (TaxID 2), i.e. nodes
  83333 (<italic>Escherichia coli</italic> K12), 562
  (<italic>Escherichia coli</italic>), 561 (<italic>Escherichia</italic>
  genus), 543 (Enterobacteriaceae), 91347 (Enterobacterales), 1236
  (Gammaproteobacteria) and 1224 (Proteobacteria). The running time and
  memory usage of <italic>fastsubtrees</italic> are compared with those
  for hierarchical SQL queries in Table 1, and show that
  <italic>fastsubtrees</italic> scales better to the extraction of large
  subtrees, both in terms of memory consumption (which does not change)
  and running time.</p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="10%" />
        <col width="8%" />
        <col width="10%" />
        <col width="15%" />
        <col width="11%" />
        <col width="16%" />
        <col width="12%" />
        <col width="18%" />
      </colgroup>
      <thead>
        <tr>
          <th>Subtree root ID</th>
          <th>Subtree size</th>
          <th>SQL CPU time (s)</th>
          <th><italic>fastsubtrees</italic> CPU time (s)</th>
          <th>SQL real time (s)</th>
          <th><italic>fastsubtrees</italic> real time (s)</th>
          <th>SQL memory peak (MB)</th>
          <th><italic>fastsubtrees</italic> memory peak (MB)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><italic>setup</italic></td>
          <td></td>
          <td>0.57</td>
          <td>12.47</td>
          <td>28.83</td>
          <td>12.48</td>
          <td>40.7</td>
          <td>153.7</td>
        </tr>
        <tr>
          <td>511145</td>
          <td>1</td>
          <td>0.26</td>
          <td>0.16</td>
          <td>1.58</td>
          <td>0.16</td>
          <td>41.4</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>83333</td>
          <td>36</td>
          <td>0.27</td>
          <td>0.16</td>
          <td>2.55</td>
          <td>0.16</td>
          <td>41.4</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>562</td>
          <td>3381</td>
          <td>0.29</td>
          <td>0.15</td>
          <td>4.64</td>
          <td>0.16</td>
          <td>48.1</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>561</td>
          <td>4436</td>
          <td>0.29</td>
          <td>0.15</td>
          <td>5.73</td>
          <td>0.16</td>
          <td>50.4</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>543</td>
          <td>22750</td>
          <td>0.46</td>
          <td>0.16</td>
          <td>34.26</td>
          <td>0.17</td>
          <td>89.1</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>91347</td>
          <td>31609</td>
          <td>0.54</td>
          <td>0.17</td>
          <td>35.14</td>
          <td>0.18</td>
          <td>106.3</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>1236</td>
          <td>123300</td>
          <td>1.49</td>
          <td>0.21</td>
          <td>58.23</td>
          <td>0.21</td>
          <td>294.8</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>1224</td>
          <td>228153</td>
          <td>2.55</td>
          <td>0.26</td>
          <td>86.53</td>
          <td>0.26</td>
          <td>511.8</td>
          <td>153.1</td>
        </tr>
        <tr>
          <td>2</td>
          <td>535272</td>
          <td>5.59</td>
          <td>0.39</td>
          <td>126.48</td>
          <td>0.40</td>
          <td>1142.0</td>
          <td>153.1</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p>As an example of attributes associated to tree nodes, we computed
  guanine-cytosine (GC) content and genome size for each bacterial
  genome in the NCBI Refseq database
  (<xref alt="O’Leary et al., 2015" rid="ref-OlearyU003A2015" ref-type="bibr">O’Leary
  et al., 2015</xref>). The results, available in the repository,
  contain values for 27967 genomes. The genome size attribute file
  generation, using the <italic>fastsubtrees attribute</italic> command,
  required 2.9 seconds. Table 2 reports the running time and memory
  usage for the extraction of the genome size attribute values for
  different subtrees.</p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="15%" />
        <col width="13%" />
        <col width="13%" />
        <col width="14%" />
        <col width="16%" />
        <col width="20%" />
        <col width="10%" />
      </colgroup>
      <thead>
        <tr>
          <th>Subtree root ID</th>
          <th>Subtree size</th>
          <th>CPU time (s)</th>
          <th>Real time (s)</th>
          <th>Memory peak (MB)</th>
          <th>N. nodes with values</th>
          <th>N. values</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>511145</td>
          <td>1</td>
          <td>0.47</td>
          <td>0.47</td>
          <td>153.1</td>
          <td>1</td>
          <td>9</td>
        </tr>
        <tr>
          <td>83333</td>
          <td>36</td>
          <td>0.47</td>
          <td>0.47</td>
          <td>153.1</td>
          <td>8</td>
          <td>38</td>
        </tr>
        <tr>
          <td>562</td>
          <td>3381</td>
          <td>0.52</td>
          <td>0.52</td>
          <td>153.5</td>
          <td>165</td>
          <td>2160</td>
        </tr>
        <tr>
          <td>561</td>
          <td>4436</td>
          <td>0.50</td>
          <td>0.50</td>
          <td>153.5</td>
          <td>174</td>
          <td>2246</td>
        </tr>
        <tr>
          <td>543</td>
          <td>22750</td>
          <td>0.52</td>
          <td>0.52</td>
          <td>153.6</td>
          <td>839</td>
          <td>5774</td>
        </tr>
        <tr>
          <td>91347</td>
          <td>31609</td>
          <td>0.52</td>
          <td>0.53</td>
          <td>153.7</td>
          <td>1150</td>
          <td>6709</td>
        </tr>
        <tr>
          <td>1236</td>
          <td>123300</td>
          <td>0.63</td>
          <td>0.64</td>
          <td>154.0</td>
          <td>2830</td>
          <td>11178</td>
        </tr>
        <tr>
          <td>1224</td>
          <td>228153</td>
          <td>0.75</td>
          <td>0.75</td>
          <td>154.2</td>
          <td>5099</td>
          <td>16072</td>
        </tr>
        <tr>
          <td>2</td>
          <td>535272</td>
          <td>1.08</td>
          <td>1.08</td>
          <td>155.2</td>
          <td>10043</td>
          <td>27515</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
</sec>
<sec id="parallelizing-the-tree-construction-algorithm">
  <title>Parallelizing the tree construction algorithm</title>
  <p>As seen in the previous section, tree construction is slower than
  the subtree queries, thus it is interesting to analyze this operation
  in detail.</p>
  <p>The tree representation for fast subtree queries requires the
  following arrays: <italic>T</italic>, node IDs in depth-first
  traversal order; <italic>P</italic>, parent of each node, in order of
  ID; <italic>S</italic>, subtree size of each node, in order of ID;
  <italic>C</italic>, coordinate in <italic>T</italic> of each node, in
  order of ID.</p>
  <p>The construction algorithm consists in the following 3
  operations:</p>
  <list list-type="order">
    <list-item>
      <p><italic>P</italic> construction: initialization with
      <italic>undef</italic> values; iteration over the input data,
      2-tuples <italic>(node, parent)</italic> storing
      <italic>parent</italic> at position <italic>node</italic> in
      <italic>P</italic>.</p>
    </list-item>
    <list-item>
      <p><italic>S</italic> construction: for each node, climb to the
      root, using the values in <italic>P</italic> and increment the
      subtree size of each ancestor.</p>
    </list-item>
    <list-item>
      <p><italic>C</italic> and <italic>T</italic> construction: first
      add the tree root data; then for each node, add the node to a
      stack and climb the tree, adding the ancestors to the stack until
      an ancestor which was already added to the tree is found; the
      first free position after this node in <italic>T</italic> is
      located using <italic>C</italic> the data is stored in
      <italic>T</italic> and <italic>C</italic> is updated; this is
      repeated until the stack is empty.</p>
    </list-item>
  </list>
  <p>Given <italic>n</italic> nodes with a maximum ID <italic>m</italic>
  (not much larger than <italic>n</italic>), and a tree height
  <italic>h</italic> (in the worst case <italic>h = m</italic>, however,
  in general it is much smaller), the construction operations require
  the following time. Operation 1 requires iterating over all
  <italic>O(n)</italic> input tuples and initializing <italic>P</italic>
  requires <italic>O(m)</italic>. Thus the total time is in
  <italic>O(m)</italic>. Operation 2 requires climbing the tree from
  each node, thus <italic>O(h)</italic> time for each node, in total
  <italic>O(n * h)</italic>. Operation 3 requires climbing the tree
  again, but this is stopped whenever nodes are found which were already
  added; thus the total time is in this case <italic>O(n)</italic>.</p>
  <p>Since the first and third operations are performed in linear time,
  they are faster than the second. Benchmarks showed that this is indeed
  the bottleneck of the construction. Thus an attempt was made to speed
  up this operation, by parallelizing it. For this, the node IDs are
  divided into <italic>x</italic> slices, each assigned to a different
  sub-process (not thread, because of the Python Global Interpreter
  Lock). Each sub-process then counts nodes in each subtree belonging to
  the slice only. These counts could be stored in a shared subtree sizes
  table, however this requires a semaphore, and it was very slow in our
  tests. Thus, we implemented a version, in which each sub-process
  stores its counts in a local table. The results for each sub-process
  are summed up after completion, to obtain the <italic>S</italic>
  table.</p>
  <p>Despite the distribution of the work among processes, benchmarks
  did not show a significant performance improvement in the parallel
  version for the construction of the NCBI taxonomy tree, likely because
  of the overhead of subprocess starting, data initialization and
  results consolidation.</p>
</sec>
<sec id="example-application-genomes-attributes-viewer">
  <title>Example application: Genomes Attributes Viewer</title>
  <p>To provide an example of usage of <italic>fastsubtrees</italic> we
  implemented an interactive web application, Genomes Attributes Viewer,
  based on the <italic>dash</italic> library version 2.0.0
  (<xref alt="“Dash Python User Guide,” 2022" rid="ref-Dash" ref-type="bibr">“Dash
  Python User Guide,” 2022</xref>) and installable by
  <monospace>pip install genomes-attributes-viewer</monospace>. The
  application (version 1.3; directory
  <italic>genomes_attributes_viewer</italic> of the repository) allows
  displaying diagrams of the value distribution of GC content and genome
  size values in any subtree of the NCBI taxonomy tree (we have included
  in the example only values for bacterial genomes, see above).
  Attribute value distributions for multiple subtrees can be thereby
  compared graphically.</p>
</sec>
<sec id="author-contributions">
  <title>Author Contributions</title>
  <p>Aman Modi: software development, test suite, example application,
  documentation and benchmarks.</p>
  <p>Giorgio Gonnella: funding acquisition, conceptualization, software
  development, test suite, documentation, Docker image, benchmarks,
  project supervision and manuscript redaction.</p>
</sec>
<sec id="funding">
  <title>Funding</title>
  <p>Giorgio Gonnella has been supported by the DFG Grant GO 3192/1-1
  ‘‘Automated characterization of microbial genomes and metagenomes by
  collection and verification of association rules’’. The funders had no
  role in study design, data collection and analysis, decision to
  publish, or preparation of the manuscript.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors would like to thank Serena Lam (Department of
  Bioinformatics, University of Göttingen) for language style
  suggestions and grammar corrections.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-GNUtime">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gordon</surname><given-names>Assaf</given-names></name>
      </person-group>
      <article-title>GNU time</article-title>
      <source>GNU Foundation Website</source>
      <publisher-name>GNU Foundation</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <uri>https://www.gnu.org/software/time/</uri>
    </element-citation>
  </ref>
  <ref id="ref-NCBIU003AFTP">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>NCBI</surname></name>
      </person-group>
      <article-title>NCBI taxonomy FTP site</article-title>
      <source>NCBI</source>
      <publisher-name>NCBI</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/</uri>
    </element-citation>
  </ref>
  <ref id="ref-Dash">
    <element-citation>
      <article-title>Dash Python user guide</article-title>
      <source>Dash Project Website</source>
      <publisher-name>plotly</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://dash.plotly.com/</uri>
    </element-citation>
  </ref>
  <ref id="ref-MendlerU003A2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mendler</surname><given-names>Kerrin</given-names></name>
        <name><surname>Chen</surname><given-names>Han</given-names></name>
        <name><surname>Parks</surname><given-names>Donovan H</given-names></name>
        <name><surname>Lobb</surname><given-names>Briallen</given-names></name>
        <name><surname>Hug</surname><given-names>Laura A</given-names></name>
        <name><surname>Doxey</surname><given-names>Andrew C</given-names></name>
      </person-group>
      <article-title>AnnoTree: visualization and exploration of a functionally annotated microbial tree of life</article-title>
      <source>Nucleic Acids Research</source>
      <year iso-8601-date="2019-04">2019</year><month>04</month>
      <volume>47</volume>
      <issue>9</issue>
      <pub-id pub-id-type="doi">10.1093/nar/gkz246</pub-id>
      <fpage>4442</fpage>
      <lpage>4448</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SteenwykU003A2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Steenwyk</surname><given-names>Jacob L.</given-names></name>
        <name><surname>Rokas</surname><given-names>Antonis</given-names></name>
      </person-group>
      <article-title>Treehouse: A user-friendly application to obtain subtrees from large phylogenies</article-title>
      <source>BMC Research Notes</source>
      <year iso-8601-date="2019-08-27">2019</year><month>08</month><day>27</day>
      <volume>12</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1186/s13104-019-4577-5</pub-id>
      <fpage>541</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-OlearyU003A2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>O’Leary</surname><given-names>Nuala A</given-names></name>
        <name><surname>Wright</surname><given-names>Mathew W</given-names></name>
        <name><surname>Brister</surname><given-names>J Rodney</given-names></name>
        <name><surname>Ciufo</surname><given-names>Stacy</given-names></name>
        <name><surname>Haddad</surname><given-names>Diana</given-names></name>
        <name><surname>McVeigh</surname><given-names>Rich</given-names></name>
        <name><surname>Rajput</surname><given-names>Bhanu</given-names></name>
        <name><surname>Robbertse</surname><given-names>Barbara</given-names></name>
        <name><surname>Smith-White</surname><given-names>Brian</given-names></name>
        <name><surname>Ako-Adjei</surname><given-names>Danso</given-names></name>
        <name><surname>Astashyn</surname><given-names>Alexander</given-names></name>
        <name><surname>Badretdin</surname><given-names>Azat</given-names></name>
        <name><surname>Bao</surname><given-names>Yiming</given-names></name>
        <name><surname>Blinkova</surname><given-names>Olga</given-names></name>
        <name><surname>Brover</surname><given-names>Vyacheslav</given-names></name>
        <name><surname>Chetvernin</surname><given-names>Vyacheslav</given-names></name>
        <name><surname>Choi</surname><given-names>Jinna</given-names></name>
        <name><surname>Cox</surname><given-names>Eric</given-names></name>
        <name><surname>Ermolaeva</surname><given-names>Olga</given-names></name>
        <name><surname>Farrell</surname><given-names>Catherine M</given-names></name>
        <name><surname>Goldfarb</surname><given-names>Tamara</given-names></name>
        <name><surname>Gupta</surname><given-names>Tripti</given-names></name>
        <name><surname>Haft</surname><given-names>Daniel</given-names></name>
        <name><surname>Hatcher</surname><given-names>Eneida</given-names></name>
        <name><surname>Hlavina</surname><given-names>Wratko</given-names></name>
        <name><surname>Joardar</surname><given-names>Vinita S</given-names></name>
        <name><surname>Kodali</surname><given-names>Vamsi K</given-names></name>
        <name><surname>Li</surname><given-names>Wenjun</given-names></name>
        <name><surname>Maglott</surname><given-names>Donna</given-names></name>
        <name><surname>Masterson</surname><given-names>Patrick</given-names></name>
        <name><surname>McGarvey</surname><given-names>Kelly M</given-names></name>
        <name><surname>Murphy</surname><given-names>Michael R</given-names></name>
        <name><surname>O’Neill</surname><given-names>Kathleen</given-names></name>
        <name><surname>Pujar</surname><given-names>Shashikant</given-names></name>
        <name><surname>Rangwala</surname><given-names>Sanjida H</given-names></name>
        <name><surname>Rausch</surname><given-names>Daniel</given-names></name>
        <name><surname>Riddick</surname><given-names>Lillian D</given-names></name>
        <name><surname>Schoch</surname><given-names>Conrad</given-names></name>
        <name><surname>Shkeda</surname><given-names>Andrei</given-names></name>
        <name><surname>Storz</surname><given-names>Susan S</given-names></name>
        <name><surname>Sun</surname><given-names>Hanzhen</given-names></name>
        <name><surname>Thibaud-Nissen</surname><given-names>Francoise</given-names></name>
        <name><surname>Tolstoy</surname><given-names>Igor</given-names></name>
        <name><surname>Tully</surname><given-names>Raymond E</given-names></name>
        <name><surname>Vatsan</surname><given-names>Anjana R</given-names></name>
        <name><surname>Wallin</surname><given-names>Craig</given-names></name>
        <name><surname>Webb</surname><given-names>David</given-names></name>
        <name><surname>Wu</surname><given-names>Wendy</given-names></name>
        <name><surname>Landrum</surname><given-names>Melissa J</given-names></name>
        <name><surname>Kimchi</surname><given-names>Avi</given-names></name>
        <name><surname>Tatusova</surname><given-names>Tatiana</given-names></name>
        <name><surname>DiCuccio</surname><given-names>Michael</given-names></name>
        <name><surname>Kitts</surname><given-names>Paul</given-names></name>
        <name><surname>Murphy</surname><given-names>Terence D</given-names></name>
        <name><surname>Pruitt</surname><given-names>Kim D</given-names></name>
      </person-group>
      <article-title>Reference sequence (RefSeq) database at NCBI: Current status, taxonomic expansion, and functional annotation</article-title>
      <source>Nucleic Acids Res</source>
      <year iso-8601-date="2015-11">2015</year><month>11</month>
      <volume>44</volume>
      <issue>D1</issue>
      <fpage>D733</fpage>
      <lpage>45</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SchochU003A2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schoch</surname><given-names>Conrad L</given-names></name>
        <name><surname>Ciufo</surname><given-names>Stacy</given-names></name>
        <name><surname>Domrachev</surname><given-names>Mikhail</given-names></name>
        <name><surname>Hotton</surname><given-names>Carol L</given-names></name>
        <name><surname>Kannan</surname><given-names>Sivakumar</given-names></name>
        <name><surname>Khovanskaya</surname><given-names>Rogneda</given-names></name>
        <name><surname>Leipe</surname><given-names>Detlef</given-names></name>
        <name><surname>Mcveigh</surname><given-names>Richard</given-names></name>
        <name><surname>O’Neill</surname><given-names>Kathleen</given-names></name>
        <name><surname>Robbertse</surname><given-names>Barbara</given-names></name>
        <name><surname>Sharma</surname><given-names>Shobha</given-names></name>
        <name><surname>Soussov</surname><given-names>Vladimir</given-names></name>
        <name><surname>Sullivan</surname><given-names>John P</given-names></name>
        <name><surname>Sun</surname><given-names>Lu</given-names></name>
        <name><surname>Turner</surname><given-names>Seán</given-names></name>
        <name><surname>Karsch-Mizrachi</surname><given-names>Ilene</given-names></name>
      </person-group>
      <article-title>NCBI taxonomy: A comprehensive update on curation, resources and tools</article-title>
      <source>Database (Oxford)</source>
      <year iso-8601-date="2020-01">2020</year><month>01</month>
      <volume>2020</volume>
      <pub-id pub-id-type="doi">10.1093/database/baaa062</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-KnuthU003A1997">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Knuth</surname><given-names>Donald Ervin</given-names></name>
      </person-group>
      <article-title>The art of computer programming, volume I: Fundamental algorithms, 3rd edition</article-title>
      <publisher-name>Addison-Wesley</publisher-name>
      <publisher-loc>Reading, MA, USA</publisher-loc>
      <year iso-8601-date="1997">1997</year>
      <isbn>0-201-89683-4</isbn>
      <uri>https://www-cs-faculty.stanford.edu/~knuth/taocp.html</uri>
      <fpage>308</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
