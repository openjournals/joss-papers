<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4722</article-id>
<article-id pub-id-type="doi">10.21105/joss.04722</article-id>
<title-group>
<article-title>Scientific Computational Imaging Code
(SCICO)</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1716-5923</contrib-id>
<name>
<surname>Balke</surname>
<given-names>Thilo</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Davis</surname>
<given-names>Fernando</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5641-3491</contrib-id>
<name>
<surname>Garcia-Cardona</surname>
<given-names>Cristina</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8442-2897</contrib-id>
<name>
<surname>Majee</surname>
<given-names>Soumendu</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7645-252X</contrib-id>
<name>
<surname>McCann</surname>
<given-names>Michael</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7485-5966</contrib-id>
<name>
<surname>Pfister</surname>
<given-names>Luke</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4767-1843</contrib-id>
<name>
<surname>Wohlberg</surname>
<given-names>Brendt</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Los Alamos National Laboratory</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Purdue University</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>University of Puerto Rico-Mayaguez</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Samsung Research America</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-08-24">
<day>24</day>
<month>8</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>78</issue>
<fpage>4722</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>computational imaging</kwd>
<kwd>scientific imaging</kwd>
<kwd>inverse problems</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Scientific Computational Imaging Code (SCICO) is a Python package
  for solving the inverse problems that arise in scientific imaging
  applications. Its primary focus is providing methods for solving
  ill-posed inverse problems by using an appropriate prior model of the
  reconstruction space. SCICO includes a growing suite of operators,
  cost functionals, regularizers, and optimization routines that may be
  combined to solve a wide range of problems, and is designed so that it
  is easy to add new building blocks. SCICO is built on top of
  <ext-link ext-link-type="uri" xlink:href="https://jax.readthedocs.io/en/latest/">JAX</ext-link>
  rather than
  <ext-link ext-link-type="uri" xlink:href="https://numpy.org/">NumPy</ext-link>,
  enabling GPU/TPU acceleration, just-in-time compilation, and automatic
  gradient functionality, which is used to automatically compute the
  adjoints of linear operators. An example of how to solve a
  multi-channel tomography problem with SCICO is shown in
  <xref alt="Figure 1" rid="figU003Aflow_chart">Figure 1</xref>. The
  SCICO source code is available from
  <ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/scico">GitHub</ext-link>,
  and pre-built packages are available from
  <ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/scico">PyPI</ext-link>.
  It has extensive
  <ext-link ext-link-type="uri" xlink:href="https://scico.rtfd.io/">online
  documentation</ext-link>, including API documentation and usage
  examples, which can be run online at
  <ext-link ext-link-type="uri" xlink:href="https://colab.research.google.com/github/lanl/scico-data/blob/colab/notebooks/index.ipynb">Google
  Colab</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://mybinder.org/v2/gh/lanl/scico-data/binder?labpath=notebooks%2Findex.ipynb">binder</ext-link>.</p>
  <p>Community contributions, including bug reports, feature requests,
  and code contributions, are welcomed at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/scico">https://github.com/lanl/scico</ext-link>.</p>
  <fig>
    <caption><p>Solving a multi-channel tomography problem with
    SCICO.<styled-content id="figU003Aflow_chart"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/figures/flow_chart.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>In traditional imaging, the burden of image formation is placed on
  physical components, such as a lens, with the resulting image being
  taken from the sensor with minimal processing. In computational
  imaging, in contrast, the burden of image formation is shared with or
  shifted to computation, with the resulting image typically being very
  different from the measured data. Common examples of computational
  imaging include demosaicing in consumer cameras, computed tomography
  and magnetic resonance imaging in medicine, and synthetic aperture
  radar in remote sensing. This is an active and growing area of
  research, and many of these problems have common properties that could
  be supported by shared implementations of solution components.</p>
  <p>The goal of SCICO is to provide a general research tool for
  computational imaging, with a particular focus on scientific imaging
  applications, which are particularly underrepresented in the existing
  range of open-source packages in this area. While a number of other
  packages overlap somewhat in functionality with SCICO, only a few
  support execution of the same code on both CPU and GPU devices, and we
  are not aware of any that support just-in-time compilation and
  automatic gradient computation, which is invaluable in computational
  imaging. SCICO provides all three of these valuable features by being
  built on top of
  <ext-link ext-link-type="uri" xlink:href="https://jax.readthedocs.io/en/latest/">JAX</ext-link>
  rather than
  <ext-link ext-link-type="uri" xlink:href="https://numpy.org/">NumPy</ext-link>.</p>
</sec>
<sec id="solving-imaging-inverse-problems-in-scico">
  <title>Solving Imaging Inverse Problems in SCICO</title>
  <p>SCICO provides a set of building blocks that can be used to express
  a wide variety of problems and their corresponding solutions. These
  building blocks include operators for representing the <italic>forward
  model</italic> of an imaging problem, functionals for representing
  <italic>data fidelity</italic> and <italic>regularization</italic>
  terms, and optimization algorithms for minimizing these functionals.
  The
  <ext-link ext-link-type="uri" xlink:href="https://scico.rtfd.io/">online
  documentation</ext-link> includes a guide to the use of these
  components as well as numerous example scripts demonstrating their use
  in practice.</p>
  <sec id="machine-learning">
    <title>Machine Learning</title>
    <p>SCICO includes an implementation of the DnCNN denoiser
    (<xref alt="Zhang et al., 2017" rid="ref-zhang-2017-dncnn" ref-type="bibr">Zhang
    et al., 2017</xref>), which can be applied to other inverse problems
    via the <italic>plug-and-play priors</italic> (PPP)
    (<xref alt="Kamilov et al., 2022" rid="ref-kamilov-2022-plug" ref-type="bibr">Kamilov
    et al., 2022</xref>;
    <xref alt="Sreehari et al., 2016" rid="ref-sreehari-2016-plug" ref-type="bibr">Sreehari
    et al., 2016</xref>;
    <xref alt="Venkatakrishnan et al., 2013" rid="ref-venkatakrishnan-2013-plugandplay2" ref-type="bibr">Venkatakrishnan
    et al., 2013</xref>) framework (see
    <xref alt="Figure 2" rid="figU003Adeconv">Figure 2</xref>). A number
    of other leading machine learning methods have been implemented, and
    are expected to be merged into the main SCICO GitHub branch in the
    near future.</p>
    <fig>
      <caption><p>Image deconvolution via PPP with DnCNN
      denoiser.<styled-content id="figU003Adeconv"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/figures/deconv_ppp_dncnn.pdf" xlink:title="" />
    </fig>
  </sec>
  <sec id="advantages-of-jax-based-design">
    <title>Advantages of JAX-based Design</title>
    <p>The vast majority of scientific computing packages in Python are
    based on
    <ext-link ext-link-type="uri" xlink:href="https://numpy.org/">NumPy</ext-link>
    and
    <ext-link ext-link-type="uri" xlink:href="https://scipy.org/">SciPy</ext-link>.
    SCICO, in contrast, is based on
    <ext-link ext-link-type="uri" xlink:href="https://jax.readthedocs.io/en/latest/">JAX</ext-link>,
    which provides most of the same features, but with the addition of
    automatic differentiation, GPU support, and just-in-time (JIT)
    compilation. In addition to its obvious application in
    gradient-based minimization methods, automatic differentiation
    allows automatic computation of the adjoint operator of a linear
    operator, the manual derivation of which is often
    time-consuming.</p>
  </sec>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>This work was supported by the Laboratory Directed Research and
  Development program of Los Alamos National Laboratory under project
  number 20200061DR.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-kamilov-2022-plug">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kamilov</surname><given-names>Ulugbek S.</given-names></name>
        <name><surname>Bouman</surname><given-names>Charles A.</given-names></name>
        <name><surname>Buzzard</surname><given-names>Gregery T.</given-names></name>
        <name><surname>Wohlberg</surname><given-names>Brendt</given-names></name>
      </person-group>
      <article-title>Plug-and-play methods for integrating physical and learned models in computational imaging</article-title>
      <source>To appear in IEEE Signal Processing Magazine</source>
      <year iso-8601-date="2022">2022</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2203.17061</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-sreehari-2016-plug">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sreehari</surname><given-names>Suhas</given-names></name>
        <name><surname>Venkatakrishnan</surname><given-names>Singanallur V.</given-names></name>
        <name><surname>Wohlberg</surname><given-names>Brendt</given-names></name>
        <name><surname>Buzzard</surname><given-names>Gregery T.</given-names></name>
        <name><surname>Drummy</surname><given-names>Lawrence F.</given-names></name>
        <name><surname>Simmons</surname><given-names>Jeffrey P.</given-names></name>
        <name><surname>Bouman</surname><given-names>Charles A.</given-names></name>
      </person-group>
      <article-title>Plug-and-play priors for bright field electron tomography and sparse interpolation</article-title>
      <source>IEEE Transactions on Computational Imaging</source>
      <year iso-8601-date="2016-12">2016</year><month>12</month>
      <volume>2</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/TCI.2016.2599778</pub-id>
      <fpage>408</fpage>
      <lpage>423</lpage>
    </element-citation>
  </ref>
  <ref id="ref-venkatakrishnan-2013-plugandplay2">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Venkatakrishnan</surname><given-names>Singanallur V.</given-names></name>
        <name><surname>Bouman</surname><given-names>Charles A.</given-names></name>
        <name><surname>Wohlberg</surname><given-names>Brendt</given-names></name>
      </person-group>
      <article-title>Plug-and-play priors for model based reconstruction</article-title>
      <source>Proceedings of IEEE global conference on signal and information processing (GlobalSIP)</source>
      <publisher-loc>Austin, TX, USA</publisher-loc>
      <year iso-8601-date="2013-12">2013</year><month>12</month>
      <pub-id pub-id-type="doi">10.1109/GlobalSIP.2013.6737048</pub-id>
      <fpage>945</fpage>
      <lpage>948</lpage>
    </element-citation>
  </ref>
  <ref id="ref-zhang-2017-dncnn">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Kai</given-names></name>
        <name><surname>Zuo</surname><given-names>Wangmeng</given-names></name>
        <name><surname>Chen</surname><given-names>Yunjin</given-names></name>
        <name><surname>Meng</surname><given-names>Deyu</given-names></name>
        <name><surname>Zhang</surname><given-names>Lei</given-names></name>
      </person-group>
      <article-title>Beyond a Gaussian denoiser: Residual learning of deep CNN for image denoising</article-title>
      <source>IEEE Transactions on Image Processing</source>
      <year iso-8601-date="2017-07">2017</year><month>07</month>
      <volume>26</volume>
      <issue>7</issue>
      <pub-id pub-id-type="doi">10.1109/TIP.2017.2662206</pub-id>
      <fpage>3142</fpage>
      <lpage>3155</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
