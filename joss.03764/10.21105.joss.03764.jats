<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3764</article-id>
<article-id pub-id-type="doi">10.21105/joss.03764</article-id>
<title-group>
<article-title>epyc: Computational experiment management in
Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9633-2103</contrib-id>
<name>
<surname>Dobson</surname>
<given-names>Simon</given-names>
</name>
<email>simoninireland@gmail.com</email>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>School of Computer Science, University of St Andrews,
Scotland UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-03-24">
<day>24</day>
<month>3</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>72</issue>
<fpage>3764</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>computational science</kwd>
<kwd>cluster computing</kwd>
<kwd>high-performance computing</kwd>
<kwd>automation</kwd>
<kwd>experimental design</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>epyc</monospace> is a Python module for designing,
  executing, storing, and analysing the results of large sets of
  (possibly long-running) computational experiments, as are often found
  when writing simulations of complex networks and other domains. It
  allows the same experimental code to be run on single machines,
  multicore machines, and computational clusters without modification,
  and automatically manages the execution of an experiment for different
  parameter values and for multiple repetitions.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Computation and simulation have joined theory and experiment as a
  third component of many scientific fields. Computational experiments
  share many features with traditional experiments: they need to be
  structured, repeated, repeatable, reproducible, and interpretable
  (<xref alt="Software Sustainability Institute, 2020" rid="ref-SSI" ref-type="bibr">Software
  Sustainability Institute, 2020</xref>). There is often a need to
  perform a computation at a number of points across a multi-dimensional
  parameter space, aggregating multiple repetitions and wrangling
  results for analysis and presentation. Often the experiments being
  performed are on such a scale as to require the use of multicore
  machines and/or computing clusters to perform multiple experiments
  simultaneously. The logistics of managing this process can become
  quite complicated, and benefits from automation.</p>
  <p><monospace>epyc</monospace> defines a conceptual framework for
  performing series of computational experiments, and implements this in
  pure Python. Computational “laboratories” perform a collection of
  “experiments” whose parameters and results are recorded in a “lab
  notebook” for later retrieval. Laboratories take a parameter space
  consisting of any number of individual parameters having either single
  values or ranges, and use a computational experimental “design” to
  determine which combinations are used in running experiments.</p>
</sec>
<sec id="main-features">
  <title>Main features</title>
  <p>Modern research software has to operate in a range of computational
  environments and at a range of scales. <monospace>epyc</monospace> is
  fully portable to any Python environment, and can operate across the
  scales. Laboratories can be sequential (a single core on a machine),
  parallel (multiple cores on a machine), or clustered (multiple cores
  on multiple machines). A key design goal of
  <monospace>epyc</monospace> is to allow the same experimental code to
  run under all these configurations, to maximise the re-use of
  experiments. Cluster-based laboratories can be accessed
  asynchronously, allowing a set of experiments to be started and their
  results retrieved later without remaining connected to the cluster:
  useful for laptop users. <monospace>epyc</monospace> also integrates
  fully into the
  <ext-link ext-link-type="uri" xlink:href="https://jupyter.org/">Jupyter</ext-link>
  ecosystem, allowing notebook-based experimental protocols to still use
  compute clusters.</p>
  <p>Experimental design is a neglected feature of computational
  science, despite its strong presence in traditional settings
  (<xref alt="Bailey, 2009" rid="ref-DesignComparativeExperiments" ref-type="bibr">Bailey,
  2009</xref>). The choice of design translates an experiment and a
  space of possible parameters into a collection of experimental runs at
  selected points in that parameter space. Typically choices are to use
  every combination of parameters (a factorial design) or to take
  corresponding values from each parameter range (a pointwise design):
  other designs can easily be added.</p>
  <p><monospace>epyc</monospace> defines a lifecycle for experiments
  through which they are configured to their parameters, set-up, run,
  and torn-down, before returning the experimental results alongside the
  experimental parameters and some metadata on the execution of the run,
  to be inserted into a notebook. A small set of experiment combinators
  separate the logic of a single experiment from structuring and other
  tasks. This means that any experiment can be repeated and
  statistically summarised as a single unit, and also encourages the
  development of re-usable computational analytics rather than manual
  handling that can be harder to reproduce.</p>
  <p>Lab notebooks can be persistent to store the results of experiments
  in a non-destructive form, structured as individual result sets with
  notes and metadata. Notebooks store all the data and metadata in a
  portable format to improve the reproducibility of computational
  experiments. Results can be accessed through
  <ext-link ext-link-type="uri" xlink:href="https://pandas.pydata.org/index.html"><monospace>pandas</monospace></ext-link>
  DataFrames for easy wrangling and visualisation. Lab notebooks store
  their data in
  <ext-link ext-link-type="uri" xlink:href="https://www.hdfgroup.org/">HDF5</ext-link>,
  a standard format for large-scale archival storage that augments raw
  data with annotations and metadata, as well as making results obtained
  in <monospace>epyc</monospace> easily portable to other tools.</p>
</sec>
<sec id="differences-with-other-tools">
  <title>Differences with other tools</title>
  <p><monospace>epyc</monospace> is designed to manage experiments
  rather than provide sophisticated workflows, since for many
  application such workflows are largely unnecessary. Instead,
  <monospace>epyc</monospace> defines a conceptual model of
  computational experiments (laboratories, designs, experiments, and
  notebooks) and supports each component as flexibly and orthogonally as
  possible.</p>
  <p>Unlike
  <ext-link ext-link-type="uri" xlink:href="https://dask.org/">Dask</ext-link>,
  <monospace>epyc</monospace> works independently of libraries such as
  <ext-link ext-link-type="uri" xlink:href="https://numpy.org/"><monospace>numpy</monospace></ext-link>
  or
  <ext-link ext-link-type="uri" xlink:href="https://scikit-learn.org/stable/index.html"><monospace>scikit-learn</monospace></ext-link>
  (although it can run experiments using these tools). It also adopts a
  control- rather than data-driven approach (also unlike Dask, and
  unlike more traditional workflow engines such as
  <ext-link ext-link-type="uri" xlink:href="https://incubator.apache.org/projects/taverna.html">Taverna</ext-link>
  or
  <ext-link ext-link-type="uri" xlink:href="https://snakemake.readthedocs.io/en/stable/">SnakeMake</ext-link>)
  which leads to more predictable computational requirements and fits
  better with the approaches of certain disciplines.</p>
  <p><monospace>epyc</monospace> is perhaps closest in spirit to
  <ext-link ext-link-type="uri" xlink:href="https://sacred.readthedocs.io/en/stable/index.html">Sacred</ext-link>,
  which also emphasises the management of experimental configurations
  for reproducibility. <monospace>epyc</monospace> provides more support
  for executing experiments uniformly across entire spaces of
  parameters, with integrated use of parallelism, and under different
  experimental designs where required.</p>
</sec>
<sec id="main-applications">
  <title>Main applications</title>
  <p><monospace>epyc</monospace> arose as part of an on-going research
  programme in network science and complex systems, as a way to manage
  the thousands of repeated simulations needing to be performed across
  large parameter spaces. It provides experiment management for the
  <ext-link ext-link-type="uri" xlink:href="https://pyepydemic.readthedocs.io/en/latest/"><monospace>epydemic</monospace></ext-link>
  simulation framework for complex networks, from which it has
  contributed to a series of papers exploring networks and their
  processes (for example Mann et al.
  (<xref alt="2021a" rid="ref-SymbioticAntagonisticClustered" ref-type="bibr">2021a</xref>),
  and a book on network-based disease modelling
  (<xref alt="Dobson, 2020" rid="ref-em" ref-type="bibr">Dobson,
  2020</xref>). While originally closely integrated into this system,
  <monospace>epyc</monospace> is now a stand-alone domain-independent
  experimental management framework.</p>
</sec>
<sec id="compatibility-and-availability">
  <title>Compatibility and availability</title>
  <p><monospace>epyc</monospace> works with versions of Python from
  Python 3.6, and can be installed directly from
  <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/epyc/">PyPy</ext-link>
  using <monospace>pip</monospace>. API and tutorial documentation can
  be found on
  <ext-link ext-link-type="uri" xlink:href="https://epyc.readthedocs.io/en/latest/">ReadTheDocs</ext-link>.
  Source code is available on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/simoninireland/epyc">GitHub</ext-link>,
  where issues can also be reported.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-em">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Dobson</surname><given-names>Simon</given-names></name>
      </person-group>
      <source>Epidemic modelling – some notes, maths, and code</source>
      <publisher-name>Independent Publishing Network</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <isbn>978-183853-565-0</isbn>
      <uri>https://simoninireland.github.io/introduction-to-epidemics/</uri>
    </element-citation>
  </ref>
  <ref id="ref-SymbioticAntagonisticClustered">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mann</surname><given-names>Peter</given-names></name>
        <name><surname>Smith</surname><given-names>V. Anne</given-names></name>
        <name><surname>Mitchell</surname><given-names>John</given-names></name>
        <name><surname>Dobson</surname><given-names>Simon</given-names></name>
      </person-group>
      <article-title>Symbiotic and antagonistic disease dynamics on clustered networks using bond percolation</article-title>
      <source>Physical Review E</source>
      <year iso-8601-date="2021">2021</year>
      <volume>104</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1103/PhysRevE.104.024303</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ClusteredTwoPathogen">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mann</surname><given-names>Peter</given-names></name>
        <name><surname>Smith</surname><given-names>V. Anne</given-names></name>
        <name><surname>Mitchell</surname><given-names>John</given-names></name>
        <name><surname>Dobson</surname><given-names>Simon</given-names></name>
      </person-group>
      <article-title>Two-pathogen model with competition on clustered networks</article-title>
      <source>Physical Review E</source>
      <year iso-8601-date="2021">2021</year>
      <volume>103</volume>
      <issue>6</issue>
      <pub-id pub-id-type="doi">10.1103/PhysRevE.103.062308</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-TB">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pitcher</surname><given-names>Michael</given-names></name>
        <name><surname>Bowness</surname><given-names>Ruth</given-names></name>
        <name><surname>Dobson</surname><given-names>Simon</given-names></name>
        <name><surname>Eftimie</surname><given-names>Raluca</given-names></name>
        <name><surname>Gillespie</surname><given-names>Stephen</given-names></name>
      </person-group>
      <article-title>Modelling the effects of environmental heterogeneity within the lung on the tuberculosis lifecycle</article-title>
      <source>Journal of Theoretical Biology</source>
      <year iso-8601-date="2020">2020</year>
      <volume>506</volume>
      <pub-id pub-id-type="doi">10.1101/2019.12.12.871269</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-DesignComparativeExperiments">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Bailey</surname><given-names>R. A.</given-names></name>
      </person-group>
      <source>Design of comparative experiments</source>
      <publisher-name>Cambridge University Press</publisher-name>
      <year iso-8601-date="2009">2009</year>
      <pub-id pub-id-type="doi">10.1017/CBO9780511611483</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-SSI">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Software Sustainability Institute</string-name>
      </person-group>
      <article-title>Guides for researchers</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://www.software.ac.uk/resources/guides/guides-researchers</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
