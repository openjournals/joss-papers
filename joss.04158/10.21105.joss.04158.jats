<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4158</article-id>
<article-id pub-id-type="doi">10.21105/joss.04158</article-id>
<title-group>
<article-title>GBOML: Graph-Based Optimization Modeling
Language</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">0000-0001-5334-0234</contrib-id>
<name>
<surname>Miftari</surname>
<given-names>Bardhyl</given-names>
</name>
<email>bmiftari@uliege.be</email>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">0000-0003-3081-4833</contrib-id>
<name>
<surname>Berger</surname>
<given-names>Mathias</given-names>
</name>
<email>mathias.berger@alumni.duke.edu</email>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-2"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Djelassi</surname>
<given-names>Hatim</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3035-8260</contrib-id>
<name>
<surname>Ernst</surname>
<given-names>Damien</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Electrical Engineering and Computer Science,
University of Li√®ge</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>LTCI, Telecom Paris, Institut Polytechnique de
Paris</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email>bmiftari@uliege.be</email></corresp>
<corresp id="cor-2">* E-mail: <email>mathias.berger@alumni.duke.edu</email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-01-21">
<day>21</day>
<month>1</month>
<year>2021</year>
</pub-date>
<volume>7</volume>
<issue>72</issue>
<fpage>4158</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Optimization</kwd>
<kwd>Mixed-Integer Linear Programming</kwd>
<kwd>Algebraic Modeling Language</kwd>
<kwd>Object-Oriented Modeling</kwd>
<kwd>Structured Models</kwd>
<kwd>Decomposition Methods</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Graph-Based Optimization Modeling Language (GBOML) is a
  modeling language for mathematical programming enabling the easy
  implementation of a broad class of structured mixed-integer linear
  programs typically found in applications ranging from energy system
  planning to supply chain management. More precisely, the language is
  particularly well-suited for representing problems involving the
  optimization of discrete-time dynamical systems over a finite time
  horizon and possessing a block structure that can be encoded by a
  hierarchical hypergraph. The language combines elements of both
  algebraic and object-oriented modeling languages in order to
  facilitate problem encoding and model re-use, speed up model
  generation, expose problem structure to specialised solvers and
  simplify post-processing. The GBOML parser, which is implemented in
  Python, turns GBOML input files into hierarchical graph data
  structures representing optimization models. The associated tool
  provides both a command-line interface and a Python API. It also
  directly interfaces with a variety of open-source and commercial
  solvers, including structure-exploiting ones.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Many planning and control problems (e.g., in the field of energy
  systems) can be formulated as mathematical programs. Notably, many
  models of practical interest can be viewed as collections of smaller
  models with some form of coupling between them. Such models display a
  natural block structure, where each block represents a small model or
  component.</p>
  <p>Broadly speaking, two classes of tools can be used to implement
  such models, namely algebraic modeling languages (AMLs) and so-called
  object-oriented modeling environments (OOMEs). In short, AMLs
  typically allow users to compactly encode broad classes of
  optimization problems (e.g., mixed-integer nonlinear programs) while
  decoupling models and solvers. AMLs can be either stand-alone (e.g.,
  GAMS
  (<xref alt="Bussieck &amp; Meeraus, 2004" rid="ref-GAMS" ref-type="bibr">Bussieck
  &amp; Meeraus, 2004</xref>) or AMPL
  (<xref alt="Fourer et al., 1990" rid="ref-AMPL" ref-type="bibr">Fourer
  et al., 1990</xref>)) or embedded in general-purpose programming
  languages, such as JuMP
  (<xref alt="Dunning et al., 2017" rid="ref-JuMP" ref-type="bibr">Dunning
  et al., 2017</xref>) (in Julia), Pyomo
  (<xref alt="Hart et al., 2011" rid="ref-Pyomo" ref-type="bibr">Hart et
  al., 2011</xref>) and PuLP
  (<xref alt="Mitchell et al., 2011" rid="ref-PuLP" ref-type="bibr">Mitchell
  et al., 2011</xref>) (in Python). They may also be open-source (e.g.,
  JuMP, Pyomo and PuLP). On the other hand, OOMEs usually make it easy
  to construct instances of specific problems from pre-defined
  components. For instance, in the field of energy systems, established
  OOMEs include PyPSA (power flow calculations and capacity expansion
  planning)
  (<xref alt="Brown et al., 2018" rid="ref-PyPSA" ref-type="bibr">Brown
  et al., 2018</xref>), Calliope (multi-energy carrier capacity
  expansion planning)
  (<xref alt="Pfenninger &amp; Pickering, 2018" rid="ref-Calliope" ref-type="bibr">Pfenninger
  &amp; Pickering, 2018</xref>) or Balmorel (long-term planning and
  short-term operational analyses)
  (<xref alt="Wiese et al., 2018" rid="ref-Balmorel" ref-type="bibr">Wiese
  et al., 2018</xref>).</p>
  <p>Unfortunately, both AMLs and OOMEs suffer from several drawbacks.
  More precisely, AMLs rarely provide language constructs to represent
  the block structure in a model and typically fail to take advantage of
  it, although this may be used to simplify problem encoding (e.g., by
  treating blocks as independent objects), enable model re-use (e.g., by
  allowing the import of model components), speed up model generation
  (e.g., by parallelising block generation) and facilitate the use of
  structure-exploiting solution algorithms. Extensions to established
  AMLs were proposed to address some of these concerns, such as
  StructJuMP
  (<xref alt="Huchette &amp; Developers, 2021" rid="ref-StructJuMP" ref-type="bibr">Huchette
  &amp; Developers, 2021</xref>), PySP
  (<xref alt="Watson et al., 2012" rid="ref-PySP" ref-type="bibr">Watson
  et al., 2012</xref>) and SML
  (<xref alt="Colombo et al., 2009" rid="ref-SML" ref-type="bibr">Colombo
  et al., 2009</xref>) (extending JuMP, Pyomo and AMPL, respectively).
  However, these extensions were usually designed with the primary aim
  of handling very specific problem structures (e.g., dual block angular
  structures found in stochastic linear programming models). On the
  other hand, OOMEs typically lack expressiveness and adding components
  is often cumbersome. Furthermore, they very often rely on established
  AMLs themselves and thus automatically inherit any shortcomings of the
  AML on top of which they are built (e.g., it may not be
  open-source).</p>
  <p>The tools that appear closest in spirit to our own are the recent
  SMS++ modeling framework
  (<xref alt="Frangioni et al., 2021" rid="ref-SMSpp" ref-type="bibr">Frangioni
  et al., 2021</xref>) and Plasmo.jl
  (<xref alt="Jalving et al., 2020" rid="ref-Plasmo" ref-type="bibr">Jalving
  et al., 2020</xref>) (an extension of JuMP). The former makes it
  possible to implement fairly general block-structured models and aims
  to ease the development and deployment of advanced
  structure-exploiting algorithms. The latter relies on a graph
  abstraction of optimization models to enable modular model
  construction, partitioning and the use of structure-exploiting
  algorithms.</p>
  <p>Against this backdrop, GBOML was designed to blend and natively
  support some key features of AMLs and OOMEs. Notably, it was built
  with the following goals in mind:</p>
  <list list-type="bullet">
    <list-item>
      <p>being open-source and stand-alone</p>
    </list-item>
    <list-item>
      <p>allowing any mixed-integer linear program to be represented</p>
    </list-item>
    <list-item>
      <p>enabling any hierarchical block structure to be exposed and
      exploited</p>
    </list-item>
    <list-item>
      <p>facilitating the encoding and construction of time-indexed
      models</p>
    </list-item>
    <list-item>
      <p>allowing low-level model encoding to be close to mathematical
      notation</p>
    </list-item>
    <list-item>
      <p>making it easy to re-use and combine components and models</p>
    </list-item>
    <list-item>
      <p>interfacing with commercial and open-source solvers, including
      structure-exploiting ones</p>
    </list-item>
  </list>
  <p>An early version of the tool was used in a research article
  studying the economics of carbon-neutral fuel production in remote
  areas where renewable resources are abundant
  (<xref alt="Berger et al., 2021" rid="ref-RemoteHub" ref-type="bibr">Berger
  et al., 2021</xref>). The tool is also used in the context of a
  research project focusing on the design of the future Belgian energy
  system.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>Next, we describe a short example illustrating how GBOML works.
  First, a model must be encoded in a GBOML input file. An input file
  implementing a stylised microgrid investment planning problem is shown
  below.</p>
  <preformat>#TIMEHORIZON
T = 8760; // planning horizon (hours)

#NODE SOLAR_PV
#PARAMETERS
capex = 600; // annualised capital expenditure per unit capacity
capacity_factor = import &quot;pv_gen.csv&quot;; // normalised generation profile
#VARIABLES
internal: capacity; // capacity of solar PV plant
external: power[T]; // power output of solar PV plant
#CONSTRAINTS
capacity &gt;= 0;
power[t] &gt;= 0;
power[t] &lt;= capacity_factor[t] * capacity;
#OBJECTIVES
min: capex * capacity;

#NODE BATTERY
#PARAMETERS
capex = 150; // annualised capital expenditure per unit capacity
#VARIABLES
internal: capacity; // energy capacity of battery storage system
internal: energy[T]; // energy stored in battery storage system
external: power[T]; // power flow in/out of battery storage system
#CONSTRAINTS
capacity &gt;= 0;
energy[t] &gt;= 0;
energy[t] &lt;= capacity;
energy[t+1] == energy[t] + power[t];
#OBJECTIVES
min: capex * capacity;

#HYPEREDGE POWER_BALANCE
#PARAMETERS
electrical_load = import &quot;electrical_load.csv&quot;;
#CONSTRAINTS
SOLAR_PV.power[t] == electrical_load[t] + BATTERY.power[t];</preformat>
  <p>The optimization horizon is defined at the beginning of the GBOML
  input file. Two node blocks then define the solar photovoltaic (PV)
  and battery storage system models, respectively. Each node has its own
  parameters, variables, constraints and objectives. Finally, a
  hyperedge block is used to ensure that power flows in the microgrid
  are balanced and the electricity demand is satisfied.</p>
  <p>Then, the command-line interface or the Python API may be used to
  generate the model and solve it. Model generation can be parallelised
  based on the block structure provided by the user and models can be
  passed to open-source or commercial solvers. Direct access to several
  solver APIs is provided, allowing users to tune algorithm parameters
  and query complementary information (e.g., dual variables, slacks or
  basis ranges, when available).</p>
  <p>Finally, results are retrieved and can be either printed to file or
  used directly in Python. Two file formats are supported at the time of
  writing, namely CSV and JSON.</p>
  <p>The full GBOML syntax is described in the online documentation,
  along with advanced features such as model imports and hierarchical
  model construction as well as solver options. The files required to
  run the example above are available in the GBOML repository.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors gratefully acknowledge the support of the Federal
  Government of Belgium through its Energy Transition Fund and the
  INTEGRATION project. The authors would also like to thank Adrien
  Bolland for his help with an early version of the documentation,
  Jocelyn Mbenoun for testing some early features of the tool, as well
  as Ghislain Detienne and Thierry Deschuyteneer for constructive
  discussions.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-JuMP">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dunning</surname><given-names>Iain</given-names></name>
        <name><surname>Huchette</surname><given-names>Joey</given-names></name>
        <name><surname>Lubin</surname><given-names>Miles</given-names></name>
      </person-group>
      <article-title>JuMP: A Modeling Language for Mathematical Optimization</article-title>
      <source>SIAM Review</source>
      <year iso-8601-date="2017">2017</year>
      <volume>59</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1137/15M1020575</pub-id>
      <fpage>295</fpage>
      <lpage>320</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Plasmo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Jalving</surname><given-names>Jordan</given-names></name>
        <name><surname>Shin</surname><given-names>Sungho</given-names></name>
        <name><surname>Zavala</surname><given-names>Victor M.</given-names></name>
      </person-group>
      <article-title>A Graph-Based Modeling Abstraction for Optimization: Concepts and Implementation in Plasmo.jl</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://arxiv.org/abs/2006.05378</uri>
    </element-citation>
  </ref>
  <ref id="ref-StructJuMP">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Huchette</surname><given-names>Joey</given-names></name>
        <name><surname>Developers</surname><given-names>StructJuMP</given-names></name>
      </person-group>
      <article-title>StructJuMP: A Block-Structured Optimization Framework for JuMP</article-title>
      <source>GitHub Repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/StructJuMP/StructJuMP.jl</uri>
    </element-citation>
  </ref>
  <ref id="ref-Pyomo">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hart</surname><given-names>William E</given-names></name>
        <name><surname>Watson</surname><given-names>Jean-Paul</given-names></name>
        <name><surname>Woodruff</surname><given-names>David L</given-names></name>
      </person-group>
      <article-title>Pyomo: Modeling and Solving Mathematical Programs in Python</article-title>
      <source>Mathematical Programming Computation</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2011">2011</year>
      <volume>3</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1007/s12532-011-0026-8</pub-id>
      <fpage>219</fpage>
      <lpage>260</lpage>
    </element-citation>
  </ref>
  <ref id="ref-PySP">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Watson</surname><given-names>Jean-Paul</given-names></name>
        <name><surname>Woodruff</surname><given-names>David L</given-names></name>
        <name><surname>Hart</surname><given-names>William E</given-names></name>
      </person-group>
      <article-title>PySP: Modeling and Solving Stochastic Programs in Python</article-title>
      <source>Mathematical Programming Computation</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <volume>4</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1007/s12532-012-0036-1</pub-id>
      <fpage>109</fpage>
      <lpage>149</lpage>
    </element-citation>
  </ref>
  <ref id="ref-AMPL">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fourer</surname><given-names>Robert</given-names></name>
        <name><surname>Gay</surname><given-names>David M</given-names></name>
        <name><surname>Kernighan</surname><given-names>Brian W</given-names></name>
      </person-group>
      <article-title>A Modeling Language for Mathematical Programming</article-title>
      <source>Management Science</source>
      <year iso-8601-date="1990">1990</year>
      <volume>36</volume>
      <issue>5</issue>
      <pub-id pub-id-type="doi">10.1287/mnsc.36.5.519</pub-id>
      <fpage>519</fpage>
      <lpage>554</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SML">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Colombo</surname><given-names>Marco</given-names></name>
        <name><surname>Grothey</surname><given-names>Andreas</given-names></name>
        <name><surname>Hogg</surname><given-names>Jonathan</given-names></name>
        <name><surname>Woodsend</surname><given-names>Kristian</given-names></name>
        <name><surname>Gondzio</surname><given-names>Jacek</given-names></name>
      </person-group>
      <article-title>A Structure-Conveying Modelling Language for Mathematical and Stochastic Programming</article-title>
      <source>Mathematical Programming Computation</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2009">2009</year>
      <volume>1</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1007/s12532-009-0008-2</pub-id>
      <fpage>223</fpage>
      <lpage>247</lpage>
    </element-citation>
  </ref>
  <ref id="ref-GAMS">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Bussieck</surname><given-names>Michael R</given-names></name>
        <name><surname>Meeraus</surname><given-names>Alex</given-names></name>
      </person-group>
      <article-title>General Algebraic Modeling System (GAMS)</article-title>
      <source>Modeling Languages in Mathematical Optimization</source>
      <person-group person-group-type="editor">
        <name><surname>Kallrath</surname><given-names>Josef</given-names></name>
      </person-group>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2004">2004</year>
      <volume>88</volume>
      <pub-id pub-id-type="doi">10.1007/978-1-4613-0215-5_8</pub-id>
      <fpage>137</fpage>
      <lpage>157</lpage>
    </element-citation>
  </ref>
  <ref id="ref-PuLP">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mitchell</surname><given-names>Stuart</given-names></name>
        <name><surname>O‚ÄôSullivan</surname><given-names>Michael</given-names></name>
        <name><surname>Dunning</surname><given-names>Iain</given-names></name>
      </person-group>
      <article-title>PuLP: A Linear Programming Toolkit for Python</article-title>
      <year iso-8601-date="2011">2011</year>
      <uri>http://www.optimization-online.org/DB_FILE/2011/09/3178.pdf</uri>
    </element-citation>
  </ref>
  <ref id="ref-SMSpp">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Frangioni</surname><given-names>Antonio</given-names></name>
        <name><surname>Iardella</surname><given-names>Niccolo</given-names></name>
        <name><surname>Lobato</surname><given-names>Rafael D</given-names></name>
      </person-group>
      <article-title>The SMS++ Project: A Structured Modelling System for Mathematical Models</article-title>
      <source>Gitlab Repository</source>
      <publisher-name>Gitlab</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://smspp.gitlab.io/</uri>
    </element-citation>
  </ref>
  <ref id="ref-PyPSA">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brown</surname><given-names>Tom</given-names></name>
        <name><surname>Horsch</surname><given-names>Jonas</given-names></name>
        <name><surname>Schlachtberger</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>PyPSA: Python for Power System Analysis</article-title>
      <source>Journal of Open Research Software</source>
      <publisher-name>Ubiquity Press Ltd.</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>6</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.5334/jors.188</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Calliope">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pfenninger</surname><given-names>Stefan</given-names></name>
        <name><surname>Pickering</surname><given-names>Bryn</given-names></name>
      </person-group>
      <article-title>Calliope: A Multi-Scale Energy Systems Modelling Framework</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2018">2018</year>
      <volume>3</volume>
      <issue>29</issue>
      <pub-id pub-id-type="doi">10.21105/joss.00825</pub-id>
      <fpage>825</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Balmorel">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wiese</surname><given-names>Frauke</given-names></name>
        <name><surname>Bramstoft</surname><given-names>Rasmus</given-names></name>
        <name><surname>Koduvere</surname><given-names>Hardi</given-names></name>
        <name><surname>Pizarro Alonso</surname><given-names>Amalia</given-names></name>
        <name><surname>Balyk</surname><given-names>Olexandr</given-names></name>
        <name><surname>Kirkerud</surname><given-names>Jon Gustav</given-names></name>
        <name><surname>Tveten</surname><given-names>√Ösa Grytli</given-names></name>
        <name><surname>Bolkesj√∏</surname><given-names>Torjus Folsland</given-names></name>
        <name><surname>M√ºnster</surname><given-names>Marie</given-names></name>
        <name><surname>Ravn</surname><given-names>Hans</given-names></name>
      </person-group>
      <article-title>Balmorel Open Source Energy System Model</article-title>
      <source>Energy Strategy Reviews</source>
      <year iso-8601-date="2018">2018</year>
      <volume>20</volume>
      <pub-id pub-id-type="doi">10.1016/j.esr.2018.01.003</pub-id>
      <fpage>26</fpage>
      <lpage>34</lpage>
    </element-citation>
  </ref>
  <ref id="ref-RemoteHub">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Berger</surname><given-names>Mathias</given-names></name>
        <name><surname>Radu</surname><given-names>David</given-names></name>
        <name><surname>Detienne</surname><given-names>Ghislain</given-names></name>
        <name><surname>Deschuyteneer</surname><given-names>Thierry</given-names></name>
        <name><surname>Richel</surname><given-names>Aurore</given-names></name>
        <name><surname>Ernst</surname><given-names>Damien</given-names></name>
      </person-group>
      <article-title>Remote Renewable Hubs for Carbon-Neutral Synthetic Fuel Production</article-title>
      <source>Frontiers in Energy Research</source>
      <year iso-8601-date="2021">2021</year>
      <volume>9</volume>
      <pub-id pub-id-type="doi">10.3389/fenrg.2021.671279</pub-id>
      <fpage>200</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
