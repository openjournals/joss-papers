<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6575</article-id>
<article-id pub-id-type="doi">10.21105/joss.06575</article-id>
<title-group>
<article-title>Pyrimidine: An algebra-inspired Programming framework for
evolutionary algorithms</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4409-7276</contrib-id>
<name>
<surname>Song</surname>
<given-names>Congwei</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Beijing Institute of Mathematical Sciences and
Applications, Beijing, China</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-12-12">
<day>12</day>
<month>12</month>
<year>2023</year>
</pub-date>
<volume>10</volume>
<issue>114</issue>
<fpage>6575</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>genetic algorithms</kwd>
<kwd>evolutionary algorithms</kwd>
<kwd>intelligent algorithms</kwd>
<kwd>algebraic system</kwd>
<kwd>meta-programming</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="pyrimidine-an-algebra-inspired-programming-framework-for-evolutionary-algorithms">
  <title><monospace>Pyrimidine</monospace>: An algebra-inspired
  Programming framework for evolutionary algorithms</title>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p><ext-link ext-link-type="uri" xlink:href="https://github.com/Freakwill/pyrimidine"><monospace>Pyrimidine</monospace></ext-link>
  stands as a versatile framework designed for genetic algorithms (GAs),
  offering exceptional extensibility for a wide array of evolutionary
  algorithms.</p>
  <p>Leveraging the principles of object-oriented programming (OOP) and
  the meta-programming, we introduce a distinctive design paradigm
  coined as “algebra-inspired Programming”, signifying the fusion of
  algebraic methodologies with the software architecture.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>GAs
  (<xref alt="Holland, 1975" rid="ref-holland" ref-type="bibr">Holland,
  1975</xref>;
  <xref alt="Katoch et al., 2021" rid="ref-katoch" ref-type="bibr">Katoch
  et al., 2021</xref>) have found extensive application across various
  domains and have undergone modifications and integrations with new
  algorithms
  (<xref alt="Alam et al., 2020" rid="ref-alam" ref-type="bibr">Alam et
  al., 2020</xref>;
  <xref alt="Cheng &amp; Alkhalifah, 2023" rid="ref-cheng" ref-type="bibr">Cheng
  &amp; Alkhalifah, 2023</xref>;
  <xref alt="Katoch et al., 2021" rid="ref-katoch" ref-type="bibr">Katoch
  et al., 2021</xref>). For details about the principles of GA, refer to
  the references
  (<xref alt="Holland, 1975" rid="ref-holland" ref-type="bibr">Holland,
  1975</xref>;
  <xref alt="Simon, 2013" rid="ref-simon" ref-type="bibr">Simon,
  2013</xref>).</p>
  <p>In a typical Python implementation, populations are defined as
  lists of individuals, with each individual represented by a chromosome
  composed of a list of genes. Creating an individual can be achieved
  utilizing either the standard library’s <monospace>array</monospace>
  or the widely-used third-party library
  <ext-link ext-link-type="uri" xlink:href="https://numpy.org/"><monospace>numpy</monospace></ext-link>
  (<xref alt="Harris et al., 2020" rid="ref-numpy" ref-type="bibr">Harris
  et al., 2020</xref>). The evolutionary operators are defined on these
  structures.</p>
  <p>A concise comparison between <monospace>pyrimidine</monospace> and
  other frameworks is provided in
  <xref alt="Table 1" rid="frameworks">Table 1</xref>.</p>
  <table-wrap>
    <caption>
      <p>Comparison of the popular genetic algorithm frameworks.
      <styled-content id="frameworks"></styled-content></p>
    </caption>
    <table>
      <colgroup>
        <col width="24%" />
        <col width="16%" />
        <col width="18%" />
        <col width="18%" />
        <col width="22%" />
      </colgroup>
      <thead>
        <tr>
          <th align="center">Library</th>
          <th align="left">Design Style</th>
          <th align="left">Versatility</th>
          <th align="left">Extensibility</th>
          <th align="left">Visualization</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="center"><monospace>pyrimidine</monospace></td>
          <td align="left">OOP, Meta-programming, Algebra-insprited</td>
          <td align="left">Universal</td>
          <td align="left">Extensible</td>
          <td align="left">export the data in
          <monospace>DataFrame</monospace></td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://deap.readthedocs.io/"><monospace>DEAP</monospace></ext-link></td>
          <td align="left">OOP, Functional, Meta-programming</td>
          <td align="left">Universal</td>
          <td align="left">Limited by its philosophy</td>
          <td align="left">export the data in the class
          <monospace>LogBook</monospace></td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://github.com/PytLab/gaft"><monospace>gaft</monospace></ext-link></td>
          <td align="left">OOP, decoration pattern</td>
          <td align="left">Universal</td>
          <td align="left">Extensible</td>
          <td align="left">Easy to Implement</td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://geppy.readthedocs.io/"><monospace>geppy</monospace></ext-link></td>
          <td align="left">based on <monospace>DEAP</monospace></td>
          <td align="left">Symbolic Regression</td>
          <td align="left">Limited</td>
          <td align="left">-</td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://github.com/EpistasisLab/tpot"><monospace>tpot</monospace></ext-link>
          /<ext-link ext-link-type="uri" xlink:href="https://github.com/openml-labs/gama"><monospace>gama</monospace></ext-link></td>
          <td align="left"><ext-link ext-link-type="uri" xlink:href="https://scikit-learn.org/">scikit-learn</ext-link>
          Style</td>
          <td align="left">Hyperparameter Optimization</td>
          <td align="left">Limited</td>
          <td align="left">-</td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://gplearn.readthedocs.io/"><monospace>gplearn</monospace></ext-link>/<ext-link ext-link-type="uri" xlink:href="https://astroautomata.com/PySR/"><monospace>pysr</monospace></ext-link></td>
          <td align="left">scikit-learn Style</td>
          <td align="left">Symbolic Regression</td>
          <td align="left">Limited</td>
          <td align="left">-</td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://github.com/guofei9987/scikit-opt"><monospace>scikit-opt</monospace></ext-link></td>
          <td align="left">scikit-learn Style</td>
          <td align="left">Numerical Optimization</td>
          <td align="left">Unextensible</td>
          <td align="left">Encapsulated as a data frame</td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://scikit-optimize.github.io/stable/"><monospace>scikit-optimize</monospace></ext-link></td>
          <td align="left">scikit-learn Style</td>
          <td align="left">Numerical Optimization</td>
          <td align="left">Very Limited</td>
          <td align="left">provide some plotting function</td>
        </tr>
        <tr>
          <td align="center"><ext-link ext-link-type="uri" xlink:href="https://neat-python.readthedocs.io/"><monospace>NEAT</monospace></ext-link></td>
          <td align="left">OOP</td>
          <td align="left">Neuroevolution</td>
          <td align="left">Limited</td>
          <td align="left">use the visualization tools</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p><monospace>Tpot</monospace>/<monospace>gama</monospace>
  (<xref alt="Gijsbers &amp; Vanschoren, 2021" rid="ref-pieter" ref-type="bibr">Gijsbers
  &amp; Vanschoren, 2021</xref>;
  <xref alt="Olson et al., 2016" rid="ref-olson" ref-type="bibr">Olson
  et al., 2016</xref>),
  <monospace>gplearn</monospace>/<monospace>pysr</monospace>, and
  <monospace>scikit-opt</monospace> follow the scikit-learn style
  (<xref alt="Buitinck et al., 2013" rid="ref-sklearn_api" ref-type="bibr">Buitinck
  et al., 2013</xref>), providing fixed APIs with limited extensibility.
  They are merely serving their respective fields effectively (including
  <monospace>NEAT</monospace>
  (<xref alt="McIntyre et al., 2019" rid="ref-neat-python" ref-type="bibr">McIntyre
  et al., 2019</xref>)).</p>
  <p><monospace>DEAP</monospace>
  (<xref alt="Fortin et al., 2012" rid="ref-fortin" ref-type="bibr">Fortin
  et al., 2012</xref>) is feature-rich and mature. However, it adopts a
  tedious meta-programming style and some parts of the code lack
  decoupling, limiting its extensibility. <monospace>Gaft</monospace> is
  highly object-oriented and scalable, but inactive now.</p>
  <p><monospace>Pyrimidine</monospace> fully utilizes the OOP and
  meta-programming capabilities of Python, making the design of the APIs
  and the extension of the program more natural. So far, we have
  implemented a variety of optimization algorithms by
  <monospace>pyrimidine</monospace>, including adaptive GA
  (<xref alt="Hinterding et al., 1997" rid="ref-hinterding" ref-type="bibr">Hinterding
  et al., 1997</xref>), quantum GA
  (<xref alt="Supasil et al., 2021" rid="ref-supasil" ref-type="bibr">Supasil
  et al., 2021</xref>), differential evolution
  (<xref alt="Radtke et al., 2020" rid="ref-radtke" ref-type="bibr">Radtke
  et al., 2020</xref>), evolutionary programming
  (<xref alt="Fogel &amp; Fogel, 1986" rid="ref-fogel" ref-type="bibr">Fogel
  &amp; Fogel, 1986</xref>), particle swarm optimization
  (<xref alt="Wang et al., 2018" rid="ref-wang" ref-type="bibr">Wang et
  al., 2018</xref>), as well as some local search algorithms, such as
  simulated annealing
  (<xref alt="Kirkpatrick et al., 1983" rid="ref-kirkpatrick" ref-type="bibr">Kirkpatrick
  et al., 1983</xref>).</p>
  <p>To meet diverse demands, it provides enough encoding schemes for
  solutions to optimization problems, including Boolean, integer, real
  number types and their hybrid forms.</p>
</sec>
<sec id="algebra-inspired-programming">
  <title>Algebra-inspired programming</title>
  <p>The innovative approach is termed “algebra-inspired Programming”.
  It should not be confused with so-called algebraic programming
  (<xref alt="Kapitonova &amp; Letichevskii, 1993" rid="ref-kapitonova" ref-type="bibr">Kapitonova
  &amp; Letichevskii, 1993</xref>), but it draws inspiration from its
  underlying principles.</p>
  <p>The advantages of the model are summarized as follows:</p>
  <list list-type="order">
    <list-item>
      <p>The population system and genetic operations are treated as an
      algebraic system, and genetic algorithms are constructed by
      imitating algebraic operations.</p>
    </list-item>
    <list-item>
      <p>It is highly extensible. For example it is easy to define
      multi-populations, even so-called hybrid-populations.</p>
    </list-item>
    <list-item>
      <p>The code is more concise.</p>
    </list-item>
  </list>
  <sec id="basic-concepts">
    <title>Basic concepts</title>
    <p>We introduce the concept of a <bold>container</bold>, simulating
    an <bold>(algebraic) system</bold> where specific operators are not
    yet defined.</p>
    <p>A container <inline-formula><alternatives>
    <tex-math><![CDATA[s]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>s</mml:mi></mml:math></alternatives></inline-formula>
    of type <inline-formula><alternatives>
    <tex-math><![CDATA[S]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>S</mml:mi></mml:math></alternatives></inline-formula>,
    with elements of type <inline-formula><alternatives>
    <tex-math><![CDATA[A]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>A</mml:mi></mml:math></alternatives></inline-formula>,
    is represented by the following expression:
    <named-content id="eqU003Acontainer" content-type="equation"><disp-formula><alternatives>
    <tex-math><![CDATA[
    s = \{a:A\}: S \quad \text{or} \quad s:S[A]\,,]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:mi>a</mml:mi><mml:mo>:</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mo>:</mml:mo><mml:mi>S</mml:mi><mml:mspace width="1.0em"></mml:mspace><mml:mtext mathvariant="normal">or</mml:mtext><mml:mspace width="1.0em"></mml:mspace><mml:mi>s</mml:mi><mml:mo>:</mml:mo><mml:mi>S</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mspace width="0.167em"></mml:mspace><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></named-content>
    where the symbol <inline-formula><alternatives>
    <tex-math><![CDATA[\{\cdot\}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:mi>⋅</mml:mi><mml:mo stretchy="false" form="postfix">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
    signifies either a set, or a sequence to emphasize the order of the
    elements. The notation <inline-formula><alternatives>
    <tex-math><![CDATA[S[A]]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>S</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    mimicks Python syntax, borrowed from the module
    <ext-link ext-link-type="uri" xlink:href="https://docs.python.org/3.11/library/typing.html?highlight=typing#module-typing">typing</ext-link>.</p>
    <p>Building upon the concept, we define a population in
    <monospace>pyrimidine</monospace> as a container of individuals. The
    introduction of multi-population further extends this notion,
    representing a container of populations, referred to as “the
    high-order container”. <monospace>Pyrimidine</monospace>
    distinguishes itself with its inherent ability to seamlessly
    implement multi-population GAs.</p>
    <p>An individual is conceptualized as a container of chromosomes,
    without necessarily being an algebraic system. Similarly, a
    chromosome acts as a container of genes.</p>
    <p>In a population system <inline-formula><alternatives>
    <tex-math><![CDATA[s]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>s</mml:mi></mml:math></alternatives></inline-formula>,
    the formal representation of the crossover operation between two
    individuals is denoted as <inline-formula><alternatives>
    <tex-math><![CDATA[a \times_s b]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>a</mml:mi><mml:msub><mml:mo>×</mml:mo><mml:mi>s</mml:mi></mml:msub><mml:mi>b</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
    that can be implemented as the command
    <monospace>s.cross(a, b)</monospace>. Although this system concept
    aligns with algebraic systems, the current version diverges from
    this notion, and the operators are directly defined as methods of
    the elements, such as <monospace>a.cross(b)</monospace>.</p>
    <p>The lifting of a function/method <inline-formula><alternatives>
    <tex-math><![CDATA[f]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>f</mml:mi></mml:math></alternatives></inline-formula>
    is a common approach to defining the function/method for the system:
    <disp-formula><alternatives>
    <tex-math><![CDATA[
    f(s) := \{f(a)\}\,,
    ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>:=</mml:mo><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mspace width="0.167em"></mml:mspace><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
    unless explicitly redefined. For example, the mutation of a
    population typically involves the mutation of all individuals in it.
    Other types of lifting are allowed.</p>
    <p><monospace>transition</monospace> is the primary method in the
    iterative algorithms, denoted as a transform:
    <disp-formula><alternatives>
    <tex-math><![CDATA[
    T(s): S\to S\,.
    ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>T</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>:</mml:mo><mml:mi>S</mml:mi><mml:mo>→</mml:mo><mml:mi>S</mml:mi><mml:mspace width="0.167em"></mml:mspace><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></p>
  </sec>
  <sec id="metaclasses">
    <title>Metaclasses</title>
    <p>A metaclass should be defined to simulate abstract algebraic
    systems, which are instantiated as a set containing several
    elements, as well as operators and functions on them. Currently, the
    metaclass <monospace>MetaContainer</monospace> is proposed to create
    container classes without defining operators explicitly.</p>
  </sec>
  <sec id="mixin-classes">
    <title>Mixin classes</title>
    <p>Mixin classes specify the basic functionality of the
    algorithm.</p>
    <p>The <monospace>FitnessMixin</monospace> class is dedicated to the
    iteration process focused on maximizing fitness, and its subclass
    <monospace>PopulationMixin</monospace> represents the collective
    form.</p>
    <p>When designing a novel algorithm, significantly differing from
    the GA, it is advisable to start by inheriting from the mixin
    classes.</p>
  </sec>
  <sec id="base-classes">
    <title>Base Classes</title>
    <p>There are three base classes in
    <monospace>pyrimidine</monospace>:
    <monospace>BaseChromosome</monospace>,
    <monospace>BaseIndividual</monospace>,
    <monospace>BasePopulation</monospace>, to create chromosomes,
    individuals and populations respectively.</p>
    <p>Generally, the algorithm design starts as follows.</p>
    <code language="python">class UserIndividual(MonoIndividual):
    element_class = BinaryChromosome

    def _fitness(self):
        # Compute the fitness

class UserPopulation(StandardPopulation):
    element_class = UserIndividual
    default_size = 10</code>
    <p>Here, <monospace>MonoIndividual</monospace> represents an
    individual with a single chromosome.
    <monospace>UserIndividual</monospace> (or
    <monospace>UserPopulation</monospace>) serves as a container of
    elements in type of <monospace>BinaryChromosome</monospace> (or
    <monospace>UserIndividual</monospace>). Instead of setting the
    <monospace>fitness</monospace> attribute, users are recommended to
    override the <monospace>_fitness</monospace> method, where the
    concrete fitness computation is defined. Following is the equivalent
    expression, using the notion in
    <xref alt="Equation 1" rid="eqU003Acontainer">Equation 1</xref>:</p>
    <code language="python">UserIndividual = MonoIndividual[BinaryChromosome]
UserPopulation = StandardPopulation[UserIndividual] // 10</code>
    <p>Algebraically, there is no difference between
    <monospace>MonoIndividual</monospace> and
    <monospace>Chromosome</monospace>. And the population also can be
    treated as a container of chromosomes as follows.</p>
    <code language="python">class UserChromosome(BaseChromosome):
    def _fitness(self):
        # Compute the fitness

UserPopulation = StandardPopulation[UserChromosome] // 10</code>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-holland">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Holland</surname><given-names>J.</given-names></name>
      </person-group>
      <source>Adaptation in natural and artificial systems</source>
      <publisher-name>The Univ. of Michigan</publisher-name>
      <year iso-8601-date="1975">1975</year>
      <pub-id pub-id-type="doi">10.7551/mitpress/1090.001.0001</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-fortin">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fortin</surname><given-names>Félix-Antoine</given-names></name>
        <name><surname>Rainville</surname><given-names>François-Michel De</given-names></name>
        <name><surname>Gardner</surname><given-names>Marc-André</given-names></name>
        <name><surname>Parizeau</surname><given-names>Marc</given-names></name>
        <name><surname>Gagné</surname><given-names>Christian</given-names></name>
      </person-group>
      <article-title>DEAP: Evolutionary algorithms made easy</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2012">2012</year>
      <volume>13</volume>
      <uri>https://github.com/DEAP/deap</uri>
      <fpage>2171</fpage>
      <lpage>2175</lpage>
    </element-citation>
  </ref>
  <ref id="ref-olson">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Olson</surname><given-names>Randal S.</given-names></name>
        <name><surname>Urbanowicz</surname><given-names>Ryan J.</given-names></name>
        <name><surname>Andrews</surname><given-names>Peter C.</given-names></name>
        <name><surname>Lavender</surname><given-names>Nicole A.</given-names></name>
        <name><surname>Kidd</surname><given-names>La Creis</given-names></name>
        <name><surname>Moore</surname><given-names>Jason H.</given-names></name>
      </person-group>
      <article-title>Automating biomedical data science through tree-based pipeline optimization</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2016">2016</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-31204-0_9</pub-id>
      <fpage>123</fpage>
      <lpage>137</lpage>
    </element-citation>
  </ref>
  <ref id="ref-katoch">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Katoch</surname><given-names>S.</given-names></name>
        <name><surname>Chauhan</surname><given-names>S. S.</given-names></name>
        <name><surname>Kumar</surname><given-names>V.</given-names></name>
      </person-group>
      <article-title>A review on genetic algorithm: Past, present, and future</article-title>
      <source>Multimed Tools Appl</source>
      <year iso-8601-date="2021">2021</year>
      <volume>80</volume>
      <pub-id pub-id-type="doi">10.1007/s11042-020-10139-6</pub-id>
      <fpage>8091</fpage>
      <lpage>8126</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sklearn_api">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Buitinck</surname><given-names>Lars</given-names></name>
        <name><surname>Louppe</surname><given-names>Gilles</given-names></name>
        <name><surname>Blondel</surname><given-names>Mathieu</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>Mueller</surname><given-names>Andreas</given-names></name>
        <name><surname>Grisel</surname><given-names>Olivier</given-names></name>
        <name><surname>Niculae</surname><given-names>Vlad</given-names></name>
        <name><surname>Prettenhofer</surname><given-names>Peter</given-names></name>
        <name><surname>Gramfort</surname><given-names>Alexandre</given-names></name>
        <name><surname>Grobler</surname><given-names>Jaques</given-names></name>
        <name><surname>Layton</surname><given-names>Robert</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Joly</surname><given-names>Arnaud</given-names></name>
        <name><surname>Holt</surname><given-names>Brian</given-names></name>
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
      </person-group>
      <article-title>API design for machine learning software: Experiences from the scikit-learn project</article-title>
      <source>ECML PKDD workshop: Languages for data mining and machine learning</source>
      <year iso-8601-date="2013">2013</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1309.0238</pub-id>
      <fpage>108</fpage>
      <lpage>122</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cheng">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cheng</surname><given-names>Shijun</given-names></name>
        <name><surname>Alkhalifah</surname><given-names>Tariq</given-names></name>
      </person-group>
      <article-title>Robust data driven discovery of a seismic wave equation</article-title>
      <source>Geophysical Journal International</source>
      <year iso-8601-date="2023-11">2023</year><month>11</month>
      <volume>236</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1093/gji/ggad446</pub-id>
      <fpage>537</fpage>
      <lpage>546</lpage>
    </element-citation>
  </ref>
  <ref id="ref-supasil">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Supasil</surname><given-names>Jirayu</given-names></name>
        <name><surname>Pathumsoot</surname><given-names>Poramet</given-names></name>
        <name><surname>Suwanna</surname><given-names>Sujin</given-names></name>
      </person-group>
      <article-title>Simulation of implementable quantum-assisted genetic algorithm</article-title>
      <source>Journal of Physics: Conference Series</source>
      <publisher-name>IOP Publishing</publisher-name>
      <year iso-8601-date="2021-01">2021</year><month>01</month>
      <volume>1719</volume>
      <issue>1</issue>
      <uri>https://dx.doi.org/10.1088/1742-6596/1719/1/012102</uri>
      <pub-id pub-id-type="doi">10.1088/1742-6596/1719/1/012102</pub-id>
      <fpage>012102</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pieter">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Gijsbers</surname><given-names>Pieter</given-names></name>
        <name><surname>Vanschoren</surname><given-names>Joaquin</given-names></name>
      </person-group>
      <article-title>GAMA: A general automated machine learning assistant</article-title>
      <source>Machine learning and knowledge discovery in databases. Applied data science and demo track</source>
      <person-group person-group-type="editor">
        <name><surname>Dong</surname><given-names>Yuxiao</given-names></name>
        <name><surname>Ifrim</surname><given-names>Georgiana</given-names></name>
        <name><surname>Mladenić</surname><given-names>Dunja</given-names></name>
        <name><surname>Saunders</surname><given-names>Craig</given-names></name>
        <name><surname>Van Hoecke</surname><given-names>Sofie</given-names></name>
      </person-group>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.1007/978-3-030-67670-4_39</pub-id>
      <fpage>560</fpage>
      <lpage>564</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hinterding">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hinterding</surname><given-names>R.</given-names></name>
        <name><surname>Michalewicz</surname><given-names>Z.</given-names></name>
        <name><surname>Eiben</surname><given-names>A. E.</given-names></name>
      </person-group>
      <article-title>Adaptation in evolutionary computation: A survey</article-title>
      <source>Proceedings of 1997 IEEE international conference on evolutionary computation (ICEC ’97)</source>
      <year iso-8601-date="1997">1997</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ICEC.1997.592270</pub-id>
      <fpage>65</fpage>
      <lpage>69</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wang">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wang</surname><given-names>Dongshu</given-names></name>
        <name><surname>Tan</surname><given-names>Dapei</given-names></name>
        <name><surname>Liu</surname><given-names>Lei</given-names></name>
      </person-group>
      <article-title>Particle swarm optimization algorithm: An overview</article-title>
      <source>Soft Computing</source>
      <year iso-8601-date="2018">2018</year>
      <volume>22</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1007/s00500-016-2474-6</pub-id>
      <fpage>387</fpage>
      <lpage>408</lpage>
    </element-citation>
  </ref>
  <ref id="ref-alam">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Alam</surname><given-names>Tanweer</given-names></name>
        <name><surname>Qamar</surname><given-names>Shamimul</given-names></name>
        <name><surname>Dixit</surname><given-names>Amit</given-names></name>
        <name><surname>Benaida</surname><given-names>Mohamed</given-names></name>
      </person-group>
      <article-title>Genetic algorithm: Reviews, implementations, and applications</article-title>
      <source>CompSciRN: Computer Principles (Topic)</source>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.22541/au.159164762.28487263</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-simon">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Simon</surname><given-names>D.</given-names></name>
      </person-group>
      <source>Evolutionary optimization algorithms: Biologically inspired and population-based approaches to computer intelligence</source>
      <publisher-name>John Wiley &amp; Sons</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <uri>https://api.semanticscholar.org/CorpusID:60429433</uri>
    </element-citation>
  </ref>
  <ref id="ref-neat-python">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>McIntyre</surname><given-names>Alan</given-names></name>
        <name><surname>Kallada</surname><given-names>Matt</given-names></name>
        <name><surname>Miguel</surname><given-names>Cesar G</given-names></name>
        <name><surname>Silva</surname><given-names>Carolina Feher da</given-names></name>
      </person-group>
      <article-title>Neat-python</article-title>
      <source>CodeReclaimers/neat-python</source>
      <year iso-8601-date="2019">2019</year>
      <uri>https://github.com/CodeReclaimers/neat-python</uri>
    </element-citation>
  </ref>
  <ref id="ref-radtke">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Radtke</surname><given-names>Jonas Joacir</given-names></name>
        <name><surname>Bertoldo</surname><given-names>Guilherme</given-names></name>
        <name><surname>Marchi</surname><given-names>Carlos Henrique</given-names></name>
      </person-group>
      <article-title>DEPP - differential evolution parallel program</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>47</issue>
      <uri>10.21105/joss.01701</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01701</pub-id>
      <fpage>1701</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-fogel">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Fogel</surname><given-names>L. J.</given-names></name>
        <name><surname>Fogel</surname><given-names>D. B.</given-names></name>
      </person-group>
      <article-title>Artificial intelligence through evolutionary programming: Prediction and identification</article-title>
      <publisher-name>U.S. Army Research Institute</publisher-name>
      <year iso-8601-date="1986">1986</year>
      <uri>https://apps.dtic.mil/sti/tr/pdf/ADA171544.pdf</uri>
      <pub-id pub-id-type="doi">10.21236/ada171544</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kirkpatrick">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kirkpatrick</surname><given-names>Scott</given-names></name>
        <name><surname>Gelatt</surname><given-names>Charles D.</given-names></name>
        <name><surname>Vecchi</surname><given-names>Mario P.</given-names></name>
      </person-group>
      <article-title>Optimization by simulated annealing</article-title>
      <source>Science</source>
      <year iso-8601-date="1983">1983</year>
      <volume>220</volume>
      <pub-id pub-id-type="doi">10.1126/science.220.4598.671</pub-id>
      <fpage>671 </fpage>
      <lpage> 680</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kapitonova">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kapitonova</surname><given-names>Y. V.</given-names></name>
        <name><surname>Letichevskii</surname><given-names>A. A.</given-names></name>
      </person-group>
      <article-title>Algebraic programming: Methods and tools</article-title>
      <source>Cybern Syst Anal</source>
      <year iso-8601-date="1993">1993</year>
      <volume>29</volume>
      <pub-id pub-id-type="doi">10.1007/BF01125535</pub-id>
      <fpage>307</fpage>
      <lpage>312</lpage>
    </element-citation>
  </ref>
  <ref id="ref-numpy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
