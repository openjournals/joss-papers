<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6089</article-id>
<article-id pub-id-type="doi">10.21105/joss.06089</article-id>
<title-group>
<article-title>Viash: A meta-framework for building reusable workflow
modules</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3641-729X</contrib-id>
<name>
<surname>Cannoodt</surname>
<given-names>Robrecht</given-names>
</name>
<email>robrecht@data-intuitive.com</email>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0032-6719</contrib-id>
<name>
<surname>Cannoodt</surname>
<given-names>Hendrik</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4389-0440</contrib-id>
<name>
<surname>Schaumont</surname>
<given-names>Dries</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0003-8555-1361</contrib-id>
<name>
<surname>Waldrant</surname>
<given-names>Kai</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Van de Kerckhove</surname>
<given-names>Eric</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0008-8793-4661</contrib-id>
<name>
<surname>Boschmans</surname>
<given-names>Andy</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1314-3348</contrib-id>
<name>
<surname>De Maeyer</surname>
<given-names>Dries</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7007-6866</contrib-id>
<name>
<surname>Verbeiren</surname>
<given-names>Toni</given-names>
</name>
<email>toni@data-intuitive.com</email>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Data Intuitive, Lebbeke, Belgium</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Data Mining and Modelling for Biomedicine group, VIB Center
for Inflammation Research, Ghent, Belgium</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Applied Mathematics, Computer Science, and
Statistics, Ghent University, Ghent, Belgium</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Discovery Technology and Molecular Pharmacology, Janssen
Research &amp; Development, Pharmaceutical Companies of Johnson &amp;
Johnson, Beerse, Belgium</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>9</volume>
<issue>93</issue>
<fpage>6089</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Bioinformatics</kwd>
<kwd>Workflows</kwd>
<kwd>Software development</kwd>
<kwd>Reproducibility</kwd>
<kwd>Cloud computing</kwd>
<kwd>Docker</kwd>
<kwd>Nextflow</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="abstract">
  <title>Abstract</title>
  <p>Most bioinformatics workflows consist of software components that
  are tightly coupled to the logic of the workflow itself. This limits
  reusability of the individual components in the workflow or introduces
  maintenance overhead when they need to be reimplemented in multiple
  workflows. We introduce Viash, a tool for speeding up development of
  robust workflows through “code-first” prototyping, separation of
  concerns and code generation of modular workflow components. By
  decoupling the component functionality from the workflow logic,
  component functionality becomes fully workflow-agnostic, and
  conversely the resulting workflows are agnostic towards specific
  component requirements. This separation of concerns improves
  reusability of components and facilitates multidisciplinary and
  pan-organisational collaborations. It has been applied in a variety of
  projects, from proof-of-concept workflows to supporting an
  international data science competition.</p>
  <p>Viash is available as an open-source project at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/viash-io/viash">github.com/viash-io/viash</ext-link>
  and documentation is available at
  <ext-link ext-link-type="uri" xlink:href="https://viash.io">viash.io</ext-link>.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Recent developments in high-throughput RNA sequencing and imaging
  technologies allow present-day biologists to observe single-cell
  characteristics in ever more detail
  (<xref alt="Luecken &amp; Theis, 2019" rid="ref-luecken_currentbestpractices_2019" ref-type="bibr">Luecken
  &amp; Theis, 2019</xref>). As the dataset size and the complexity of
  bioinformatics workflows increases, so does the need for scalable and
  reproducible data science. In single cell biology, recent efforts to
  standardise some of the most common single-cell analyses
  (<xref alt="Amezquita et al., 2019" rid="ref-amezquita_orchestratingsinglecell_2020" ref-type="bibr">Amezquita
  et al., 2019</xref>;
  <xref alt="Ewels et al., 2020" rid="ref-nfcoreframeworkcommunity_ewels2020" ref-type="bibr">Ewels
  et al., 2020</xref>;
  <xref alt="Heumos et al., 2023" rid="ref-huemos_bestpracticessingle_2023" ref-type="bibr">Heumos
  et al., 2023</xref>) tackle these challenges by using a workflow
  framework (e.g., Snakemake, Nextflow), containerisation (e.g., Docker,
  Podman), and horizontal scaling in cloud computing (e.g., Kubernetes,
  HPC).</p>
  <p>Since research projects are increasingly more complex and
  interdisciplinary, researchers from different fields and backgrounds
  are required to join forces. This implies that not all project
  contributors can be experts in computer science. The chosen framework
  for such projects therefore needs to have a low barrier to entry in
  order for contributors to be able to participate. One common pitfall
  that greatly increases the barrier to entry is tightly coupling a
  workflow and the components it consists of. Major drawbacks include
  lower transparency of the overall workflow, limited reusability of
  workflow components, increased complexity, increased debugging time,
  and a greater amount of time spent refactoring and maintaining
  boilerplate code. Non-expert developers in particular will experience
  more arduous debugging sessions as they need to treat the workflow as
  a black box.</p>
  <p>In this work we introduce Viash, a tool for speeding up workflow
  prototyping through code generation, component modularity, and
  separation of concerns. With Viash, a user can create a workflow
  module by writing a small script or using a pre-existing code block,
  add a small amount of metadata, and use Viash to generate the
  boilerplate code needed to turn it into a modular Nextflow component.
  This separates the component functionality from the workflow logic,
  thereby allowing a component developer to focus on implementing the
  required functionality using the domain-specific toolkit at hand while
  being completely agnostic to the chosen workflow framework. Similarly,
  a workflow developer can design a workflow by chaining together Viash
  modules while being completely agnostic to the scripting language used
  in the component.</p>
</sec>
<sec id="core-features-and-functionality">
  <title>Core features and functionality</title>
  <p>Viash is an open-source embodiment of a ‘code-first’ concept for
  workflow development. Many bioinformatics research projects (and other
  software development projects) start with prototyping functionality in
  small scripts or notebooks in order to then migrate the functionality
  to software packages or workflow frameworks. By adding some metadata
  to a code block or script
  (<xref alt="[fig-overview]" rid="fig-overview">[fig-overview]</xref>A),
  Viash can turn a (small) code block into a highly malleable object. By
  encapsulating core functionality in modular building blocks, one can
  use a Viash component in a myriad of ways
  (<xref alt="[fig-overview]" rid="fig-overview">[fig-overview]</xref>B-C):
  export it as a standalone command-line tool; create a highly intuitive
  and modular Nextflow component; ensure reproducibility by building,
  pulling, or pushing Docker containers; or run one or more unit tests
  to verify that the component works as expected. Integration with CI
  tools such as GitHub Actions, Jenkins, or Travis CI allows for
  automation of unit testing, rolling releases, and versioned
  releases.</p>
  <p>The definition of a Viash component – a config and a code block –
  can be implemented quite concisely
  (<xref alt="[fig-cheatsheet]" rid="fig-cheatsheet">[fig-cheatsheet]</xref>
  left). Viash currently supports different scripting languages,
  including Bash, JavaScript, Python, and R. Through the use of several
  subcommands
  (<xref alt="[fig-cheatsheet]" rid="fig-cheatsheet">[fig-cheatsheet]</xref>
  right), Viash can build the component into a standalone script using
  one of three backend platforms – native, Docker, or Nextflow.
  Additional commands allow processing one or more Viash components
  simultaneously, e.g., for executing a unit test suite or (re-)building
  component-specific Docker images.</p>
  <fig>
    <caption><p>Viash allows easy prototyping of reusable workflow
    components. <bold>A:</bold> Viash requires two main inputs: a script
    (or code block) and a Viash config file. A Viash config file is a
    YAML file with metadata describing the functionality provided by the
    component (e.g., a name and description of the component and its
    parameters), and platform-specific metadata (e.g., the base Docker
    container to use, which software packages are required by the
    component). Optionally, the quality of the component can be improved
    by defining one or more unit tests with which the component
    functionality can be tested. <bold>B:</bold> Viash allows
    transforming a given config to a variety of different outputs.
    <bold>C:</bold> Viash supports robust workflow development by
    allowing users to build their component as a standalone executable
    (with auto-generated CLI), build a Docker image to run the script
    inside, or turn the component into a standalone Nextflow module or
    workflow. If unit tests were defined, Viash can also run all of the
    unit tests and provide users with a
    report.<styled-content id="fig-overview"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/figures/figure_2.pdf" />
  </fig>
  <p>One major benefit of using code regeneration is that best practices
  in workflow development can automatically be applied, whereas
  otherwise this would be left up to the developer to develop and
  maintain. For instance, all standalone executables, Nextflow modules,
  and Docker images are automatically versioned. When parsing
  command-line arguments, checking for the availability of required
  parameters, the existence of required input files, or the
  type-checking of command-line arguments is also automated. Another
  example is helper functions for installing software through tools such
  as apt, apk, yum, pip, or R devtools, as these sometimes require
  additional pre-install commands to update package registries or
  post-install commands to clean up the installation cache to reduce
  image size of the resulting image. Here, Viash could be the technical
  basis for a community of people committed to sharing components that
  everybody can benefit from.</p>
  <fig>
    <caption><p>Cheat sheet for developing modular workflow components
    with Viash, including a sample Viash component (<bold>left</bold>)
    and common commands used throughout the various stages of a
    development cycle
    (<bold>right</bold>).<styled-content id="fig-cheatsheet"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/figures/figure_3.pdf" />
  </fig>
</sec>
<sec id="state-of-the-field">
  <title>State of the field</title>
  <p>The realm of bioinformatics workflow management is evolving
  rapidly, with numerous frameworks and portability solutions emerging
  to address the escalating complexity and scale of data processing
  (<xref alt="Wratten et al., 2021" rid="ref-wratten_reproduciblescalablesharable_2021" ref-type="bibr">Wratten
  et al., 2021</xref>). Viash positions itself uniquely in this
  landscape as a meta-framework, focusing on the creation of portable
  workflow modules.</p>
  <p>Workflow frameworks can be broadly categorised into three broad
  categories: graphical, programmatic, and specification-based types.
  Graphical workflow frameworks such as Galaxy
  (<xref alt="Goecks et al., 2010" rid="ref-goecks_galaxycomprehensiveapproach_2010" ref-type="bibr">Goecks
  et al., 2010</xref>) and KNIME
  (<xref alt="Fillbrunn et al., 2017" rid="ref-fillburn_knimereproduciblecrossdomain_2017" ref-type="bibr">Fillbrunn
  et al., 2017</xref>) are user-friendly for non-coders, while
  programmatic workflow frameworks such as Nextflow
  (<xref alt="Di Tommaso et al., 2017" rid="ref-ditommaso_nextflowenablesreproducible_2017" ref-type="bibr">Di
  Tommaso et al., 2017</xref>), Snakemake
  (<xref alt="Köster &amp; Rahmann, 2012" rid="ref-koster_snakemakescalablebioinformaticsworkflow_2012" ref-type="bibr">Köster
  &amp; Rahmann, 2012</xref>), and WDL
  (<ext-link ext-link-type="uri" xlink:href="https://openwdl.org">https://openwdl.org</ext-link>)
  offer a DSL or programming library for developers. Specification-based
  workflow frameworks such as CWL
  (<xref alt="Crusoe et al., 2022" rid="ref-crusoe_methodsincludestandardizing_2022" ref-type="bibr">Crusoe
  et al., 2022</xref>) lie somewhere in between. These allow one to
  describe and execute workflows with specification files (e.g., in
  YAML), and these specification files can be constructed using
  graphical or programmatic interfaces.</p>
  <p>Portability solutions are critical for ensuring reproducibility.
  These can be divided into package managers like Conda for automated
  installation of versioned software, and containerization tools like
  Docker
  (<ext-link ext-link-type="uri" xlink:href="https://www.docker.com">https://www.docker.com</ext-link>)
  and Podman
  (<xref alt="Heon et al., 2018" rid="ref-heon_podmantoolmanaging_2018" ref-type="bibr">Heon
  et al., 2018</xref>), which package and distribute software
  dependencies in a self-contained and platform-independent manner.</p>
  <p>Viash’s role in this landscape is to bridge these diverse tools,
  enabling more efficient and collaborative development in
  bioinformatics workflows.</p>
</sec>
<sec id="applications-in-bioinformatics">
  <title>Applications in bioinformatics</title>
  <p>Ultimately, Viash aims to support pan-organisational and
  interdisciplinary research projects by simplifying collaborative
  development and maintenance of (complex) workflows. While Viash is
  generally applicable to any field where scalable and reproducible data
  processing workflows are needed, one field where it is particularly
  useful is in bioinformatics since it supports most of the commonly
  used technologies in this field, namely Bash, Python, R, Docker, and
  Nextflow.</p>
  <p>The NeurIPS2021 competition organised by OpenProblems demonstrates
  the practical value of Viash
  (<xref alt="Luecken et al., 2021" rid="ref-luecken_sandboxpredictionintegration_2021" ref-type="bibr">Luecken
  et al., 2021</xref>). As part of the preparation for the competition,
  a pilot benchmark was implemented to evaluate and compare the
  performance of a few baseline methods
  (<xref alt="[fig-usecase]" rid="fig-usecase">[fig-usecase]</xref>A).
  By pre-defining the input-output interfaces of several types of
  components (e.g., dataset loaders, baseline methods, control methods,
  metrics), developers from different organisations across the globe
  could easily contribute Viash components to the workflow
  (<xref alt="[fig-usecase]" rid="fig-usecase">[fig-usecase]</xref>B).
  Since Viash automatically generates Docker containers and Nextflow
  workflows from the metadata provided by component developers,
  developers could contribute components whilst making use of their
  programming environment of choice without needing to have any expert
  knowledge of Nextflow or Amazon EC2. Thanks to the modularity of Viash
  components, the same components used in running a pilot benchmark are
  also used by the evaluation worker of the competition website itself.
  As such, the pilot benchmark also serves as an integration test of the
  evaluation worker.</p>
  <fig>
    <caption><p>A recent NeurIPS competition for multimodal data
    integration
    (<xref alt="Luecken et al., 2021" rid="ref-luecken_sandboxpredictionintegration_2021" ref-type="bibr">Luecken
    et al., 2021</xref>) demonstrates the practical value of Viash by
    using Bash, R, Python, Docker, Nextflow, Viash, and Amazon EC2 as
    core technologies to run a pilot benchmark. <bold>A:</bold> The
    pilot benchmark workflow consists of several types of components,
    each of which had strict predefined input-output interfaces.
    <bold>B:</bold> Comparing which organisations contributed one or
    more Viash components to the workflow demonstrates that Viash allows
    multiple organisations to participate in developing a workflow
    collaboratively. Developers are encouraged to implement components
    in their preferred scripting language. Thanks to the modularity
    provided by Viash, sewing together multiple components into a
    Nextflow workflow can be left up to a few developers, without
    requiring all collaborators to have expert knowledge regarding
    infrastructure-specific technologies. Note: this visualisation
    pertains to one aspect of organising the NeurIPS competition, and
    does not at all reflect the overall efforts made by any
    party.<styled-content id="fig-usecase"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/figures/figure_4.pdf" />
  </fig>
</sec>
<sec id="discussion">
  <title>Discussion</title>
  <p>Viash is under active development. Active areas of development
  include expanded compatibility between Viash and other technologies
  (i.e., additional scripting languages, containerisation frameworks,
  and workflow frameworks), and ease-of-use functionality for developing
  and managing large catalogues of Viash components (e.g., simplified
  continuous integration, allowing project-wide settings, automating
  versioned releases).</p>
  <p>We appreciate and encourage contributions to or extensions of
  Viash. All source code is available under a GPL-3 licence on Github at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/viash-io/viash">github.com/viash-io/viash</ext-link>.
  Extensive user documentation is available at
  <ext-link ext-link-type="uri" xlink:href="https://viash.io">viash.io</ext-link>.
  Requests for support or expanded functionality can be addressed to the
  corresponding authors.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-koster_snakemakescalablebioinformaticsworkflow_2012">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Köster</surname><given-names>Johannes</given-names></name>
        <name><surname>Rahmann</surname><given-names>Sven</given-names></name>
      </person-group>
      <article-title>Snakemake—a scalable bioinformatics workflow engine</article-title>
      <source>Bioinformatics</source>
      <publisher-name>Oxford University Press (OUP)</publisher-name>
      <year iso-8601-date="2012-08">2012</year><month>08</month>
      <volume>28</volume>
      <issue>19</issue>
      <issn>1367-4803</issn>
      <uri>http://dx.doi.org/10.1093/bioinformatics/bts480</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
      <fpage>2520</fpage>
      <lpage>2522</lpage>
    </element-citation>
  </ref>
  <ref id="ref-amezquita_orchestratingsinglecell_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Amezquita</surname><given-names>Robert A.</given-names></name>
        <name><surname>Lun</surname><given-names>Aaron T. L.</given-names></name>
        <name><surname>Becht</surname><given-names>Etienne</given-names></name>
        <name><surname>Carey</surname><given-names>Vince J.</given-names></name>
        <name><surname>Carpp</surname><given-names>Lindsay N.</given-names></name>
        <name><surname>Geistlinger</surname><given-names>Ludwig</given-names></name>
        <name><surname>Marini</surname><given-names>Federico</given-names></name>
        <name><surname>Rue-Albrecht</surname><given-names>Kevin</given-names></name>
        <name><surname>Risso</surname><given-names>Davide</given-names></name>
        <name><surname>Soneson</surname><given-names>Charlotte</given-names></name>
        <name><surname>Waldron</surname><given-names>Levi</given-names></name>
        <name><surname>Pagès</surname><given-names>Hervé</given-names></name>
        <name><surname>Smith</surname><given-names>Mike L.</given-names></name>
        <name><surname>Huber</surname><given-names>Wolfgang</given-names></name>
        <name><surname>Morgan</surname><given-names>Martin</given-names></name>
        <name><surname>Gottardo</surname><given-names>Raphael</given-names></name>
        <name><surname>Hicks</surname><given-names>Stephanie C.</given-names></name>
      </person-group>
      <article-title>Orchestrating single-cell analysis with bioconductor</article-title>
      <source>Nature Methods</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2019-12">2019</year><month>12</month>
      <volume>17</volume>
      <issue>2</issue>
      <issn>1548-7105</issn>
      <uri>http://dx.doi.org/10.1038/s41592-019-0654-x</uri>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0654-x</pub-id>
      <fpage>137</fpage>
      <lpage>145</lpage>
    </element-citation>
  </ref>
  <ref id="ref-huemos_bestpracticessingle_2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Heumos</surname><given-names>Lukas</given-names></name>
        <name><surname>Schaar</surname><given-names>Anna C.</given-names></name>
        <name><surname>Lance</surname><given-names>Christopher</given-names></name>
        <name><surname>Litinetskaya</surname><given-names>Anastasia</given-names></name>
        <name><surname>Drost</surname><given-names>Felix</given-names></name>
        <name><surname>Zappia</surname><given-names>Luke</given-names></name>
        <name><surname>Lücken</surname><given-names>Malte D.</given-names></name>
        <name><surname>Strobl</surname><given-names>Daniel C.</given-names></name>
        <name><surname>Henao</surname><given-names>Juan</given-names></name>
        <name><surname>Curion</surname><given-names>Fabiola</given-names></name>
        <name><surname>Aliee</surname><given-names>Hananeh</given-names></name>
        <name><surname>Ansari</surname><given-names>Meshal</given-names></name>
        <name><surname>Badia-i-Mompel</surname><given-names>Pau</given-names></name>
        <name><surname>Büttner</surname><given-names>Maren</given-names></name>
        <name><surname>Dann</surname><given-names>Emma</given-names></name>
        <name><surname>Dimitrov</surname><given-names>Daniel</given-names></name>
        <name><surname>Dony</surname><given-names>Leander</given-names></name>
        <name><surname>Frishberg</surname><given-names>Amit</given-names></name>
        <name><surname>He</surname><given-names>Dongze</given-names></name>
        <name><surname>Hediyeh-zadeh</surname><given-names>Soroor</given-names></name>
        <name><surname>Hetzel</surname><given-names>Leon</given-names></name>
        <name><surname>Ibarra</surname><given-names>Ignacio L.</given-names></name>
        <name><surname>Jones</surname><given-names>Matthew G.</given-names></name>
        <name><surname>Lotfollahi</surname><given-names>Mohammad</given-names></name>
        <name><surname>Martens</surname><given-names>Laura D.</given-names></name>
        <name><surname>Müller</surname><given-names>Christian L.</given-names></name>
        <name><surname>Nitzan</surname><given-names>Mor</given-names></name>
        <name><surname>Ostner</surname><given-names>Johannes</given-names></name>
        <name><surname>Palla</surname><given-names>Giovanni</given-names></name>
        <name><surname>Patro</surname><given-names>Rob</given-names></name>
        <name><surname>Piran</surname><given-names>Zoe</given-names></name>
        <name><surname>Ramírez-Suástegui</surname><given-names>Ciro</given-names></name>
        <name><surname>Saez-Rodriguez</surname><given-names>Julio</given-names></name>
        <name><surname>Sarkar</surname><given-names>Hirak</given-names></name>
        <name><surname>Schubert</surname><given-names>Benjamin</given-names></name>
        <name><surname>Sikkema</surname><given-names>Lisa</given-names></name>
        <name><surname>Srivastava</surname><given-names>Avi</given-names></name>
        <name><surname>Tanevski</surname><given-names>Jovan</given-names></name>
        <name><surname>Virshup</surname><given-names>Isaac</given-names></name>
        <name><surname>Weiler</surname><given-names>Philipp</given-names></name>
        <name><surname>Schiller</surname><given-names>Herbert B.</given-names></name>
        <name><surname>Theis</surname><given-names>Fabian J.</given-names></name>
      </person-group>
      <article-title>Best practices for single-cell analysis across modalities</article-title>
      <source>Nature Reviews Genetics</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2023-03">2023</year><month>03</month>
      <volume>24</volume>
      <issue>8</issue>
      <issn>1471-0064</issn>
      <uri>http://dx.doi.org/10.1038/s41576-023-00586-w</uri>
      <pub-id pub-id-type="doi">10.1038/s41576-023-00586-w</pub-id>
      <fpage>550</fpage>
      <lpage>572</lpage>
    </element-citation>
  </ref>
  <ref id="ref-luecken_currentbestpractices_2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Luecken</surname><given-names>Malte D</given-names></name>
        <name><surname>Theis</surname><given-names>Fabian J</given-names></name>
      </person-group>
      <article-title>Current best practices in single‐cell RNA‐seq analysis: A tutorial</article-title>
      <source>Molecular Systems Biology</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2019-06">2019</year><month>06</month>
      <volume>15</volume>
      <issue>6</issue>
      <issn>1744-4292</issn>
      <uri>http://dx.doi.org/10.15252/msb.20188746</uri>
      <pub-id pub-id-type="doi">10.15252/msb.20188746</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-nfcoreframeworkcommunity_ewels2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ewels</surname><given-names>Philip A.</given-names></name>
        <name><surname>Peltzer</surname><given-names>Alexander</given-names></name>
        <name><surname>Fillinger</surname><given-names>Sven</given-names></name>
        <name><surname>Patel</surname><given-names>Harshil</given-names></name>
        <name><surname>Alneberg</surname><given-names>Johannes</given-names></name>
        <name><surname>Wilm</surname><given-names>Andreas</given-names></name>
        <name><surname>Garcia</surname><given-names>Maxime Ulysse</given-names></name>
        <name><surname>Di Tommaso</surname><given-names>Paolo</given-names></name>
        <name><surname>Nahnsen</surname><given-names>Sven</given-names></name>
      </person-group>
      <article-title>The nf-core framework for community-curated bioinformatics pipelines</article-title>
      <source>Nature Biotechnology</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-02">2020</year><month>02</month>
      <volume>38</volume>
      <issue>3</issue>
      <issn>1546-1696</issn>
      <uri>http://dx.doi.org/10.1038/s41587-020-0439-x</uri>
      <pub-id pub-id-type="doi">10.1038/s41587-020-0439-x</pub-id>
      <fpage>276</fpage>
      <lpage>278</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ditommaso_nextflowenablesreproducible_2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Di Tommaso</surname><given-names>Paolo</given-names></name>
        <name><surname>Chatzou</surname><given-names>Maria</given-names></name>
        <name><surname>Floden</surname><given-names>Evan W</given-names></name>
        <name><surname>Barja</surname><given-names>Pablo Prieto</given-names></name>
        <name><surname>Palumbo</surname><given-names>Emilio</given-names></name>
        <name><surname>Notredame</surname><given-names>Cedric</given-names></name>
      </person-group>
      <article-title>Nextflow enables reproducible computational workflows</article-title>
      <source>Nature Biotechnology</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2017-04">2017</year><month>04</month>
      <volume>35</volume>
      <issue>4</issue>
      <issn>1546-1696</issn>
      <uri>http://dx.doi.org/10.1038/nbt.3820</uri>
      <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
      <fpage>316</fpage>
      <lpage>319</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wratten_reproduciblescalablesharable_2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wratten</surname><given-names>Laura</given-names></name>
        <name><surname>Wilm</surname><given-names>Andreas</given-names></name>
        <name><surname>Göke</surname><given-names>Jonathan</given-names></name>
      </person-group>
      <article-title>Reproducible, scalable, and shareable analysis pipelines with bioinformatics workflow managers</article-title>
      <source>Nature Methods</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2021-09">2021</year><month>09</month>
      <volume>18</volume>
      <issue>10</issue>
      <issn>1548-7105</issn>
      <uri>http://dx.doi.org/10.1038/s41592-021-01254-9</uri>
      <pub-id pub-id-type="doi">10.1038/s41592-021-01254-9</pub-id>
      <fpage>1161</fpage>
      <lpage>1168</lpage>
    </element-citation>
  </ref>
  <ref id="ref-goecks_galaxycomprehensiveapproach_2010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Goecks</surname><given-names>Jeremy</given-names></name>
        <name><surname>Nekrutenko</surname><given-names>Anton</given-names></name>
        <name><surname>Taylor</surname><given-names>James</given-names></name>
        <name><surname>Galaxy Team</surname><given-names>The</given-names></name>
      </person-group>
      <article-title>Galaxy: A comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>
      <source>Genome Biology</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2010">2010</year>
      <volume>11</volume>
      <issue>8</issue>
      <issn>1465-6906</issn>
      <uri>http://dx.doi.org/10.1186/gb-2010-11-8-r86</uri>
      <pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r86</pub-id>
      <fpage>R86</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-fillburn_knimereproduciblecrossdomain_2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fillbrunn</surname><given-names>Alexander</given-names></name>
        <name><surname>Dietz</surname><given-names>Christian</given-names></name>
        <name><surname>Pfeuffer</surname><given-names>Julianus</given-names></name>
        <name><surname>Rahn</surname><given-names>René</given-names></name>
        <name><surname>Landrum</surname><given-names>Gregory A.</given-names></name>
        <name><surname>Berthold</surname><given-names>Michael R.</given-names></name>
      </person-group>
      <article-title>KNIME for reproducible cross-domain analysis of life science data</article-title>
      <source>Journal of Biotechnology</source>
      <publisher-name>Elsevier BV</publisher-name>
      <year iso-8601-date="2017-11">2017</year><month>11</month>
      <volume>261</volume>
      <issn>0168-1656</issn>
      <uri>http://dx.doi.org/10.1016/j.jbiotec.2017.07.028</uri>
      <pub-id pub-id-type="doi">10.1016/j.jbiotec.2017.07.028</pub-id>
      <fpage>149</fpage>
      <lpage>156</lpage>
    </element-citation>
  </ref>
  <ref id="ref-luecken_sandboxpredictionintegration_2021">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Luecken</surname><given-names>Malte D</given-names></name>
        <name><surname>Burkhardt</surname><given-names>Daniel Bernard</given-names></name>
        <name><surname>Cannoodt</surname><given-names>Robrecht</given-names></name>
        <name><surname>Lance</surname><given-names>Christopher</given-names></name>
        <name><surname>Agrawal</surname><given-names>Aditi</given-names></name>
        <name><surname>Aliee</surname><given-names>Hananeh</given-names></name>
        <name><surname>Chen</surname><given-names>Ann T</given-names></name>
        <name><surname>Deconinck</surname><given-names>Louise</given-names></name>
        <name><surname>Detweiler</surname><given-names>Angela M</given-names></name>
        <name><surname>Granados</surname><given-names>Alejandro A</given-names></name>
        <name><surname>Huynh</surname><given-names>Shelly</given-names></name>
        <name><surname>Isacco</surname><given-names>Laura</given-names></name>
        <name><surname>Kim</surname><given-names>Yang Joon</given-names></name>
        <name><surname>Klein</surname><given-names>Dominik</given-names></name>
        <name><surname>KUMAR</surname><given-names>BONY DE</given-names></name>
        <name><surname>Kuppasani</surname><given-names>Sunil</given-names></name>
        <name><surname>Lickert</surname><given-names>Heiko</given-names></name>
        <name><surname>McGeever</surname><given-names>Aaron</given-names></name>
        <name><surname>Mekonen</surname><given-names>Honey</given-names></name>
        <name><surname>Melgarejo</surname><given-names>Joaquin Caceres</given-names></name>
        <name><surname>Morri</surname><given-names>Maurizio</given-names></name>
        <name><surname>Müller</surname><given-names>Michaela</given-names></name>
        <name><surname>Neff</surname><given-names>Norma</given-names></name>
        <name><surname>Paul</surname><given-names>Sheryl</given-names></name>
        <name><surname>Rieck</surname><given-names>Bastian</given-names></name>
        <name><surname>Schneider</surname><given-names>Kaylie</given-names></name>
        <name><surname>Steelman</surname><given-names>Scott</given-names></name>
        <name><surname>Sterr</surname><given-names>Michael</given-names></name>
        <name><surname>Treacy</surname><given-names>Daniel J.</given-names></name>
        <name><surname>Tong</surname><given-names>Alexander</given-names></name>
        <name><surname>Villani</surname><given-names>Alexandra-Chloe</given-names></name>
        <name><surname>Wang</surname><given-names>Guilin</given-names></name>
        <name><surname>Yan</surname><given-names>Jia</given-names></name>
        <name><surname>Zhang</surname><given-names>Ce</given-names></name>
        <name><surname>Pisco</surname><given-names>Angela Oliveira</given-names></name>
        <name><surname>Krishnaswamy</surname><given-names>Smita</given-names></name>
        <name><surname>Theis</surname><given-names>Fabian J</given-names></name>
        <name><surname>Bloom</surname><given-names>Jonathan M.</given-names></name>
      </person-group>
      <article-title>A sandbox for prediction and integration of DNA, RNA, and proteins in single cells</article-title>
      <source>Thirty-fifth conference on neural information processing systems datasets and benchmarks track (round 2)</source>
      <year iso-8601-date="2021">2021</year>
      <uri>https://openreview.net/forum?id=gN35BGa1Rt</uri>
    </element-citation>
  </ref>
  <ref id="ref-heon_podmantoolmanaging_2018">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Heon</surname><given-names>Matt et. al</given-names></name>
        <name><surname>Walsh</surname><given-names>Dan</given-names></name>
        <name><surname>Baude</surname><given-names>Brent</given-names></name>
        <name><surname>Mohnani</surname><given-names>Urvashi</given-names></name>
        <name><surname>Cui</surname><given-names>Ashley</given-names></name>
        <name><surname>Sweeney</surname><given-names>Tom</given-names></name>
        <name><surname>Scrivano</surname><given-names>Giuseppe</given-names></name>
        <name><surname>Evich</surname><given-names>Chris</given-names></name>
        <name><surname>Rothberg</surname><given-names>Valentin</given-names></name>
        <name><surname>Trmač</surname><given-names>Miloslav</given-names></name>
        <name><surname>Honce</surname><given-names>Jhon</given-names></name>
        <name><surname>Wang</surname><given-names>Qi</given-names></name>
        <name><surname>Mandvekar</surname><given-names>Lokesh</given-names></name>
        <name><surname>Reber</surname><given-names>Adrian</given-names></name>
        <name><surname>Santiago</surname><given-names>Eduardo</given-names></name>
        <name><surname>Grunert</surname><given-names>Sascha</given-names></name>
        <name><surname>Dahyabhai</surname><given-names>Nalin</given-names></name>
        <name><surname>Bjorklund</surname><given-names>Anders</given-names></name>
        <name><surname>Kushwaha</surname><given-names>Kunal</given-names></name>
        <name><surname>Ashwin Sha</surname><given-names>Sujil</given-names></name>
        <name><surname>Pu</surname><given-names>Yiqiao</given-names></name>
        <string-name>Zhangguanzhang</string-name>
        <name><surname>Vasek</surname><given-names>Matej</given-names></name>
        <string-name>Podman Community</string-name>
      </person-group>
      <article-title>Podman - : A tool for managing OCI containers and pods</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <uri>https://zenodo.org/record/4735634</uri>
      <pub-id pub-id-type="doi">10.5281/ZENODO.4735634</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-crusoe_methodsincludestandardizing_2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Crusoe</surname><given-names>Michael R.</given-names></name>
        <name><surname>Abeln</surname><given-names>Sanne</given-names></name>
        <name><surname>Iosup</surname><given-names>Alexandru</given-names></name>
        <name><surname>Amstutz</surname><given-names>Peter</given-names></name>
        <name><surname>Chilton</surname><given-names>John</given-names></name>
        <name><surname>Tijanić</surname><given-names>Nebojša</given-names></name>
        <name><surname>Ménager</surname><given-names>Hervé</given-names></name>
        <name><surname>Soiland-Reyes</surname><given-names>Stian</given-names></name>
        <name><surname>Gavrilović</surname><given-names>Bogdan</given-names></name>
        <name><surname>Goble</surname><given-names>Carole</given-names></name>
        <name><surname>Community</surname><given-names>The CWL</given-names></name>
      </person-group>
      <article-title>Methods included: Standardizing computational reuse and portability with the common workflow language</article-title>
      <source>Communications of the ACM</source>
      <publisher-name>Association for Computing Machinery (ACM)</publisher-name>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <volume>65</volume>
      <issue>6</issue>
      <issn>1557-7317</issn>
      <uri>http://dx.doi.org/10.1145/3486897</uri>
      <pub-id pub-id-type="doi">10.1145/3486897</pub-id>
      <fpage>54</fpage>
      <lpage>63</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
