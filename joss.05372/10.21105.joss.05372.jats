<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5372</article-id>
<article-id pub-id-type="doi">10.21105/joss.05372</article-id>
<title-group>
<article-title>Netgraph: Publication-quality Network Visualisations in
Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5216-7863</contrib-id>
<name>
<surname>Brodersen</surname>
<given-names>Paul J. N.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Pharmacology, University of Oxford, United
Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-03-16">
<day>16</day>
<month>3</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>87</issue>
<fpage>5372</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>graph</kwd>
<kwd>network</kwd>
<kwd>visualisation</kwd>
<kwd>visualization</kwd>
<kwd>matplotlib</kwd>
<kwd>networkx</kwd>
<kwd>igraph</kwd>
<kwd>graph-tool</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The empirical study and scholarly analysis of networks have
  increased manifold in recent decades, fuelled by the new prominence of
  network structures in our lives (the web, social networks, artificial
  neural networks, ecological networks, etc.) and the data available on
  them. While there are several comprehensive Python libraries for
  network analysis such as NetworkX
  (<xref alt="Hagberg et al., 2008" rid="ref-HagbergU003A2008" ref-type="bibr">Hagberg
  et al., 2008</xref>), igraph
  (<xref alt="Csardi &amp; Nepusz, 2006" rid="ref-CsardiU003A2006" ref-type="bibr">Csardi
  &amp; Nepusz, 2006</xref>), and graph-tool
  (<xref alt="Peixoto, 2014" rid="ref-PeixotoU003A2014" ref-type="bibr">Peixoto,
  2014</xref>), their inbuilt visualisation capabilities lag behind
  specialised software solutions such as Graphviz
  (<xref alt="Ellson et al., 2002" rid="ref-EllsonU003A2002" ref-type="bibr">Ellson
  et al., 2002</xref>), Cytoscape
  (<xref alt="Shannon et al., 2003" rid="ref-ShannonU003A2003" ref-type="bibr">Shannon
  et al., 2003</xref>), and Gephi
  (<xref alt="Bastian et al., 2009" rid="ref-BastianU003A2009" ref-type="bibr">Bastian
  et al., 2009</xref>). However, although Python bindings for these
  applications exist in the form of PyGraphviz, py4cytoscape, and
  GephiStreamer, respectively, their outputs are not manipulable Python
  objects, which restricts customisation, limits their extensibility,
  and prevents a seamless integration within a wider Python
  application.</p>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p>Netgraph is a Python library that aims to complement the existing
  network analysis libraries with publication-quality visualisations
  within the Python ecosystem. To facilitate a seamless integration,
  Netgraph supports a variety of input formats, including NetworkX,
  igraph, and graph-tool Graph objects. At the time of writing, Netgraph
  provides the following node layout algorithms:</p>
  <list list-type="bullet">
    <list-item>
      <p>the Fruchterman-Reingold algorithm, a.k.a. the “spring”
      layout,</p>
    </list-item>
    <list-item>
      <p>the Sugiyama algorithm, a.k.a. the “dot” layout for directed,
      acyclic graphs,</p>
    </list-item>
    <list-item>
      <p>a radial tree layout for directed, acyclic graphs,</p>
    </list-item>
    <list-item>
      <p>a circular node layout (with optional edge crossing
      reduction),</p>
    </list-item>
    <list-item>
      <p>a bipartite node layout for bipartite graphs (with optional
      edge crossing reduction),</p>
    </list-item>
    <list-item>
      <p>a layered node layout for multipartite graphs (with optional
      edge crossing reduction),</p>
    </list-item>
    <list-item>
      <p>a shell layout for multipartite graphs (with optional edge
      crossing reduction),</p>
    </list-item>
    <list-item>
      <p>a community node layout for modular graphs, and</p>
    </list-item>
    <list-item>
      <p>a “geometric” node layout for graphs with defined edge lengths
      but unknown node positions.</p>
    </list-item>
  </list>
  <p>Additionally, links or edges between the nodes can be straight,
  curved (avoiding collisions with other nodes and edges), or bundled.
  However, new layout routines are added regularly to Netgraph; for an
  up-to-date list, consult the online documentation
  <ext-link ext-link-type="uri" xlink:href="https://netgraph.readthedocs.io/en/latest/node_layout.html">here</ext-link>.</p>
  <p>Uniquely among Python alternatives, Netgraph handles networks with
  multiple components gracefully (which otherwise break most node layout
  routines), and it post-processes the output of the node layout and
  edge routing algorithms with several heuristics to increase the
  interpretability of the visualisation (reduction of overlaps between
  nodes, edges, and labels; edge crossing minimisation and edge
  unbundling where applicable). The highly customisable plots are
  created using Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-HunterU003A2007" ref-type="bibr">Hunter,
  2007</xref>), a popular Python plotting library, and the resulting
  Matplotlib objects are exposed in an easily queryable format such that
  they can be further manipulated and/or animated using standard
  Matplotlib syntax. The visualisations can also be altered
  interactively: nodes and edges can be added on-the-fly through
  hotkeys, positioned using the mouse, and (re-)labelled through
  standard text-entry. For a comprehensive tutorial on Netgraph’s
  interactive features, consult the online documentation
  <ext-link ext-link-type="uri" xlink:href="https://netgraph.readthedocs.io/en/latest/interactivity.html">here</ext-link>.</p>
  <p>Netgraph is licensed under the General Public License version 3
  (GPLv3). The repository is hosted on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/paulbrodersen/netgraph">GitHub</ext-link>,
  and distributed via PyPI and conda-forge. It includes an extensive
  automated test suite that can be executed using pytest. The
  comprehensive documentation – including a complete API reference as
  well as numerous examples and tutorials – is hosted on
  <ext-link ext-link-type="uri" xlink:href="https://netgraph.readthedocs.io">ReadTheDocs</ext-link>.</p>
</sec>
<sec id="figures">
  <title>Figures</title>
  <fig>
    <caption><p>Netgraph’s node layouts</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/gallery_portrait_v5a.png" />
  </fig>
  <fig>
    <caption><p>Netgraph’s edge layouts and other key
    features</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/gallery_portrait_v5b.png" />
  </fig>
</sec>
<sec id="a-basic-example">
  <title>A Basic Example</title>
  <p>The following script shows a minimum working example. The graph
  structure is defined by an edge list, and the visualisation is created
  using (mostly) default parameters.</p>
  <fig>
    <caption><p>Basic example output</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/basic_example.png" />
  </fig>
  <code language="python">import matplotlib.pyplot as plt

from netgraph import Graph

triangle = [
    (0, 1),
    (1, 2),
    (2, 0),
    (1, 1), # self-loop
]
Graph(
    triangle,
    node_labels=True,
    arrows=True,
)
plt.show()</code>
</sec>
<sec id="interoperability-customisability">
  <title>Interoperability &amp; Customisability</title>
  <p>Netgraph can be easily integrated into existing network analysis
  workflows as it accepts a variety of graph structures. The example
  below uses a NetworkX <monospace>Graph</monospace> object, but igraph
  and graph-tool objects are also valid inputs, as are plain edge lists
  and full-rank adjacency matrices. The output visualisations are
  created using Matplotlib and can hence form subplots in larger
  Matplotlib figures.</p>
  <p>Each visualisation can be customised in various ways. Most
  parameters can be set using a scalar or string. In this case, the
  value is applied to all nodes or edges (depending on the parameter).
  To style each node or each edge differently, supply a dictionary
  instead. Furthermore, Netgraph’s <monospace>NodeArtist</monospace> and
  <monospace>EdgeArtist</monospace> classes, i.e. the Python objects
  that instruct a renderer to paint nodes and edges onto the canvas, are
  derived from Matplotlib’s <monospace>PathPatch</monospace> class;
  similarly, node and edge labels are Matplotlib
  <monospace>Text</monospace> instances. Hence all node artists, edge
  artists, and labels can be manipulated using standard matplotlib
  syntax after the initial draw.</p>
  <fig>
    <caption><p>Advanced example output</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/advanced_example.png" />
  </fig>
  <code language="python">import numpy as np
import matplotlib.pyplot as plt
import networkx as nx

from netgraph import Graph

# initialize the figure
fig, ax = plt.subplots(figsize=(6,6))

# initialize the graph structure
balanced_tree = nx.balanced_tree(3, 3)

# initialize the visualisation
g = Graph(
    balanced_tree,
    node_layout='radial',
    edge_layout='straight',
    node_color='crimson',
    node_size={node : 4 if node == 0 else 2 for node in balanced_tree},
    node_edge_width=0,
    edge_color='black',
    edge_width=0.5,
    node_labels=dict(
        zip(balanced_tree, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')
    ),
    node_label_offset=0.05,
    node_label_fontdict=dict(fontsize=10),
    ax=ax,
)

# center the label of the root node on the corresponding node artist and make it white
root = 0 # NetworkX graph generator convention
center = g.node_positions[root]
g.node_label_artists[root].set_position(center)
g.node_label_artists[root].set_color('white')

# decrease the node artist alpha parameter from the root to the leaves or the graph
for node in balanced_tree:
    distance = np.linalg.norm(center - g.node_positions[node])
    g.node_artists[node].set_alpha(1 - distance)

# redraw figure to display changes
fig.canvas.draw()</code>
</sec>
<sec id="key-design-decisions">
  <title>Key Design Decisions</title>
  <p>The creation of Netgraph was motivated by the desire to make
  high-quality, easily customisable, and reproducible network
  visualisations, whilst maintaining an extensible code base. To that
  end, a key design decision was to have a single reference frame for
  all node artist and edge artist attributes that determine their extent
  (e.g., in the case of a circular node artist, its position and its
  radius).</p>
  <p>Good data visualisations are both accurate and legible. The
  legibility of a visualisation is influenced predominantly by the size
  of the plot elements, and occlusions between them. However, there is
  often tension between these two requirements, as larger plot elements
  are more visible but also more likely to cause overlaps with other
  plot elements. Most data visualisation tools focus on accuracy and
  visibility. To that end, they operate in two reference frames: a
  data-derived reference frame and a display-derived reference frame.
  For example, in a standard line-plot, the data-derived reference frame
  determines the x and y values of the line. The thickness of the line,
  however, scales with the size of the display, and its width (measured
  in pixels) remains constant across different figure sizes and aspect
  ratios. Having two reference frames ensures that the line (1) is an
  accurate representation of the data, and (2) is visible and
  discernible independent of figure dimensions. The trade-off of this
  setup is that (1) the precise extents of plot elements can only be
  computed after the figure is initialised, and (2) occlusions are not
  managed and hence common, for example, if multiple lines are plotted
  in the same figure. Nevertheless, most network visualisation tools
  follow this standard. For example, NetworkX specifies node positions
  and edge paths in data coordinates, but uses display units for node
  sizes and edge widths.</p>
  <p>However, network visualisations differ from other data
  visualisations in two aspects: (1) the precise positions of nodes and
  the precise paths of edges often carry no inherent meaning, and (2)
  most figures contain a multitude of node and edge artists instead of
  just a few lines typically present in a line-plot. As a consequence, a
  common goal of most algorithms for node layout, edge routing, and
  label placement is to minimize occlusions between different plot
  elements, as they reduce the ease with which a visualisation is
  interpreted. To that end, precise knowledge of the extent of all plot
  elements is paramount, motivating the use of a single reference frame.
  In Netgraph, this reference frame derives from the data. Specifically,
  node positions and edge paths are specified in data units, and node
  sizes and edge widths are specified in 1/100s of data units (as this
  makes the node sizes and edge widths more comparable to typical values
  in NetworkX, igraph, and graph-tool). This decouples layout
  computations from rendering the figure, simplifies computing the
  extent of the different plot elements, facilitates the reduction of
  overlaps, and makes it possible to create pixel-perfect reproductions
  independent of display parameters.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank GitHub users adleris, Allan L. R. Hansen, chenghuzi, Hamed
  Mohammadpour, and Pablo for contributing various bug fixes, as well as
  ortega2247 and idoby for their thoughtful reviews of earlier versions
  of this manuscript and their inspired suggestions, such as adding a
  section on “Key Design Decisions”.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-HagbergU003A2008">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hagberg</surname><given-names>Aric A</given-names></name>
        <name><surname>Schult</surname><given-names>Daniel A</given-names></name>
        <name><surname>Swart</surname><given-names>Pieter J</given-names></name>
      </person-group>
      <article-title>Exploring Network Structure, Dynamics, and Function using NetworkX</article-title>
      <source>Proceedings of the 7th Python in science conference</source>
      <person-group person-group-type="editor">
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Vaught</surname><given-names>Travis</given-names></name>
        <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
      </person-group>
      <publisher-loc>Pasadena, CA USA</publisher-loc>
      <year iso-8601-date="2008">2008</year>
      <fpage>11</fpage>
      <lpage>15</lpage>
    </element-citation>
  </ref>
  <ref id="ref-CsardiU003A2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Csardi</surname><given-names>Gabor</given-names></name>
        <name><surname>Nepusz</surname><given-names>Tamas</given-names></name>
      </person-group>
      <article-title>The igraph software package for complex network research</article-title>
      <source>InterJournal</source>
      <year iso-8601-date="2006">2006</year>
      <volume>Complex Systems</volume>
      <uri>http://igraph.org</uri>
      <fpage>1695</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-PeixotoU003A2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Peixoto</surname><given-names>Tiago P.</given-names></name>
      </person-group>
      <article-title>The graph-tool Python library</article-title>
      <source>figshare</source>
      <year iso-8601-date="2014">2014</year>
      <uri>http://figshare.com/articles/graph_tool/1164194</uri>
      <pub-id pub-id-type="doi">10.6084/m9.figshare.1164194</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-EllsonU003A2002">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ellson</surname><given-names>John</given-names></name>
        <name><surname>Gansner</surname><given-names>Emden</given-names></name>
        <name><surname>Koutsofios</surname><given-names>Lefteris</given-names></name>
        <name><surname>North</surname><given-names>Stephen C.</given-names></name>
        <name><surname>Woodhull</surname><given-names>Gordon</given-names></name>
      </person-group>
      <article-title>Graphviz— open source graph drawing tools</article-title>
      <source>Graph drawing</source>
      <person-group person-group-type="editor">
        <name><surname>Mutzel</surname><given-names>Petra</given-names></name>
        <name><surname>Jünger</surname><given-names>Michael</given-names></name>
        <name><surname>Leipert</surname><given-names>Sebastian</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2002">2002</year>
      <isbn>978-3-540-45848-7</isbn>
      <pub-id pub-id-type="doi">10.1007/3-540-45848-4_57</pub-id>
      <fpage>483</fpage>
      <lpage>484</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ShannonU003A2003">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Shannon</surname><given-names>Paul</given-names></name>
        <name><surname>Markiel</surname><given-names>Andrew</given-names></name>
        <name><surname>Ozier</surname><given-names>Owen</given-names></name>
        <name><surname>Baliga</surname><given-names>Nitin S.</given-names></name>
        <name><surname>Wang</surname><given-names>Jonathan T.</given-names></name>
        <name><surname>Ramage</surname><given-names>Daniel</given-names></name>
        <name><surname>Amin</surname><given-names>Nada</given-names></name>
        <name><surname>Schwikowski</surname><given-names>Benno</given-names></name>
        <name><surname>Ideker</surname><given-names>Trey</given-names></name>
      </person-group>
      <article-title>Cytoscape: A software environment for integrated models of biomolecular interaction networks</article-title>
      <source>Genome Research</source>
      <year iso-8601-date="2003-11">2003</year><month>11</month>
      <volume>13</volume>
      <issue>11</issue>
      <uri>http://ci.nii.ac.jp/naid/110001910481/ http://genome.cshlp.org/lookup/doi/10.1101/gr.1239303</uri>
      <pub-id pub-id-type="doi">10.1101/gr.1239303</pub-id>
      <pub-id pub-id-type="pmid">14597658</pub-id>
      <fpage>2498</fpage>
      <lpage>2504</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BastianU003A2009">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bastian</surname><given-names>Mathieu</given-names></name>
        <name><surname>Heymann</surname><given-names>Sebastien</given-names></name>
        <name><surname>Jacomy</surname><given-names>Mathieu</given-names></name>
      </person-group>
      <article-title>Gephi: An open source software for exploring and manipulating networks</article-title>
      <year iso-8601-date="2009">2009</year>
      <uri>http://www.aaai.org/ocs/index.php/ICWSM/09/paper/view/154</uri>
      <pub-id pub-id-type="doi">10.1609/icwsm.v3i1.13937</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-HunterU003A2007">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D graphics environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <publisher-name>IEEE COMPUTER SOC</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <volume>9</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
