<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5100</article-id>
<article-id pub-id-type="doi">10.21105/joss.05100</article-id>
<title-group>
<article-title>Melodie: Agent-based Modeling in Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6062-4382</contrib-id>
<name>
<surname>Yu</surname>
<given-names>Songmin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8524-5370</contrib-id>
<name>
<surname>Hou</surname>
<given-names>Zhanyi</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Fraunhofer Institute for Systems and Innovation Research,
Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>School of Reliability and Systems Engineering, Beihang
University, China</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-01-21">
<day>21</day>
<month>1</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>83</issue>
<fpage>5100</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>agent-based modeling</kwd>
<kwd>complex system</kwd>
<kwd>automatic calibration</kwd>
<kwd>evolutionary training</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="introduction">
  <title>Introduction</title>
  <p>Agent-based models (ABMs) characterize physical, biological, and
  social economic systems as dynamic interactions among agents from a
  bottom-up perspective. The agents can be molecules, animals, or human
  beings. The interactions can be water molecules forming a vortex, ants
  searching for food, or people trading stocks in the market.</p>
  <p>Agents’ interactions can bring emergent properties to a system and
  turn it into a complex system. The core reason for using ABMs is
  usually to model such mechanisms. Besides, taking social economic
  systems as example, ABMs are also flexible to consider agents’ (1)
  heterogeneity (e.g., wealth, risk attitude, preference,
  decision-making rule, etc.) based on micro-data; and (2) bounded
  rationality and adaptation behavior based on psychological and
  behavioral studies.</p>
  <p><monospace>Melodie</monospace> is a general framework for
  developing agent-based models (ABMs) in Python. It is published and
  maintained on the GitHub organization page of
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ABM4ALL"><monospace>ABM4ALL</monospace></ext-link>,
  a developing community among agent-based modelers for sharing ideas
  and resources. Together with the code
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ABM4ALL/Melodie">repository</ext-link>,
  we have also published the
  <ext-link ext-link-type="uri" xlink:href="https://abm4all.github.io/Melodie/html/index.html">documentation</ext-link>
  of <monospace>Melodie</monospace>, including a tutorial explaining how
  a minimum example - an agent-based covid contagion model - can be
  developed with <monospace>Melodie</monospace> step by step.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Among numerous frameworks for agent-based modeling in different
  programming languages,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/projectmesa/mesa"><monospace>Mesa</monospace></ext-link>
  (<xref alt="Kazil et al., 2020" rid="ref-Mesa" ref-type="bibr">Kazil
  et al., 2020</xref>) and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/JoelForamitti/agentpy"><monospace>AgentPy</monospace></ext-link>
  (<xref alt="Foramitti, 2021" rid="ref-AgentPy" ref-type="bibr">Foramitti,
  2021</xref>) are the two open-source frameworks in Python. The
  object-oriented paradigm of Python seamlessly fits the “agent
  perspective” of ABM. Modelers can also benefit from the wealth of
  packages available for statistical analysis, data visualization, etc.
  Following the tradition of
  <ext-link ext-link-type="uri" xlink:href="https://ccl.northwestern.edu/netlogo/"><monospace>NetLogo</monospace></ext-link>
  (<xref alt="Wilensky, 1999" rid="ref-Netlogo" ref-type="bibr">Wilensky,
  1999</xref>), <monospace>Mesa</monospace> and
  <monospace>AgentPy</monospace> both support interactive simulation but
  with different focus and style.</p>
  <p>In summary, <monospace>Melodie</monospace> is distinguished from
  <monospace>Mesa</monospace> and <monospace>AgentPy</monospace> by the
  following aspects.</p>
  <p>First, <monospace>Melodie</monospace> separates an
  <monospace>environment</monospace> component from the
  <monospace>model</monospace> in <monospace>Mesa</monospace> and
  <monospace>AgentPy</monospace> for two dedicated tasks: (1) storing
  the macro-level variables; and (2) coordinating the agents’
  decision-making and interaction processes. With a separated
  <monospace>environment</monospace> component, the “storyline” of the
  model can be clearly summarized under a <monospace>run</monospace>
  function in the <monospace>model</monospace>. Compared to the use of
  <monospace>scheduler</monospace> and <monospace>step</monospace>
  functions in different layers in <monospace>Mesa</monospace> and the
  bundling of the behavior functions of agents to the
  <monospace>AgentList</monospace> in <monospace>AgentPy</monospace>, we
  think this makes it easier for users to understand the logic.</p>
  <p>Second, <monospace>Melodie</monospace> enhances the
  <monospace>data_collector</monospace> component with higher
  configurability. Users can define functions for parsing specific data
  structure from the <monospace>agents</monospace> and the
  <monospace>environment</monospace>. For example, in a financial ABM,
  the transactions could be saved in the
  <monospace>environment</monospace> as
  <monospace>List[Transaction]</monospace>. Then, in the
  <monospace>data_collector</monospace>, the users could define a
  function <monospace>collect_transaction_data()</monospace> to first
  parse the list and to then save the results into the database.</p>
  <p>Third, <monospace>Melodie</monospace> has wider infrastructure
  coverage and provides dedicated modules for scenario management.</p>
  <list list-type="bullet">
    <list-item>
      <p>All input data are first registered and then loaded by a
      <monospace>data_loader</monospace> object into a
      <monospace>scenario</monospace> object. Then, as the input data
      container, <monospace>scenario</monospace> can be accessed by the
      <monospace>model</monospace> and its components, including
      <monospace>environment</monospace>,
      <monospace>data_collector</monospace>, and each
      <monospace>agent</monospace>.</p>
    </list-item>
    <list-item>
      <p>Melodie provides two standard classes -
      <monospace>DataFrameInfo</monospace> and
      <monospace>MatrixInfo</monospace> - with which the users can
      register the input dataframes and matrices, so they can be easily
      processed by the <monospace>data_loader</monospace> and the
      <monospace>scenario</monospace> objects.</p>
    </list-item>
  </list>
  <p>In such a data flow, <monospace>Melodie</monospace> also checks if
  the registries are consistent with the input Excel files
  automatically. We think such design is helpful, especially when the
  scenario includes large and complicated input datasets. Having the
  channel through “Scenario” for delivering input data at different
  parts of the model is also conceptually clear. Finally,
  <monospace>Melodie</monospace> uses an <monospace>SQLite</monospace>
  database to save (1) a copy of the input data, and (2) the output
  data, i.e., model results. The interaction between model and database
  is facilitated by the <monospace>DB</monospace> module in
  <monospace>Melodie</monospace>. Users can easily save all the data in
  multiple long tables for post-processing or for sending the single
  <monospace>.sqlite</monospace> file to others.</p>
  <p>Fourth, <monospace>Melodie</monospace> includes two modules that
  are not provided in <monospace>Mesa</monospace> and
  <monospace>AgentPy</monospace>: <monospace>Calibrator</monospace>, and
  <monospace>Trainer</monospace>. With these two modules,
  <monospace>Melodie</monospace> supports (1) automatic calibration of
  scenario parameters, and (2) evolutionary training of agents.</p>
  <p>Fifth, <monospace>Melodie</monospace> uses the
  <monospace>Cython</monospace> package to accelerate its compatibility
  advantage over other packages like <monospace>numba</monospace>. The
  modules that are written in <monospace>Cython</monospace> are
  <monospace>agent</monospace>, <monospace>environment</monospace>,
  <monospace>agent_list</monospace>, and
  <monospace>grid</monospace>.</p>
  <p>In the documentation, we also provide a detailed
  <ext-link ext-link-type="uri" xlink:href="https://abm4all.github.io/Melodie/html/framework_comparison.html#model-components">comparison</ext-link>
  between the three packages - Mesa, AgentPy, and Melodie - based on one
  ABM developed with the three packages. You can find the code in this
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ABM4ALL/ABMFrameworkComparison">repository</ext-link>.</p>
</sec>
<sec id="overview">
  <title>Overview</title>
  <p>The modules in the <monospace>Melodie</monospace> framework can be
  organized into four clusters: Model, Scenario, Modeling Manager, and
  Infrastructure.</p>
  <sec id="model">
    <title>Model</title>
    <p>The modules in the Model Cluster focus on describing the target
    system. Developed with <monospace>Melodie</monospace>, a
    <monospace>model</monospace> object can contain following
    components:</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>agent</monospace> - makes decisions, interacts
        with others, and stores the micro-level variables.</p>
      </list-item>
      <list-item>
        <p><monospace>agents</monospace> - contains a list of agents and
        provides relevant functions.</p>
      </list-item>
      <list-item>
        <p><monospace>environment</monospace> - coordinates the agents’
        decision-making and interaction processes and stores the
        macro-level variables.</p>
      </list-item>
      <list-item>
        <p><monospace>data_collector</monospace> - collects the micro-
        and macro-level variables from the agents and environment, and
        then saves them to the database.</p>
      </list-item>
      <list-item>
        <p><monospace>grid</monospace> - constructed with
        <monospace>spot</monospace> objects, describes the grid
        (<italic>if exists</italic>) that the agents walk on, stores
        grid variables, and provides the relevant functions.</p>
      </list-item>
      <list-item>
        <p><monospace>network</monospace> - constructed with
        <monospace>edge</monospace> objects, describes the network
        (<italic>if exists</italic>) that links the agents, and provides
        the relevant functions.</p>
      </list-item>
    </list>
  </sec>
  <sec id="scenario">
    <title>Scenario</title>
    <p>The modules in the Scenario Cluster focus on formatting,
    importing, and delivering the input data to the
    <monospace>model</monospace>, including</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>DataFrameInfo</monospace> and
        <monospace>MatrixInfo</monospace> - used to create standard data
        objects for input tables.</p>
      </list-item>
      <list-item>
        <p><monospace>data_loader</monospace> - loads all the input data
        into the <monospace>model</monospace>.</p>
      </list-item>
      <list-item>
        <p><monospace>scenario</monospace> - contains all the input data
        that is needed to run the model, and can be accessed by the
        <monospace>model</monospace> and its components.</p>
      </list-item>
    </list>
  </sec>
  <sec id="modelling-manager">
    <title>Modelling Manager</title>
    <p>To combine everything and finally start running, the Modelling
    Manager Cluster includes three modules, which can be constructed and
    run for different objectives:</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>Simulator</monospace> - simulates the logic
        written in the <monospace>model</monospace>.</p>
      </list-item>
      <list-item>
        <p><monospace>Calibrator</monospace> - calibrates the parameters
        of the <monospace>scenario</monospace> by minimizing the
        distance between model output and empirical evidence.</p>
      </list-item>
      <list-item>
        <p><monospace>Trainer</monospace> - trains the
        <monospace>agents</monospace> to update their behavioral
        parameters for higher payoff.</p>
      </list-item>
    </list>
    <p>Both the <monospace>Calibrator</monospace> and
    <monospace>Trainer</monospace> modules are based on a Genetic
    Algorithm (GA), and the <monospace>Trainer</monospace> framework is
    introduced in detail in Yu
    (<xref alt="2022" rid="ref-Yu" ref-type="bibr">2022</xref>).</p>
    <p>Taking the Covid contagion model in the tutorial as an example,
    as shown below, the <monospace>simulator</monospace> is initialized
    with a <monospace>config</monospace> object (which includes a
    project name and a set of folder paths) and the class variables of
    the <monospace>model</monospace>, the
    <monospace>scenario</monospace>, and the
    <monospace>data_loader</monospace>.</p>
    <code language="python">    from Melodie import Simulator
    from config import config
    from source.model import CovidModel
    from source.scenario import CovidScenario
    from source.data_loader import CovidDataLoader

    simulator = Simulator(
         config = config,
         model_cls = CovidModel,
         scenario_cls = CovidScenario,
         data_loader_cls = CovidDataLoader
    )
    simulator.run()</code>
    <p>Finally, by calling the <monospace>simulator.run</monospace>
    function, the simulation starts.</p>
  </sec>
  <sec id="infrastructure">
    <title>Infrastructure</title>
    <p>The last Infrastructure Cluster includes the modules that provide
    support for the modules above.</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>Visualizer</monospace> - provides the APIs to
        interact with <monospace>MelodieStudio</monospace> for
        visualization.</p>
      </list-item>
      <list-item>
        <p><monospace>MelodieStudio</monospace> - another library in
        parallel with <monospace>Melodie</monospace>, supports results
        visualization and interactive simulation in the browser.</p>
      </list-item>
      <list-item>
        <p><monospace>Config</monospace> - provides the channel to
        define project information, e.g., project name, folder
        paths.</p>
      </list-item>
      <list-item>
        <p><monospace>DBConn</monospace> - provides IO functions for the
        database.</p>
      </list-item>
      <list-item>
        <p><monospace>MelodieException</monospace> - provides the
        pre-defined exceptions in <monospace>Melodie</monospace> to
        support debugging.</p>
      </list-item>
    </list>
  </sec>
</sec>
<sec id="resources">
  <title>Resources</title>
  <p>On our GitHub organization page
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ABM4ALL"><monospace>ABM4ALL</monospace></ext-link>,
  apart from the <monospace>Melodie</monospace> package and its
  documentation, we also have published a series of example models
  showing how different modules can be used, including
  <monospace>Grid</monospace>, <monospace>Network</monospace>,
  <monospace>Calibrator</monospace>, <monospace>Trainer</monospace>,
  <monospace>Visualizer</monospace>, and
  <monospace>MelodieStudio</monospace>. These example models are also
  documented in the “Model Gallery” section in the
  <monospace>Melodie</monospace> documentation. Finally, for those who
  are familiar with <monospace>Mesa</monospace> or
  <monospace>AgentPy</monospace>, a comparison between
  <monospace>Melodie</monospace> and the two packages is provided in the
  documentation, based on the same Covid contagion model developed with
  all the three packages.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work is not supported by any funding. Dr. Songmin Yu would
  like to thank the free and creative working atmosphere at Fraunhofer
  ISI, especially the inspiring talks and nice beer time with
  colleagues. Zhanyi Hou would like to thank his supervisor,
  Prof. Shunkun Yang, and his research partners from Beihang University
  for their support and guidance for programming.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-AgentPy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Foramitti</surname><given-names>Joël</given-names></name>
      </person-group>
      <article-title>AgentPy: A package for agent-based modeling in Python</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>6</volume>
      <issue>62</issue>
      <uri>https://doi.org/10.21105/joss.03065</uri>
      <pub-id pub-id-type="doi">10.21105/joss.03065</pub-id>
      <fpage>3065</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Yu">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Yu</surname><given-names>Songmin</given-names></name>
      </person-group>
      <article-title>An agent-based framework for policy simulation: Modeling heterogeneous behaviors with modified Sigmoid function and evolutionary training</article-title>
      <source>IEEE Transactions on Computational Social Systems</source>
      <year iso-8601-date="2022">2022</year>
      <volume></volume>
      <issue></issue>
      <pub-id pub-id-type="doi">10.1109/TCSS.2022.3196737</pub-id>
      <fpage>1</fpage>
      <lpage>13</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Netlogo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Wilensky</surname><given-names>U</given-names></name>
      </person-group>
      <article-title>NetLogo</article-title>
      <publisher-name>Center for Connected Learning; Computer-Based Modeling, Northwestern University. Evanston, IL.</publisher-name>
      <year iso-8601-date="1999">1999</year>
      <uri>http://ccl.northwestern.edu/netlogo/</uri>
    </element-citation>
  </ref>
  <ref id="ref-Mesa">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kazil</surname><given-names>Jackie</given-names></name>
        <name><surname>Masad</surname><given-names>David</given-names></name>
        <name><surname>Crooks</surname><given-names>Andrew&quot;</given-names></name>
      </person-group>
      <article-title>Utilizing Python for agent-based modeling: The Mesa framework</article-title>
      <source>Social, cultural, and behavioral modeling</source>
      <person-group person-group-type="editor">
        <name><surname>Thomson</surname><given-names>Robert</given-names></name>
        <name><surname>Bisgin</surname><given-names>Halil</given-names></name>
        <name><surname>Dancy</surname><given-names>Christopher</given-names></name>
        <name><surname>Hyder</surname><given-names>Ayaz</given-names></name>
        <name><surname>Hussain</surname><given-names>Muhammad</given-names></name>
      </person-group>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2020">2020</year>
      <isbn>978-3-030-61255-9</isbn>
      <fpage>308</fpage>
      <lpage>317</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
