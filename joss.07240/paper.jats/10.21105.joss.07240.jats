<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7240</article-id>
<article-id pub-id-type="doi">10.21105/joss.07240</article-id>
<title-group>
<article-title>Static Code Analysis for R</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2739-7082</contrib-id>
<name>
<surname>Hester</surname>
<given-names>Jim</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8999-0738</contrib-id>
<name>
<surname>Angly</surname>
<given-names>Florent</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0787-087X</contrib-id>
<name>
<surname>Chirico</surname>
<given-names>Michael</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Hyde</surname>
<given-names>Russ</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Kun</surname>
<given-names>Ren</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1995-6531</contrib-id>
<name>
<surname>Patil</surname>
<given-names>Indrajeet</given-names>
</name>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Rosenstock</surname>
<given-names>Alexander</given-names>
</name>
<xref ref-type="aff" rid="aff-7"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Netflix</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>The University of Queensland</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Google</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Jumping Rivers</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Unknown</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Carl Zeiss AG, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Mathematisches Institut der Heinrich-Heine-Universität
Düsseldorf</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-04-01">
<day>1</day>
<month>4</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>108</issue>
<fpage>7240</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>R</kwd>
<kwd>linter</kwd>
<kwd>tidyverse</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>In computer programming, “linting” is the process of analyzing the
  source code to identify possible programming and stylistic problems
  (<xref alt="Wikipedia contributors, 2024a" rid="ref-enwikiU003A1260589258" ref-type="bibr">Wikipedia
  contributors, 2024a</xref>) and a linter is a tool used for linting. A
  linter analyzes code to identify potential errors, stylistic issues,
  or deviations from coding standards. It helps ensure consistency,
  readability, and best practices by flagging common mistakes, such as
  syntax errors, unused variables, or improper formatting. Linters are
  essential for improving code quality, preventing bugs, and maintaining
  a clean codebase, especially in collaborative development environments
  (<xref alt="Wikipedia contributors, 2024b" rid="ref-enwikiU003A1218663830" ref-type="bibr">Wikipedia
  contributors, 2024b</xref>). <monospace>{lintr}</monospace> is an
  open-source package that provides linters for the R programming
  language, which is an interpreted, dynamically-typed programming
  language
  (<xref alt="R Core Team, 2023" rid="ref-base2023" ref-type="bibr">R
  Core Team, 2023</xref>), and is used by a wide range of researchers
  and data scientists. <monospace>{lintr}</monospace> can thus act as a
  valuable tool for R users to help improve the quality and reliability
  of their code.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p>By default, <monospace>{lintr}</monospace> enforces the tidyverse
  style guide Müller et al.
  (<xref alt="2024" rid="ref-Müller2024" ref-type="bibr">2024</xref>).
  In this respect, it differs from other static code analysis tools in R
  (like <monospace>{codetools}</monospace>
  (<xref alt="Tierney, 2024" rid="ref-Tierney2024" ref-type="bibr">Tierney,
  2024</xref>)), which are not opinionated and don’t enforce any
  particular style of writing code, but, rather, check R code for
  possible problems (incidentally, <monospace>{lintr}</monospace> uses
  <monospace>{codetools}</monospace> as a backend for object usage
  linters). Additionally, <monospace>{lintr}</monospace> is concerned
  only with R code, so code-adjacent text like inline
  <monospace>{roxygen2}</monospace> comments
  (<xref alt="Wickham et al., 2024" rid="ref-Wickham2024roxy" ref-type="bibr">Wickham
  et al., 2024</xref>) will not be covered
  (cf. <monospace>{roxylint}</monospace>
  (<xref alt="Kelkhoff, 2024" rid="ref-Kelkhoff2024" ref-type="bibr">Kelkhoff,
  2024</xref>)).</p>
  <p>As of this writing, <monospace>{lintr}</monospace> offers 113
  linters.</p>
  <code language="r script">library(lintr)

length(all_linters())
#&gt; [1] 113</code>
  <p>Naturally, we can’t discuss all of them here. To see the most
  up-to-date details about all the available linters, we encourage
  readers to visit
  <ext-link ext-link-type="uri" xlink:href="https://lintr.r-lib.org/dev/reference/index.html#individual-linters">https://lintr.r-lib.org/dev/reference/index.html#individual-linters</ext-link>.</p>
  <p>We will showcase one linter for each kind of common problem found
  in R code.</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Best practices</bold></p>
    </list-item>
  </list>
  <p><monospace>{lintr}</monospace> offers linters that can detect
  problematic antipatterns and suggest alternatives that follow best
  practices.</p>
  <p>For example, expressions like
  <monospace>ifelse(x, TRUE, FALSE)</monospace> and
  <monospace>ifelse(x, FALSE, TRUE)</monospace> are redundant; just
  <monospace>x</monospace> or <monospace>!x</monospace> suffice in R
  code where logical vectors are a core data structure. The
  <monospace>redundant_ifelse_linter()</monospace> linter detects such
  discouraged usages.</p>
  <code language="r script">lint(
  text = &quot;ifelse(x &gt;= 2.5, TRUE, FALSE)&quot;,
  linters = redundant_ifelse_linter()
)
#&gt; &lt;text&gt;:1:1: warning: [redundant_ifelse_linter] Just use the
#&gt;     logical condition (or its negation) directly instead of
#&gt;     calling ifelse(x, TRUE, FALSE)
#&gt; ifelse(x &gt;= 2.5, TRUE, FALSE)
#&gt; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code>
  <code language="r script">lint(
  text = &quot;x &gt;= 2.5&quot;,
  linters = redundant_ifelse_linter()
)
#&gt; i No lints found.</code>
  <list list-type="bullet">
    <list-item>
      <p><bold>Efficiency</bold></p>
    </list-item>
  </list>
  <p>Sometimes users might not be aware of a more efficient way offered
  by R for carrying out a computation. <monospace>{lintr}</monospace>
  offers linters to improve code efficiency by avoiding common
  inefficient patterns.</p>
  <p>For example, the <monospace>any_is_na_linter()</monospace> linter
  detects usages of <monospace>any(is.na(x))</monospace> and suggests
  <monospace>anyNA(x)</monospace> as a more efficient alternative to
  detect presence of <italic>any</italic> missing values.</p>
  <code language="r script">lint(
  text = &quot;any(is.na(x), na.rm = TRUE)&quot;,
  linters = any_is_na_linter()
)
#&gt; &lt;text&gt;:1:1: warning: [any_is_na_linter] anyNA(x) is better
#&gt;     than any(is.na(x)).
#&gt; any(is.na(x), na.rm = TRUE)
#&gt; ^~~~~~~~~~~~~~~~~~~~~~~~~~~</code>
  <p><monospace>anyNA()</monospace> in R is more efficient than
  <monospace>any(is.na())</monospace> because it stops execution once a
  missing value is found, while <monospace>is.na()</monospace> evaluates
  the entire vector.</p>
  <code language="r script">lint(
  text = &quot;anyNA(x)&quot;,
  linters = any_is_na_linter()
)
#&gt; i No lints found.</code>
  <list list-type="bullet">
    <list-item>
      <p><bold>Readability</bold></p>
    </list-item>
  </list>
  <p>Coders spend significantly more time reading than writing code
  (<xref alt="McConnell, 2004" rid="ref-mcconnell2004code" ref-type="bibr">McConnell,
  2004</xref>). Thus, writing readable code makes the code more
  maintainable and reduces the possibility of introducing bugs stemming
  from a poor understanding of the code.</p>
  <p><monospace>{lintr}</monospace> provides a number of linters that
  suggest more readable alternatives. For example,
  <monospace>comparison_negation_linter()</monospace> blocks usages like
  <monospace>!(x == y)</monospace> where a direct relational operator is
  appropriate.</p>
  <code language="r script">lint(
  text = &quot;!x == 2&quot;,
  linters = comparison_negation_linter()
)
#&gt; &lt;text&gt;:1:1: warning: [comparison_negation_linter] Use x !=
#&gt;     y, not !(x == y).
#&gt; !x == 2
#&gt; ^~~~~~~</code>
  <p>Note also the complicated operator precedence. The more readable
  alternative here uses <monospace>!=</monospace>:</p>
  <code language="r script">lint(
  text = &quot;x != 2&quot;,
  linters = comparison_negation_linter()
)
#&gt; i No lints found.</code>
  <list list-type="bullet">
    <list-item>
      <p><bold>Tidyverse style</bold></p>
    </list-item>
  </list>
  <p><monospace>{lintr}</monospace> also provides linters to enforce the
  style used throughout the <monospace>{tidyverse}</monospace>
  (<xref alt="Wickham et al., 2019" rid="ref-Wickham2019" ref-type="bibr">Wickham
  et al., 2019</xref>) ecosystem of R packages. This style of coding has
  been outlined in the tidyverse style guide
  (<xref alt="Wickham, 2023" rid="ref-Wickham2023" ref-type="bibr">Wickham,
  2023</xref>).</p>
  <p>For example, the style guide recommends using snake_case for
  identifiers:</p>
  <code language="r script">lint(
  text = &quot;MyVar &lt;- 1L&quot;,
  linters = object_name_linter()
)
#&gt; &lt;text&gt;:1:1: style: [object_name_linter] Variable and
#&gt;     function name style should match snake_case or symbols.
#&gt; MyVar &lt;- 1L
#&gt; ^~~~~</code>
  <code language="r script">lint(
  text = &quot;my_var &lt;- 1L&quot;,
  linters = object_name_linter()
)
#&gt; i No lints found.</code>
  <list list-type="bullet">
    <list-item>
      <p><bold>Common mistakes</bold></p>
    </list-item>
  </list>
  <p>One category of linters helps you detect some common mistakes
  statically and provide early feedback.</p>
  <p>For example, duplicate arguments in function calls can sometimes
  cause run-time errors:</p>
  <code language="r script">mean(x = 1:5, x = 2:3)
#&gt; Error in mean(x = 1:5, x = 2:3): formal argument &quot;x&quot; matched by multiple actual arguments</code>
  <p>But <monospace>duplicate_argument_linter()</monospace> can check
  for this statically:</p>
  <code language="r script">lint(
  text = &quot;mean(x = 1:5, x = 2:3)&quot;,
  linters = duplicate_argument_linter()
)
#&gt; &lt;text&gt;:1:15: warning: [duplicate_argument_linter] Avoid
#&gt;     duplicate arguments in function calls.
#&gt; mean(x = 1:5, x = 2:3)
#&gt;               ^</code>
  <p>Even for cases where duplicate arguments are not an error, this
  linter explicitly discourages duplicate arguments.</p>
  <code language="r script">lint(
  text = &quot;list(x = TRUE, x = FALSE)&quot;,
  linters = duplicate_argument_linter()
)
#&gt; &lt;text&gt;:1:16: warning: [duplicate_argument_linter] Avoid
#&gt;     duplicate arguments in function calls.
#&gt; list(x = TRUE, x = FALSE)
#&gt;                ^</code>
  <p>This is because objects with duplicated names objects can be hard
  to work with programmatically and should typically be avoided.</p>
  <code language="r script">l &lt;- list(x = TRUE, x = FALSE)
l[&quot;x&quot;]
#&gt; $x
#&gt; [1] TRUE
l[names(l) == &quot;x&quot;]
#&gt; $x
#&gt; [1] TRUE
#&gt; 
#&gt; $x
#&gt; [1] FALSE</code>
</sec>
<sec id="extensibility">
  <title>Extensibility</title>
  <p><monospace>{lintr}</monospace> is designed for extensibility by
  allowing users to easily create custom linting rules. There are two
  main ways to customize it:</p>
  <list list-type="bullet">
    <list-item>
      <p>Use additional arguments in existing linters. For example,
      although tidyverse style guide prefers snake_case for identifiers,
      if a project’s conventions require it, the relevant linter can be
      customized to support it:</p>
    </list-item>
  </list>
  <code language="r script">lint(
  text = &quot;my.var &lt;- 1L&quot;,
  linters = object_name_linter(styles = &quot;dotted.case&quot;)
)
#&gt; i No lints found.</code>
  <list list-type="bullet">
    <list-item>
      <p>Create new linters (by leveraging functions like
      <monospace>lintr::make_linter_from_xpath()</monospace>) tailored
      to match project- or organization-specific coding standards.</p>
    </list-item>
  </list>
  <p>Indeed, <monospace>{goodpractice}</monospace>
  (<xref alt="Padgham et al., 2024" rid="ref-Padgham2024" ref-type="bibr">Padgham
  et al., 2024</xref>) bundles a set of custom linters that are not part
  of the default set of <monospace>{lintr}</monospace> linters, while
  <monospace>{box.linters}</monospace>
  (<xref alt="Basa &amp; Nowicki, 2024" rid="ref-Basa2024" ref-type="bibr">Basa
  &amp; Nowicki, 2024</xref>) extends <monospace>{lintr}</monospace> to
  support <monospace>{box}</monospace> modules
  (<xref alt="Rudolph, 2024" rid="ref-Rudolph2024" ref-type="bibr">Rudolph,
  2024</xref>) and <monospace>{checklist}</monospace> includes linters
  as one of the strict checks for R packages
  (<xref alt="Onkelinx, 2024" rid="ref-Onkelinx2024" ref-type="bibr">Onkelinx,
  2024</xref>). <monospace>{flir}</monospace>
  (<xref alt="Bacher, 2024" rid="ref-Bacher2024" ref-type="bibr">Bacher,
  2024</xref>) is a Rust-backed analogue inspired by
  <monospace>{lintr}</monospace> that also provides support for fixing
  lints.</p>
</sec>
<sec id="benefits-of-using-lintr">
  <title>Benefits of using <monospace>{lintr}</monospace></title>
  <p>There are several benefits to using <monospace>{lintr}</monospace>
  to analyze and improve R code. One of the most obvious is that it can
  help users identify and fix problems in their code, which can save
  time and effort during the development process. By catching issues
  early on, <monospace>{lintr}</monospace> can help prevent bugs and
  other issues from creeping into code, which can save time and effort
  when it comes to debugging and testing.</p>
  <p>Another benefit of <monospace>{lintr}</monospace> is that it can
  help users write more readable and maintainable code. By enforcing a
  consistent style and highlighting potential issues,
  <monospace>{lintr}</monospace> can help users write code that is
  easier to understand and work with. This is especially important for
  larger projects or teams, where multiple contributors may be working
  on the same codebase and it is important to ensure that code is easy
  to follow and understand, particularly when frequently switching
  context among code primarily authored by different people.
  <monospace>{lintr}</monospace> is designed to be easy to use and
  integrate into existing workflows, and can be used as part of an
  automated build or continuous integration process.
  <monospace>{lintr}</monospace> also integrates with a number of
  popular IDEs and text editors, such as RStudio and Visual Studio Code,
  making it convenient for users to run <monospace>{lintr}</monospace>
  checks on their code as they work.</p>
  <p>It can also be a useful tool for teaching and learning R. By
  providing feedback on code style and potential issues, it can help
  users learn good coding practices and improve their skills over time.
  This can be especially useful for beginners, who may not yet be
  familiar with all of the best practices for writing R code.</p>
  <p>Finally, <monospace>{lintr}</monospace> has had a large and active
  user community since its birth in 2014 which has contributed to its
  rapid development, maintenance, and adoption. At the time of writing,
  <monospace>{lintr}</monospace> is in a mature and stable state and
  therefore provides a reliable API that is unlikely to feature
  fundamental breaking changes.</p>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p><monospace>{lintr}</monospace> is a valuable tool for R users to
  help improve the quality and reliability of their code. Its static
  code analysis capabilities, combined with its flexibility and ease of
  use, make it relevant and valuable for a wide range of
  applications.</p>
</sec>
<sec id="licensing-and-availability">
  <title>Licensing and Availability</title>
  <p><monospace>{lintr}</monospace> is licensed under the MIT License,
  with all source code openly developed and stored on GitHub
  (<ext-link ext-link-type="uri" xlink:href="https://github.com/r-lib/lintr">https://github.com/r-lib/lintr</ext-link>),
  along with a corresponding issue tracker for bug reporting and feature
  enhancements.</p>
</sec>
<sec id="conflicts-of-interest">
  <title>Conflicts of interest</title>
  <p>The authors declare no conflict of interest.</p>
</sec>
<sec id="funding">
  <title>Funding</title>
  <p>This work was not financially supported by any of the affiliated
  institutions of the authors.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p><monospace>{lintr}</monospace> would not be possible without the
  immense work of the
  <ext-link ext-link-type="uri" xlink:href="https://www.r-project.org/contributors.html">R-core
  team</ext-link> who maintain the R language and we are deeply indebted
  to them. We are also grateful to all contributors to
  <monospace>{lintr}</monospace>.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-Wickham2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Averick</surname><given-names>Mara</given-names></name>
        <name><surname>Bryan</surname><given-names>Jennifer</given-names></name>
        <name><surname>Chang</surname><given-names>Winston</given-names></name>
        <name><surname>McGowan</surname><given-names>Lucy D’Agostino</given-names></name>
        <name><surname>François</surname><given-names>Romain</given-names></name>
        <name><surname>Grolemund</surname><given-names>Garrett</given-names></name>
        <name><surname>Hayes</surname><given-names>Alex</given-names></name>
        <name><surname>Henry</surname><given-names>Lionel</given-names></name>
        <name><surname>Hester</surname><given-names>Jim</given-names></name>
        <name><surname>Kuhn</surname><given-names>Max</given-names></name>
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
        <name><surname>Miller</surname><given-names>Evan</given-names></name>
        <name><surname>Bache</surname><given-names>Stephan Milton</given-names></name>
        <name><surname>Müller</surname><given-names>Kirill</given-names></name>
        <name><surname>Ooms</surname><given-names>Jeroen</given-names></name>
        <name><surname>Robinson</surname><given-names>David</given-names></name>
        <name><surname>Seidel</surname><given-names>Dana Paige</given-names></name>
        <name><surname>Spinu</surname><given-names>Vitalie</given-names></name>
        <name><surname>Takahashi</surname><given-names>Kohske</given-names></name>
        <name><surname>Vaughan</surname><given-names>Davis</given-names></name>
        <name><surname>Wilke</surname><given-names>Claus</given-names></name>
        <name><surname>Woo</surname><given-names>Kara</given-names></name>
        <name><surname>Yutani</surname><given-names>Hiroaki</given-names></name>
      </person-group>
      <article-title>Welcome to the tidyverse</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2019">2019</year>
      <volume>4</volume>
      <issue>43</issue>
      <pub-id pub-id-type="doi">10.21105/joss.01686</pub-id>
      <fpage>1686</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Wickham2023">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <source>The tidyverse style guide</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://style.tidyverse.org/index.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-base2023">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>R Core Team</string-name>
      </person-group>
      <source>R: A language and environment for statistical computing</source>
      <publisher-name>R Foundation for Statistical Computing</publisher-name>
      <publisher-loc>Vienna, Austria</publisher-loc>
      <year iso-8601-date="2023">2023</year>
      <uri>https://www.R-project.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-mcconnell2004code">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>McConnell</surname><given-names>Steve</given-names></name>
      </person-group>
      <source>Code complete</source>
      <publisher-name>Pearson Education</publisher-name>
      <year iso-8601-date="2004">2004</year>
    </element-citation>
  </ref>
  <ref id="ref-enwikiU003A1218663830">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Wikipedia contributors</string-name>
      </person-group>
      <article-title>Static program analysis — Wikipedia, the free encyclopedia</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://en.wikipedia.org/w/index.php?title=Static_program_analysis&amp;oldid=1218663830</uri>
    </element-citation>
  </ref>
  <ref id="ref-enwikiU003A1260589258">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Wikipedia contributors</string-name>
      </person-group>
      <article-title>Lint (software) — Wikipedia, the free encyclopedia</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://en.wikipedia.org/w/index.php?title=Lint_(software)&amp;oldid=1260589258</uri>
    </element-citation>
  </ref>
  <ref id="ref-Tierney2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Tierney</surname><given-names>Luke</given-names></name>
      </person-group>
      <source>Codetools: Code analysis tools for r</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://CRAN.R-project.org/package=codetools</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.codetools</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Bacher2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Bacher</surname><given-names>Etienne</given-names></name>
      </person-group>
      <source>Flir: Find and fix lints in R code</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://flir.etiennebacher.com</uri>
    </element-citation>
  </ref>
  <ref id="ref-Müller2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Müller</surname><given-names>Kirill</given-names></name>
        <name><surname>Walthert</surname><given-names>Lorenz</given-names></name>
        <name><surname>Patil</surname><given-names>Indrajeet</given-names></name>
      </person-group>
      <source>Styler: Non-invasive pretty printing of r code</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/r-lib/styler</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.styler</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Padgham2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Padgham</surname><given-names>Mark</given-names></name>
        <name><surname>Marks</surname><given-names>Karina</given-names></name>
        <name><surname>de Bortoli</surname><given-names>Daniel</given-names></name>
        <name><surname>Csardi</surname><given-names>Gabor</given-names></name>
        <name><surname>Frick</surname><given-names>Hannah</given-names></name>
        <name><surname>Jones</surname><given-names>Owen</given-names></name>
        <name><surname>Alexander</surname><given-names>Hannah</given-names></name>
      </person-group>
      <source>Goodpractice: Advice on r package building</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://docs.ropensci.org/goodpractice/</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.goodpractice</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Rudolph2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Rudolph</surname><given-names>Konrad</given-names></name>
      </person-group>
      <source>Box: Write reusable, composable and modular R code</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://CRAN.R-project.org/package=box</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.box</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Basa2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Basa</surname><given-names>Ricardo Rodrigo</given-names></name>
        <name><surname>Nowicki</surname><given-names>Jakub</given-names></name>
      </person-group>
      <source>Box.linters: Linters for ’box’ modules</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://CRAN.R-project.org/package=box.linters</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.box.linters</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Kelkhoff2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Kelkhoff</surname><given-names>Doug</given-names></name>
      </person-group>
      <source>Roxylint: Lint ’roxygen2’-generated documentation</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://CRAN.R-project.org/package=roxylint</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.roxylint</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Wickham2024roxy">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Danenberg</surname><given-names>Peter</given-names></name>
        <name><surname>Csárdi</surname><given-names>Gábor</given-names></name>
        <name><surname>Eugster</surname><given-names>Manuel</given-names></name>
      </person-group>
      <source>roxygen2: In-line documentation for R</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://CRAN.R-project.org/package=roxygen2</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.roxygen2</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Onkelinx2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Onkelinx</surname><given-names>Thierry</given-names></name>
      </person-group>
      <source>Checklist: A thorough and strict set of checks for R packages and source code. Version 0.4.0</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://inbo.github.io/checklist/</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.4028303</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
