<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4562</article-id>
<article-id pub-id-type="doi">10.21105/joss.04562</article-id>
<title-group>
<article-title>villager: A framework for designing and executing
agent-based models in R</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1756-2128</contrib-id>
<name>
<surname>Thelen</surname>
<given-names>Thomas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5693-0245</contrib-id>
<name>
<surname>Thomson</surname>
<given-names>Marcus</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Aldana</surname>
<given-names>Gerardo</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Gonzalez</surname>
<given-names>Toni</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>National Center for Ecological Analysis and
Synthesis</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>College of Creative Studies, University of California,
Santa Barbara</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Anthropology, University of California, Santa
Barbara</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-04-30">
<day>30</day>
<month>4</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>79</issue>
<fpage>4562</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>R</kwd>
<kwd>agent based modeling</kwd>
<kwd>simulation framework</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Villager is an agent-based modeling framework: it prescribes a
  convention and interface for modelers to create and run agent-based
  models (ABM). The framework is aimed at researchers in the social
  sciences who are focused on modeling human populations. The key
  features of villager are:</p>
  <list list-type="order">
    <list-item>
      <p>Scalability: <monospace>villager</monospace> makes extensive
      use of the R6 class system
      (<xref alt="Chang, 2020" rid="ref-chang_2020" ref-type="bibr">Chang,
      2020</xref>), enabling the power of reference semantics without
      the hurdles of manual memory management. This enabled an
      architecture design where user-supplied functions are run within
      the framework. The reference semantics also enable cheaper memory
      operations by allowing for the mutation of agents in-place rather
      than costly copy semantics.</p>
    </list-item>
    <list-item>
      <p>Extensibility: <monospace>villager</monospace> exposes a number
      of classes that can be extended by domain scientists to provide
      flexibility in experiment design. The extended classes can be
      “plugged” into the villager framework and run seamlessly.</p>
    </list-item>
  </list>
  <p>Together, these two features allow researchers to design ABMs with
  flexible requirements-both functionally and computationally.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Agent based modeling has found use in an increasing number of
  applications ranging from market dynamics, animal behavior, and
  population studies
  (<xref alt="DeAngelis &amp; Diaz, 2019" rid="ref-10.3389U002Ffevo.2018.00237" ref-type="bibr">DeAngelis
  &amp; Diaz, 2019</xref>). There are only a few agent-based modeling
  systems available for researchers using R, a popular language among
  social scientists. In some cases researchers must bootstrap their own
  ABM systems due to lack of available packaging that provides flexible
  modeling. The most popular R ABM frameworks include RNetLogo and
  SpaDES. Although RNetLogo is powerful, it acts as an interface to the
  NetLogo software. This requires Java and pipes NetLogo syntax to the
  Java process rather than using native R to describe system dynamics
  (<xref alt="Thiele &amp; Grimm, 2010" rid="ref-THIELE2010972" ref-type="bibr">Thiele
  &amp; Grimm, 2010</xref>). SpaDES supports agent-based modeling
  however, its primary use is for Discrete Event Simulations
  (<xref alt="McIntire et al., 2022" rid="ref-eliot_mcintire_2022_6116101" ref-type="bibr">McIntire
  et al., 2022</xref>). Villager differentiates itself from these two by
  being R native and specifically designed for flexible ABM
  simulations.</p>
</sec>
<sec id="functionality-and-design">
  <title>Functionality and design</title>
  <sec id="modular">
    <title>Modular</title>
    <p>One of the main design goals was to keep the framework components
    separated in a modular fashion for long term maintainability to
    allow framework additions in the future. An additional goal was to
    present the smaller components to modelers in a way that allows for
    them to extend each part of the framework to their needs.</p>
  </sec>
  <sec id="extensible">
    <title>Extensible</title>
    <p>Villager is made up from a few core classes, shown in Table 1
    below. Base classes are provided to contain basic functionality and
    are designed to be extended by modelers.</p>
    <table-wrap>
      <table>
        <colgroup>
          <col width="33%" />
          <col width="33%" />
          <col width="33%" />
        </colgroup>
        <thead>
          <tr>
            <th>Class</th>
            <th>Role</th>
            <th>When to Subclass</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>agent</td>
            <td>A single agent with typical properties for human agents
            such as name, age, and sex.</td>
            <td>When agents need to have additional properties defined
            for more context, such as dietary preferences, weight, and
            food production restrictions.</td>
          </tr>
          <tr>
            <td>resource</td>
            <td>An abstract thing that an agent can possess. It has a
            name and quantity.</td>
            <td>When resources need to have more complex attributes such
            as expiration dates or possession histories.</td>
          </tr>
          <tr>
            <td>data_writer</td>
            <td>Responsible for managing the serialization of simulation
            data.</td>
            <td>To connect with additional data sources or file
            formats.</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p>Table 1: A summary of the classes that users can extend.</p>
    <p>The <monospace>agent</monospace> class provides all of the main
    properties for individual agents. Because it’s unlikely that the
    included properties will fit every researchers’ needs, this class
    can be subclassed to include any number of properties ranging from
    simple constructs like personal wealth to more advanced ideas such
    as memory and emotional state.</p>
    <p>The <monospace>resource</monospace> class is an abstract
    <italic>thing</italic> that a agent possesses. The base model only
    includes information about the name of the resource and the
    associated quantity. Modelers can extend this class with additional
    properties such as expiration date, date acquired, or previous
    owners.</p>
    <p>By subclassing the <monospace>data_writer</monospace> class,
    users have the ability to control how and where their model data is
    stored. Storage locations and formats can range from remote
    databases and local files such as CSV, SQLite, or Microsoft Excel
    spreadsheets.</p>
  </sec>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p>A simulation consists of three parts: an initial condition that
  defines the initial state, models that are run at each timestep, and
  an interface to the simulation that define sthe experiment
  duration.</p>
  <sec id="initial-conditions">
    <title>Initial Conditions</title>
    <p>Initial conditions are defined by creating a function, defining
    the state inside of it, and attaching it to a village. Because the
    function is executed <italic>before</italic> any time steps, it sets
    the state at t=0. The initial condition function requires the
    following parameters.</p>
    <list list-type="order">
      <list-item>
        <p><monospace>current_state</monospace>: A mutable copy of the
        state representing the current time step.</p>
      </list-item>
      <list-item>
        <p><monospace>model_data</monospace>: User supplied data that
        persists through the simulation.</p>
      </list-item>
      <list-item>
        <p><monospace>agent_mgr</monospace>: An object that manages the
        agent with convenience functions for retrieval and creation.</p>
      </list-item>
      <list-item>
        <p><monospace>resource_mgr</monospace>: An object that manages
        the resources with convenience functions for retrieval and
        creation.</p>
      </list-item>
    </list>
    <p>For example, an initial condition of a population with three
    agents</p>
    <list list-type="order">
      <list-item>
        <p>A mother</p>
      </list-item>
      <list-item>
        <p>A father</p>
      </list-item>
      <list-item>
        <p>A daughter</p>
      </list-item>
    </list>
    <code language="r script">initial_condition &lt;- function(current_state, model_data, agent_mgr, resource_mgr) {
  mother &lt;- villager::agent$new(first_name=&quot;Kirsten&quot;, last_name=&quot;Taylor&quot;,
     age=9125, profession=&quot;Fisher&quot;)
  father &lt;- villager::agent$new(first_name=&quot;Joshua&quot;, last_name=&quot;Thompson&quot;,
     age=7300, profession=&quot;Laborer&quot;)
  daughter &lt;- villager::agent$new(first_name=&quot;Mariylyyn&quot;, last_name=&quot;Thompson&quot;,
     age=1022, profession=&quot;None&quot;)
  daughter$mother_id &lt;- mother$identifier
  daughter$father_id &lt;- father$identifier
  
  # Connect the mother and father
  agent_mgr$connect_agents(mother, father)
  # Add them to the manager
  agent_mgr$add_agent(mother)
  agent_mgr$add_agent(father)
  agent_mgr$add_agent(daughter)
}</code>
  </sec>
  <sec id="models">
    <title>Models</title>
    <p>Models are functions that contain code that’s executed at each
    time step. Similar to initial conditions, models require the
    following parameters.</p>
    <list list-type="order">
      <list-item>
        <p><monospace>current_state</monospace>: A mutable copy of the
        state representing the current time step.</p>
      </list-item>
      <list-item>
        <p><monospace>previous_sate</monospace>: An immutable copy of
        the previous state.</p>
      </list-item>
      <list-item>
        <p><monospace>model_data</monospace>: User supplied data that
        persists through the simulation.</p>
      </list-item>
      <list-item>
        <p><monospace>agent_mgr</monospace>: An object that manages the
        agent which has convenience functions for retrieval and
        creation.</p>
      </list-item>
      <list-item>
        <p><monospace>resource_mgr</monospace>: An object that manages
        the resources which has convenience functions for retrieval and
        creation.</p>
      </list-item>
    </list>
    <p>Consider a model that prints the current step and increases the
    age of each agent by <monospace>1</monospace> at each time step and
    sets their profession to <italic>Farmer</italic> when they reach the
    age of 4383.</p>
    <preformat>inc_age &lt;- function(current_state, previous_state, model_data, agent_mgr, resource_mgr) {
  print(paste(&quot;Time step :&quot;, current_state$step))
  for (agent in agent_mgr$get_living_agents()) {
    agent$age &lt;- agent$age+1
    if (agent$age &gt;= 4383 &amp;&amp; agent$profession != &quot;Farmer&quot;) {
      print(&quot;Setting the profession to Farmer&quot;)
      agent$profession &lt;- &quot;Farmer&quot;
    }
  }
}</preformat>
  </sec>
  <sec id="simulation">
    <title>Simulation</title>
    <p>Initial conditions and models make up the heart of the
    simulation. Villager aggregates these into <italic>village</italic>
    objects. The <italic>simulation</italic> object contains any number
    of villages inside. The example below uses the initial condition and
    model provided above to create a simulation that runs for 100 time
    steps. Because the agent behavior is scoped to a village, multiple
    villages may be defined-each having different agent dynamics.</p>
    <preformat>small_population &lt;- villager::village$new(&quot;Family Group&quot;, initial_condition, inc_age)
simulator &lt;- villager::simulation$new(100, list(small_population))
simulator$run_model()</preformat>
  </sec>
</sec>
<sec id="dependencies">
  <title>Dependencies</title>
  <p>Villager only depends on a few dependencies for core
  functionality.</p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="33%" />
        <col width="33%" />
        <col width="33%" />
      </colgroup>
      <thead>
        <tr>
          <th>Package</th>
          <th>Use</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>readr
          (<xref alt="Wickham &amp; Hester, 2020" rid="ref-wickam_2020" ref-type="bibr">Wickham
          &amp; Hester, 2020</xref>)</td>
          <td>Writing simulation states to disk.</td>
          <td></td>
        </tr>
        <tr>
          <td>uuid
          (<xref alt="Urbanek &amp; Ts’o, 2020" rid="ref-urbanek_2020" ref-type="bibr">Urbanek
          &amp; Ts’o, 2020</xref>)</td>
          <td>Generating unique agent identifiers.</td>
          <td></td>
        </tr>
        <tr>
          <td>R6
          (<xref alt="Chang, 2020" rid="ref-chang_2020" ref-type="bibr">Chang,
          2020</xref>)</td>
          <td>All villager classes are R6, allowing users to use
          reference semantics with models.</td>
          <td></td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-urbanek_2020">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Urbanek</surname><given-names>Simon</given-names></name>
        <name><surname>Ts’o</surname><given-names>Theodore</given-names></name>
      </person-group>
      <source>uuid: Tools for generating and handling of UUIDs</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://CRAN.R-project.org/package=uuid</uri>
    </element-citation>
  </ref>
  <ref id="ref-chang_2020">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Chang</surname><given-names>Winston</given-names></name>
      </person-group>
      <source>R6: Encapsulated classes with reference semantics</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://CRAN.R-project.org/package=R6</uri>
    </element-citation>
  </ref>
  <ref id="ref-wickam_2020">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Hester</surname><given-names>Jim</given-names></name>
      </person-group>
      <source>readr: Read rectangular text data</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://CRAN.R-project.org/package=readr</uri>
    </element-citation>
  </ref>
  <ref id="ref-eliot_mcintire_2022_6116101">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>McIntire</surname><given-names>Eliot</given-names></name>
        <name><surname>Chubaty</surname><given-names>Alex</given-names></name>
        <name><surname>Luo</surname><given-names>Yong</given-names></name>
        <name><surname>Bauduin</surname><given-names>Sarah</given-names></name>
        <name><surname>Cumming</surname><given-names>Steve</given-names></name>
        <name><surname>Marchal</surname><given-names>Jean</given-names></name>
        <name><surname>j7git</surname></name>
      </person-group>
      <source>PredictiveEcology/SpaDES: v2.0.8</source>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2022-02">2022</year><month>02</month>
      <uri>https://doi.org/10.5281/zenodo.6116101</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.6116101</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-THIELE2010972">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Thiele</surname><given-names>Jan C.</given-names></name>
        <name><surname>Grimm</surname><given-names>Volker</given-names></name>
      </person-group>
      <article-title>NetLogo meets R: Linking agent-based models with a toolbox for their analysis</article-title>
      <source>Environmental Modelling &amp; Software</source>
      <year iso-8601-date="2010">2010</year>
      <volume>25</volume>
      <issue>8</issue>
      <issn>1364-8152</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S1364815210000514</uri>
      <pub-id pub-id-type="doi">10.1016/j.envsoft.2010.02.008</pub-id>
      <fpage>972</fpage>
      <lpage>974</lpage>
    </element-citation>
  </ref>
  <ref id="ref-10.3389U002Ffevo.2018.00237">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>DeAngelis</surname><given-names>Donald L.</given-names></name>
        <name><surname>Diaz</surname><given-names>Stephanie G.</given-names></name>
      </person-group>
      <article-title>Decision-making in agent-based modeling: A current review and future prospectus</article-title>
      <source>Frontiers in Ecology and Evolution</source>
      <year iso-8601-date="2019">2019</year>
      <volume>6</volume>
      <issn>2296-701X</issn>
      <uri>https://www.frontiersin.org/article/10.3389/fevo.2018.00237</uri>
      <pub-id pub-id-type="doi">10.3389/fevo.2018.00237</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
