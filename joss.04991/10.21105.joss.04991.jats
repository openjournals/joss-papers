<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4991</article-id>
<article-id pub-id-type="doi">10.21105/joss.04991</article-id>
<title-group>
<article-title>Pyccel: a Python-to-X transpiler for scientific
high-performance computing</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3469-2338</contrib-id>
<name>
<surname>Bourne</surname>
<given-names>Emily</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2619-5152</contrib-id>
<name>
<surname>Güçlü</surname>
<given-names>Yaman</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3878-3146</contrib-id>
<name>
<surname>Hadjout</surname>
<given-names>Said</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9035-1231</contrib-id>
<name>
<surname>Ratnani</surname>
<given-names>Ahmed</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>CEA, IRFM, F-13108 Saint-Paul-lez-Durance,
France</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>NMPP division, Max-Planck-Institut für Plasmaphysik,
Garching bei München, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Dept. of Mathematics, Technische Universität München,
Garching bei München, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Lab. MSDA, Mohammed VI Polytechnic University, Benguerir,
Morocco</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-11-21">
<day>21</day>
<month>11</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>83</issue>
<fpage>4991</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>transpiler</kwd>
<kwd>Fortran</kwd>
<kwd>C language</kwd>
<kwd>HPC</kwd>
<kwd>scientific computing</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Python programming language has gained significant popularity
  in scientific computing and data science, mainly because it is easy to
  learn and provides many scientific libraries, including parallel ones.
  While these libraries are very fast, they are usually written in
  compiled languages such as Fortran and C/C++. User code written in
  pure Python is usually much slower; because Python is a dynamically
  typed language which introduces overhead in many basic operations. Due
  to this limitation, one often needs to rewrite the computational parts
  of their Python code in a statically typed language to take full
  advantage of optimization and acceleration techniques. This expensive
  process happens naturally during the transition from a prototype to a
  production code, which is the principal bottleneck in scientific
  computing. We believe that such a bottleneck can be resolved, or at
  least drastically reduced, through the use of automatic code
  generation tools.</p>
  <p>In this work we present Pyccel, a Python library which acts as a
  transpiler by translating Python code to either Fortran or C code, and
  as an accelerator by making the generated code callable from Python
  once again. Not only is the Pyccel-generated Fortran or C code very
  fast, but it is human-readable; hence an expert programmer can easily
  profile the code on the target machine and further optimize it. Pyccel
  provides a variety of methods for the efficient usage of the available
  hardware resources, such as type annotations, function decorators, and
  OpenMP pragmas. Moreover, Pyccel allows the user to link their code to
  external libraries written in the target language.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Different approaches have been proposed to accelerate
  computation-intensive parts of Python code. Cython
  (<xref alt="Behnel et al., 2011" rid="ref-Cython2011" ref-type="bibr">Behnel
  et al., 2011</xref>), one of the first tools of this kind, allows the
  user to call the Python C API by introducing a static typing approach.
  However, the user must rewrite their code into a hybrid Python-C
  language in order to remove expensive Python callbacks from the
  generated C code. As a result, the code can no longer be executed
  using the Python interpreter alone. A more recent tool is Pythran
  (<xref alt="Guelton et al., 2015" rid="ref-Pythran2015" ref-type="bibr">Guelton
  et al., 2015</xref>), which allows dynamic Python code to be converted
  into static C++ code by providing types as comments. The HOPE
  (<xref alt="Akeret et al., 2015" rid="ref-HOPE2015" ref-type="bibr">Akeret
  et al., 2015</xref>) library provides a just-in-time (JIT) compiler to
  convert Python code to C++, where the arguments’ types are only known
  at execution time. Numba
  (<xref alt="T. Olifant et al., n.d." rid="ref-NUMBA" ref-type="bibr">T.
  Olifant et al., n.d.</xref>) follows the same idea of bringing JIT
  compiling to Python by generating machine code based on LLVM, which
  can run on either CPUs or GPUs. Both Numba and HOPE rely heavily on
  the use of simple decorators to instruct the Python package to compile
  a given function. They also use the type information available at
  runtime to generate byte code. A different approach is given by PyPy
  (<xref alt="Bolz et al., 2009" rid="ref-PyPy2009" ref-type="bibr">Bolz
  et al., 2009</xref>), a Python interpreter written in an internal
  language called RPython (which is a restricted subset of the Python
  language itself). The aim of PyPy is to provide speed and efficiency
  at runtime using a JIT compiler.</p>
  <p>To the authors’ knowledge, of all the different methods used to
  accelerate Python codes, none so far generate human-readable code. In
  this work, we present a new Python static compiler named Pyccel that
  combines a transpiler with a Python/C API to create an accelerator.
  This approach has two main advantages. Firstly, it gives the user the
  option of further optimising the code in the low-level language with
  the help of HPC specialists. Secondly, it allows the user to choose
  the language most adapted to their problem or system. For example,
  Fortran is a language designed for scientific programming and is
  tailored for efficient runtime execution on a wide variety of
  processors. The compiler is therefore highly effective for array
  handling in the context of scientific programming. In contrast, the C
  compiler is better adapted to support GPU tools such as CUDA and
  OpenACC.</p>
  <p>Pyccel is designed for two different use cases: (1) accelerate
  Python code by converting it to Fortran and providing a CPython
  wrapper to interface between the low-level and high-level languages,
  and (2) generate low-level C or Fortran code from Python code. The
  latter case follows from the fact that the code is human-readable.
  This means that Pyccel can also be used to simplify the process of
  going from a prototype (which is often written in inefficient
  languages that are quick to write) to production code (written in a
  low-level language). To this end, Pyccel is designed to allow the use
  of low-level legacy codes and some Python scientific libraries such as
  NumPy, SciPy, etc.</p>
</sec>
<sec id="benchmarks">
  <title>Benchmarks</title>
  <p>A few example codes are used to provide an indication of the
  performance of Pyccel as compared to the popular accelerators Numba
  and Pythran. The source code can be found in
  <ext-link ext-link-type="uri" xlink:href="github.com/pyccel/pyccel-benchmarks">github.com/pyccel/pyccel-benchmarks</ext-link>.
  These examples, which illustrate several common scientific computing
  problems, are based on open-source code samples
  (<xref alt="Barba, n.d." rid="ref-CFD" ref-type="bibr">Barba,
  n.d.</xref>;
  <xref alt="Burkardt, n.d." rid="ref-JBurkhardt" ref-type="bibr">Burkardt,
  n.d.</xref>). All tests were run in single-threaded mode on a CPU
  compute node of the HPC system Raven
  (<xref alt="Max Planck Computing and Data Facility, n.d." rid="ref-Raven" ref-type="bibr">Max
  Planck Computing and Data Facility, n.d.</xref>), featuring an Intel
  Xeon IceLake-SP 8360Y processor with 72 cores and 256 GB of RAM. The
  tests were run with Python 3.9.7 on Ubuntu SUSE Linux Enterprise
  Server 15 SP3, using Pyccel 1.7.2, Numba 0.56.4, and Pythran 0.12.1.
  The following flags were passed to GCC 12.1.0 via Pyccel and Pythran :
  <monospace>-O3 -march=native -mtune=native -mavx</monospace>. The
  Numba test cases were compiled using the <monospace>@njit</monospace>
  decorator.</p>
  <p><xref alt="[fig:execution]" rid="figU003Aexecution">[fig:execution]</xref>
  shows the time required to execute the accelerated code for these test
  cases. We see that Pyccel is highly competitive in all cases, but
  unfortunately Pyccel’s C printing is slightly less developed than the
  Fortran printer, leading to less performant code. The finite
  difference Laplace test case (FD-Laplace) relies heavily on NumPy
  vectorized expression, and is the hardest to optimize for all
  accelerators. In this test only Pyccel can provide a substantial
  speedup (about 68%) using Fortran as a backend language; Pythran and
  Pyccel (C) provide a marginal speedup of 13% and 4%, respectively,
  while Numba is slower than the original Python code.</p>
  <fig>
    <caption><p>Comparison of speed-up compared to Python, obtained
    using accelerated code for various test cases executed with Python
    3.9.7
    <styled-content id="figU003Aexecution"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="media/pypi_performance_39_execution.svg" />
  </fig>
  <p>Another important consideration is the time spent waiting for the
  accelerated version to be generated. This is shown in
  <xref alt="[fig:compilation]" rid="figU003Acompilation">[fig:compilation]</xref>,
  where Pyccel proves to be competitive with Numba while it
  significantly outperforms Pythran for large files.</p>
  <fig>
    <caption><p>Comparison of times required to generate accelerated
    code for various test cases with Python 3.9.7
    <styled-content id="figU003Acompilation"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="media/pypi_performance_39_compilation.svg" />
  </fig>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>The authors would like to thank all the people who have contributed
  to Pyccel so far. The project has received funding from the European
  Union’s Horizon 2020 Research and Innovation Program under Grant
  Agreement No. 800945 (Numerics PhD Program), and under Grant Agreement
  No. 676629 (Energy oriented Centre of Excellence for computing
  applications - EoCoE).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Cython2011">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Behnel</surname><given-names>S.</given-names></name>
        <name><surname>Bradshaw</surname><given-names>R.</given-names></name>
        <name><surname>Citro</surname><given-names>C.</given-names></name>
        <name><surname>Dalcin</surname><given-names>L.</given-names></name>
        <name><surname>Seljebotn</surname><given-names>D. S.</given-names></name>
        <name><surname>Smith</surname><given-names>K.</given-names></name>
      </person-group>
      <article-title>Cython: The best of both worlds</article-title>
      <source>Comput Sci Eng</source>
      <year iso-8601-date="2011">2011</year>
      <volume>13</volume>
      <issue>2</issue>
      <issn>1558-366X</issn>
      <pub-id pub-id-type="doi">10.1109/MCSE.2010.118</pub-id>
      <fpage>31</fpage>
      <lpage>39</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Pythran2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Guelton</surname><given-names>Serge</given-names></name>
        <name><surname>Brunet</surname><given-names>Pierrick</given-names></name>
        <name><surname>Amini</surname><given-names>Mehdi</given-names></name>
        <name><surname>Merlini</surname><given-names>Adrien</given-names></name>
        <name><surname>Corbillon</surname><given-names>Xavier</given-names></name>
        <name><surname>Raynaud</surname><given-names>Alan</given-names></name>
      </person-group>
      <article-title>Pythran: enabling static optimization of scientific Python programs</article-title>
      <source>Comput. Sci. Discov.</source>
      <publisher-name>IOP Publishing</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>8</volume>
      <issue>1</issue>
      <uri>https://doi.org/10.1088/1749-4680/8/1/014001</uri>
      <pub-id pub-id-type="doi">10.1088/1749-4680/8/1/014001</pub-id>
      <fpage>014001</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-HOPE2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Akeret</surname><given-names>J.</given-names></name>
        <name><surname>Gamper</surname><given-names>L.</given-names></name>
        <name><surname>Amara</surname><given-names>A.</given-names></name>
        <name><surname>Refregier</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>HOPE: A Python just-in-time compiler for astrophysical computations</article-title>
      <source>Astron. Comput.</source>
      <year iso-8601-date="2015">2015</year>
      <volume>10</volume>
      <issn>2213-1337</issn>
      <uri>http://www.sciencedirect.com/science/article/pii/S2213133714000687</uri>
      <pub-id pub-id-type="doi">10.1016/j.ascom.2014.12.001</pub-id>
      <fpage>1</fpage>
      <lpage>8</lpage>
    </element-citation>
  </ref>
  <ref id="ref-NUMBA">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>T. Olifant et al.</string-name>
      </person-group>
      <article-title>Numba</article-title>
      <publisher-name>http://numba.pydata.org</publisher-name>
    </element-citation>
  </ref>
  <ref id="ref-PyPy2009">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Bolz</surname><given-names>Carl Friedrich</given-names></name>
        <name><surname>Cuni</surname><given-names>Antonio</given-names></name>
        <name><surname>Fijalkowski</surname><given-names>Maciej</given-names></name>
        <name><surname>Rigo</surname><given-names>Armin</given-names></name>
      </person-group>
      <article-title>Tracing the meta-level: PyPy’s tracing JIT compiler</article-title>
      <source>Proceedings of the 4th workshop on the implementation, compilation, optimization of object-oriented languages and programming systems</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Genova, Italy</publisher-loc>
      <year iso-8601-date="2009">2009</year>
      <isbn>9781605585413</isbn>
      <uri>https://doi.org/10.1145/1565824.1565827</uri>
      <pub-id pub-id-type="doi">10.1145/1565824.1565827</pub-id>
      <fpage>18</fpage>
      <lpage>25</lpage>
    </element-citation>
  </ref>
  <ref id="ref-JBurkhardt">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Burkardt</surname><given-names>John</given-names></name>
      </person-group>
      <publisher-name>https://people.sc.fsu.edu/~jburkardt/py_src/py_src.html</publisher-name>
    </element-citation>
  </ref>
  <ref id="ref-CFD">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barba</surname><given-names>Lorena A.</given-names></name>
      </person-group>
      <publisher-name>https://lorenabarba.com/blog/cfd-python-12-steps-to-navier-stokes/</publisher-name>
    </element-citation>
  </ref>
  <ref id="ref-Raven">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Max Planck Computing and Data Facility</string-name>
      </person-group>
      <article-title>The supercomputer Raven</article-title>
      <publisher-name>https://www.mpcdf.mpg.de/services/supercomputing/raven</publisher-name>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
