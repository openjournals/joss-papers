<?xml version="1.0" encoding="UTF-8"?>
<doi_batch xmlns="http://www.crossref.org/schema/4.4.0" xmlns:ai="http://www.crossref.org/AccessIndicators.xsd" xmlns:rel="http://www.crossref.org/relations.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="4.4.0" xsi:schemaLocation="http://www.crossref.org/schema/4.4.0 http://www.crossref.org/schemas/crossref4.4.0.xsd">
  <head>
    <doi_batch_id>68be043871e6a72df7f1495b2274998c</doi_batch_id>
    <timestamp>20201204184859</timestamp>
    <depositor>
      <depositor_name>JOSS Admin</depositor_name>
      <email_address>admin@theoj.org</email_address>
    </depositor>
    <registrant>The Open Journal</registrant>
  </head>
  <body>
    <journal>
      <journal_metadata>
        <full_title>Journal of Open Source Software</full_title>
        <abbrev_title>JOSS</abbrev_title>
        <issn media_type="electronic">2475-9066</issn>
        <doi_data>
          <doi>10.21105/joss</doi>
          <resource>https://joss.theoj.org</resource>
        </doi_data>
      </journal_metadata>
      <journal_issue>
        <publication_date media_type="online">
          <month>12</month>
          <year>2020</year>
        </publication_date>
        <journal_volume>
          <volume>5</volume>
        </journal_volume>
        <issue>56</issue>
      </journal_issue>
      <journal_article publication_type="full_text">
        <titles>
          <title>c212: An R Package for the Detection of Safety Signals in Clinical Trials Using Body-Systems (System Organ Classes)</title>
        </titles>
        <contributors>
          <person_name sequence="first" contributor_role="author">
            <given_name>Raymond</given_name>
            <surname>Carragher</surname>
            <ORCID>http://orcid.org/0000-0002-0120-625X</ORCID>
          </person_name>
          <person_name sequence="additional" contributor_role="author">
            <given_name>Chris</given_name>
            <surname>Robertson</surname>
          </person_name>
        </contributors>
        <publication_date>
          <month>12</month>
          <day>04</day>
          <year>2020</year>
        </publication_date>
        <pages>
          <first_page>2706</first_page>
        </pages>
        <publisher_item>
          <identifier id_type="doi">10.21105/joss.02706</identifier>
        </publisher_item>
        <ai:program name="AccessIndicators">
          <ai:license_ref applies_to="vor">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="am">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="tdm">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
        </ai:program>
        <rel:program>
          <rel:related_item>
            <rel:description>Software archive</rel:description>
            <rel:inter_work_relation relationship-type="references" identifier-type="doi">“https://doi.org/10.5281/zenodo.4304831”</rel:inter_work_relation>
          </rel:related_item>
          <rel:related_item>
            <rel:description>GitHub review issue</rel:description>
            <rel:inter_work_relation relationship-type="hasReview" identifier-type="uri">https://github.com/openjournals/joss-reviews/issues/2706</rel:inter_work_relation>
          </rel:related_item>
        </rel:program>
        <doi_data>
          <doi>10.21105/joss.02706</doi>
          <resource>https://joss.theoj.org/papers/10.21105/joss.02706</resource>
          <collection property="text-mining">
            <item>
              <resource mime_type="application/pdf">https://joss.theoj.org/papers/10.21105/joss.02706.pdf</resource>
            </item>
          </collection>
        </doi_data>
        <citation_list>
          <citation key="ref1">
            <doi>10.1111/j.2517-6161.1995.tb02031.x</doi>
          </citation>
          <citation key="ref2">
            <doi>10.1198/jasa.2010.tm09329</doi>
          </citation>
          <citation key="ref3">
            <doi>10.1002/sim.5310</doi>
          </citation>
          <citation key="ref4">
            <doi>10.1016/j.jspi.2007.06.006</doi>
          </citation>
          <citation key="ref5">
            <doi>10.1201/9781420011302.fmatt</doi>
          </citation>
          <citation key="ref6">
            <doi>10.1111/j.0006-341X.2004.00186.x</doi>
          </citation>
          <citation key="ref7">
            <doi>10.1080/10543406.2010.520181</doi>
          </citation>
          <citation key="ref8">
            <unstructured_citation>Carragher, Raymond, Detecting Safety Signals in Randomised Controlled Trials, University of Strathclyde, 2017</unstructured_citation>
          </citation>
          <citation key="ref9">
            <doi>10.1080/19466315.2017.1409134</doi>
          </citation>
          <citation key="ref10">
            <doi>10.1007/978-981-10-7826-2_11</doi>
          </citation>
          <citation key="ref11">
            <unstructured_citation>Fries, M and Kracht, K K and Li, J and Munsaka, M S and Sanchez-Kam, M and Singh, K P and Wang, W and Whalen, E and Zhou, K., Safety monitoring methodology in the Premarketing Setting, JSM Proceedings, Biopharmaceutical Section, 2247-2269, 2016, Google Scholar, https://ww2.amstat.org/MembersOnly/proceedings/2016/data/assets/pdf/389675.pdf</unstructured_citation>
          </citation>
          <citation key="ref12">
            <unstructured_citation>CODA: Convergence Diagnosis and Output Analysis for MCMC, Plummer, Martyn and Best, Nicky and Cowles, Kate and Vines, Karen, R News, 2006, 6, 1, 7–11, http://CRAN.R-project.org/doc/Rnews/, http://CRAN.R-project.org/doc/Rnews/Rnews_2006-1.pdf</unstructured_citation>
          </citation>
          <citation key="ref13">
            <unstructured_citation>Gelman, Andrew and Carlin, John B. and Stern, Hal S. and Rubin, Donald B., Bayesian Data Analysis, Texts in Statistical Science, Chapman &amp; Hall/CRC, 2004, Book</unstructured_citation>
          </citation>
          <citation key="ref14">
            <unstructured_citation>Robert, Christian P. and Casella, George, Monte Carlo statistical methods, Springer New York, 1999, Book</unstructured_citation>
          </citation>
          <citation key="ref15">
            <doi>10.1002/sim.8304</doi>
          </citation>
          <citation key="ref16">
            <doi>10.1002/sim.8495</doi>
          </citation>
          <citation key="ref17">
            <doi>10.1002/sim.8563</doi>
          </citation>
          <citation key="ref18">
            <unstructured_citation>Carragher, Raymond, c212: Methods for Detecting Safety Signals in Clinical Trials Using Body-Systems (System Organ Classes), 2020, ​GitHub, ​GitHub repository, https://github.com/rcarragh/c212</unstructured_citation>
          </citation>
          <citation key="ref19">
            <unstructured_citation>Carragher, Raymond, c212: Methods for Detecting Safety Signals in Clinical Trials Using Body-Systems (System Organ Classes), 2017, ​CRAN, ​CRAN repository, https://CRAN.R-project.org/package=c212</unstructured_citation>
          </citation>
          <citation key="ref20">
            <unstructured_citation>Seward, Julian and Nethercote, Nicholas, Using Valgrind to Detect Undefined Value Errors with Bit-Precision, 2005, USENIX Association, USA, We present Memcheck, a tool that has been implemented with the dynamic binary instrumentation framework Valgrind. Memcheck detects a wide range of memory errors in programs as they run. This paper focuses on one kind of error that Memcheck detects: undefined value errors. Such errors are common, and often cause bugs that are hard to find in programs written in languages such as C, C++ and Fortran. Memcheck’s definedness checking improves on that of previous tools by being accurate to the level of individual bits. This accuracy gives Memcheck a low false positive and false negative rate.The definedness checking involves shadowing every bit of data in registers and memory with a second bit that indicates if the bit has a defined value. Every value-creating operation is instrumented with a shadow operation that propagates shadow bits appropriately. Memcheck uses these shadow bits to detect uses of undefined values that could adversely affect a program’s behaviour.Under Memcheck, programs typically run 20-30 times slower than normal. This is fast enough to use with large programs. Memcheck finds many errors in real programs, and has been used during the past two years by thousands of programmers on a wide range of systems, including OpenOffice, Mozilla, Opera, KDE, GNOME, MySQL, Perl, Samba, The GIMP, and Unreal Tournament., Proceedings of the Annual Conference on USENIX Annual Technical Conference, 2, 1, Anaheim, CA, ATEC ’05</unstructured_citation>
          </citation>
          <citation key="ref21">
            <unstructured_citation>Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitry, AddressSanitizer: A Fast Address Sanity Checker, 2012, USENIX Association, USA, Memory access bugs, including buffer overflows and uses of freed heap memory, remain a serious problem for programming languages like C and C++. Many memory error detectors exist, but most of them are either slow or detect a limited set of bugs, or both.This paper presents AddressSanitizer, a new memory error detector. Our tool finds out-of-bounds accesses to heap, stack, and global objects, as well as use-after-free bugs. It employs a specialized memory allocator and code instrumentation that is simple enough to be implemented in any compiler, binary translation system, or even in hardware.AddressSanitizer achieves efficiency without sacrificing comprehensiveness. Its average slowdown is just 73% yet it accurately detects bugs at the point of occurrence. It has found over 300 previously unknown bugs in the Chromium browser and many bugs in other software., Proceedings of the 2012 USENIX Conference on Annual Technical Conference, 28, 1, Boston, MA, USENIX ATC’12</unstructured_citation>
          </citation>
        </citation_list>
      </journal_article>
    </journal>
  </body>
</doi_batch>
