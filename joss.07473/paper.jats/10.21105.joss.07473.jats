<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7473</article-id>
<article-id pub-id-type="doi">10.21105/joss.07473</article-id>
<title-group>
<article-title>robot_collision_checking: A Lightweight ROS 2 Interface
to FCL (Flexible Collision Library)</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7672-940X</contrib-id>
<name>
<surname>Zolotas</surname>
<given-names>Mark</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0784-8720</contrib-id>
<name>
<surname>Long</surname>
<given-names>Philip</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5123-5801</contrib-id>
<name>
<surname>Padir</surname>
<given-names>Taskin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Northeastern University, USA (at the time of this
work)</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Atlantic Technological University, Ireland</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Amazon Robotics, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-01-18">
<day>18</day>
<month>1</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>105</issue>
<fpage>7473</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>ros</kwd>
<kwd>robotics</kwd>
<kwd>collision checking</kwd>
<kwd>flexible collision library</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>This paper presents
  <monospace>robot_collision_checking</monospace>, a C++ library that
  provides a Robot Operating System (ROS)
  (<xref alt="Quigley et al., 2009" rid="ref-Quigley2009ROS" ref-type="bibr">Quigley
  et al., 2009</xref>) interface to the Flexible Collision Library (FCL)
  (<xref alt="Pan et al., 2012" rid="ref-Pan2012FCL" ref-type="bibr">Pan
  et al., 2012</xref>) for typical robotics applications. FCL is an
  open-source C++ library that provides efficient collision detection
  and distance computation for 3D environments. While these capabilities
  are crucial in robotics to ensure safety and enable effective motion
  planning, FCL is not readily available for many robot architectures
  built atop ROS. Given that the robotics community widely relies on ROS
  as the standard for software development, it would greatly benefit
  from a lightweight ROS interface to FCL. The
  <monospace>robot_collision_checking</monospace> package fulfils this
  demand by exposing FCL functionality to ROS message types, thereby
  allowing robotics researchers and practitioners that rely on ROS to
  easily access the collision and distance checking features of FCL.</p>
  <p>The <monospace>robot_collision_checking</monospace> package can
  calculate collisions and distances between a variety of collision
  objects, including solid primitives (spheres, boxes, cylinders),
  planes, meshes, voxel grids, and octrees (via the OctoMap library
  (<xref alt="Hornung et al., 2013" rid="ref-hornung13auro" ref-type="bibr">Hornung
  et al., 2013</xref>)). Collision worlds that contain multiple
  collision objects can also be created and maintained. This enables
  collision and distance checking between single objects, as well as
  entire collision worlds. The
  <monospace>robot_collision_checking</monospace> package includes an
  example node that demonstrates how to create a collision world of ROS
  objects, use FCL functionality to perform collision-checking on these
  objects, and visualize the world in RViz
  (<xref alt="Kam et al., 2015" rid="ref-kam2015rviz" ref-type="bibr">Kam
  et al., 2015</xref>), e.g., for debugging purposes.</p>
  <p>Additionally, we include ROS 1 and ROS 2
  (<xref alt="Macenski et al., 2022" rid="ref-Macenski2022ROS2" ref-type="bibr">Macenski
  et al., 2022</xref>) implementations of the
  <monospace>robot_collision_checking</monospace> package. There are
  notable differences between these implementations due to the
  differences between ROS 1 and ROS 2, as well as how collision objects
  are handled by the collision world class and utility functions of the
  core C++ library. As the ROS 2 version is up-to-date, more
  well-documented, and continues to receive ongoing support, we
  encourage users of <monospace>robot_collision_checking</monospace> to
  opt for this implementation. End-users may also test the Docker image
  available to the code repository if they wish to explore this package
  without installing ROS on their machine.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Collision-checking is an increasingly important tool as robots are
  deployed into unstructured and dynamic environments, while ROS 1 and
  ROS 2 provide the most popular means of controlling robots for
  research applications. In the ROS ecosystem, one popular means of
  enabling collision-checking is via MoveIt
  (<xref alt="Coleman et al., 2014" rid="ref-coleman2014reducing" ref-type="bibr">Coleman
  et al., 2014</xref>), a path planning and trajectory execution
  open-source software. The MoveIt collision-checking API can expose two
  different collision checkers:
  <ext-link ext-link-type="uri" xlink:href="https://github.com/bulletphysics/bullet3">bullet</ext-link>
  and FCL
  (<xref alt="Pan et al., 2012" rid="ref-Pan2012FCL" ref-type="bibr">Pan
  et al., 2012</xref>). However, to leverage this functionality users
  have to install the entire MoveIt suite and either integrate their
  robot into MoveIt or ensure that their platform is already available
  to the software suite. Moreover, while MoveIt is an extremely
  sophisticated motion planning library, accessing lower-level
  functionality for collision and distance checking requires in-depth
  knowledge of the library’s structure and hierarchy. Pinocchio
  (<xref alt="Carpentier et al., 2021" rid="ref-carpentierU003Ahal-03271811" ref-type="bibr">Carpentier
  et al., 2021</xref>) is another powerful robot modeling software that
  is also built upon FCL (a specific variant, known as
  <ext-link ext-link-type="uri" xlink:href="https://github.com/coal-library/coal">Coal</ext-link>)
  but suffers from the same overhead as MoveIt. The
  <monospace>robot_collision_checking</monospace> library aims to
  address the need for a lightweight alternative by providing a simple
  and transparent ROS interface to the FCL library. A comparison between
  <monospace>robot_collision_checking</monospace>, MoveIt, and Pinocchio
  is summarized in
  <xref alt="[tab:comparison]" rid="tabU003Acomparison">[tab:comparison]</xref>.</p>
  <fig>
    <caption><p>Table comparing
    <monospace>robot_collision_checking</monospace>, MoveIt, and
    Pinocchio.<styled-content id="tabU003Acomparison"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="fcl_table.png" />
  </fig>
  <p>Our package is similar to
  <ext-link ext-link-type="uri" xlink:href="https://github.com/BerkeleyAutomation/python-fcl">Python-fcl</ext-link>,
  which provides a Python binding of FCL that could also be used in a
  ROS architecture. The main distinction is that our implementation is
  written in C++, providing enhanced computational efficiency thanks to
  its compiled nature. Furthermore, our package includes convenience
  functions to directly interact with ROS/ROS 2 messages and easily
  display results in RViz. The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/CoFra-CaLa/ros_collision_detection">ros_collision_checking</ext-link>
  package also offers a collision-checking system for 2D vehicles in a
  ROS environment. Our collision-checking system instead extends the
  general capabilities of FCL for proximity querying any geometric model
  and can thus be applied in numerous robotics contexts where proximity
  information about the 3D environment is beneficial.</p>
  <p>The interface supplied by
  <monospace>robot_collision_checking</monospace> is especially
  practical for obstacle avoidance and path planning in robotics
  use-cases. First, the robot’s collision geometry (e.g., extracted from
  its URDF model) and surrounding objects perceived by the robot’s
  sensors (e.g., an OctoMap representation given depth data) can be
  added to a collision world that is constructed and maintained through
  our <monospace>robot_collision_checking</monospace> interface. The
  resulting collision and distance information exposed by this interface
  then enables safe plans for the robot’s motion to be generated using
  standard motion planning algorithms. For instance, this package could
  be employed to compute virtual repulsive forces based solely on the
  robot’s tool pose, thereby enabling a potential fields method to
  navigate the tool through an environment without requiring MoveIt’s
  installation overhead. Lastly, the
  <monospace>robot_collision_checking</monospace> package facilitates
  rapid checks for distances and collisions between arbitrary objects
  and is not solely limited to robotic components. This versatility is
  particularly valuable for applications involving complex environmental
  analysis, such as those encountered in human-robot interaction.</p>
  <p>The <monospace>robot_collision_checking</monospace> library is
  currently being used by the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/philip-long/constrained_manipulability">constrained_manipulability</ext-link>
  package, a motion planning framework for robot manipulators developed
  by the same authors. Within the
  <monospace>constrained_manipulability</monospace> package there are
  more examples of using the
  <monospace>robot_collision_checking</monospace> library with URDF
  files and collision meshes to calculate collisions and/or distances
  between a robot and environmental objects, such as primitives and
  OctoMaps.</p>
</sec>
<sec id="future-work">
  <title>Future Work</title>
  <p>Our objective is to maintain
  <monospace>robot_collision_checking</monospace> in a manner that
  ensures seamless integration with future advancements in the core FCL
  library
  (<xref alt="Pan et al., 2012" rid="ref-Pan2012FCL" ref-type="bibr">Pan
  et al., 2012</xref>). As FCL continues to evolve, introducing new
  collision-checking functionality, support for more complex geometric
  representations, or other enhancements, we aim to maintain our package
  and capitalize on these developments. This forward-looking approach
  ensures that <monospace>robot_collision_checking</monospace> remains
  robust, versatile, and aligned with state-of-the-art collision
  detection software.</p>
</sec>
<sec id="conflict-of-interest">
  <title>Conflict of Interest</title>
  <p>The authors declare that the research was conducted in the absence
  of any commercial or financial relationships that could be constructed
  as a potential conflict of interest.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Mark Zolotas is currently at Toyota Research Institute (TRI),
  Cambridge, MA, USA. This paper describes work performed at
  Northeastern University and is not associated with TRI.</p>
  <p>Taskin Padir holds concurrent appointments as a Professor of
  Electrical and Computer Engineering at Northeastern University and as
  an Amazon Scholar. This paper describes work performed at Northeastern
  University and is not associated with Amazon.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-hornung13auro">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hornung</surname><given-names>Armin</given-names></name>
        <name><surname>Wurm</surname><given-names>Kai M.</given-names></name>
        <name><surname>Bennewitz</surname><given-names>Maren</given-names></name>
        <name><surname>Stachniss</surname><given-names>Cyrill</given-names></name>
        <name><surname>Burgard</surname><given-names>Wolfram</given-names></name>
      </person-group>
      <article-title>OctoMap: An efficient probabilistic 3D mapping framework based on octrees</article-title>
      <source>Autonomous Robots</source>
      <year iso-8601-date="2013">2013</year>
      <uri>https://octomap.github.io</uri>
      <pub-id pub-id-type="doi">10.1007/s10514-012-9321-0</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Quigley2009ROS">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Quigley</surname><given-names>Morgan</given-names></name>
        <name><surname>Conley</surname><given-names>Ken</given-names></name>
        <name><surname>Gerkey</surname><given-names>Brian</given-names></name>
        <name><surname>Faust</surname><given-names>Josh</given-names></name>
        <name><surname>Foote</surname><given-names>Tully</given-names></name>
        <name><surname>Leibs</surname><given-names>Jeremy</given-names></name>
        <name><surname>Wheeler</surname><given-names>Rob</given-names></name>
        <name><surname>Ng</surname><given-names>Andrew</given-names></name>
      </person-group>
      <article-title>ROS: An open-source robot operating system</article-title>
      <source>ICRA Workshop on Open Source Software</source>
      <year iso-8601-date="2009-01">2009</year><month>01</month>
      <volume>3</volume>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Macenski2022ROS2">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Macenski</surname><given-names>Steven</given-names></name>
        <name><surname>Foote</surname><given-names>Tully</given-names></name>
        <name><surname>Gerkey</surname><given-names>Brian</given-names></name>
        <name><surname>Lalancette</surname><given-names>Chris</given-names></name>
        <name><surname>Woodall</surname><given-names>William</given-names></name>
      </person-group>
      <article-title>Robot operating system 2: Design, architecture, and uses in the wild</article-title>
      <source>Science Robotics</source>
      <year iso-8601-date="2022">2022</year>
      <volume>7</volume>
      <issue>66</issue>
      <pub-id pub-id-type="doi">10.1126/scirobotics.abm6074</pub-id>
      <fpage>eabm6074</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Pan2012FCL">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Pan</surname><given-names>Jia</given-names></name>
        <name><surname>Chitta</surname><given-names>Sachin</given-names></name>
        <name><surname>Manocha</surname><given-names>Dinesh</given-names></name>
      </person-group>
      <article-title>FCL: A general purpose library for collision and proximity queries</article-title>
      <source>IEEE international conference on robotics and automation</source>
      <year iso-8601-date="2012">2012</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ICRA.2012.6225337</pub-id>
      <fpage>3859</fpage>
      <lpage>3866</lpage>
    </element-citation>
  </ref>
  <ref id="ref-coleman2014reducing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coleman</surname><given-names>David</given-names></name>
        <name><surname>Sucan</surname><given-names>Ioan</given-names></name>
        <name><surname>Chitta</surname><given-names>Sachin</given-names></name>
        <name><surname>Correll</surname><given-names>Nikolaus</given-names></name>
      </person-group>
      <article-title>Reducing the barrier to entry of complex robotic software: A moveit! Case study</article-title>
      <source>Journal of Software Engineering for Robotics</source>
      <year iso-8601-date="2014">2014</year>
      <volume>5</volume>
      <issue>1</issue>
      <fpage>3</fpage>
      <lpage>16</lpage>
    </element-citation>
  </ref>
  <ref id="ref-carpentierU003Ahal-03271811">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Carpentier</surname><given-names>Justin</given-names></name>
        <name><surname>Budhiraja</surname><given-names>Rohan</given-names></name>
        <name><surname>Mansard</surname><given-names>Nicolas</given-names></name>
      </person-group>
      <article-title>Proximal and Sparse Resolution of Constrained Dynamic Equations</article-title>
      <source>Robotics: Science and Systems 2021</source>
      <publisher-loc>Austin / Virtual, United States</publisher-loc>
      <year iso-8601-date="2021-07">2021</year><month>07</month>
      <uri>https://hal.inria.fr/hal-03271811</uri>
    </element-citation>
  </ref>
  <ref id="ref-kam2015rviz">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kam</surname><given-names>Hyeong Ryeol</given-names></name>
        <name><surname>Lee</surname><given-names>Sung-Ho</given-names></name>
        <name><surname>Park</surname><given-names>Taejung</given-names></name>
        <name><surname>Kim</surname><given-names>Chang-Hun</given-names></name>
      </person-group>
      <article-title>Rviz: A toolkit for real domain data visualization</article-title>
      <source>Telecommunication Systems</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>60</volume>
      <fpage>337</fpage>
      <lpage>345</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
