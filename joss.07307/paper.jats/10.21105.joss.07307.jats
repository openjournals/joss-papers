<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7307</article-id>
<article-id pub-id-type="doi">10.21105/joss.07307</article-id>
<title-group>
<article-title>PhaseFieldX: An Open-Source Framework for Advanced
Phase-Field Simulations</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0008-6383-7103</contrib-id>
<name>
<surname>Castillón</surname>
<given-names>Miguel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Universidad Politécnica de Madrid, José Gutiérrez Abascal,
2, 28006 Madrid, Spain</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>IMDEA Materials Institute, Eric Kandel 2, Getafe, 28906
Madrid, Spain</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-07-10">
<day>10</day>
<month>7</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>108</issue>
<fpage>7307</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Fenicsx</kwd>
<kwd>Phase field</kwd>
<kwd>Fatigue</kwd>
<kwd>Fracture</kwd>
<kwd>Finite element</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The <bold>PhaseFieldX</bold> project is designed to simulate and
  analyze material behavior using phase-field models, which provide a
  continuous approximation for interfaces, phase boundaries, and
  discontinuities such as cracks. Leveraging the robust capabilities of
  <italic>FEniCSx</italic>
  (<xref alt="Alnaes et al., 2014" rid="ref-AlnaesEtal2014" ref-type="bibr">Alnaes
  et al., 2014</xref>;
  <xref alt="Baratta et al., 2023" rid="ref-BarattaEtal2023" ref-type="bibr">Baratta
  et al., 2023</xref>;
  <xref alt="Scroggs, Dokken, et al., 2022" rid="ref-ScroggsEtal2022" ref-type="bibr">Scroggs,
  Dokken, et al., 2022</xref>;
  <xref alt="Scroggs, Baratta, et al., 2022" rid="ref-BasixJoss" ref-type="bibr">Scroggs,
  Baratta, et al., 2022</xref>), a renowned finite element framework for
  solving partial differential equations, this project enables efficient
  and accurate numerical simulations related to phase-field models. It
  supports a broad range of applications, including phase-field
  fracture, solidification, and other complex material phenomena, making
  it an invaluable resource for researchers and engineers in materials
  science.</p>
  <fig>
    <caption><p>PhaseFieldX
    logo.<styled-content id="figU003Alogo"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./images/logo_name.png" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p><bold>Phase-Field Fracture</bold>:</p>
    </list-item>
  </list>
  <p>The phase-field fracture model was extended by
  (<xref alt="Miehe et al., 2010" rid="ref-Miehe2010" ref-type="bibr">Miehe
  et al., 2010</xref>) to incorporate a regularized crack field within
  the variational framework of Griffith’s fracture theory, as developed
  by
  (<xref alt="Francfort &amp; Marigo, 1998" rid="ref-FrancfortMarigo1998" ref-type="bibr">Francfort
  &amp; Marigo, 1998</xref>). This model provides a robust and versatile
  approach for simulating fracture and material failure, representing
  cracks implicitly through a continuous phase-field variable rather
  than requiring explicit crack tracking. This implicit representation
  simplifies numerical implementation and naturally enables the
  simulation of complex crack patterns, including branching, merging,
  and interactions among multiple cracks.</p>
  <p>A diffuse variable, the “phase-field”
  <inline-formula><alternatives>
  <tex-math><![CDATA[\phi]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>,
  distinguishes between intact (<inline-formula><alternatives>
  <tex-math><![CDATA[\phi = 0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>)
  and fractured (<inline-formula><alternatives>
  <tex-math><![CDATA[\phi = 1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>)
  regions, with a smooth transition between them. This setup allows
  cracks to evolve based on energy minimization principles, eliminating
  the need for explicit crack-path tracking. The functional is given by
  <xref alt="Equation 1" rid="eqU003Aphase_field_fracture_functional">Equation 1</xref>,
  <named-content id="eqU003Aphase_field_fracture_functional" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[
  \mathcal{E}(\boldsymbol u, \phi) = \int_\Omega g(\phi)  \psi(\epsilon(\boldsymbol u)) \mathrm{d}\Omega + G_c \int_\Omega \left( \frac{1}{2l}\phi^2 + \frac{l}{2} |\nabla \phi|^2 \right) \mathrm{d}\Omega - \mathcal{E}_{\text{ext}}[\boldsymbol u].]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ℰ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo>,</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mi>g</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi>Ω</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mi>G</mml:mi><mml:mi>c</mml:mi></mml:msub><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow></mml:mfrac><mml:msup><mml:mi>ϕ</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mi>l</mml:mi><mml:mn>2</mml:mn></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>∇</mml:mi><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi>Ω</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>ℰ</mml:mi><mml:mtext mathvariant="normal">ext</mml:mtext></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\phi]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>
  is the phase-field variable, <inline-formula><alternatives>
  <tex-math><![CDATA[\boldsymbol u]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>𝐮</mml:mi></mml:math></alternatives></inline-formula>
  is the displacement vector field, <inline-formula><alternatives>
  <tex-math><![CDATA[g(\phi) = (1 - \phi)^2]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>g</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>
  is the degradation function that reduces material stiffness as damage
  progresses, <inline-formula><alternatives>
  <tex-math><![CDATA[\epsilon(\boldsymbol u)= \frac{1}{2} \left( \nabla \boldsymbol u + \nabla^T \boldsymbol u \right)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:mfrac><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>∇</mml:mi><mml:mi>𝐮</mml:mi><mml:mo>+</mml:mo><mml:msup><mml:mi>∇</mml:mi><mml:mi>T</mml:mi></mml:msup><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  is the small strain tensor, <inline-formula><alternatives>
  <tex-math><![CDATA[\psi(\epsilon(\boldsymbol u)) = \frac{1}{2}\lambda tr^2(\epsilon(\boldsymbol u)) + \mu tr(\epsilon(\boldsymbol u)^2)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:mfrac><mml:mi>λ</mml:mi><mml:mi>t</mml:mi><mml:msup><mml:mi>r</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>μ</mml:mi><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  is the strain energy, <inline-formula><alternatives>
  <tex-math><![CDATA[G_c]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>G</mml:mi><mml:mi>c</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is the critical energy release rate, <inline-formula><alternatives>
  <tex-math><![CDATA[l]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>l</mml:mi></mml:math></alternatives></inline-formula>
  is the length scale parameter that controls the width of the diffuse
  crack region and <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal{E}_{\text{ext}}[\boldsymbol u] = \int_\Omega f \cdot \boldsymbol u \, \mathrm{d}\Omega + \int_{\partial \Omega} t \cdot \boldsymbol u \, \mathrm{d}S]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>ℰ</mml:mi><mml:mtext mathvariant="normal">ext</mml:mtext></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mi>f</mml:mi><mml:mo>⋅</mml:mo><mml:mi>𝐮</mml:mi><mml:mspace width="0.167em"></mml:mspace><mml:mi mathvariant="normal">d</mml:mi><mml:mi>Ω</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mo>∫</mml:mo><mml:mrow><mml:mi>∂</mml:mi><mml:mi>Ω</mml:mi></mml:mrow></mml:msub><mml:mi>t</mml:mi><mml:mo>⋅</mml:mo><mml:mi>𝐮</mml:mi><mml:mspace width="0.167em"></mml:mspace><mml:mi mathvariant="normal">d</mml:mi><mml:mi>S</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  represents the external terms, with <inline-formula><alternatives>
  <tex-math><![CDATA[f]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>f</mml:mi></mml:math></alternatives></inline-formula>
  being the prescribed volume force in <inline-formula><alternatives>
  <tex-math><![CDATA[\Omega]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>Ω</mml:mi></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>t</mml:mi></mml:math></alternatives></inline-formula>
  the surface traction force on <inline-formula><alternatives>
  <tex-math><![CDATA[\partial \Omega]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>∂</mml:mi><mml:mi>Ω</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  <p>The energy can be split into two components
  <inline-formula><alternatives>
  <tex-math><![CDATA[\psi(\epsilon(\boldsymbol u)) = \psi_a(\epsilon(\boldsymbol u)) + \psi_b(\epsilon(\boldsymbol u))]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mi>ψ</mml:mi><mml:mi>a</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:msub><mml:mi>ψ</mml:mi><mml:mi>b</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\psi_a]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>ψ</mml:mi><mml:mi>a</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  represents the energy associated with tensile stresses capable of
  generating fractures, and the degradation function is applied only to
  this component. This yields the form <inline-formula><alternatives>
  <tex-math><![CDATA[g(\phi) \psi_a(\epsilon(\boldsymbol u)) + \psi_b(\epsilon(\boldsymbol u))]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>g</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:msub><mml:mi>ψ</mml:mi><mml:mi>a</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:msub><mml:mi>ψ</mml:mi><mml:mi>b</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  preventing crack formation due to compressive forces. Various methods
  exist for performing this energy split, such as the spectral
  decomposition
  (<xref alt="Miehe et al., 2010" rid="ref-Miehe2010" ref-type="bibr">Miehe
  et al., 2010</xref>) and the volumetric-deviatoric decomposition
  (<xref alt="Amor et al., 2009" rid="ref-Amor2009" ref-type="bibr">Amor
  et al., 2009</xref>). Models that incorporate this energy split are
  known as anisotropic models, while models without energy splitting are
  referred to as isotropic models.</p>
  <p>To enforce crack irreversibility,
  (<xref alt="Miehe et al., 2010" rid="ref-Miehe2010" ref-type="bibr">Miehe
  et al., 2010</xref>) introduces a history field, defined as the
  maximum reference energy obtained throughout the material’s history,
  which drives the phase field. As a result, this variable will always
  increase, ensuring that cracks cannot heal.</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Phase-Field Fatigue</bold>:</p>
    </list-item>
  </list>
  <p>Following
  (<xref alt="Carrara et al., 2020" rid="ref-Carrara2020" ref-type="bibr">Carrara
  et al., 2020</xref>), fatigue effects can be modeled by introducing a
  fatigue degradation function, <inline-formula><alternatives>
  <tex-math><![CDATA[f(\bar{\alpha}(t))]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mover><mml:mi>α</mml:mi><mml:mo accent="true">‾</mml:mo></mml:mover><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  which reduces fracture toughness based on a cumulative history
  variable, <inline-formula><alternatives>
  <tex-math><![CDATA[\bar{\alpha}(t)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mover><mml:mi>α</mml:mi><mml:mo accent="true">‾</mml:mo></mml:mover><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>t</mml:mi></mml:math></alternatives></inline-formula>
  represents a pseudotime in the simulation setup. This new history
  variable, can be any scalar quantity that effectively captures the
  material’s fatigue history. The functional, in the absence of external
  terms, is given by
  <xref alt="Equation 2" rid="eqU003Aphase_field_fatigue_functional">Equation 2</xref>.
  <named-content id="eqU003Aphase_field_fatigue_functional" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[
  \mathcal{E}(\boldsymbol u, \phi) = \int_\Omega g(\phi) \psi(\epsilon(\boldsymbol u)) \mathrm{d}\Omega + f(\bar{\alpha}(t)) G_c \int_\Omega \left( \frac{1}{2l}\phi^2 + \frac{l}{2} |\nabla \phi|^2 \right)  \mathrm{d}\Omega.]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ℰ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo>,</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mi>g</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>ψ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ϵ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>𝐮</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi>Ω</mml:mi><mml:mo>+</mml:mo><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mover><mml:mi>α</mml:mi><mml:mo accent="true">‾</mml:mo></mml:mover><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:msub><mml:mi>G</mml:mi><mml:mi>c</mml:mi></mml:msub><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow></mml:mfrac><mml:msup><mml:mi>ϕ</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mi>l</mml:mi><mml:mn>2</mml:mn></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>∇</mml:mi><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi>Ω</mml:mi><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  Note that multiple types of fatigue degradation functions have been
  developed
  (<xref alt="Carrara et al., 2020" rid="ref-Carrara2020" ref-type="bibr">Carrara
  et al., 2020</xref>), along with various methods for accumulating the
  cumulative history variable.</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Crack surface density functional</bold>:</p>
    </list-item>
  </list>
  <p>One of the key aspects of phase-field fracture simulations is that
  the crack surface density functional provides a continuous
  approximation of cracks, which converges to a discrete crack
  representation as the length scale parameter approaches zero. This
  corresponds to the second part of the phase-field fracture functional,
  as given in
  <xref alt="Equation 1" rid="eqU003Aphase_field_fracture_functional">Equation 1</xref>.
  Therefore, before studying phase-field fracture models, it is
  recommended to first focus on this part of the functional in
  isolation.</p>
  <p>The second part of the functional, which governs the regularization
  of the phase-field, is presented in
  <xref alt="Equation 3" rid="eqU003Acrack_representation_functional">Equation 3</xref>.
  <named-content id="eqU003Acrack_representation_functional" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[
  W[\phi] = \int_\Omega \left( \frac{1}{2l} \phi^2 + \frac{l}{2} |\nabla \phi|^2 \right) \mathrm{d}\Omega]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>W</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>2</mml:mn><mml:mi>l</mml:mi></mml:mrow></mml:mfrac><mml:msup><mml:mi>ϕ</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mi>l</mml:mi><mml:mn>2</mml:mn></mml:mfrac><mml:msup><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>∇</mml:mi><mml:mi>ϕ</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi>Ω</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content></p>
  <p>By considering this, an analytical solution can be derived for a
  one-dimensional problem, where a cracked bar of length
  <inline-formula><alternatives>
  <tex-math><![CDATA[2a]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>2</mml:mn><mml:mi>a</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  is represented by the phase-field, as shown in
  <xref alt="[fig:bar_one_dimension_solution]" rid="figU003Abar_one_dimension_solution">[fig:bar_one_dimension_solution]</xref>.
  Considering the conditions of <inline-formula><alternatives>
  <tex-math><![CDATA[\phi(0)=1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[\phi'(\pm a)=0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mi>′</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>±</mml:mi><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  the solution is given by
  <xref alt="Equation 4" rid="eqU003Aone_dimensional_solution">Equation 4</xref>,
  <named-content id="eqU003Aone_dimensional_solution" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[
  \phi(x) = e^{-|x|/l} + \frac{2}{e^{\frac{2a}{l}}+1} \sinh \left( \frac{|x|}{l} \right)]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msup><mml:mi>e</mml:mi><mml:mrow><mml:mi>−</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mi>/</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mfrac><mml:mn>2</mml:mn><mml:mrow><mml:msup><mml:mi>e</mml:mi><mml:mfrac><mml:mrow><mml:mn>2</mml:mn><mml:mi>a</mml:mi></mml:mrow><mml:mi>l</mml:mi></mml:mfrac></mml:msup><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfrac><mml:mo>sinh</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mi>l</mml:mi></mml:mfrac><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[l]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>l</mml:mi></mml:math></alternatives></inline-formula>
  is the length scale parameter and <inline-formula><alternatives>
  <tex-math><![CDATA[a]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>a</mml:mi></mml:math></alternatives></inline-formula>
  is half the length of the bar. In the limiting case where
  <inline-formula><alternatives>
  <tex-math><![CDATA[l \to 0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>l</mml:mi><mml:mo>→</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
  it follows that <inline-formula><alternatives>
  <tex-math><![CDATA[a/l \to \infty]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>a</mml:mi><mml:mi>/</mml:mi><mml:mi>l</mml:mi><mml:mo>→</mml:mo><mml:mi>∞</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
  and the phase-field is represented solely by the
  <inline-formula><alternatives>
  <tex-math><![CDATA[e^{-|x|/l}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mi>e</mml:mi><mml:mrow><mml:mi>−</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mi>/</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>
  term. The total energy of the bar is given by
  <inline-formula><alternatives>
  <tex-math><![CDATA[W=\tanh(a/l)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>W</mml:mi><mml:mo>=</mml:mo><mml:mo>tanh</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>a</mml:mi><mml:mi>/</mml:mi><mml:mi>l</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  and in the limit case as <inline-formula><alternatives>
  <tex-math><![CDATA[l \to 0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>l</mml:mi><mml:mo>→</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[W]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>W</mml:mi></mml:math></alternatives></inline-formula>
  approaches <inline-formula><alternatives>
  <tex-math><![CDATA[1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>1</mml:mn></mml:math></alternatives></inline-formula>.</p>
  <p>Note that as the length scale parameter tends to zero, the
  continuous phase-field representation converges to a discrete crack
  representation.
  <xref alt="[fig:bar_one_dimension_solution]" rid="figU003Abar_one_dimension_solution">[fig:bar_one_dimension_solution]</xref>
  illustrates the crack approximation for a bar of length
  <inline-formula><alternatives>
  <tex-math><![CDATA[2a]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>2</mml:mn><mml:mi>a</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  (with <inline-formula><alternatives>
  <tex-math><![CDATA[a=1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>a</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>),
  for two different length-scale values.</p>
  <fig>
    <caption><p>Left: Cracked bar represented by the phase-field
    variable. Right: Phase-field representation of the cracked bar with
    <inline-formula><alternatives>
    <tex-math><![CDATA[l=0.1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mn>0.1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    and <inline-formula><alternatives>
    <tex-math><![CDATA[l=0.5]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>l</mml:mi><mml:mo>=</mml:mo><mml:mn>0.5</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.<styled-content id="figU003Abar_one_dimension_solution"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./images/crack_surface_1d_solution.png" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p><bold>Other Phase-Field Models</bold>:</p>
    </list-item>
  </list>
  <p>Although the main capabilities of <bold>PhaseFieldX</bold> focus on
  fracture, fatigue, crack surface density functional, and elasticity
  problems, this framework also allows for the study of other
  phase-field models. Currently, the <italic>Allen-Cahn</italic>
  equation is included, enabling simulations of phase transformations
  and other diffuse-interface phenomena.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p><bold>PhaseFieldX</bold> distinguishes itself as a leading
  open-source package for phase-field modeling, particularly in the
  absence of commercial solutions that directly support phase-field
  fracture simulations. The primary alternatives include the use of
  <italic>ABAQUS</italic> subroutines, which require users to develop
  custom code, or open-source codes such as <italic>RACCOON</italic>
  (<xref alt="Hu, 2019" rid="ref-RACCOON" ref-type="bibr">Hu,
  2019</xref>), a parallel finite-element framework specialized in
  phase-field fracture simulations.</p>
  <p>Other platforms, such as the open-source <italic>FEniCS</italic> or
  <italic>COMSOL</italic>, offer some implementations of the phase-field
  model. However, to the best of the author’s knowledge, these
  implementations are often tailored to specific problems and are
  limited in scope for general phase-field modeling. Beyond fracture or
  fatigue simulations, other noteworthy software packages include
  <italic>SymPhas</italic>
  (<xref alt="Silber &amp; Karttunen, 2022" rid="ref-SymPhas" ref-type="bibr">Silber
  &amp; Karttunen, 2022</xref>), a general-purpose platform for
  phase-field, phase-field crystal, and reaction-diffusion simulations;
  <italic>OpenPhase</italic>
  (<xref alt="Tegeler et al., 2017" rid="ref-OpenPhase" ref-type="bibr">Tegeler
  et al., 2017</xref>), which enables three-dimensional simulation of
  microstructural evolution using the multiphase field method; and
  <italic>PRISMS-PF</italic>
  (<xref alt="DeWitt et al., 2020" rid="ref-PRISMS-PF" ref-type="bibr">DeWitt
  et al., 2020</xref>), a general framework for phase-field modeling
  that employs a matrix-free finite-element method.</p>
  <p><bold>PhaseFieldX</bold> integrates the latest advancements in
  phase-field research, offering fatigue simulation capabilities in a
  user-friendly, ready-to-use package. By simplifying access to
  cutting-edge methods, it lowers barriers to adoption and enables
  researchers to focus on scientific discovery without the challenges of
  bespoke modeling.</p>
  <p>The platform’s modular design empowers users to customize
  parameters such as degradation functions, energy-splitting schemes,
  and solver strategies, allowing a wide range of configurations for
  phase-field fracture and fatigue studies. This flexibility encourages
  innovation and experimentation, making <bold>PhaseFieldX</bold> an
  ideal tool for reliable simulations and collaborative development.
  Researchers can contribute to its evolution, creating a dynamic
  ecosystem that advances understanding of complex material behaviors
  and drives scientific progress.</p>
</sec>
<sec id="applications">
  <title>Applications</title>
  <p><bold>PhaseFieldX</bold> offers a comprehensive range of
  applications in materials science and engineering. For phase-field
  fracture simulations, it supports various degradation functions and
  energy split methods, such as the volumetric-deviatoric split
  (<xref alt="Amor et al., 2009" rid="ref-Amor2009" ref-type="bibr">Amor
  et al., 2009</xref>) and spectral decomposition
  (<xref alt="Miehe et al., 2010" rid="ref-Miehe2010" ref-type="bibr">Miehe
  et al., 2010</xref>). The framework accommodates multiple
  formulations, including isotropic, anisotropic, and hybrid approaches
  (<xref alt="Ambati et al., 2015" rid="ref-Ambati2015" ref-type="bibr">Ambati
  et al., 2015</xref>). For example, two well-known simulations from
  (<xref alt="Miehe et al., 2010" rid="ref-Miehe2010" ref-type="bibr">Miehe
  et al., 2010</xref>) can be conducted through
  <bold>PhaseFieldX</bold>, specifically using an anisotropic
  formulation with spectral energy decomposition.</p>
  <p>The first example, a single-edge notched tension test, consists of
  a square plate with a centrally located notch extending from the left
  edge, as illustrated in
  <xref alt="[fig:example_sentt]" rid="figU003Aexample_sentt">[fig:example_sentt]</xref>.
  The lower edge of the plate is fully constrained, while the upper edge
  is free to slide vertically. A vertical displacement is applied to the
  top until the crack propagates. The final phase-field values displayed
  in
  <xref alt="[fig:example_sentt]" rid="figU003Aexample_sentt">[fig:example_sentt]</xref>.</p>
  <fig>
    <caption><p>Single-edge notched tension test: setup with boundary
    conditions and final phase-field distribution at the end of the
    simulation.<styled-content id="figU003Aexample_sentt"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./images/single_edge_notched_tension_test.png" />
  </fig>
  <p>The second example, known as the three-point bending test, involves
  a rectangular plate with a centrally located notch and is supported at
  both ends, as shown in
  <xref alt="[fig:example_three_point]" rid="figU003Aexample_three_point">[fig:example_three_point]</xref>.
  Small surface in the lower left corner is fixed in all directions,
  while another small surface in the lower right corner is constrained
  in the vertical direction.A vertical, downward displacement is applied
  to a small surface at the center of the top edge until the crack
  propagates. The final phase-field values displayed in
  <xref alt="[fig:example_sentt]" rid="figU003Aexample_sentt">[fig:example_sentt]</xref>.</p>
  <fig>
    <caption><p>Three point bending test: setup with boundary conditions
    and final phase-field distribution at the end of the
    simulation.<styled-content id="figU003Aexample_three_point"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="./images/three_point_bending_test.png" />
  </fig>
  <p><bold>PhaseFieldX</bold> also enables fatigue analysis by applying
  cyclic loading, allowing the simulation of crack propagation as the
  cycle count increases. Additionally, the platform facilitates studies
  of other phase-field models, such as the Allen-Cahn equation,
  broadening its application to various phase transformation
  phenomena.</p>
  <p>These capabilities make <bold>PhaseFieldX</bold> a versatile and
  powerful tool for researchers and engineers investigating complex
  material behaviors through advanced phase-field simulations. A
  comprehensive list of examples is available, demonstrating the breadth
  of possible applications and scenarios.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work was supported by the FPI grant PRE2020-092051, funded by
  MCIN/AEI /10.13039/501100011033.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-BarattaEtal2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Baratta</surname><given-names>I. A.</given-names></name>
        <name><surname>Dean</surname><given-names>J. P.</given-names></name>
        <name><surname>Dokken</surname><given-names>J. S.</given-names></name>
        <name><surname>Habera</surname><given-names>M.</given-names></name>
        <name><surname>Hale</surname><given-names>J. S.</given-names></name>
        <name><surname>Richardson</surname><given-names>C. N.</given-names></name>
        <name><surname>Rognes</surname><given-names>M. E.</given-names></name>
        <name><surname>Scroggs</surname><given-names>M. W.</given-names></name>
        <name><surname>Sime</surname><given-names>N.</given-names></name>
        <name><surname>Wells</surname><given-names>G. N.</given-names></name>
      </person-group>
      <article-title>DOLFINx: The next generation FEniCS problem solving environment</article-title>
      <publisher-name>preprint</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.5281/zenodo.10447666</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ScroggsEtal2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Scroggs</surname><given-names>M. W.</given-names></name>
        <name><surname>Dokken</surname><given-names>J. S.</given-names></name>
        <name><surname>Richardson</surname><given-names>C. N.</given-names></name>
        <name><surname>Wells</surname><given-names>G. N.</given-names></name>
      </person-group>
      <article-title>Construction of arbitrary order finite element degree-of-freedom maps on polygonal and polyhedral cell meshes</article-title>
      <source>ACM Transactions on Mathematical Software</source>
      <year iso-8601-date="2022">2022</year>
      <volume>48</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1145/3524456</pub-id>
      <fpage>18:1</fpage>
      <lpage>18:23</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BasixJoss">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Scroggs</surname><given-names>M. W.</given-names></name>
        <name><surname>Baratta</surname><given-names>I. A.</given-names></name>
        <name><surname>Richardson</surname><given-names>C. N.</given-names></name>
        <name><surname>Wells</surname><given-names>G. N.</given-names></name>
      </person-group>
      <article-title>Basix: A runtime finite element basis evaluation library</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2022">2022</year>
      <volume>7</volume>
      <issue>73</issue>
      <pub-id pub-id-type="doi">10.21105/joss.03982</pub-id>
      <fpage>3982</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-AlnaesEtal2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Alnaes</surname><given-names>M. S.</given-names></name>
        <name><surname>Logg</surname><given-names>A.</given-names></name>
        <name><surname>Ølgaard</surname><given-names>K. B.</given-names></name>
        <name><surname>Rognes</surname><given-names>M. E.</given-names></name>
        <name><surname>Wells</surname><given-names>G. N.</given-names></name>
      </person-group>
      <article-title>Unified form language: A domain-specific language for weak formulations of partial differential equations</article-title>
      <source>ACM Transactions on Mathematical Software</source>
      <year iso-8601-date="2014">2014</year>
      <volume>40</volume>
      <pub-id pub-id-type="doi">10.1145/2566630</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Miehe2010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Miehe</surname><given-names>C.</given-names></name>
        <name><surname>Hofacker</surname><given-names>M.</given-names></name>
        <name><surname>Welschinger</surname><given-names>F.</given-names></name>
      </person-group>
      <article-title>A phase field model for rate-independent crack propagation: Robust algorithmic implementation based on operator splits</article-title>
      <source>Computer Methods in Applied Mechanics and Engineering</source>
      <year iso-8601-date="2010">2010</year>
      <volume>199</volume>
      <issue>45</issue>
      <issn>0045-7825</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0045782510001283</uri>
      <pub-id pub-id-type="doi">10.1016/j.cma.2010.04.011</pub-id>
      <fpage>2765</fpage>
      <lpage>2778</lpage>
    </element-citation>
  </ref>
  <ref id="ref-FrancfortMarigo1998">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Francfort</surname><given-names>G. A.</given-names></name>
        <name><surname>Marigo</surname><given-names>J.-J.</given-names></name>
      </person-group>
      <article-title>Revisiting brittle fracture as an energy minimization problem</article-title>
      <source>Journal of the Mechanics and Physics of Solids</source>
      <year iso-8601-date="1998">1998</year>
      <volume>46</volume>
      <issue>8</issue>
      <issn>0022-5096</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0022509698000349</uri>
      <pub-id pub-id-type="doi">10.1016/S0022-5096(98)00034-9</pub-id>
      <fpage>1319</fpage>
      <lpage>1342</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Amor2009">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Amor</surname><given-names>H.</given-names></name>
        <name><surname>Marigo</surname><given-names>J.-J.</given-names></name>
        <name><surname>Maurini</surname><given-names>C.</given-names></name>
      </person-group>
      <article-title>Regularized formulation of the variational brittle fracture with unilateral contact: Numerical experiments</article-title>
      <source>Journal of the Mechanics and Physics of Solids</source>
      <year iso-8601-date="2009">2009</year>
      <volume>57</volume>
      <issue>8</issue>
      <issn>0022-5096</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0022509609000659</uri>
      <pub-id pub-id-type="doi">10.1016/j.jmps.2009.04.011</pub-id>
      <fpage>1209</fpage>
      <lpage>1229</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Ambati2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ambati</surname><given-names>M.</given-names></name>
        <name><surname>Gerasimov</surname><given-names>T.</given-names></name>
        <name><surname>De Lorenzis</surname><given-names>L.</given-names></name>
      </person-group>
      <article-title>A review on phase-field models of brittle fracture and a new fast hybrid formulation</article-title>
      <source>Computational Mechanics</source>
      <year iso-8601-date="2015-02-01">2015</year><month>02</month><day>01</day>
      <volume>55</volume>
      <issue>2</issue>
      <issn>1432-0924</issn>
      <uri>https://doi.org/10.1007/s00466-014-1109-y</uri>
      <pub-id pub-id-type="doi">10.1007/s00466-014-1109-y</pub-id>
      <fpage>383</fpage>
      <lpage>405</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Carrara2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Carrara</surname><given-names>P.</given-names></name>
        <name><surname>Ambati</surname><given-names>M.</given-names></name>
        <name><surname>Alessi</surname><given-names>R.</given-names></name>
        <name><surname>De Lorenzis</surname><given-names>L.</given-names></name>
      </person-group>
      <article-title>A framework to model the fatigue behavior of brittle materials based on a variational phase-field approach</article-title>
      <source>Computer Methods in Applied Mechanics and Engineering</source>
      <year iso-8601-date="2020">2020</year>
      <volume>361</volume>
      <issn>0045-7825</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0045782519306218</uri>
      <pub-id pub-id-type="doi">10.1016/j.cma.2019.112731</pub-id>
      <fpage>112731</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-RACCOON">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hu</surname><given-names>Gary (Tianchen)</given-names></name>
      </person-group>
      <article-title>RACCOON: A parallel finite-element code specialized in phase-field for fracture</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <uri>https://github.com/hugary1995/raccoon</uri>
    </element-citation>
  </ref>
  <ref id="ref-SymPhas">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Silber</surname><given-names>Steven A.</given-names></name>
        <name><surname>Karttunen</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>SymPhas—general purpose software for phase-field, phase-field crystal, and reaction-diffusion simulations</article-title>
      <source>Advanced Theory and Simulations</source>
      <year iso-8601-date="2022">2022</year>
      <volume>5</volume>
      <issue>1</issue>
      <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/adts.202100351</uri>
      <pub-id pub-id-type="doi">10.1002/adts.202100351</pub-id>
      <fpage>2100351</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-OpenPhase">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tegeler</surname><given-names>M.</given-names></name>
        <name><surname>Shchyglo</surname><given-names>O.</given-names></name>
        <name><surname>Kamachali</surname><given-names>R.</given-names></name>
        <name><surname>Monas</surname><given-names>A.</given-names></name>
        <name><surname>Steinbach</surname><given-names>I.</given-names></name>
        <name><surname>Sutmann</surname><given-names>G.</given-names></name>
      </person-group>
      <article-title>Parallel multiphase field simulations with OpenPhase</article-title>
      <source>Computer Physics Communications</source>
      <year iso-8601-date="2017">2017</year>
      <volume>215</volume>
      <issn>0010-4655</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0010465517300358</uri>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2017.01.023</pub-id>
      <fpage>173</fpage>
      <lpage>187</lpage>
    </element-citation>
  </ref>
  <ref id="ref-PRISMS-PF">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>DeWitt</surname><given-names>S.</given-names></name>
        <name><surname>Rudraraju</surname><given-names>S.</given-names></name>
        <name><surname>Montiel</surname><given-names>D.</given-names></name>
        <name><surname>Beck Andrews</surname><given-names>W.</given-names></name>
        <name><surname>Thornton</surname><given-names>K.</given-names></name>
      </person-group>
      <article-title>PRISMS-PF: A general framework for phase-field modeling with a matrix-free finite element method</article-title>
      <source>npj Computational Materials</source>
      <year iso-8601-date="2020">2020</year>
      <volume>6</volume>
      <issue>1</issue>
      <issn>2057-3960</issn>
      <uri>https://doi.org/10.1038/s41524-020-0298-5</uri>
      <pub-id pub-id-type="doi">10.1038/s41524-020-0298-5</pub-id>
      <fpage>29</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
