<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8416</article-id>
<article-id pub-id-type="doi">10.21105/joss.08416</article-id>
<title-group>
<article-title>fenicsx-beat - An Open Source Simulation Framework for
Cardiac Electrophysiology</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6489-8858</contrib-id>
<name>
<surname>Finsberg</surname>
<given-names>Henrik</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Simula Research Laboratory, Oslo, Norway</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-03-20">
<day>20</day>
<month>3</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>8416</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>cardiac electrophysiology</kwd>
<kwd>monodomain</kwd>
<kwd>ecg</kwd>
<kwd>python</kwd>
<kwd>FEniCSx</kwd>
<kwd>FEniCS</kwd>
<kwd>partial differential equations</kwd>
<kwd>finite element method</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>fenicsx-beat</monospace> is an open-source Python
  software package for simulating cardiac electrophysiology, built upon
  the FEniCSx finite element framework
  (<xref alt="Baratta et al., 30 December 2023" rid="ref-ORBi-bf72337a-a760-487c-84eb-292ea4cebe75" ref-type="bibr">Baratta
  et al., 30 December 2023</xref>). It provides tools to solve the
  Monodomain model, a widely used model for electrical signal
  propagation in cardiac tissue, coupled with systems of ordinary
  differential equations (ODEs) that represent complex ionic models
  governing cell membrane dynamics. Designed for researchers in
  computational cardiology, <monospace>fenicsx-beat</monospace>
  leverages the high-performance capabilities of FEniCSx to enable
  efficient and scalable simulations of cardiac electrical activity on
  various computational platforms.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Computational modeling plays an increasingly vital role in cardiac
  electrophysiology research, offering insights into mechanisms of heart
  rhythm disorders (arrhythmias), evaluating therapeutic strategies like
  drug effects or ablation, and paving the way towards personalized
  medicine and ‘digital twin’ concepts. Mathematical models, ranging
  from detailed ionic interactions at the subcellular level to
  electrical wave propagation at the tissue and organ level, allow for
  quantitative investigation of physiological and pathological
  conditions that are difficult or impossible to study
  experimentally.</p>
  <p>The Bidomain model is often considered the most physiologically
  detailed representation of cardiac tissue electrophysiology, but its
  computational cost can be prohibitive for large-scale or long-duration
  simulations. The Monodomain model, a simplification valid under
  certain assumptions about tissue conductivity, offers a
  computationally less expensive alternative while still capturing
  essential propagation dynamics accurately in many scenarios, such as
  studies of activation sequences or basic arrhythmia mechanisms.
  Solving these models typically involves coupling the
  reaction-diffusion PDE (Monodomain or Bidomain) with a system of stiff
  ODEs describing the ionic currents across the cell membrane (the ionic
  model)
  (<xref alt="Sundnes et al., 2007" rid="ref-sundnes2007computing" ref-type="bibr">Sundnes
  et al., 2007</xref>).</p>
  <p>The FEniCSx project provides a modern, powerful, and performant
  platform for solving PDEs using the finite element method, featuring a
  high-level Python interface for ease of use and a C++ backend for
  efficiency and scalability. There is a need for specialized cardiac
  simulation tools that integrate seamlessly with this evolving
  ecosystem. While related tools based on the legacy FEniCS library
  exist, such as <monospace>cbcbeat</monospace>
  (<xref alt="Rognes et al., 2017" rid="ref-Rognes2017" ref-type="bibr">Rognes
  et al., 2017</xref>) and the electro-mechanics solver
  <monospace>simcardems</monospace>
  (<xref alt="H. N. T. Finsberg et al., 2023" rid="ref-Finsberg2023" ref-type="bibr">H.
  N. T. Finsberg et al., 2023</xref>),
  <monospace>fenicsx-beat</monospace> specifically targets the FEniCSx
  platform, providing researchers already using FEniCSx with a dedicated
  and readily integrable tool for cardiac electrophysiology simulations
  based on the Monodomain model.</p>
  <sec id="functionality">
    <title>Functionality</title>
    <p><monospace>fenicsx-beat</monospace> facilitates the simulation of
    electrical wave propagation in cardiac tissue by solving the
    Monodomain equation coupled with a system of ODEs representing a
    chosen ionic model. The core mathematical problem is a
    reaction-diffusion system:</p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[
    \chi (C_m \frac{\partial v}{\partial t} + I_{\text{ion}}  - I_{\text{stim}}) = \nabla \cdot (\sigma\nabla v)
    ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>χ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mfrac><mml:mrow><mml:mi>∂</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:mi>∂</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:msub><mml:mi>I</mml:mi><mml:mtext mathvariant="normal">ion</mml:mtext></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>I</mml:mi><mml:mtext mathvariant="normal">stim</mml:mtext></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>∇</mml:mi><mml:mo>⋅</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>σ</mml:mi><mml:mi>∇</mml:mi><mml:mi>v</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[
    \frac{\partial s}{\partial t} = f(s, v, t)
    ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>∂</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>∂</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p>where <inline-formula><alternatives>
    <tex-math><![CDATA[v]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>v</mml:mi></mml:math></alternatives></inline-formula>
    is the transmembrane potential, <inline-formula><alternatives>
    <tex-math><![CDATA[s]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>s</mml:mi></mml:math></alternatives></inline-formula>
    represents the state variables of the ionic model,
    <inline-formula><alternatives>
    <tex-math><![CDATA[C_m]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>C</mml:mi><mml:mi>m</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
    is the membrane capacitance, <inline-formula><alternatives>
    <tex-math><![CDATA[I_{\text{ion}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>I</mml:mi><mml:mtext mathvariant="normal">ion</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is the total ionic current, <inline-formula><alternatives>
    <tex-math><![CDATA[I_{\text{stim}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>I</mml:mi><mml:mtext mathvariant="normal">stim</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is the applied stimulus current, <inline-formula><alternatives>
    <tex-math><![CDATA[\sigma]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>σ</mml:mi></mml:math></alternatives></inline-formula>
    is the conductivity tensor, and <inline-formula><alternatives>
    <tex-math><![CDATA[f(s, v, t)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    is the system of ODEs defining the ionic model. The Monodomain
    equation describes the diffusion of the transmembrane potential
    <inline-formula><alternatives>
    <tex-math><![CDATA[v]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>v</mml:mi></mml:math></alternatives></inline-formula>
    in the tissue, while the ODE system captures the dynamics of the
    ionic currents across the cell membrane. The coupling between these
    two components is essential for accurately simulating cardiac
    electrophysiology.</p>
    <p>The software leverages the FEniCSx library for the spatial
    discretization of the PDE component using the finite element method.
    Variational forms are expressed using the Unified Form Language
    (UFL), and the software utilizes the high-performance assembly and
    solution capabilities of DOLFINx. This allows for simulations on
    complex geometries using various element types and supports parallel
    execution via MPI. DOLFINx interfaces with robust external
    libraries, notably PETSc, for scalable linear algebra operations and
    solvers.</p>
  </sec>
  <sec id="illustrative-example">
    <title>Illustrative example</title>
    <p>The following minimal example demonstrates simulating the
    Monodomain model on a unit square domain using a modified
    FitzHugh-Nagumo model
    (<xref alt="Rogers &amp; McCulloch, 1994" rid="ref-rogers1994collocation" ref-type="bibr">Rogers
    &amp; McCulloch, 1994</xref>). For simplicity, we use the forward
    Euler method to solve the ODEs. However, in a real simulation, we
    would use <monospace>gotranx</monospace>
    (<xref alt="H. Finsberg &amp; Hake, 2024" rid="ref-Finsberg2024" ref-type="bibr">H.
    Finsberg &amp; Hake, 2024</xref>) to generate code for solving the
    ODEs (see more examples in the documentation).</p>
    <p>The state variables are <inline-formula><alternatives>
    <tex-math><![CDATA[s]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>s</mml:mi></mml:math></alternatives></inline-formula>
    and <inline-formula><alternatives>
    <tex-math><![CDATA[v]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>v</mml:mi></mml:math></alternatives></inline-formula>.
    The derivatives <inline-formula><alternatives>
    <tex-math><![CDATA[\frac{ds}{dt}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>
    and <inline-formula><alternatives>
    <tex-math><![CDATA[\frac{dv}{dt}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>
    are calculated, and then the forward Euler update rule is
    applied.</p>
    <p>The equations for the derivatives are:</p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[ \frac{ds}{dt} = b((v - v_{rest})-c_3 s) ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mi>b</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>v</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mi>s</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula>
    <disp-formula><alternatives>
    <tex-math><![CDATA[ \frac{dv}{dt} = I + i_{app} ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mfrac><mml:mrow><mml:mi>d</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mi>I</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mi>i</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:mi>p</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p>where</p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[ I =  \left(\left(\frac{c_1}{v_{\mathrm{amp}}^2}\right) (v - v_{\mathrm{res}t})\right) (v - v_{th}) (v_{\mathrm{peak}} - v) - s \left(\frac{c_2}{v_{\mathrm{amp}}}\right) (v - v_{\mathrm{rest}})
    ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>I</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:msubsup><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">m</mml:mi><mml:mi mathvariant="normal">p</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msubsup></mml:mfrac><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>v</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mrow><mml:mi mathvariant="normal">r</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">s</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>v</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">p</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">k</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi>v</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:msub><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">m</mml:mi><mml:mi mathvariant="normal">p</mml:mi></mml:mrow></mml:msub></mml:mfrac><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>v</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">r</mml:mi><mml:mi mathvariant="normal">e</mml:mi><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p>and the threshold voltage <inline-formula><alternatives>
    <tex-math><![CDATA[v_{th}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msub></mml:math></alternatives></inline-formula>
    is defined as:</p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[ v_{th} = v_{\mathrm{amp}} a + v_{rest} ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">m</mml:mi><mml:mi mathvariant="normal">p</mml:mi></mml:mrow></mml:msub><mml:mi>a</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p>The applied current <inline-formula><alternatives>
    <tex-math><![CDATA[i_{app}(t)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>i</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>p</mml:mi><mml:mi>p</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    is defined as:</p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[
    i_{\mathrm{app}}(t) = \begin{cases} \mathrm{stim}_{\mathrm{amp}} & \text{if } \mathrm{stim}_{\mathrm{start}} < t < \mathrm{stim}_{\mathrm{start}} + \mathrm{stim}_{\mathrm{dur}} \\ 0 & \text{otherwise} \end{cases}.
    ]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>i</mml:mi><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">p</mml:mi><mml:mi mathvariant="normal">p</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">{</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="left" style="text-align: left"><mml:msub><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">i</mml:mi><mml:mi mathvariant="normal">m</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">m</mml:mi><mml:mi mathvariant="normal">p</mml:mi></mml:mrow></mml:msub></mml:mtd><mml:mtd columnalign="left" style="text-align: left"><mml:mrow><mml:mtext mathvariant="normal">if </mml:mtext><mml:mspace width="0.333em"></mml:mspace></mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">i</mml:mi><mml:mi mathvariant="normal">m</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">r</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo>&lt;</mml:mo><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">i</mml:mi><mml:mi mathvariant="normal">m</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">a</mml:mi><mml:mi mathvariant="normal">r</mml:mi><mml:mi mathvariant="normal">t</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mi mathvariant="normal">t</mml:mi><mml:mi mathvariant="normal">i</mml:mi><mml:mi mathvariant="normal">m</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">d</mml:mi><mml:mi mathvariant="normal">u</mml:mi><mml:mi mathvariant="normal">r</mml:mi></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left" style="text-align: left"><mml:mn>0</mml:mn></mml:mtd><mml:mtd columnalign="left" style="text-align: left"><mml:mtext mathvariant="normal">otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p>The following code snippet demonstrates the setup and execution
    of a simulation using <monospace>fenicsx-beat</monospace>:</p>
    <code language="python">import shutil

import matplotlib.pyplot as plt
import numpy as np

from mpi4py import MPI
import dolfinx
import ufl

import beat

# MPI communicator
comm = MPI.COMM_WORLD
# Create mesh
mesh = dolfinx.mesh.create_unit_square(comm, 32, 32, dolfinx.cpp.mesh.CellType.triangle)
# Create a variable for time
time = dolfinx.fem.Constant(mesh, dolfinx.default_scalar_type(0.0))


# Define forward euler scheme for solving the ODEs
# This just needs to be a function that takes the current time, states, parameters and dt
# and returns the new states
def fitzhughnagumo_forward_euler(t, states, parameters, dt):
    s, v = states
    (
        c_1,
        c_2,
        c_3,
        a,
        b,
        v_amp,
        v_rest,
        v_peak,
        stim_amplitude,
        stim_duration,
        stim_start,
    ) = parameters
    i_app = np.where(
        np.logical_and(t &gt; stim_start, t &lt; stim_start + stim_duration),
        stim_amplitude,
        0,
    )
    values = np.zeros_like(states)

    ds_dt = b * ((v - v_rest) - c_3 * s )
    values[0] = s + ds_dt * dt

    v_th = v_amp * a + v_rest
    I = -s * (c_2 / v_amp) * (v - v_rest) + (
        ((c_1 / v_amp**2) * (v - v_rest)) * (v - v_th)
    ) * (-v + v_peak)
    dv_dt = I + i_app
    values[1] = v + dv_dt * dt
    return values


# Define space for the ODEs
ode_space = dolfinx.fem.functionspace(mesh, (&quot;P&quot;, 1))

# Define parameters for the ODEs
a = 0.13
b = 0.013
c1 = 0.26
c2 = 0.1
c3 = 1.0
v_peak = 40.0
v_rest = -85.0
stim_amplitude = 100.0
stim_duration = 1
stim_start = 0.0

# Collect the parameter in a numpy array
parameters = np.array(
    [
        c1,
        c2,
        c3,
        a,
        b,
        v_peak - v_rest,
        v_rest,
        v_peak,
        stim_amplitude,
        stim_duration,
        stim_start,
    ],
    dtype=np.float64,
)

# Define the initial states
init_states = np.array([0.0, -85], dtype=np.float64)
# Specify the index of state for the membrane potential
# which will also inform the PDE solver later
v_index = 1

# We can also check that the solution of the ODE
# by solving a the ODE for a single cell
times = np.arange(0.0, 500.0, 0.1)
values = np.zeros((len(times), 2))
values[0, :] = np.array([0.0, -85.0])
for i, t in enumerate(times[1:]):
    values[i + 1, :] = fitzhughnagumo_forward_euler(t, values[i, :], parameters, dt=0.1)


fig, ax = plt.subplots()
ax.plot(times, values[:, v_index])
ax.set_xlabel(&quot;Time&quot;)
ax.set_ylabel(&quot;Membrane potential (mV)&quot;)
ax.legend()
fig.savefig(&quot;ode_solution.png&quot;, dpi=300)


# Now we set external stimulus to zero for ODE
parameters[-3] = 0.0

# and create stimulus for PDE
stim_expr = ufl.conditional(ufl.And(ufl.ge(time, 0.0), ufl.le(time, 0.5)), 600.0, 0.0)
stim_marker = 1
cells = dolfinx.mesh.locate_entities(
    mesh, mesh.topology.dim, lambda x: np.logical_and(x[0] &lt;= 0.5, x[1] &lt;= 0.5)
)
stim_tags = dolfinx.mesh.meshtags(
    mesh,
    mesh.topology.dim,
    cells,
    np.full(len(cells), stim_marker, dtype=np.int32),
)
dx = ufl.Measure(&quot;dx&quot;, domain=mesh, subdomain_data=stim_tags)
I_s = beat.Stimulus(expr=stim_expr, dZ=dx, marker=stim_marker)

# Create PDE model
pde = beat.MonodomainModel(time=time, mesh=mesh, M=0.001, I_s=I_s, dx=dx)

# Next we create the PDE solver where we make sure to
# pass the variable for the membrane potential from the PDE
ode = beat.odesolver.DolfinODESolver(
    v_ode=dolfinx.fem.Function(ode_space),
    v_pde=pde.state,
    fun=fitzhughnagumo_forward_euler,
    init_states=init_states,
    parameters=parameters,
    num_states=len(init_states),
    v_index=1,
)

# Combine PDE and ODE solver
solver = beat.MonodomainSplittingSolver(pde=pde, ode=ode)

# Now we setup file for saving results
# First remove any existing files
shutil.rmtree(&quot;voltage.bp&quot;, ignore_errors=True)

vtx = dolfinx.io.VTXWriter(mesh.comm, &quot;voltage.bp&quot;, [pde.state], engine=&quot;BP5&quot;)
vtx.write(0.0)

# Finally we run the simulation for 400 ms using a time step of 0.01 ms
T = 400.0
t = 0.0
dt = 0.01
i = 0
while t &lt; T:
    v = solver.pde.state.x.array
    solver.step((t, t + dt))
    t += dt
    if i % 500 == 0:
        vtx.write(t)
    i += 1

vtx.close()</code>
    <fig>
      <caption><p>Simulation results. The left panel shows the membrane
      potential after 3 ms in the simulation on a unit square where the
      stimulation is applied in the lower left corner. The right panel
      shows the membrane potential in a single cell
      simulation.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="paper_figure.png" />
    </fig>
  </sec>
  <sec id="comparison-with-other-software">
    <title>Comparison with Other Software</title>
    <p>The field of computational cardiac electrophysiology benefits
    from several open-source simulation packages.
    <monospace>fenicsx-beat</monospace> distinguishes itself by being
    built natively on the modern FEniCSx framework, targeting users who
    leverage this platform for its flexibility in solving PDEs with the
    finite element method.</p>
    <p>Within the FEniCS ecosystem, <monospace>fenicsx-beat</monospace>
    can be seen as a successor or counterpart to
    <monospace>cbcbeat</monospace>, which provided similar
    Monodomain/Bidomain capabilities but was based on the legacy FEniCS
    library. Other FEniCS/FEniCSx-based tools focus on different
    physics: <monospace>simcardems</monospace> couples electrophysiology
    with solid mechanics, <monospace>pulse</monospace>
    (<xref alt="H. N. T. Finsberg, 2019" rid="ref-Finsberg2019" ref-type="bibr">H.
    N. T. Finsberg, 2019</xref>) focuses solely on cardiac mechanics,
    and <monospace>Ambit</monospace>
    (<xref alt="Hirschvogel, 2024" rid="ref-Hirschvogel2024" ref-type="bibr">Hirschvogel,
    2024</xref>) is a newer multi-physics solver primarily for cardiac
    mechanics and fluid-structure interaction (FSI), although future
    electrophysiology capabilities are envisioned.
    <monospace>fenicsx-beat</monospace> provides the dedicated,
    up-to-date electrophysiology solver within this FEniCSx
    environment.</p>
    <p>Compared to established standalone simulators like openCARP
    (<xref alt="Plank et al., 2021" rid="ref-plank2021opencarp" ref-type="bibr">Plank
    et al., 2021</xref>), <monospace>fenicsx-beat</monospace> offers
    tighter integration with FEniCSx libraries. openCARP is a powerful,
    widely used simulator with its own optimized C++ core and a
    dedicated Python workflow tool (carputils) for managing complex
    simulations.</p>
    <p>Another prominent open-source package is Chaste (Cancer, Heart
    And Soft Tissue Environment)
    (<xref alt="Cooper et al., 2020" rid="ref-Cooper2020" ref-type="bibr">Cooper
    et al., 2020</xref>), a C++ library designed for a broad range of
    computational biology problems, including cardiac
    electrophysiology.</p>
    <p>In summary, <monospace>fenicsx-beat</monospace> occupies a
    valuable niche by providing a modern, Python-interfaced,
    FEniCSx-native tool for Monodomain cardiac electrophysiology
    simulations. Its primary strength lies in its seamless integration
    with the FEniCSx platform, making it an attractive choice for
    researchers utilizing FEniCSx for multi-physics cardiac
    modeling.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work has been financially supported by Simula Research
  Laboratory and by the European Union’s Horizon 2020 research and
  innovation program (grant number: 101016496 (SimCardioTest)).</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-ORBi-bf72337a-a760-487c-84eb-292ea4cebe75">
    <element-citation publication-type="manuscript">
      <person-group person-group-type="author">
        <name><surname>Baratta</surname><given-names>Igor A.</given-names></name>
        <name><surname>Dean</surname><given-names>Joseph P.</given-names></name>
        <name><surname>Dokken</surname><given-names>Jørgen S.</given-names></name>
        <name><surname>HABERA</surname><given-names>Michal</given-names></name>
        <name><surname>HALE</surname><given-names>Jack</given-names></name>
        <name><surname>Richardson</surname><given-names>Chris N.</given-names></name>
        <name><surname>Rognes</surname><given-names>Marie E.</given-names></name>
        <name><surname>Scroggs</surname><given-names>Matthew W.</given-names></name>
        <name><surname>Sime</surname><given-names>Nathan</given-names></name>
        <name><surname>Wells</surname><given-names>Garth N.</given-names></name>
      </person-group>
      <article-title>DOLFINx: The next generation FEniCS problem solving environment</article-title>
      <publisher-name>FNR - Luxembourg National Research Fund</publisher-name>
      <pub-id pub-id-type="doi">10.5281/zenodo.10447666</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-sundnes2007computing">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Sundnes</surname><given-names>Joakim</given-names></name>
        <name><surname>Lines</surname><given-names>Glenn Terje</given-names></name>
        <name><surname>Cai</surname><given-names>Xing</given-names></name>
        <name><surname>Nielsen</surname><given-names>Bjørn Frederik</given-names></name>
        <name><surname>Mardal</surname><given-names>Kent-Andre</given-names></name>
        <name><surname>Tveito</surname><given-names>Aslak</given-names></name>
      </person-group>
      <source>Computing the electrical activity in the heart</source>
      <publisher-name>Springer Science &amp; Business Media</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <volume>1</volume>
      <pub-id pub-id-type="doi">10.1007/3-540-33437-8</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-rogers1994collocation">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rogers</surname><given-names>Jack M</given-names></name>
        <name><surname>McCulloch</surname><given-names>Andrew D</given-names></name>
      </person-group>
      <article-title>A collocation-galerkin finite element model of cardiac action potential propagation</article-title>
      <source>IEEE Transactions on Biomedical Engineering</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="1994">1994</year>
      <volume>41</volume>
      <issue>8</issue>
      <pub-id pub-id-type="doi">10.1109/10.310090</pub-id>
      <fpage>743</fpage>
      <lpage>757</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Finsberg2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Finsberg</surname><given-names>Henrik</given-names></name>
        <name><surname>Hake</surname><given-names>Johan</given-names></name>
      </person-group>
      <article-title>Gotranx: General ODE translator</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <volume>9</volume>
      <issue>102</issue>
      <uri>https://doi.org/10.21105/joss.07063</uri>
      <pub-id pub-id-type="doi">10.21105/joss.07063</pub-id>
      <fpage>7063</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Rognes2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rognes</surname><given-names>Marie E.</given-names></name>
        <name><surname>Farrell</surname><given-names>Patrick E.</given-names></name>
        <name><surname>Funke</surname><given-names>Simon W.</given-names></name>
        <name><surname>Hake</surname><given-names>Johan E.</given-names></name>
        <name><surname>Maleckar</surname><given-names>Molly M. c.</given-names></name>
      </person-group>
      <article-title>Cbcbeat: An adjoint-enabled framework for computational cardiac electrophysiology</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>2</volume>
      <issue>13</issue>
      <uri>https://doi.org/10.21105/joss.00224</uri>
      <pub-id pub-id-type="doi">10.21105/joss.00224</pub-id>
      <fpage>224</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Finsberg2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Finsberg</surname><given-names>Henrik Nicolay Topnes</given-names></name>
        <name><surname>Herck</surname><given-names>Ilsbeth Gerarda Maria van</given-names></name>
        <name><surname>Daversin-Catty</surname><given-names>Cécile</given-names></name>
        <name><surname>Arevalo</surname><given-names>Hermenegild</given-names></name>
        <name><surname>Wall</surname><given-names>Samuel</given-names></name>
      </person-group>
      <article-title>Simcardems: A FEniCS-based cardiac electro-mechanics solver</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>81</issue>
      <uri>https://doi.org/10.21105/joss.04753</uri>
      <pub-id pub-id-type="doi">10.21105/joss.04753</pub-id>
      <fpage>4753</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Finsberg2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Finsberg</surname><given-names>Henrik Nicolay Topnes</given-names></name>
      </person-group>
      <article-title>Pulse: A python package based on FEniCS for solving problems in cardiac mechanics</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>4</volume>
      <issue>41</issue>
      <uri>https://doi.org/10.21105/joss.01539</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01539</pub-id>
      <fpage>1539</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Hirschvogel2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hirschvogel</surname><given-names>Marc</given-names></name>
      </person-group>
      <article-title>Ambit – a FEniCS-based cardiovascular multi-physics solver</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <volume>9</volume>
      <issue>93</issue>
      <uri>https://doi.org/10.21105/joss.05744</uri>
      <pub-id pub-id-type="doi">10.21105/joss.05744</pub-id>
      <fpage>5744</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-plank2021opencarp">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Plank</surname><given-names>Gernot</given-names></name>
        <name><surname>Loewe</surname><given-names>Axel</given-names></name>
        <name><surname>Neic</surname><given-names>Aurel</given-names></name>
        <name><surname>Augustin</surname><given-names>Christoph</given-names></name>
        <name><surname>Huang</surname><given-names>Yung-Lin</given-names></name>
        <name><surname>Gsell</surname><given-names>Matthias AF</given-names></name>
        <name><surname>Karabelas</surname><given-names>Elias</given-names></name>
        <name><surname>Nothstein</surname><given-names>Mark</given-names></name>
        <name><surname>Prassl</surname><given-names>Anton J</given-names></name>
        <name><surname>Sánchez</surname><given-names>Jorge</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>The openCARP simulation environment for cardiac electrophysiology</article-title>
      <source>Computer methods and Programs in Biomedicine</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>208</volume>
      <pub-id pub-id-type="doi">10.1016/j.cmpb.2021.106223</pub-id>
      <fpage>106223</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Cooper2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cooper</surname><given-names>Fergus R.</given-names></name>
        <name><surname>Baker</surname><given-names>Ruth E.</given-names></name>
        <name><surname>Bernabeu</surname><given-names>Miguel O.</given-names></name>
        <name><surname>Bordas</surname><given-names>Rafel</given-names></name>
        <name><surname>Bowler</surname><given-names>Louise</given-names></name>
        <name><surname>Bueno-Orovio</surname><given-names>Alfonso</given-names></name>
        <name><surname>Byrne</surname><given-names>Helen M.</given-names></name>
        <name><surname>Carapella</surname><given-names>Valentina</given-names></name>
        <name><surname>Cardone-Noott</surname><given-names>Louie</given-names></name>
        <name><surname>Cooper</surname><given-names>Jonathan</given-names></name>
        <name><surname>Dutta</surname><given-names>Sara</given-names></name>
        <name><surname>Evans</surname><given-names>Benjamin D.</given-names></name>
        <name><surname>Fletcher</surname><given-names>Alexander G.</given-names></name>
        <name><surname>Grogan</surname><given-names>James A.</given-names></name>
        <name><surname>Guo</surname><given-names>Wenxian</given-names></name>
        <name><surname>Harvey</surname><given-names>Daniel G.</given-names></name>
        <name><surname>Hendrix</surname><given-names>Maurice</given-names></name>
        <name><surname>Kay</surname><given-names>David</given-names></name>
        <name><surname>Kursawe</surname><given-names>Jochen</given-names></name>
        <name><surname>Maini</surname><given-names>Philip K.</given-names></name>
        <name><surname>McMillan</surname><given-names>Beth</given-names></name>
        <name><surname>Mirams</surname><given-names>Gary R.</given-names></name>
        <name><surname>Osborne</surname><given-names>James M.</given-names></name>
        <name><surname>Pathmanathan</surname><given-names>Pras</given-names></name>
        <name><surname>Pitt-Francis</surname><given-names>Joe M.</given-names></name>
        <name><surname>Robinson</surname><given-names>Martin</given-names></name>
        <name><surname>Rodriguez</surname><given-names>Blanca</given-names></name>
        <name><surname>Spiteri</surname><given-names>Raymond J.</given-names></name>
        <name><surname>Gavaghan</surname><given-names>David J.</given-names></name>
      </person-group>
      <article-title>Chaste: Cancer, heart and soft tissue environment</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>47</issue>
      <uri>https://doi.org/10.21105/joss.01848</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01848</pub-id>
      <fpage>1848</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
