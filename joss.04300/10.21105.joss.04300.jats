<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4300</article-id>
<article-id pub-id-type="doi">10.21105/joss.04300</article-id>
<title-group>
<article-title>VTUFileHandler: A VTU library in the Julia language that
implements an algebra for basic mathematical operations on VTU
data</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9954-294X</contrib-id>
<name>
<surname>Bittens</surname>
<given-names>Maximilian</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Federal Institute for Geosciences and Natural Resources
(BGR)</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-02-28">
<day>28</day>
<month>2</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>73</issue>
<fpage>4300</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Julia</kwd>
<kwd>VTK unstructered grid</kwd>
<kwd>Stochastic/parametric post-processing of simulation results</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="abstract">
  <title>Abstract</title>
  <p>With increasing computing resources, investigating uncertainties in
  simulation results is becoming an increasingly important factor.
  Hereby, a deterministic simulation is computed several times with
  different deviations of the input parameters to produce a variety of
  outputs of the same model to analyze those effects. The relevant
  stochastic or parametric output variables, such as mean (expected
  value) and variance, are often calculated and visualized only at
  selected individual points of the whole domain. This project aims to
  provide a simple way to perform stochastic or parametric
  post-processing of simulations results on entire domains using the VTK
  unstructured grid (VTU) file system
  (<xref alt="Schroeder et al., 2006" rid="ref-schroeder2006visualization" ref-type="bibr">Schroeder
  et al., 2006</xref>) and the Julia language
  (<xref alt="Bezanson et al., 2012" rid="ref-bezanson2012julia" ref-type="bibr">Bezanson
  et al., 2012</xref>) as an example. The VTU file format is primarily
  used in conjunction with
  <ext-link ext-link-type="uri" xlink:href="https://www.paraview.org/">Paraview</ext-link>,
  an open-source, multi-platform data analysis and visualization tool,
  to display results of, e.g., structural or fluid mechanics
  simulations.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>To the authors knowledge, there is no library available, neither
  for the VTU result file-format nor any other simulation result
  file-format, which standardizes stochastic/parametric post-processing.
  To this date, this kind of post-processing seems to be done by purely
  proprietary means. With this novel approach, stochastic properties can
  be displayed on the whole domain using well established visualization
  software.</p>
</sec>
<sec id="state-of-the-field">
  <title>State of the field</title>
  <p>There are other approaches to writing and reading VTU, or more
  generally VTK, files available in the Julia community.
  <ext-link ext-link-type="uri" xlink:href="https://github.com/jipolanco/WriteVTK.jl">WriteVTK.jl</ext-link>
  is a package for the creation of VTK XML files from Julia out of data
  already available in system memory.
  <ext-link ext-link-type="uri" xlink:href="https://github.com/trixi-framework/ReadVTK.jl">ReadVTK.jl</ext-link>
  is a project primarily dedicated to read data written by WriteVTK.jl.
  Neither of those packages explicitly addresses reading, writing and
  manipulating generic VTU files. However, an advanced
  <ext-link ext-link-type="uri" xlink:href="https://github.com/Kitware/VTK/tree/master/Wrapping/Python">VTK
  Python Wrapper</ext-link> does exist.</p>
</sec>
<sec id="introduction">
  <title>Introduction</title>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://vtk.org/">Visualization
  Toolkit</ext-link> (VTK) is an open source software project for
  manipulating and displaying scientific data. It supports a variety of
  visualization algorithms and advanced modeling techniques such as
  implicit modeling and mesh smoothing. It defines three types of file
  formats: a legacy format, an XML format and an HDF file format. Since
  the HDF file format is fairly new, the XML file format is the most
  used so far and will be also used here. VTK datasets are classified
  into one of two categories: structured (tensor grids, image data) and
  unstructured (meshes). We will restrict ourselves to unstructed
  datasets in the following since modern simulation results are often
  times performed on complex geometries. Simulation results saved as VTU
  files can be displayed and investigated with the Paraview
  application.</p>
  <p><ext-link ext-link-type="uri" xlink:href="https://julialang.org/">Julia</ext-link>
  is a fast and dynamic programming language which enables fast
  prototyping as well as efficiently implemented software solutions.
  With its in-built features for numerical mathematics and distributed
  computing, it is very well suited for implementing computational
  physics. However, since Julia is a relatively newer programming
  language, it has often time lacks the native connections to other
  software projects or industry standards that exist in Python, for
  example.</p>
  <p>The software presented here should make it possible to read in,
  manipulate and write out existing VTU files.</p>
</sec>
<sec id="motivation">
  <title>Motivation</title>
  <p>Consider a discrete computational model
  <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal{M}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>,
  providing a generic output <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{Y}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="bold"><mml:mi>ùêò</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  for a given set of inputs <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{X}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>:
  <named-content id="eqU003Adiscr" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[\label{eq:discr}
  \mathbf{Y} = \mathcal{M}(\mathbf{X})\;.]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mi>ùêò</mml:mi></mml:mstyle><mml:mo>=</mml:mo><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mspace width="0.278em"></mml:mspace><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  For example, the output <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{Y}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="bold"><mml:mi>ùêò</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  can be a scalar, a vector, a matrix, or a finite-element
  post-processing result. In this case, we consider the output to be a
  VTU file. The input parameters are considered a set of scalars
  <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{X}= \{X_1,...,X_N\}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mo>=</mml:mo><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mi>.</mml:mi><mml:mi>.</mml:mi><mml:mi>.</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>X</mml:mi><mml:mi>N</mml:mi></mml:msub><mml:mo stretchy="false" form="postfix">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>,
  and for simplicity, the set is reduced to a
  (<inline-formula><alternatives>
  <tex-math><![CDATA[N=1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>N</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>).
  Equation (<xref alt="1" rid="eqU003Adiscr">1</xref>) is called the .
  As a next step, we introduce a parametric variation
  <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{X}:=\mathbf{X}(\boldsymbol{\xi})]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mo>:=</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\boldsymbol{\xi}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  maps the inputs from a minimum to a maximum value. We refer to this
  problem formulation as the (or if <inline-formula><alternatives>
  <tex-math><![CDATA[\xi_i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>Œæ</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[i\in{1,...,N}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>i</mml:mi><mml:mo>‚àà</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>.</mml:mi><mml:mi>.</mml:mi><mml:mi>.</mml:mi><mml:mo>,</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  is a random variable with a probability density function, ) :
  <named-content id="eqU003Astoch" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[\label{eq:stoch}
  \mathbf{Y}(\boldsymbol{\xi}) = \mathcal{M}(\mathbf{X}(\boldsymbol{\xi}))\;.]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mi>ùêò</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mspace width="0.278em"></mml:mspace><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  Since <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal{M}(\mathbf{X}(\boldsymbol{\xi}))]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  is no longer deterministic, further methods are required to discretize
  the and to post-process and visualize the results. Different methods
  for uncertainty quantification can be found in Gates &amp; Bittens
  (<xref alt="2015" rid="ref-gates2015multilevel" ref-type="bibr">2015</xref>)
  or Sudret et al.
  (<xref alt="2017" rid="ref-sudret2017surrogate" ref-type="bibr">2017</xref>),
  for example. The most prominent method for computing the expected
  value of the problem described in Equation
  (<xref alt="2" rid="eqU003Astoch">2</xref>) is the Monte-Carlo method:
  <named-content id="eqU003Amontecarlo" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[\label{eq:montecarlo}
  \mathbb{E}[\mathbf{Y}(\boldsymbol{\xi})] \approx \tilde{\mathbb{E}}[\mathcal{M}(\mathbf{X}(\boldsymbol{\xi}))] = \frac{1}{M} \sum\limits_{i=1}^M \mathcal{M}(\mathbf{X}(\tilde{\boldsymbol{\xi}}_i))\,,\quad
  \tilde{\xi}_{ij} \sim \mathcal{U}(0,1)\,.]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="double-struck"><mml:mi>ùîº</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêò</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo>‚âà</mml:mo><mml:mover><mml:mstyle mathvariant="double-struck"><mml:mi>ùîº</mml:mi></mml:mstyle><mml:mo accent="true">ÃÉ</mml:mo></mml:mover><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mi>M</mml:mi></mml:mfrac><mml:munderover><mml:mo>‚àë</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>M</mml:mi></mml:munderover><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mover><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo accent="true">ÃÉ</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mspace width="0.167em"></mml:mspace><mml:mo>,</mml:mo><mml:mspace width="1.0em"></mml:mspace><mml:msub><mml:mover><mml:mi>Œæ</mml:mi><mml:mo accent="true">ÃÉ</mml:mo></mml:mover><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>‚àº</mml:mo><mml:mstyle mathvariant="script"><mml:mi>ùí∞</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mspace width="0.167em"></mml:mspace><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content>
  From (<xref alt="3" rid="eqU003Amontecarlo">3</xref>) we can conclude
  that if <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{Y}(\tilde{\boldsymbol{\xi}}_i)=\mathcal{M}(\mathbf{X}(\tilde{\boldsymbol{\xi}}_i))]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mi>ùêò</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mover><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo accent="true">ÃÉ</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mstyle mathvariant="script"><mml:mi>‚Ñ≥</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùêó</mml:mi></mml:mstyle><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mover><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo accent="true">ÃÉ</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  is a deterministic VTU result file at position
  <inline-formula><alternatives>
  <tex-math><![CDATA[\tilde{\boldsymbol{\xi}}_i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mover><mml:mstyle mathvariant="bold"><mml:mi>ùõè</mml:mi></mml:mstyle><mml:mo accent="true">ÃÉ</mml:mo></mml:mover><mml:mi>i</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  in the sample space, it is sufficient to implement the operators
  <monospace>+(::VTUFile,::VTUFile)</monospace> and
  <monospace>/(::VTUFile,::Number)</monospace> to compute the expected
  value on the entire domain by help of the Monte-Carlo method.</p>
</sec>
<sec id="definition-of-a-vtufile-algebra">
  <title>Definition of a VTUFile algebra</title>
  <p>First we define an abstract VTUFile which represents the simulation
  results stored in memory as a series of coefficients of supporting
  points and can be thought of as a vector or matrix. As a next step,
  let <inline-formula><alternatives>
  <tex-math><![CDATA[V=(\text{VTUFile},+,*)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>V</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mtext mathvariant="normal">VTUFile</mml:mtext><mml:mo>,</mml:mo><mml:mo>+</mml:mo><mml:mo>,</mml:mo><mml:mo>*</mml:mo><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  be a field and <inline-formula><alternatives>
  <tex-math><![CDATA[A \subseteq R^n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>A</mml:mi><mml:mo>‚äÜ</mml:mo><mml:msup><mml:mi>R</mml:mi><mml:mi>n</mml:mi></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>
  a vector space over <inline-formula><alternatives>
  <tex-math><![CDATA[V]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>V</mml:mi></mml:math></alternatives></inline-formula>.
  Then <inline-formula><alternatives>
  <tex-math><![CDATA[V]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>V</mml:mi></mml:math></alternatives></inline-formula>
  is an algebra if for all <inline-formula><alternatives>
  <tex-math><![CDATA[x,y,z \in A]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>z</mml:mi><mml:mo>‚àà</mml:mo><mml:mi>A</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[a,b \in V]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>b</mml:mi><mml:mo>‚àà</mml:mo><mml:mi>V</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  the following holds: <disp-formula><alternatives>
  <tex-math><![CDATA[\begin{aligned}
  (x+y) * z &= x * z + y * z\\
  z * (x+y) &= z * x + z * y\\
  (ax) * (bx) &= (ab)(x * y)\end{aligned}]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>*</mml:mo><mml:mi>z</mml:mi></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo><mml:mi>x</mml:mi><mml:mo>*</mml:mo><mml:mi>z</mml:mi><mml:mo>+</mml:mo><mml:mi>y</mml:mi><mml:mo>*</mml:mo><mml:mi>z</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"><mml:mi>z</mml:mi><mml:mo>*</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo><mml:mi>z</mml:mi><mml:mo>*</mml:mo><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>z</mml:mi><mml:mo>*</mml:mo><mml:mi>y</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>a</mml:mi><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>*</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>b</mml:mi><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>a</mml:mi><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>*</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives></disp-formula></p>
  <p>The above holds in general, if the <inline-formula><alternatives>
  <tex-math><![CDATA[(*)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mo>*</mml:mo><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>-operator
  acts scalar-wise: <disp-formula><alternatives>
  <tex-math><![CDATA[(x*y)_i := x_i * y_i \quad \text{for all} \;\;  x,y \in A\;.]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>*</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>:=</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>*</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mspace width="1.0em"></mml:mspace><mml:mtext mathvariant="normal">for all</mml:mtext><mml:mspace width="0.278em"></mml:mspace><mml:mspace width="0.278em"></mml:mspace><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>‚àà</mml:mo><mml:mi>A</mml:mi><mml:mspace width="0.278em"></mml:mspace><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></p>
</sec>
<sec id="preliminaries">
  <title>Preliminaries</title>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/baxmittens/VTUFileHandler.jl">VTUFileHandler</ext-link>
  will eventually be used to perform stochastic post-processing on large
  VTU result files. Therefore, the following assumptions have to be
  fulfilled for the software to work correctly:</p>
  <list list-type="order">
    <list-item>
      <p>The VTU file must be in binary format and, in addition, can be
      Zlib compressed.</p>
    </list-item>
    <list-item>
      <p>Operators can only be applied to VTU files that share the same
      topology. The user must ensure that this condition is met.</p>
    </list-item>
    <list-item>
      <p>The data type of numerical fields of the VTU file, for which
      operators should be applied, has to be
      <monospace>Float64</monospace>.</p>
    </list-item>
  </list>
</sec>
<sec id="features">
  <title>Features</title>
  <p>The VTUFileHandler implements a basic VTU reader and writer through
  the functions:</p>
  <code language="julia">function VTUFile(file::String) ... end 
function Base.write(vtu::VTUFile, add_timestamp=true) ... end</code>
  <p>By default, a timestamp is added if VTU files are written to disk
  not to overwrite existing files. Only data fields that are registered
  by the function</p>
  <code language="julia">function set_uncompress_keywords(uk::Vector{String}) ... end</code>
  <p>before reading the VTU file are uncompressed and can be altered.
  For applying math operators onto a data field, the associated field
  has to be registered by the function</p>
  <code language="julia">function set_interpolation_keywords(ik::Vector{String}) ... end</code>
  <p>The following math operators acting point-wise on nodal results
  (point data) are implemented:</p>
  <code language="julia">+(::VTUFile, ::VTUFile),+(::VTUFile, ::Number),
-(::VTUFile, ::VTUFile),-(::VTUFile, ::Number),
*(::VTUFile, ::VTUFile),*(::VTUFile, ::Number),
/(::VTUFile, ::VTUFile),/(::VTUFile, ::Number),
^(::VTUFile, ::Number)</code>
  <p>In-place variations of the operators above are implemented as
  well.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>A three-dimensional cube with dimension
  <inline-formula><alternatives>
  <tex-math><![CDATA[(x,y,z)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>z</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
  with <inline-formula><alternatives>
  <tex-math><![CDATA[0\leq x,y,z \leq 2]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>0</mml:mn><mml:mo>‚â§</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>z</mml:mi><mml:mo>‚â§</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  discretized by quadratic hexahedral elements with 27 points and 8
  cells named <monospace>vox8.vtu</monospace> with a linear ramp in
  x-direction (<inline-formula><alternatives>
  <tex-math><![CDATA[f(x=0,y,z)=0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>z</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[f(x=2,y,z)=0.8]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:mi>z</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0.8</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>)
  as a result field termed <monospace>xramp</monospace> will be used as
  an example (see <xref alt="Figure¬†1" rid="figU003A1">Figure¬†1</xref>).
  The following set of instructions transforms the result field from a
  linear ramp to a quadratic function in <inline-formula><alternatives>
  <tex-math><![CDATA[x]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>x</mml:mi></mml:math></alternatives></inline-formula>-direction
  (displayed as a piece-wise linear field due to the
  discretization):</p>
  <code language="julia">set_uncompress_keywords([&quot;xRamp&quot;]) # uncrompress data field xramp
set_interpolation_keywords([&quot;xRamp&quot;]) # apply math operators to xramp
vtu = VTUFile(&quot;vox8.vtu&quot;); # read the vtu
vtu += vtu/4; # [0.0,...,0.8] -&gt; [0.0,...,1.0]
vtu *= 4.0; # [0,...,1.0] -&gt; [0.0,...,4.0]
vtu -= 2.0; # [0,...,4.0] -&gt; [-2.0,...,2.0]
vtu ^= 2.0; # [-2.0,...,2.0] -&gt; [4.0,...,0.0,...,4.0]
rename!(vtu, &quot;vox8_1.vtu&quot;)
write(vtu)</code>
  <p>Both, the initial (<monospace>vox8.vtu</monospace>) and the
  manipulated file (<monospace>vox8_1.vtu</monospace>) can be loaded and
  displayed with
  <ext-link ext-link-type="uri" xlink:href="https://www.paraview.org/">Paraview</ext-link>.
  The result is depicted in figure
  <xref alt="Figure¬†1" rid="figU003A1">Figure¬†1</xref>.</p>
  <fig>
    <caption><p>Cube with initial result field (left). Cube with
    manipulated result field (right). Rendered with
    <ext-link ext-link-type="uri" xlink:href="https://www.paraview.org/">Paraview</ext-link>.
    <styled-content id="figU003A1"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/xramp1.PNG" xlink:title="" />
  </fig>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>A basic VTU library was implemented, which does not claim
  completeness in terms of VTU features. However, the implemented math
  operators constitute a complete feature set sufficient to compute a
  complete parametric or stochastic post-processing of VTU files. This
  implementation can readily be used for this purpose or can be utilized
  as a template for extending a different VTU library. The
  quantification of uncertainties in coupled thermo-hydro-mechanical
  simulations can serve as an example of an application where this tool
  together with
  <ext-link ext-link-type="uri" xlink:href="https://github.com/joergbuchwald/ogs6py">ogs6py</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://www.opengeosys.org/">OpenGeoSys</ext-link>
  (<xref alt="Buchwald et al., 2021" rid="ref-buchwald2021ogs6py" ref-type="bibr">Buchwald
  et al., 2021</xref>) can be used to fully automate stochastic
  computations.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-gates2015multilevel">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gates</surname><given-names>Robert L</given-names></name>
        <name><surname>Bittens</surname><given-names>Maximilian R</given-names></name>
      </person-group>
      <article-title>A multilevel adaptive sparse grid stochastic collocation approach to the non-smooth forward propagation of uncertainty in discretized problems</article-title>
      <source>arXiv preprint arXiv:1509.01462</source>
      <year iso-8601-date="2015">2015</year>
    </element-citation>
  </ref>
  <ref id="ref-sudret2017surrogate">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Sudret</surname><given-names>Bruno</given-names></name>
        <name><surname>Marelli</surname><given-names>Stefano</given-names></name>
        <name><surname>Wiart</surname><given-names>Joe</given-names></name>
      </person-group>
      <article-title>Surrogate models for uncertainty quantification: An overview</article-title>
      <source>2017 11th european conference on antennas and propagation (EUCAP)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <pub-id pub-id-type="doi">10.23919/EuCAP.2017.7928679</pub-id>
      <fpage>793</fpage>
      <lpage>797</lpage>
    </element-citation>
  </ref>
  <ref id="ref-schroeder2006visualization">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schroeder</surname><given-names>W</given-names></name>
        <name><surname>Martin</surname><given-names>K</given-names></name>
        <name><surname>Lorensen</surname><given-names>B</given-names></name>
      </person-group>
      <article-title>The visualization toolkit, 4th edn. kitware</article-title>
      <source>New York</source>
      <year iso-8601-date="2006">2006</year>
      <isbn>978-1-930934-19-1</isbn>
    </element-citation>
  </ref>
  <ref id="ref-buchwald2021ogs6py">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Buchwald</surname><given-names>J√∂rg</given-names></name>
        <name><surname>Kolditz</surname><given-names>Olaf</given-names></name>
        <name><surname>Nagel</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>ogs6py and VTUinterface: Streamlining OpenGeoSys workflows in python</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2021">2021</year>
      <volume>6</volume>
      <issue>67</issue>
      <pub-id pub-id-type="doi">10.21105/joss.03673</pub-id>
      <fpage>3673</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-bezanson2012julia">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
        <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
        <name><surname>Shah</surname><given-names>Viral B</given-names></name>
        <name><surname>Edelman</surname><given-names>Alan</given-names></name>
      </person-group>
      <article-title>Julia: A fast dynamic language for technical computing</article-title>
      <source>arXiv preprint arXiv:1209.5145</source>
      <year iso-8601-date="2012">2012</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
