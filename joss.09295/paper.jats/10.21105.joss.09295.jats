<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">9295</article-id>
<article-id pub-id-type="doi">10.21105/joss.09295</article-id>
<title-group>
<article-title>pyMultiFit: A Python library for fitting data with
multiple models</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0002-5888-4163</contrib-id>
<name>
<surname>Bukhari</surname>
<given-names>Syed Ali Mohsin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-2515-6616</contrib-id>
<name>
<surname>Siddique</surname>
<given-names>Iqra</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5164-7942</contrib-id>
<name>
<surname>Ali</surname>
<given-names>Asad</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Applied Mathematics and Statistics, Institute
of Space Technology, Islamabad 44000, Pakistan</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Space and Astrophysics Research Lab (SARL), National Centre
of GIS and Space Applications (NCGSA), Islamabad 44000,
Pakistan</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Gran Sasso Science Institute (GSSI), Viale Crispi 7,
I-67100 L’Aquila, Italy</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Dipartimento di Fisica, Università di Trento, Via Sommarive
14 I-38123 Trento, Italy</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>INFN Laboratori Nazionali del Gran Sasso, Via Acitelli 22,
I-67100 Assergi, L’Aquila, Italy</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-08-21">
<day>21</day>
<month>8</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>114</issue>
<fpage>9295</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>statistics</kwd>
<kwd>fitting</kwd>
<kwd>Gaussian mixtures</kwd>
<kwd>data analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>pyMultiFit</monospace> is an open-source Python library
  that streamlines multi-model curve fitting for scientific
  applications. It provides a uniform API for both statistical and
  non-statistical models, with built-in support for common distributions
  such as Gaussian, Laplace, SkewedNormal, LogNormal, and Exponential.
  The library emphasizes extensibility through a lightweight
  <monospace>BaseFitter</monospace> interface, enabling users to define
  custom models with minimal boilerplate. In addition to fitting,
  <monospace>pyMultiFit</monospace> includes utilities for synthetic
  data generation and integrated statistical tools for constructing
  synthetic datasets.</p>
  <p>Together, these features make <monospace>pyMultiFit</monospace>
  especially well-suited for researchers working with
  <bold>signals</bold>, <bold>spectra</bold>, or <bold>experimental
  datasets</bold> where multiple overlapping components are common.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Data fitting is a cornerstone of experimental and analytical
  workflows across the sciences. Yet, widely used scientific libraries
  such as <monospace>numpy</monospace>
  (<xref alt="Harris et al., 2020" rid="ref-harris2020array" ref-type="bibr">Harris
  et al., 2020</xref>) and <monospace>scipy</monospace>
  (<xref alt="Virtanen et al., 2020" rid="ref-virtanen2020scipy" ref-type="bibr">Virtanen
  et al., 2020</xref>) provide only limited functionality for fitting
  <bold>multiple models or model mixtures</bold> concurrently.
  Researchers working with multi-component fits—common in domains such
  as signal analysis, spectroscopy, and high-energy physics—are often
  required to implement complex and repetitive boilerplate code to
  manage these workflows.</p>
  <p>Several modern libraries have been developed to extend beyond these
  limitations. For example, <monospace>zfit</monospace>
  (<xref alt="Eschle et al., 2020" rid="ref-zfit2019" ref-type="bibr">Eschle
  et al., 2020</xref>) leverages <monospace>tensorflow</monospace>
  (<xref alt="Abadi et al., 2016" rid="ref-tensorflow2016" ref-type="bibr">Abadi
  et al., 2016</xref>) to support high-performance statistical fitting,
  <monospace>pyAutoFit</monospace>
  (<xref alt="Nightingale et al., 2021" rid="ref-pyautofit2021" ref-type="bibr">Nightingale
  et al., 2021</xref>) facilitates hierarchical model construction, and
  specialized <monospace>Mixture-Models</monospace>
  (<xref alt="Kasa et al., 2024" rid="ref-MM2024" ref-type="bibr">Kasa
  et al., 2024</xref>) packages provide probabilistic mixture fitting.
  While powerful, these tools are either tightly bound to heavy
  backends, optimized for niche applications, or difficult to adapt for
  general multimodel curve-fitting tasks.</p>
  <p><monospace>pyMultiFit</monospace> addresses this gap by providing a
  lightweight and extensible framework dedicated to multi-model fitting.
  It offers built-in support for combining multiple models, generating
  synthetic datasets, and incorporating user-defined models with minimal
  effort.</p>
  <p>By streamlining multi-component fitting workflows,
  <monospace>pyMultiFit</monospace> enables researchers to more rapidly
  explore, test, and refine fitting strategies without the overhead of
  custom infrastructure.</p>
</sec>
<sec id="modules">
  <title>Modules</title>
  <p>The <monospace>pyMultiFit</monospace> library is organized into
  three main modules:</p>
  <list list-type="order">
    <list-item>
      <p><bold><monospace>distributions</monospace></bold>
      Provides classes for statistical distributions, including common
      implementations such as Gaussian and Laplace via the
      <monospace>utilities_d</monospace> script.</p>
      <list list-type="bullet">
        <list-item>
          <p>Custom distributions can be defined by subclassing the
          <monospace>BaseDistribution</monospace> class. At minimum,
          users must implement the distribution formula in the
          <monospace>pdf</monospace> method.</p>
        </list-item>
        <list-item>
          <p>For convenience, statistical distributions can also be
          instantiated using the
          <monospace>from_scipy_params</monospace> class method, which
          accepts the same parameter names as
          <monospace>scipy.stats</monospace>.</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p><bold><monospace>fitters</monospace></bold>
      Provides classes for fitting models to data.</p>
      <list list-type="bullet">
        <list-item>
          <p>Custom fitters can be created by subclassing the
          <monospace>BaseFitter</monospace> class.</p>
        </list-item>
        <list-item>
          <p>Fitters can handle multiple use cases of the same
          model.</p>
        </list-item>
        <list-item>
          <p>The <monospace>MixedDataFitter</monospace> class is
          included for fitting multiple models to heterogeneous
          datasets.</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p><bold><monospace>generators</monospace></bold>
      Provides tools for generating synthetic datasets.</p>
      <list list-type="bullet">
        <list-item>
          <p>Generators can accept subclasses of
          <monospace>BaseDistribution</monospace> through a dictionary
          interface, enabling flexible model generation.</p>
        </list-item>
        <list-item>
          <p>A key utility is the <monospace>multiple_models</monospace>
          function which enables heterogeneous model data generation
          using <monospace>BaseDistribution</monospace> subclasses.</p>
        </list-item>
      </list>
    </list-item>
  </list>
</sec>
<sec id="highlights">
  <title>Highlights</title>
  <p><monospace>pyMultiFit</monospace> provides a consistent API for
  custom distributions, multi-model data generation, and heterogeneous
  fitting workflows.
  This section highlights key features of the library with illustrative
  examples and figures.</p>
  <sec id="custom-and-scipy-compatible-distributions">
    <title>Custom and <monospace>scipy</monospace>-compatible
    distributions</title>
    <p>Users can define distributions by subclassing
    <monospace>BaseDistribution</monospace> or use the familiar
    <monospace>scipy.stats</monospace> parameterization. Figure 1 shows
    the comparison between a custom Gaussian distribution implemented in
    <monospace>pyMultiFit</monospace> and the equivalent
    <monospace>scipy.stats</monospace> distribution.</p>
    <code language="python">import numpy as np
import scipy.stats as ss
from matplotlib import pyplot as plt

from pymultifit.distributions import GaussianDistribution

x = np.linspace(-15, 15, 100)

custom_distribution = GaussianDistribution(mu=-1, std=4, normalize=True).pdf(x)

scipy_distribution = ss.norm(loc=-1, scale=4).pdf(x)
custom_with_scipy = GaussianDistribution.from_scipy_params(loc=-1, 
                                                           scale=4).pdf(x)

f, ax = plt.subplots(1, 2, figsize=(15, 5))
ax[0].plot(x, custom_distribution, 
           label='custom distribution\nw/o\nscipy parametrization')
ax[0].plot(x, scipy_distribution, label='scipy distribution')

ax[1].plot(x, custom_with_scipy, 
           label='custom distribution\nw\nscipy parametrization')
ax[1].plot(x, scipy_distribution, label='scipy distribution')

[i.set_xlabel('x') for i in ax]
[i.set_ylabel('pdf') for i in ax]
[i.set_title('Gaussian Distribution') for i in ax]
[i.grid(True, alpha=0.5, ls='--') for i in ax]
[i.legend(loc='best') for i in ax]

plt.tight_layout()
plt.show()</code>
    <fig>
      <caption><p>Comparison of the pdf of a Gaussian distribution with
      and without scipy parametrization</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="distribution_.png" />
    </fig>
  </sec>
  <sec id="flexible-tools-for-generating-synthetic-datasets-and-fitting-multiple-models">
    <title>Flexible tools for generating synthetic datasets and fitting
    multiple models</title>
    <p>Flexible tools allow researchers to generate synthetic datasets
    with multiple components and fit them with minimal boilerplate.
    Figure 2 demonstrates the fitting of a 3-component Gaussian mixture
    using <monospace>pyMultiFit</monospace>, with both individual
    components and the composite model shown.</p>
    <code language="python">import matplotlib.pyplot as plt
import numpy as np

from pymultifit.fitters import GaussianFitter
from pymultifit.generators import multi_gaussian

x = np.linspace(-10, 10, 10_000)

amp = np.array([4, 2, 6])
mu = np.array([-3, 0, 6])
std = np.array([1, 1, 0.3])
params = np.column_stack([amp, mu, std])

mg_data = multi_gaussian(x, params, noise_level=0.2, normalize=False)

# guess for the parameters
# note that the order of the parameters must match the order of the 
# parameters in the distribution class
amp_guess = np.array([3, 1, 4])
mu_guess = np.array([-2, 0, 5])
std_guess = np.array([1, 0.5, 0.5])

params_guess = np.column_stack([amp_guess, mu_guess, std_guess])
mg_fitter = GaussianFitter(x, mg_data)
mg_fitter.fit(params_guess)
mg_fitter.plot_fit(show_individuals=True)
plt.show()</code>
    <fig>
      <caption><p>Example of a 3-component Gaussian model fit using the
      <monospace>GaussianFitter</monospace></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="./mg_fit_paper.png" />
    </fig>
  </sec>
  <sec id="flexible-api-for-generating-and-fitting-heterogeneous-datasets.">
    <title>Flexible API for generating and fitting heterogeneous
    datasets.</title>
    <p>The MixedDataFitter enables simultaneous fitting of heterogeneous
    models (e.g., Gaussian + SkewNormal + Linear), useful in complex
    workflows such as spectral modeling. Figure 3 illustrates a combined
    Gaussian, SkewNormal, and Linear model fit.</p>
    <code language="python">import matplotlib.pyplot as plt
import numpy as np

from pymultifit.distributions.utilities_d import (gaussian_pdf_,
                                                  skew_normal_pdf_, line)
from pymultifit.fitters import (MixedDataFitter, GaussianFitter,
                                SkewNormalFitter, LineFitter)
from pymultifit.generators import multiple_models

x = np.linspace(-10, 10, 10_000)

gauss = (10, -1, 0.2)
skewNorm = (3, 5, 0.2, 3)
lineParams = (-0.2, -0.3)
params = [gauss, skewNorm, lineParams]

mixed_data = multiple_models(x, params,
                             model_list=['G', 'Sk', 'L'],
                             mapping_dict={'G': gaussian_pdf_,
                                           'Sk': skew_normal_pdf_,
                                           'L': line},
                             noise_level=0.2)

guess = [(8, 0, 1), (8, 3, 0, 2), (1, 0)]
mixed_fitter = MixedDataFitter(x, mixed_data, model_list=['G', 'Sk', 'L'],
                               model_dictionary={'G': GaussianFitter,
                                                 'Sk': SkewNormalFitter,
                                                 'L': LineFitter})
mixed_fitter.fit(guess)
mixed_fitter.plot_fit(show_individuals=True)
plt.show()</code>
    <fig>
      <caption><p>Demonstration of the MixedDataFitter for fitting
      heterogeneous models</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="./mixed_fit_paper.png" />
    </fig>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-harris2020array">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>van der Walt</surname><given-names>Stéfan J.</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>van Kerkwijk</surname><given-names>Marten H.</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>del Rı́o</surname><given-names>Jaime Fernández</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source></source>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://arxiv.org/abs/2006.10256</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-virtanen2020scipy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
        <name><surname>van der Walt</surname><given-names>Stéfan J.</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
        <name><surname>Jones</surname><given-names>Eric</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Larson</surname><given-names>Eric</given-names></name>
        <name><surname>Carey</surname><given-names>C. J.</given-names></name>
        <name><surname>Polat</surname><given-names>İlhan</given-names></name>
        <name><surname>Feng</surname><given-names>Yu</given-names></name>
        <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
        <name><surname>Perktold</surname><given-names>Josef</given-names></name>
        <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
        <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
        <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
        <name><surname>Ribeiro</surname><given-names>Antônio H.</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>van Mulbregt</surname><given-names>Paul</given-names></name>
        <string-name>SciPy 1. 0 Contributors</string-name>
      </person-group>
      <article-title>SciPy 1.0: fundamental algorithms for scientific computing in Python</article-title>
      <source>Nature Methods</source>
      <year iso-8601-date="2020-02">2020</year><month>02</month>
      <volume>17</volume>
      <uri>https://arxiv.org/abs/1907.10121</uri>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      <fpage>261</fpage>
      <lpage>272</lpage>
    </element-citation>
  </ref>
  <ref id="ref-zfit2019">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Eschle</surname><given-names>Jonas</given-names></name>
        <name><surname>Puig Navarro</surname><given-names>Albert</given-names></name>
        <name><surname>Silva Coutinho</surname><given-names>Rafael</given-names></name>
        <name><surname>Serra</surname><given-names>Nicola</given-names></name>
      </person-group>
      <article-title>zfit: Scalable pythonic fitting</article-title>
      <source>SoftwareX</source>
      <year iso-8601-date="2020-01">2020</year><month>01</month>
      <volume>11</volume>
      <uri>https://arxiv.org/abs/1910.13429</uri>
      <pub-id pub-id-type="doi">10.1016/j.softx.2020.100508</pub-id>
      <fpage>100508</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-tensorflow2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Abadi</surname><given-names>Martin</given-names></name>
        <name><surname>Barham</surname><given-names>Paul</given-names></name>
        <name><surname>Chen</surname><given-names>Jianmin</given-names></name>
        <name><surname>Chen</surname><given-names>Zhifeng</given-names></name>
        <name><surname>Davis</surname><given-names>Andy</given-names></name>
        <name><surname>Dean</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Devin</surname><given-names>Matthieu</given-names></name>
        <name><surname>Ghemawat</surname><given-names>Sanjay</given-names></name>
        <name><surname>Irving</surname><given-names>Geoffrey</given-names></name>
        <name><surname>Isard</surname><given-names>Michael</given-names></name>
        <name><surname>Kudlur</surname><given-names>Manjunath</given-names></name>
        <name><surname>Levenberg</surname><given-names>Josh</given-names></name>
        <name><surname>Monga</surname><given-names>Rajat</given-names></name>
        <name><surname>Moore</surname><given-names>Sherry</given-names></name>
        <name><surname>Murray</surname><given-names>Derek G.</given-names></name>
        <name><surname>Steiner</surname><given-names>Benoit</given-names></name>
        <name><surname>Tucker</surname><given-names>Paul</given-names></name>
        <name><surname>Vasudevan</surname><given-names>Vijay</given-names></name>
        <name><surname>Warden</surname><given-names>Pete</given-names></name>
        <name><surname>Wicke</surname><given-names>Martin</given-names></name>
        <name><surname>Yu</surname><given-names>Yuan</given-names></name>
        <name><surname>Zheng</surname><given-names>Xiaoqiang</given-names></name>
      </person-group>
      <article-title>TensorFlow: A system for large-scale machine learning</article-title>
      <source>arXiv e-prints</source>
      <year iso-8601-date="2016-05">2016</year><month>05</month>
      <uri>https://arxiv.org/abs/1605.08695</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.1605.08695</pub-id>
      <fpage>arXiv:1605.08695</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pyautofit2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nightingale</surname><given-names>James.</given-names></name>
        <name><surname>Hayes</surname><given-names>Richard</given-names></name>
        <name><surname>Griffiths</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>PyAutoFit: A Classy Probabilistic Programming Language for Model Composition and Fitting</article-title>
      <source>The Journal of Open Source Software</source>
      <year iso-8601-date="2021-02">2021</year><month>02</month>
      <volume>6</volume>
      <issue>58</issue>
      <uri>https://arxiv.org/abs/2102.04472</uri>
      <pub-id pub-id-type="doi">10.21105/joss.02550</pub-id>
      <fpage>2550</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-MM2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kasa</surname><given-names>Siva Rajesh</given-names></name>
        <name><surname>Yijie</surname><given-names>Hu</given-names></name>
        <name><surname>Kasa</surname><given-names>Santhosh Kumar</given-names></name>
        <name><surname>Rajan</surname><given-names>Vaibhav</given-names></name>
      </person-group>
      <article-title>Mixture-Models: a one-stop Python Library for Model-based Clustering using various Mixture Models</article-title>
      <source>arXiv e-prints</source>
      <year iso-8601-date="2024-02">2024</year><month>02</month>
      <uri>https://arxiv.org/abs/2402.10229</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2402.10229</pub-id>
      <fpage>arXiv:2402.10229</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
