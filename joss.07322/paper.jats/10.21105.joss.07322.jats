<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7322</article-id>
<article-id pub-id-type="doi">10.21105/joss.07322</article-id>
<title-group>
<article-title>pycellga: A Python package for improved cellular genetic
algorithms</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9346-5795</contrib-id>
<name>
<surname>Karakaya</surname>
<given-names>Sevgi Akten</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9402-1982</contrib-id>
<name>
<surname>Satman</surname>
<given-names>Mehmet Hakan</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Informatics, Istanbul University, Istanbul,
Turkey</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Econometrics, Istanbul University, Istanbul,
Turkey</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-08-14">
<day>14</day>
<month>8</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>105</issue>
<fpage>7322</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>genetic algorithms</kwd>
<kwd>cellular automaton</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>pycellga</monospace> is a Python package that implements
  cellular genetic algorithms (CGAs) for optimizing complex problems.
  CGAs combine the principles of cellular automata and traditional
  genetic algorithms, utilizing a spatially structured population
  organized in a grid-like topology. This structure allows each
  individual to interact only with its neighboring individuals,
  promoting diversity and maintaining a balance between exploration and
  exploitation during the optimization process.</p>
  <p>While CGAs themselves are not a novel contribution of this work,
  <monospace>pycellga</monospace> significantly enhances their
  applicability by integrating advanced features and providing
  unparalleled versatility. The package supports binary, real-valued,
  and permutation-based optimization problems, making it adaptable to a
  wide variety of problem domains. Its use of machine-coded operators
  for real-valued optimization, adhering to IEEE 754 floating-point
  arithmetic standards, ensures high precision and computational
  efficiency. Moreover, <monospace>pycellga</monospace> is designed to
  be extensible, enabling users to easily customize selection,
  crossover, and mutation operators to suit specific problem
  requirements.</p>
  <p>The package is designed to be user-friendly, with a straightforward
  installation process and comprehensive documentation. Researchers and
  practitioners in fields such as operations research, artificial
  intelligence, and machine learning can leverage
  <monospace>pycellga</monospace> to tackle complex optimization
  challenges effectively. By integrating the principles of cellular
  automata with genetic algorithms, <monospace>pycellga</monospace>
  represents a significant advancement in the field of evolutionary
  computation, offering increased flexibility and adaptability compared
  to traditional methods.</p>
  <p>Additionally, <monospace>pycellga</monospace> includes
  machine-coded operators with byte implementations, developed by Satman
  (<xref alt="2013" rid="ref-satman2013machine" ref-type="bibr">2013</xref>).
  It features Alpha-male CGA, Machine-Coded Compact CGA, and Improved
  CGA with Machine-Coded Operators for real-valued optimization problems
  (<xref alt="Karakaya &amp; Satman, 2024" rid="ref-karakaya2024improved" ref-type="bibr">Karakaya
  &amp; Satman, 2024</xref>).</p>
</sec>
<sec id="introduction">
  <title>Introduction</title>
  <p>Optimization problems are a fundamental aspect of various
  scientific and engineering fields, involving the search for the best
  solution among a large set of possible options. Genetic algorithms
  (GAs) have been widely used to address these problems due to their
  robustness and adaptability. Inspired by the process of natural
  selection, GAs operate on a population of potential solutions,
  applying operators such as selection, crossover, and mutation to
  evolve the population toward better solutions over successive
  generations
  (<xref alt="Goldberg, 1989" rid="ref-goldberg1989genetic" ref-type="bibr">Goldberg,
  1989</xref>;
  <xref alt="Holland, 1975" rid="ref-holland1975adaptation" ref-type="bibr">Holland,
  1975</xref>).</p>
  <p>Despite their effectiveness, traditional GAs face challenges,
  particularly in maintaining diversity within the population and
  avoiding premature convergence to suboptimal solutions
  (<xref alt="Goldberg &amp; Deb, 1991" rid="ref-goldberg1991comparative" ref-type="bibr">Goldberg
  &amp; Deb, 1991</xref>). To mitigate these issues, researchers have
  developed CGAs, which introduce a spatial structure to the population
  (<xref alt="Manderick &amp; Spiessens, 1991" rid="ref-manderick1991genetic" ref-type="bibr">Manderick
  &amp; Spiessens, 1991</xref>;
  <xref alt="Whitley, 1993" rid="ref-whitley1993cellular" ref-type="bibr">Whitley,
  1993</xref>). In a CGA, individuals are placed on a grid, and
  interactions are restricted to neighboring individuals. This localized
  interaction promotes diversity and enables a more thorough exploration
  of the solution space.</p>
  <p><monospace>pycellga</monospace> is a Python package designed to
  efficiently implement CGAs. By integrating the principles of cellular
  automata with genetic algorithms, <monospace>pycellga</monospace>
  offers a robust framework for tackling complex optimization problems.
  The <monospace>pycellga</monospace> package is designed to handle a
  wide range of optimization problems, including binary, real-valued,
  and permutation-based challenges, making it a versatile tool for
  diverse applications in evolutionary computation. The package includes
  several built-in functions for initialization, selection, crossover,
  mutation, and evaluation, as well as customization options to cater to
  different needs. This flexibility allows researchers and practitioners
  to apply CGAs to a wide range of problems with ease
  (<xref alt="Karakaya &amp; Satman, 2024" rid="ref-karakaya2024improved" ref-type="bibr">Karakaya
  &amp; Satman, 2024</xref>).</p>
  <p>By providing a comprehensive toolkit for CGAs,
  <monospace>pycellga</monospace> aims to advance the field of
  evolutionary computation and equip researchers with the tools needed
  to solve increasingly complex optimization problems effectively. The
  integration of cellular automata with genetic algorithms in
  <monospace>pycellga</monospace> represents a significant advancement,
  offering greater flexibility and adaptability compared to traditional
  methods
  (<xref alt="Eiben &amp; Smith, 2015" rid="ref-eiben2003introduction" ref-type="bibr">Eiben
  &amp; Smith, 2015</xref>;
  <xref alt="Karakaya &amp; Satman, 2024" rid="ref-karakaya2024improved" ref-type="bibr">Karakaya
  &amp; Satman, 2024</xref>;
  <xref alt="Michalewicz, 1996" rid="ref-michalewicz1996genetic" ref-type="bibr">Michalewicz,
  1996</xref>).</p>
  <p>The <monospace>pycellga</monospace> package includes machine-coded
  operators with byte-level implementations, developed by Satman
  (<xref alt="2013" rid="ref-satman2013machine" ref-type="bibr">2013</xref>).
  In the context of genetic algorithms, “machine-coded” refers to a
  specialized encoding technique optimized for real-parameter
  optimization. This approach differs from standard coding practices by
  emphasizing efficient data processing through byte-level manipulation.
  Originally introduced by Satman
  (<xref alt="2013" rid="ref-satman2013machine" ref-type="bibr">2013</xref>),
  this technique is particularly advantageous for real-valued
  optimization tasks, as it allows direct manipulation of
  byte-representations to enhance computational performance. Encoding
  and decoding of numerical values conform to the IEEE 754 standard for
  floating-point arithmetic, further improving precision and
  effectiveness in optimizing continuous functions. By using
  machine-coded operators, <monospace>pycellga</monospace> leverages
  this efficiency to handle complex optimization challenges more
  effectively.</p>
  <p>In addition, the <monospace>pycellga</monospace> package features
  Alpha-male CGA, developed based on insights from Satman &amp; Akadal
  (<xref alt="2019" rid="ref-satman2019alpha_male_ga" ref-type="bibr">2019</xref>);
  Machine-Coded Compact CGA, inspired by Satman &amp; Akadal
  (<xref alt="2020" rid="ref-satman2020machine_coded_cga" ref-type="bibr">2020</xref>);
  and Improved CGA with Machine-Coded Operators
  (<xref alt="Karakaya &amp; Satman, 2024" rid="ref-karakaya2024improved" ref-type="bibr">Karakaya
  &amp; Satman, 2024</xref>). The improved cellular genetic algorithm
  utilizes machine-coded operators specifically tailored for real-valued
  optimization problems. This method is particularly distinctive for its
  use of byte-based operators, which are designed to process numerical
  data efficiently in terms of memory usage.</p>
</sec>
<sec id="state-of-the-field">
  <title>State of the field</title>
  <p>There are several existing software packages that implement genetic
  algorithms, such as DEAP and PyGAD. These libraries provide a wide
  range of tools for evolutionary computation and are highly flexible
  for various optimization tasks. However, most of these packages do not
  specifically focus on the integration of cellular automata with
  genetic algorithms, except for JCell, which is a Java implementation
  of CGAs
  (<xref alt="Alba &amp; Dorronsoro, 2008" rid="ref-alba2008cellular" ref-type="bibr">Alba
  &amp; Dorronsoro, 2008</xref>).</p>
  <p>The lack of CGA variants in widely used Python libraries may be
  attributed to the complexity and niche appeal of cellular genetic
  algorithms. CGAs, by design, require a spatially structured population
  and localized interactions, which add an extra layer of complexity
  compared to traditional GAs. Additionally, while traditional GAs are
  well-documented and widely adopted, CGAs have been primarily explored
  in academic research, with fewer applications in mainstream
  problem-solving scenarios. This may have led to limited adoption in
  general-purpose optimization libraries.</p>
  <p><monospace>pycellga</monospace> addresses this gap by offering a
  specialized toolkit for CGAs, leveraging the strengths of both
  cellular automata and genetic algorithms. By incorporating features
  such as Alpha-male CGA, Machine-Coded Compact CGA, and Improved CGA
  with Machine-Coded Operators, <monospace>pycellga</monospace> provides
  unparalleled support for tackling complex optimization problems. Its
  use of machine-coded operators, adhering to IEEE 754 floating-point
  arithmetic standards, ensures high precision and computational
  efficiency, making it a significant advancement in the field.</p>
  <p>The introduction of <monospace>pycellga</monospace> represents a
  deliberate effort to bring CGA variants into broader usage, making
  these powerful algorithms more accessible to researchers and
  practitioners. By providing a Python-based implementation,
  <monospace>pycellga</monospace> bridges the gap between theoretical
  advancements in CGA research and their practical applications, thus
  addressing the limitations in existing software ecosystems.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The need for advanced optimization frameworks like
  <monospace>pycellga</monospace> arises from the growing complexity of
  real-world problems, which often involve high-dimensional search
  spaces, mixed-variable types, and intricate constraints. Traditional
  GAs, while highly versatile and widely adopted, face several
  limitations in addressing these challenges. These include a tendency
  toward premature convergence, difficulty in maintaining population
  diversity, and an inability to balance global exploration with local
  exploitation effectively
  (<xref alt="Goldberg, 1989" rid="ref-goldberg1989genetic" ref-type="bibr">Goldberg,
  1989</xref>;
  <xref alt="Holland, 1975" rid="ref-holland1975adaptation" ref-type="bibr">Holland,
  1975</xref>).</p>
  <p>CGAs offer a compelling solution by introducing a spatially
  structured population. In CGAs, individuals are arranged in a
  grid-like topology and interact only with their neighbors. This
  localized interaction not only enhances population diversity but also
  mitigates the risk of premature convergence, a common issue in
  traditional GAs
  (<xref alt="Manderick &amp; Spiessens, 1991" rid="ref-manderick1991genetic" ref-type="bibr">Manderick
  &amp; Spiessens, 1991</xref>;
  <xref alt="Whitley, 1993" rid="ref-whitley1993cellular" ref-type="bibr">Whitley,
  1993</xref>). By promoting a gradual spread of genetic material
  through localized selection and crossover, CGAs achieve a more
  thorough exploration of the solution space, particularly in
  high-dimensional and multi-modal optimization problems
  (<xref alt="Alba &amp; Dorronsoro, 2008" rid="ref-alba2008cellular" ref-type="bibr">Alba
  &amp; Dorronsoro, 2008</xref>). These attributes make CGAs especially
  effective for tackling complex challenges in scheduling, resource
  allocation, and multi-objective optimization
  (<xref alt="Carlos A. Coello Coello &amp; Veldhuizen, 2007" rid="ref-coello2007multiobjective" ref-type="bibr">Carlos
  A. Coello Coello &amp; Veldhuizen, 2007</xref>).</p>
  <p>Despite the clear advantages of CGAs, their implementation in
  existing tools remains limited. Frameworks such as JCell, while
  functional, lack the flexibility, extensibility, and user-friendly
  features offered by modern programming environments like Python
  (<xref alt="Alba &amp; Dorronsoro, 2008" rid="ref-alba2008cellular" ref-type="bibr">Alba
  &amp; Dorronsoro, 2008</xref>). To address this gap,
  <monospace>pycellga</monospace> provides a Python-based framework that
  combines the strengths of CGAs with the convenience and power of
  Python’s ecosystem. The package includes efficient byte-level
  implementations of machine-coded operators, as introduced by Satman
  (<xref alt="2013" rid="ref-satman2013machine" ref-type="bibr">2013</xref>),
  which significantly enhance performance for real-valued optimization
  problems. Additionally, it incorporates advanced CGA variants, such as
  Alpha-male CGA
  (<xref alt="Satman &amp; Akadal, 2019" rid="ref-satman2019alpha_male_ga" ref-type="bibr">Satman
  &amp; Akadal, 2019</xref>), Machine-Coded Compact CGA
  (<xref alt="Satman &amp; Akadal, 2020" rid="ref-satman2020machine_coded_cga" ref-type="bibr">Satman
  &amp; Akadal, 2020</xref>), and an Improved CGA with Machine-Coded
  Operators
  (<xref alt="Karakaya &amp; Satman, 2024" rid="ref-karakaya2024improved" ref-type="bibr">Karakaya
  &amp; Satman, 2024</xref>).</p>
  <p>The unique contributions of <monospace>pycellga</monospace> extend
  beyond its robust implementation of CGAs. By supporting binary,
  real-valued, and permutation-based optimization problems, the package
  offers unparalleled versatility. Its use of machine-coded operators
  for real-valued optimization, adhering to IEEE 754 floating-point
  arithmetic standards, ensures high precision and computational
  efficiency. Moreover, <monospace>pycellga</monospace> is designed to
  be extensible, enabling users to easily customize selection,
  crossover, and mutation operators to suit specific problem
  domains.</p>
  <p>In a field where traditional GAs have seen extensive research to
  address their inherent limitations
  (<xref alt="Eiben &amp; Smith, 2015" rid="ref-eiben2003introduction" ref-type="bibr">Eiben
  &amp; Smith, 2015</xref>), CGAs provide a novel and effective approach
  to further these advancements. <monospace>pycellga</monospace> stands
  out as a modern, accessible, and feature-rich toolkit that equips
  researchers and practitioners to tackle increasingly complex
  optimization challenges with confidence.</p>
</sec>
<sec id="installation-and-basic-usage">
  <title>Installation and basic usage</title>
  <p><monospace>pycellga</monospace> can be downloaded and installed by
  using the following command:</p>
  <code language="python">pip install pycellga</code>
  <sec id="usage-examples">
    <title>Usage Examples</title>
    <p>In this section, we’ll explain the CGA method in the optimizer
    and provide an example of how to use it. The package includes
    various ready-to-use crossover and mutation operators, along with
    real-valued, binary, and permutation functions that you can run
    directly. Examples for other methods are available in the
    <monospace>example</monospace> folder, while an example for the CGA
    is provided below.</p>
    <sec id="cga">
      <title><bold>CGA</bold></title>
      <p><bold>CGA</bold> is a type of genetic algorithm where the
      population is structured as a grid (or other topologies), and each
      individual interacts only with its neighbors. This structure helps
      maintain diversity in the population and can prevent premature
      convergence. To specialize the CGA for real-valued optimization
      problems, ICGA (Improved CGA) with machine-coded representation
      can be used, applying byte operators. The encoding and decoding of
      numbers follow the IEEE 754 standard for floating-point
      arithmetic, yielding better results for continuous functions.</p>
    </sec>
  </sec>
  <sec id="example-problem">
    <title>Example Problem</title>
    <p>Suppose we have a problem that we want to minimize using the CGA.
    The problem is defined as a simple sum of squares function, where
    the goal is to find a chromosome (vector) that minimizes the
    function.</p>
    <p>The sum of squares function computes the sum of the squares of
    each element in the chromosome. This function reaches its global
    minimum when all elements of the chromosome are equal to 0. The
    corresponding function value at this point is 0.</p>
    <sec id="exampleproblem-class">
      <title>ExampleProblem Class</title>
      <p>Here’s how we can define this problem in Python using the
      <monospace>ExampleProblem</monospace> class:</p>
      <code language="python">from mpmath import power as pw
from typing import List

from pycellga.optimizer import cga
from pycellga.recombination.byte_one_point_crossover import ByteOnePointCrossover
from pycellga.mutation.byte_mutation_random import ByteMutationRandom
from pycellga.selection.tournament_selection import TournamentSelection
from pycellga.problems.abstract_problem import AbstractProblem
from pycellga.common import GeneType

class ExampleProblem(AbstractProblem):

    def __init__(self, n_var):

        super().__init__(
            gen_type=GeneType.REAL,
            n_var=n_var,
            xl=-100, 
            xu=100
        )

    def f(self, x: List[float]) -&gt; float:
        return round(sum(pw(xi, 2) for xi in x),3)</code>
      <p><bold>Usage:</bold></p>
      <code language="python">result = cga(
        n_cols=5,
        n_rows=5,
        n_gen=100,
        ch_size=5,
        p_crossover=0.9,
        p_mutation=0.2,
        problem=ExampleProblem(n_var=5),
        selection=TournamentSelection,
        recombination=ByteOnePointCrossover,
        mutation=ByteMutationRandom,
        seed_par=100
    )

    # Print the results
    print(&quot;Best solution chromosome:&quot;, result.chromosome)
    print(&quot;Best fitness value:&quot;, result.fitness_value)

# Expected Output:
# Best solution chromosome: [0.0, 0.0, 0.0, 0.0, 0.0]
# Best fitness value: 0.0
      </code>
    </sec>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-karakaya2024improved">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Karakaya</surname><given-names>Sevgi Akten</given-names></name>
        <name><surname>Satman</surname><given-names>Mehmet Hakan</given-names></name>
      </person-group>
      <article-title>An improved cellular genetic algorithm with machine-coded operators for real-valued optimisation problems</article-title>
      <source>Journal of Engineering Research and Applied Science</source>
      <year iso-8601-date="2024">2024</year>
      <volume>13</volume>
      <issue>1</issue>
      <fpage>2500</fpage>
      <lpage>2514</lpage>
    </element-citation>
  </ref>
  <ref id="ref-satman2013machine">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Satman</surname><given-names>Mehmet Hakan</given-names></name>
      </person-group>
      <article-title>Machine coded genetic algorithms for real parameter optimization problems</article-title>
      <source>Gazi University Journal of Science</source>
      <publisher-name>Gazi University</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <volume>26</volume>
      <issue>1</issue>
      <fpage>85</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
  <ref id="ref-holland1975adaptation">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Holland</surname><given-names>John H.</given-names></name>
      </person-group>
      <source>Adaptation in natural and artificial systems</source>
      <publisher-name>MIT Press</publisher-name>
      <publisher-loc>Ann Arbor, MI</publisher-loc>
      <year iso-8601-date="1975">1975</year>
      <isbn>9780262581110</isbn>
    </element-citation>
  </ref>
  <ref id="ref-goldberg1989genetic">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Goldberg</surname><given-names>David E.</given-names></name>
      </person-group>
      <source>Genetic algorithms in search, optimization, and machine learning</source>
      <publisher-name>Addison-Wesley</publisher-name>
      <publisher-loc>Reading, MA</publisher-loc>
      <year iso-8601-date="1989">1989</year>
      <isbn>9780201157673</isbn>
      <pub-id pub-id-type="doi">10.5860/choice.27-0936</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-goldberg1991comparative">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Goldberg</surname><given-names>David E.</given-names></name>
        <name><surname>Deb</surname><given-names>Kalyanmoy</given-names></name>
      </person-group>
      <article-title>A comparative analysis of selection schemes used in genetic algorithms</article-title>
      <source>Foundations of Genetic Algorithms</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="1991">1991</year>
      <volume>1</volume>
      <pub-id pub-id-type="doi">10.1016/b978-0-08-050684-5.50008-2</pub-id>
      <fpage>69</fpage>
      <lpage>93</lpage>
    </element-citation>
  </ref>
  <ref id="ref-manderick1991genetic">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Manderick</surname><given-names>Bernard</given-names></name>
        <name><surname>Spiessens</surname><given-names>Peter</given-names></name>
      </person-group>
      <article-title>The genetic algorithm and the structure of the fitness landscape</article-title>
      <source>Proceedings of the 4th international conference on genetic algorithms (ICGA)</source>
      <person-group person-group-type="editor">
        <name><surname>Belew</surname><given-names>Richard K.</given-names></name>
        <name><surname>Booker</surname><given-names>Lashon B.</given-names></name>
      </person-group>
      <publisher-name>Morgan Kaufmann</publisher-name>
      <publisher-loc>San Diego, CA, USA</publisher-loc>
      <year iso-8601-date="1991">1991</year>
      <fpage>143</fpage>
      <lpage>150</lpage>
    </element-citation>
  </ref>
  <ref id="ref-whitley1993cellular">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Whitley</surname><given-names>Darrell</given-names></name>
      </person-group>
      <article-title>Cellular genetic algorithms</article-title>
      <source>Proceedings of the 5th international conference on genetic algorithms (ICGA)</source>
      <person-group person-group-type="editor">
        <name><surname>Forrest</surname><given-names>Stephanie</given-names></name>
      </person-group>
      <publisher-name>Morgan Kaufmann</publisher-name>
      <publisher-loc>San Mateo, CA, USA</publisher-loc>
      <year iso-8601-date="1993">1993</year>
      <fpage>658</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-michalewicz1996genetic">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Michalewicz</surname><given-names>Zbigniew</given-names></name>
      </person-group>
      <source>Genetic algorithms + data structures = evolution programs</source>
      <publisher-name>Springer</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="1996">1996</year>
      <edition>3rd</edition>
      <isbn>9783540606765</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-662-03315-9</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-eiben2003introduction">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Eiben</surname><given-names>Agoston E.</given-names></name>
        <name><surname>Smith</surname><given-names>James E.</given-names></name>
      </person-group>
      <source>Introduction to evolutionary computing</source>
      <publisher-name>Springer</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <isbn>9783540401841</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-662-44874-8</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-alba2008cellular">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Alba</surname><given-names>Enrique</given-names></name>
        <name><surname>Dorronsoro</surname><given-names>Bernabé</given-names></name>
      </person-group>
      <source>Cellular genetic algorithms</source>
      <publisher-name>Springer</publisher-name>
      <publisher-loc>US</publisher-loc>
      <year iso-8601-date="2008">2008</year>
      <isbn>978-0-387-77609-5</isbn>
      <pub-id pub-id-type="doi">10.1007/978-0-387-77610-1_1</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-satman2019alpha_male_ga">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Satman</surname><given-names>Mehmet Hakan</given-names></name>
        <name><surname>Akadal</surname><given-names>Emre</given-names></name>
      </person-group>
      <article-title>Performance comparison of the specialized alpha male genetic algorithm with some evolutionary algorithms</article-title>
      <source>Trakya University Journal of Social Science</source>
      <year iso-8601-date="2019">2019</year>
      <volume>21</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.26468/trakyasobed.452095</pub-id>
      <fpage>55</fpage>
      <lpage>82</lpage>
    </element-citation>
  </ref>
  <ref id="ref-satman2020machine_coded_cga">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Satman</surname><given-names>Mehmet Hakan</given-names></name>
        <name><surname>Akadal</surname><given-names>Emre</given-names></name>
      </person-group>
      <article-title>Machine coded compact genetic algorithms for real parameter optimization problems</article-title>
      <source>Alphanumeric Journal</source>
      <year iso-8601-date="2020">2020</year>
      <volume>8</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.17093/alphanumeric.576919</pub-id>
      <fpage>43</fpage>
      <lpage>58</lpage>
    </element-citation>
  </ref>
  <ref id="ref-coello2007multiobjective">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Carlos A. Coello Coello</surname><suffix>Gary B. Lamont</suffix></name>
        <name><surname>Veldhuizen</surname><given-names>David A. Van</given-names></name>
      </person-group>
      <source>Evolutionary algorithms for solving multi-objective problems</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <edition>2nd</edition>
      <isbn>978-0387332542</isbn>
      <pub-id pub-id-type="doi">10.1007/978-0-387-36797-2</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
