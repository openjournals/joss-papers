<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5995</article-id>
<article-id pub-id-type="doi">10.21105/joss.05995</article-id>
<title-group>
<article-title>Jobflow: Computational Workflows Made
Simple</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0141-7006</contrib-id>
<name>
<surname>Rosen</surname>
<given-names>Andrew S.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0008-4099-6144</contrib-id>
<name>
<surname>Gallant</surname>
<given-names>Max</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8907-0336</contrib-id>
<name>
<surname>George</surname>
<given-names>Janine</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5233-3462</contrib-id>
<name>
<surname>Riebesell</surname>
<given-names>Janosh</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7346-4568</contrib-id>
<name>
<surname>Sahasrabuddhe</surname>
<given-names>Hrushikesh</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2743-7531</contrib-id>
<name>
<surname>Shen</surname>
<given-names>Jimmy-Xuan</given-names>
</name>
<xref ref-type="aff" rid="aff-7"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0013-575X</contrib-id>
<name>
<surname>Wen</surname>
<given-names>Mingjian</given-names>
</name>
<xref ref-type="aff" rid="aff-8"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1182-9098</contrib-id>
<name>
<surname>Evans</surname>
<given-names>Matthew L.</given-names>
</name>
<xref ref-type="aff" rid="aff-9"/>
<xref ref-type="aff" rid="aff-10"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Petretto</surname>
<given-names>Guido</given-names>
</name>
<xref ref-type="aff" rid="aff-9"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8943-9762</contrib-id>
<name>
<surname>Waroquiers</surname>
<given-names>David</given-names>
</name>
<xref ref-type="aff" rid="aff-9"/>
<xref ref-type="aff" rid="aff-10"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1422-1205</contrib-id>
<name>
<surname>Rignanese</surname>
<given-names>Gian-Marco</given-names>
</name>
<xref ref-type="aff" rid="aff-9"/>
<xref ref-type="aff" rid="aff-10"/>
<xref ref-type="aff" rid="aff-11"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7212-6310</contrib-id>
<name>
<surname>Persson</surname>
<given-names>Kristin A.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-12"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5893-9967</contrib-id>
<name>
<surname>Jain</surname>
<given-names>Anubhav</given-names>
</name>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4486-3321</contrib-id>
<name>
<surname>Ganose</surname>
<given-names>Alex M.</given-names>
</name>
<xref ref-type="aff" rid="aff-13"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Materials Science and Engineering, University
of California, Berkeley, Berkeley, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Materials Science Division, Lawrence Berkeley National
Laboratory, Berkeley, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Federal Institute for Materials Research and Testing,
Department Materials Chemistry, Berlin, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Friedrich Schiller University Jena, Institute of Condensed
Matter Theory and Solid-State Optics, Jena, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Department of Physics, University of Cambridge, Cambridge,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Energy Storage and Distributed Resources Division, Lawrence
Berkeley National Laboratory, Berkeley, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Materials Science Division, Lawrence Livermore National
Laboratory, Livermore, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-8">
<institution-wrap>
<institution>William A. Brookshire Department of Chemical and
Biomolecular Engineering, University of Houston, Houston, TX,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-9">
<institution-wrap>
<institution>Matgenix SRL, rue Armand Bury 185, 6534 Gozée,
Belgium</institution>
</institution-wrap>
</aff>
<aff id="aff-10">
<institution-wrap>
<institution>Institut de la Matière Condensée et des Nanosciences,
Université catholique de Louvain, Chemin des Étoiles 8, Louvain-la-Neuve
1348, Belgium</institution>
</institution-wrap>
</aff>
<aff id="aff-11">
<institution-wrap>
<institution>School of Materials Science and Engineering, Northwestern
Polytechnical University, No. 127 Youyi West Road, Xi’an 710072 Shaanxi,
PR China</institution>
</institution-wrap>
</aff>
<aff id="aff-12">
<institution-wrap>
<institution>Molecular Foundry, Lawrence Berkeley National Laboratory,
Berkeley, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-13">
<institution-wrap>
<institution>Department of Chemistry, Imperial College London, London,
UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-10-09">
<day>9</day>
<month>10</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>93</issue>
<fpage>5995</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Workflows</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>We present Jobflow, a domain-agnostic Python package for writing
  computational workflows tailored for high-throughput computing
  applications. With its simple decorator-based approach, functions and
  class methods can be transformed into compute jobs that can be
  stitched together into complex workflows. Jobflow fully supports
  dynamic workflows where the full acyclic graph of compute jobs is not
  known until runtime, such as compute jobs that launch other jobs based
  on the results of previous steps in the workflow. The results of all
  Jobflow compute jobs can be easily stored in a variety of filesystem-
  and cloud-based databases without the data storage process being part
  of the underlying workflow logic itself. Jobflow has been
  intentionally designed to be fully independent of the choice of
  workflow manager used to dispatch the calculations on remote computing
  resources. At the time of writing, Jobflow workflows can be executed
  either locally or across distributed compute environments via an
  adapter to the FireWorks package, and Jobflow fully supports the
  integration of additional workflow execution adapters in the
  future.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>The current era of big data and high-performance computing has
  emphasized the significant need for robust, flexible, and scalable
  workflow management solutions that can be used to efficiently
  orchestrate scientific calculations
  (<xref alt="Ben-Nun et al., 2020" rid="ref-ben2020workflows" ref-type="bibr">Ben-Nun
  et al., 2020</xref>;
  <xref alt="Da Silva et al., 2023" rid="ref-da2023workflows" ref-type="bibr">Da
  Silva et al., 2023</xref>). To date, a wide variety of workflow
  systems have been developed, and it has become clear that there is no
  one-size-fits-all solution due to the diverse needs of the
  computational community
  (<xref alt="Al-Saadi et al., 2021" rid="ref-al2021exaworks" ref-type="bibr">Al-Saadi
  et al., 2021</xref>;
  <xref alt="Existing Workflow Systems, 2023" rid="ref-wflowsystems" ref-type="bibr"><italic>Existing
  Workflow Systems</italic>, 2023</xref>). While several popular
  software packages in this space have emerged over the last decade,
  many of them require the user to tailor their domain-specific code
  with the underlying workflow management framework closely in mind.
  This can be a barrier to entry for many users and puts significant
  constraints on the portability of the underlying workflows.</p>
  <p>Here, we introduce Jobflow: a free, open-source Python library that
  makes it simple to transform collections of functions into complex
  workflows that can be executed either locally or across distributed
  computing environments. Jobflow has been intentionally designed to act
  as middleware between the user’s domain-specific routines that they
  wish to execute and the workflow “manager” that ultimately
  orchestrates the calculations across different computing environments.
  Jobflow uses a simple decorator-based syntax that is similar to that
  of other recently developed workflow tools
  (<xref alt="Babuji et al., 2019" rid="ref-babuji2019parsl" ref-type="bibr">Babuji
  et al., 2019</xref>;
  <xref alt="Cunningham et al., 2023" rid="ref-covalent" ref-type="bibr">Cunningham
  et al., 2023</xref>;
  <xref alt="Prefect, 2023" rid="ref-prefect" ref-type="bibr"><italic>Prefect</italic>,
  2023</xref>;
  <xref alt="Redun, 2023" rid="ref-redun" ref-type="bibr"><italic>Redun</italic>,
  2023</xref>). This approach makes it possible to turn virtually any
  function into a Jobflow <monospace>Job</monospace> instance (i.e.,
  a discrete unit of work) with minimal changes to the underlying code
  itself.</p>
  <p>Jobflow has grown out of a need to carry out high-throughput
  computational materials science workflows at scale as part of the
  Materials Project
  (<xref alt="Jain et al., 2013" rid="ref-materialsproject" ref-type="bibr">Jain
  et al., 2013</xref>). As the kinds of calculations — from <italic>ab
  initio</italic> to semi-empirical to those based on machine learning —
  continue to evolve and the resulting data streams continue to
  diversify, it was necessary to rethink how we managed an increasingly
  diverse range of computational workflows. Going forward, Jobflow will
  become the computational backbone of the Materials Project, which we
  hope will inspire additional confidence in the readiness of Jobflow
  for production-quality scientific computing applications.</p>
</sec>
<sec id="features-and-implementation">
  <title>Features and Implementation</title>
  <sec id="overview">
    <title>Overview</title>
    <p>As a simple demonstration, the example below shows how one can
    construct a simple <monospace>Flow</monospace> (i.e., a graph of
    interdependent <monospace>Job</monospace>s) composed of two
    sequential <monospace>Job</monospace>s: the first
    <monospace>Job</monospace> adds two numbers together
    (<monospace>1 + 2</monospace>), and the second
    <monospace>Job</monospace> multiplies the result by another number
    (<monospace>3 * 3</monospace>). For simplicity, this
    <monospace>Flow</monospace> is executed locally, but it can be
    easily dispatched to a remote computing environment via the
    selection of a different workflow manager with no modifications to
    the underlying function definitions. While trivial, this example
    demonstrates the simplicity of the Jobflow syntax and how it can be
    used to construct complex workflows from user-defined functions.
    Note that each <monospace>Job</monospace> object is not run when
    instantiated; rather, an <monospace>OutputReference</monospace>
    associated with the <monospace>Job</monospace> (presented to the
    user via a Universally Unique Identifier, or UUID) is returned,
    which is resolved when the workflow is ultimately executed.</p>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figure1.png" />
    <code language="python">from jobflow import Flow, job, run_locally

@job
def add(a, b):
    return a + b

@job
def multiply(a, b):
    return a * b

job1 = add(1, 2)  # 1 + 2 = 3
job2 = multiply(job1.output, 3)  # 3 * 3 = 9
flow = Flow([job1, job2])

responses = run_locally(flow)</code>
  </sec>
  <sec id="dynamic-workflows">
    <title>Dynamic Workflows</title>
    <p>Beyond the typical acyclic graph of jobs, Jobflow fully supports
    dynamic workflows where the precise number of jobs is unknown until
    runtime. This is a particularly common requirement in chemistry and
    materials science workflows and is made possible through the use of
    a <monospace>Response</monospace> object that controls the flow
    execution. For instance, the example below is a
    <monospace>Flow</monospace> that will add two numbers
    (<monospace>1 + 2</monospace>), construct a list of random length
    containing the prior result
    (e.g., <monospace>[3, 3, 3]</monospace>), and then add an integer to
    each element of the list
    (<monospace>[3 + 10, 3 + 10, 3 + 10]</monospace>). The
    <monospace>Response(replace=Flow(jobs))</monospace> syntax tells
    Jobflow to replace the current <monospace>Job</monospace> with a
    (sub)workflow after the <monospace>Job</monospace> completes.</p>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figure2.png" />
    <code language="python">from random import randint
from jobflow import Flow, Response, job, run_locally

@job
def add(a, b):
    return a + b

@job
def make_list(val):
    return [val] * randint(2, 6)

@job
def add_distributed(vals, c):
    jobs = [add(val, c) for val in vals]
    return Response(replace=Flow(jobs))

job1 = add(1, 2)  # 1 + 2 = 3
job2 = make_list(job1.output)  # e.g., [3, 3, 3]
job3 = add_distributed(job2.output, 10)  # [3 + 10, 3 + 10, 3 + 10]
flow = Flow([job1, job2, job3])

responses = run_locally(flow)</code>
  </sec>
  <sec id="data-management">
    <title>Data Management</title>
    <p>Jobflow has first-class support for a variety of data stores
    through an interface with the <monospace>maggma</monospace> Python
    package
    (<xref alt="Maggma, 2023" rid="ref-maggma" ref-type="bibr"><italic>Maggma</italic>,
    2023</xref>). This makes it possible to easily store the results of
    workflows in a manner that is independent of the choice of storage
    medium and that is entirely decoupled from the workflow logic
    itself. Additionally, it is possible within Jobflow to specify
    multiple types of data stores for specific Python objects (e.g.,
    primitive types vs. large binary blobs) created by a given workflow,
    which is often useful for storing a combination of metadata
    (e.g., in a NoSQL database like MongoDB or file-system based store
    like MontyDB
    (<xref alt="MontyDB, 2023" rid="ref-montydb" ref-type="bibr"><italic>MontyDB</italic>,
    2023</xref>)) and raw data (e.g., in a cloud object store like
    Amazon S3 or Microsoft Azure).</p>
  </sec>
  <sec id="promoting-code-reuse">
    <title>Promoting Code Reuse</title>
    <p>Unlike most workflow solutions that rely on the use of functional
    programming, Jobflow fully supports and encourages the use of
    compute jobs that involve class-based inheritance to reduce
    duplication of code. While subtle, this oft-overlooked feature is
    particularly useful for scientific workflows where very similar
    calculations need to be carried out but with slightly different
    parameters or implementation details.</p>
    <p>In particular, Jobflow has an abstract class called a
    <monospace>Maker</monospace> that makes it convenient to define a
    class that can return a <monospace>Job</monospace> to be executed.
    This makes it possible to take advantage of the benefits of
    object-oriented programming while still being able to use the
    straightforward Jobflow decorator syntax. The support for classes
    also avoids the need for each workflow to accept a large number of
    keyword arguments in order to give the user freedom to modify the
    behavior of any constituent <monospace>Job</monospace> in the
    <monospace>Flow</monospace>. Instead, the class variables of the
    <monospace>Maker</monospace> can be updated directly, and these
    changes will be reflected in the <monospace>Job</monospace> at
    runtime, as demonstrated in the example below. Inheriting from the
    <monospace>Maker</monospace> class also enables updating the
    parameters of specific <monospace>Job</monospace>s in a
    <monospace>Flow</monospace> through a convenient
    <monospace>Flow.update_maker_kwargs(...)</monospace> function, which
    allows for easy customization of workflows even after the
    <monospace>Job</monospace>s have been defined.</p>
    <code language="python">from dataclasses import dataclass
from jobflow import job, Flow, Maker
from jobflow.managers.local import run_locally

@dataclass
class ExponentiateMaker(Maker):
    name: str = &quot;Exponentiate&quot;
    exponent: int = 2

    @job
    def make(self, a):
        return a**self.exponent

job1 = ExponentiateMaker().make(a=2)  # 2**2 = 4
job2 = ExponentiateMaker(exponent=3).make(job1.output)  # 4**3 = 64
flow = Flow([job1, job2])

responses = run_locally(flow)</code>
  </sec>
  <sec id="workflow-execution">
    <title>Workflow Execution</title>
    <p>One of the major benefits of Jobflow is that it decouples the
    details related to workflow execution from the workflow definitions
    themselves. The simplest way to execute a workflow is to run it
    directly on the machine where the workflow is defined using the
    <monospace>run_locally(...)</monospace> function, as shown in the
    examples above. This makes it possible to quickly test even complex
    workflows without the need to rely on a database or configuring
    remote resources.</p>
    <p>When deploying production calculations, workflows often need to
    be dispatched to large supercomputers through a remote execution
    engine. Jobflow has an interface with the FireWorks package
    (<xref alt="Jain et al., 2015" rid="ref-fireworks" ref-type="bibr">Jain
    et al., 2015</xref>) via a one-line command to convert a
    <monospace>Flow</monospace> and its underlying
    <monospace>Job</monospace> objects into the analogous FireWorks
    <monospace>Workflow</monospace> and <monospace>Firework</monospace>
    objects that enable execution on high-performance computing
    machines. The logic behind the <monospace>Job</monospace> and
    <monospace>Flow</monospace> objects are not tied to FireWorks in any
    direct way, such that the two packages are fully decoupled.</p>
    <p>Additionally, a remote mode of execution built solely around
    Jobflow is currently under active development
    (<xref alt="Jobflow Remote, 2023" rid="ref-jobflowremote" ref-type="bibr"><italic>Jobflow
    Remote</italic>, 2023</xref>). With this approach, workflows can be
    executed across multiple “workers” (e.g., a simple computer, a
    supercomputer, or a cloud-based service) and managed through a
    modern command-line interface without relying on an external
    workflow execution engine. The forthcoming Jobflow remote mode of
    execution has been designed such that no inbound connection from the
    workers to the database of jobs and results is needed, thus ensuring
    data and network security for professional usage.</p>
    <p>More generally, it is possible for users to develop custom
    “adapter” interfaces to their personal workflow execution engine of
    choice. As a result, Jobflow fills a niche in the broader workflow
    community and can help make the same workflow definition
    interoperable across multiple workflow execution engines.</p>
  </sec>
  <sec id="testing-and-documentation">
    <title>Testing and Documentation</title>
    <p>Jobflow has been designed with robustness in mind. The Jobflow
    codebase has 100% test coverage at the time of writing and is fully
    documented. The detailed testing suite, along with continuous
    integration pipelines on GitHub, makes it easy for users to write
    their own workflows with confidence that they will continue to work
    as expected for the foreseeable future. Furthermore, the ability to
    run Jobflow <monospace>Flow</monospace> objects locally makes it
    simple to write unit tests when designing a new Python package built
    around Jobflow without the need for complex monkey-patching or
    spinning up a test server.</p>
  </sec>
</sec>
<sec id="usage-to-date">
  <title>Usage To-Date</title>
  <p>While domain-agnostic, Jobflow has been used in several materials
  science Python packages to date, including but not limited to:</p>
  <list list-type="bullet">
    <list-item>
      <p>Atomate2
      (<xref alt="Atomate2, 2023" rid="ref-atomate2" ref-type="bibr"><italic>Atomate2</italic>,
      2023</xref>), Quacc
      (<xref alt="Rosen, 2023" rid="ref-quacc" ref-type="bibr">Rosen,
      2023</xref>): Libraries of computational chemistry and materials
      science workflows.</p>
    </list-item>
    <list-item>
      <p>NanoParticleTools
      (<xref alt="NanoParticleTools, 2023" rid="ref-nptools" ref-type="bibr"><italic>NanoParticleTools</italic>,
      2023</xref>): Workflows for Monte Carlo simulations of
      nanoparticles.</p>
    </list-item>
    <list-item>
      <p>Reaction Network
      (<xref alt="McDermott et al., 2021" rid="ref-mcdermott2021graph" ref-type="bibr">McDermott
      et al., 2021</xref>;
      <xref alt="Reaction Network, 2023" rid="ref-rxnnetwork" ref-type="bibr"><italic>Reaction
      Network</italic>, 2023</xref>): Workflows for constructing and
      analyzing inorganic chemical reaction networks.</p>
    </list-item>
    <list-item>
      <p>WFacer
      (<xref alt="WFacer, 2023" rid="ref-wfacer" ref-type="bibr"><italic>WFacer</italic>,
      2023</xref>): Workflows for modeling the statistical
      thermodynamics of solids via automated cluster expansion.</p>
    </list-item>
  </list>
</sec>
<sec id="additional-details">
  <title>Additional Details</title>
  <p>Naturally, the summary presented in this article constitutes only a
  small subset of the features that Jobflow has to offer. For additional
  details along with helpful tutorials ranging from basic applications
  to examples specifically targeting the computational materials science
  community, we refer the reader to the
  <ext-link ext-link-type="uri" xlink:href="https://materialsproject.github.io/jobflow/">Jobflow
  documentation</ext-link>. Suggestions, contributions, and bug reports
  are always welcome.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work was primarily funded and intellectually led by the
  Materials Project, which is funded by the U.S. Department of Energy,
  Office of Science, Office of Basic Energy Sciences, Materials Sciences
  and Engineering Division, under Contract no. DE-AC02-05-CH11231:
  Materials Project program KC23MP. A.S.R. acknowledges support via a
  Miller Research Fellowship from the Miller Institute for Basic
  Research in Science, University of California, Berkeley. J.G would
  like to acknowledge the Gauss Centre for Supercomputing e.V.
  (<ext-link ext-link-type="uri" xlink:href="https://www.gauss-centre.eu">https://www.gauss-centre.eu</ext-link>)
  for funding workflow-related developments by providing generous
  computing time on the GCS Supercomputer SuperMUC-NG at Leibniz
  Supercomputing Centre
  (<ext-link ext-link-type="uri" xlink:href="http://www.lrz.de/">www.lrz.de</ext-link>)
  (Project pn73da). J.R. acknowledges support from the German Academic
  Scholarship Foundation (Studienstiftung). M.L.E. thanks the BEWARE
  scheme of the Wallonia-Brussels Federation for funding under the
  European Commission’s Marie Curie-Skłodowska Action (COFUND 847587).
  G.P. and D.W. acknowledge Umicore for the financial support in
  developing the remote execution mode of jobflow. D.W. and G.M.R.
  acknowledge funding from the European Union’s Horizon 2020 research
  and innovation program under the grant agreement No 951786 (NOMAD
  CoE). A.M.G. is supported by EPSRC Fellowship EP/T033231/1.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-atomate2">
    <element-citation>
      <article-title>Atomate2</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/materialsproject/atomate2</uri>
    </element-citation>
  </ref>
  <ref id="ref-quacc">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Rosen</surname><given-names>Andrew S</given-names></name>
      </person-group>
      <article-title>Quacc – the quantum accelerator</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://doi.org/10.5281/zenodo.7720998</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.7720998</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-materialsproject">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jain</surname><given-names>Anubhav</given-names></name>
        <name><surname>Ong</surname><given-names>Shyue Ping</given-names></name>
        <name><surname>Hautier</surname><given-names>Geoffroy</given-names></name>
        <name><surname>Chen</surname><given-names>Wei</given-names></name>
        <name><surname>Richards</surname><given-names>William Davidson</given-names></name>
        <name><surname>Dacek</surname><given-names>Stephen</given-names></name>
        <name><surname>Cholia</surname><given-names>Shreyas</given-names></name>
        <name><surname>Gunter</surname><given-names>Dan</given-names></name>
        <name><surname>Skinner</surname><given-names>David</given-names></name>
        <name><surname>Ceder</surname><given-names>Gerbrand</given-names></name>
        <name><surname>Persson</surname><given-names>Kristin A</given-names></name>
      </person-group>
      <article-title>Commentary: The materials project: A materials genome approach to accelerating materials innovation</article-title>
      <source>APL materials</source>
      <publisher-name>AIP Publishing</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <volume>1</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1063/1.4812323</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-rxnnetwork">
    <element-citation publication-type="software">
      <article-title>Reaction network</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/materialsproject/reaction-network</uri>
    </element-citation>
  </ref>
  <ref id="ref-mcdermott2021graph">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>McDermott</surname><given-names>Matthew J</given-names></name>
        <name><surname>Dwaraknath</surname><given-names>Shyam S</given-names></name>
        <name><surname>Persson</surname><given-names>Kristin A</given-names></name>
      </person-group>
      <article-title>A graph-based network for predicting chemical reaction pathways in solid-state materials synthesis</article-title>
      <source>Nature communications</source>
      <publisher-name>Nature Publishing Group UK London</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>12</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1038/s41467-021-23339-x</pub-id>
      <fpage>3097</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-wfacer">
    <element-citation>
      <article-title>WFacer</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/CederGroupHub/WFacer</uri>
    </element-citation>
  </ref>
  <ref id="ref-nptools">
    <element-citation>
      <article-title>NanoParticleTools</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/BlauGroup/NanoParticleTools</uri>
    </element-citation>
  </ref>
  <ref id="ref-fireworks">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jain</surname><given-names>Anubhav</given-names></name>
        <name><surname>Ong</surname><given-names>Shyue Ping</given-names></name>
        <name><surname>Chen</surname><given-names>Wei</given-names></name>
        <name><surname>Medasani</surname><given-names>Bharat</given-names></name>
        <name><surname>Qu</surname><given-names>Xiaohui</given-names></name>
        <name><surname>Kocher</surname><given-names>Michael</given-names></name>
        <name><surname>Brafman</surname><given-names>Miriam</given-names></name>
        <name><surname>Petretto</surname><given-names>Guido</given-names></name>
        <name><surname>Rignanese</surname><given-names>Gian-Marco</given-names></name>
        <name><surname>Hautier</surname><given-names>Geoffroy</given-names></name>
        <name><surname>Gunter</surname><given-names>Daniel</given-names></name>
        <name><surname>Persson</surname><given-names>Kristin A</given-names></name>
      </person-group>
      <article-title>FireWorks: A dynamic workflow system designed for high-throughput applications</article-title>
      <source>Concurrency and Computation: Practice and Experience</source>
      <publisher-name>Wiley Online Library</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>27</volume>
      <issue>17</issue>
      <pub-id pub-id-type="doi">10.1002/cpe.3505</pub-id>
      <fpage>5037</fpage>
      <lpage>5059</lpage>
    </element-citation>
  </ref>
  <ref id="ref-da2023workflows">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Da Silva</surname><given-names>Rafael Ferreira</given-names></name>
        <name><surname>Badia</surname><given-names>Rosa M.</given-names></name>
        <name><surname>Bala</surname><given-names>Venkat</given-names></name>
        <name><surname>Bard</surname><given-names>Debbie</given-names></name>
        <name><surname>Bremer</surname><given-names>Peer-Timo</given-names></name>
        <name><surname>Buckley</surname><given-names>Ian</given-names></name>
        <name><surname>Caino-Lores</surname><given-names>Silvina</given-names></name>
        <name><surname>Chard</surname><given-names>Kyle</given-names></name>
        <name><surname>Goble</surname><given-names>Carole</given-names></name>
        <name><surname>Jha</surname><given-names>Shantenu</given-names></name>
        <name><surname>Katz</surname><given-names>Daniel S.</given-names></name>
        <name><surname>Laney</surname><given-names>Daniel</given-names></name>
        <name><surname>Parashar</surname><given-names>Manish</given-names></name>
        <name><surname>Suter</surname><given-names>Frederic</given-names></name>
        <name><surname>Tyler</surname><given-names>Nick</given-names></name>
        <name><surname>Uram</surname><given-names>Thomas</given-names></name>
        <name><surname>Altintas</surname><given-names>Ilkay</given-names></name>
        <name><surname>Andersson</surname><given-names>Stefan</given-names></name>
        <name><surname>Arndt</surname><given-names>William</given-names></name>
        <name><surname>Aznar</surname><given-names>Juan</given-names></name>
        <name><surname>Bader</surname><given-names>Jonathan</given-names></name>
        <name><surname>Balis</surname><given-names>Bartosz</given-names></name>
        <name><surname>Blanton</surname><given-names>Chris</given-names></name>
        <name><surname>Braghetto</surname><given-names>Kelly Rosa</given-names></name>
        <name><surname>Brodutch</surname><given-names>Aharon</given-names></name>
        <name><surname>Brunk</surname><given-names>Paul</given-names></name>
        <name><surname>Casanova</surname><given-names>Henri</given-names></name>
        <name><surname>Lierta</surname><given-names>Alba Cervera</given-names></name>
        <name><surname>Chigu</surname><given-names>Justin</given-names></name>
        <name><surname>Coleman</surname><given-names>Taina</given-names></name>
        <name><surname>Collier</surname><given-names>Nick</given-names></name>
        <name><surname>Colonnelli</surname><given-names>Iacopo</given-names></name>
        <name><surname>Coppens</surname><given-names>Frederik</given-names></name>
        <name><surname>Crusoe</surname><given-names>Michael</given-names></name>
        <name><surname>Cunningham</surname><given-names>Will</given-names></name>
        <name><surname>De Paula Kinoshita</surname><given-names>Bruno</given-names></name>
        <name><surname>Di Tommaso</surname><given-names>Paolo</given-names></name>
        <name><surname>Doutriaux</surname><given-names>Charles</given-names></name>
        <name><surname>Downton</surname><given-names>Matthew</given-names></name>
        <name><surname>Elwasif</surname><given-names>Wael</given-names></name>
        <name><surname>Enders</surname><given-names>Bjoern</given-names></name>
        <name><surname>Erdmann</surname><given-names>Chris</given-names></name>
        <name><surname>Fahringer</surname><given-names>Thomas</given-names></name>
        <name><surname>Figueiredo</surname><given-names>Ludmilla</given-names></name>
        <name><surname>Filgueira</surname><given-names>Rosa</given-names></name>
        <name><surname>Foltin</surname><given-names>Martin</given-names></name>
        <name><surname>Fouilloux</surname><given-names>Anne</given-names></name>
        <name><surname>Gadelha</surname><given-names>Luiz</given-names></name>
        <name><surname>Gallo</surname><given-names>Andy</given-names></name>
        <name><surname>Saez</surname><given-names>Artur Garcia</given-names></name>
        <name><surname>Garijo</surname><given-names>Daniel</given-names></name>
        <name><surname>Gerlach</surname><given-names>Roman</given-names></name>
        <name><surname>Grant</surname><given-names>Ryan</given-names></name>
        <name><surname>Grayson</surname><given-names>Samuel</given-names></name>
        <name><surname>Grubel</surname><given-names>Patricia</given-names></name>
        <name><surname>Gustafsson</surname><given-names>Johan</given-names></name>
        <name><surname>Hayot-Sasson</surname><given-names>Valerie</given-names></name>
        <name><surname>Hernandez</surname><given-names>Oscar</given-names></name>
        <name><surname>Hilbrich</surname><given-names>Marcus</given-names></name>
        <name><surname>Justine</surname><given-names>AnnMary</given-names></name>
        <name><surname>Laflotte</surname><given-names>Ian</given-names></name>
        <name><surname>Lehmann</surname><given-names>Fabian</given-names></name>
        <name><surname>Luckow</surname><given-names>Andre</given-names></name>
        <name><surname>Luettgau</surname><given-names>Jakob</given-names></name>
        <name><surname>Maheshwari</surname><given-names>Ketan</given-names></name>
        <name><surname>Matsuda</surname><given-names>Motohiko</given-names></name>
        <name><surname>Medic</surname><given-names>Doriana</given-names></name>
        <name><surname>Mendygral</surname><given-names>Pete</given-names></name>
        <name><surname>Michalewicz</surname><given-names>Marek</given-names></name>
        <name><surname>Nonaka</surname><given-names>Jorji</given-names></name>
        <name><surname>Pawlik</surname><given-names>Maciej</given-names></name>
        <name><surname>Pottier</surname><given-names>Loic</given-names></name>
        <name><surname>Pouchard</surname><given-names>Line</given-names></name>
        <name><surname>Putz</surname><given-names>Mathias</given-names></name>
        <name><surname>Radha</surname><given-names>Santosh Kumar</given-names></name>
        <name><surname>Ramakrishnan</surname><given-names>Lavanya</given-names></name>
        <name><surname>Ristov</surname><given-names>Sashko</given-names></name>
        <name><surname>Romano</surname><given-names>Paul</given-names></name>
        <name><surname>Rosendo</surname><given-names>Daniel</given-names></name>
        <name><surname>Ruefenacht</surname><given-names>Martin</given-names></name>
        <name><surname>Rycerz</surname><given-names>Katarzyna</given-names></name>
        <name><surname>Saurabh</surname><given-names>Nishant</given-names></name>
        <name><surname>Savchenko</surname><given-names>Volodymyr</given-names></name>
        <name><surname>Schulz</surname><given-names>Martin</given-names></name>
        <name><surname>Simpson</surname><given-names>Christine</given-names></name>
        <name><surname>Sirvent</surname><given-names>Raul</given-names></name>
        <name><surname>Skluzacek</surname><given-names>Tyler</given-names></name>
        <name><surname>Soiland-Reyes</surname><given-names>Stian</given-names></name>
        <name><surname>Souza</surname><given-names>Renan</given-names></name>
        <name><surname>Sukumar</surname><given-names>Sreenivas Rangan</given-names></name>
        <name><surname>Sun</surname><given-names>Ziheng</given-names></name>
        <name><surname>Sussman</surname><given-names>Alan</given-names></name>
        <name><surname>Thain</surname><given-names>Douglas</given-names></name>
        <name><surname>Titov</surname><given-names>Mikhail</given-names></name>
        <name><surname>Tovar</surname><given-names>Benjamin</given-names></name>
        <name><surname>Tripathy</surname><given-names>Aalap</given-names></name>
        <name><surname>Turilli</surname><given-names>Matteo</given-names></name>
        <name><surname>Tuznik</surname><given-names>Bartosz</given-names></name>
        <name><surname>Van Dam</surname><given-names>Hubertus</given-names></name>
        <name><surname>Vivas</surname><given-names>Aurelio</given-names></name>
        <name><surname>Ward</surname><given-names>Logan</given-names></name>
        <name><surname>Widener</surname><given-names>Patrick</given-names></name>
        <name><surname>Wilkinson</surname><given-names>Sean</given-names></name>
        <name><surname>Zawalska</surname><given-names>Justyna</given-names></name>
        <name><surname>Zulfiqar</surname><given-names>Mahnoor</given-names></name>
      </person-group>
      <article-title>Workflows community summit 2022: A roadmap revolution</article-title>
      <source>arXiv preprint arXiv:2304.00019</source>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-ben2020workflows">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ben-Nun</surname><given-names>Tal</given-names></name>
        <name><surname>Gamblin</surname><given-names>Todd</given-names></name>
        <name><surname>Hollman</surname><given-names>Daisy S</given-names></name>
        <name><surname>Krishnan</surname><given-names>Hari</given-names></name>
        <name><surname>Newburn</surname><given-names>Chris J</given-names></name>
      </person-group>
      <article-title>Workflows are the new applications: Challenges in performance, portability, and productivity</article-title>
      <source>2020 IEEE/ACM international workshop on performance, portability and productivity in HPC (P3HPC)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.1109/p3hpc51967.2020.00011</pub-id>
      <fpage>57</fpage>
      <lpage>69</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wflowsystems">
    <element-citation>
      <article-title>Existing workflow systems</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://s.apache.org/existing-workflow-systems</uri>
    </element-citation>
  </ref>
  <ref id="ref-al2021exaworks">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Al-Saadi</surname><given-names>Aymen</given-names></name>
        <name><surname>Ahn</surname><given-names>Dong H</given-names></name>
        <name><surname>Babuji</surname><given-names>Yadu</given-names></name>
        <name><surname>Chard</surname><given-names>Kyle</given-names></name>
        <name><surname>Corbett</surname><given-names>James</given-names></name>
        <name><surname>Hategan</surname><given-names>Mihael</given-names></name>
        <name><surname>Herbein</surname><given-names>Stephen</given-names></name>
        <name><surname>Jha</surname><given-names>Shantenu</given-names></name>
        <name><surname>Laney</surname><given-names>Daniel</given-names></name>
        <name><surname>Merzky</surname><given-names>Andre</given-names></name>
        <name><surname>Munson</surname><given-names>Todd</given-names></name>
        <name><surname>Salim</surname><given-names>Michael</given-names></name>
        <name><surname>Titov</surname><given-names>Mikhail</given-names></name>
        <name><surname>Uram</surname><given-names>Thomas D</given-names></name>
        <name><surname>Wozniak</surname><given-names>Justin M</given-names></name>
      </person-group>
      <article-title>Exaworks: Workflows for exascale</article-title>
      <source>2021 IEEE workshop on workflows in support of large-scale science (WORKS)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.1109/works54523.2021.00012</pub-id>
      <fpage>50</fpage>
      <lpage>57</lpage>
    </element-citation>
  </ref>
  <ref id="ref-babuji2019parsl">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Babuji</surname><given-names>Yadu</given-names></name>
        <name><surname>Woodard</surname><given-names>Anna</given-names></name>
        <name><surname>Li</surname><given-names>Zhuozhao</given-names></name>
        <name><surname>Katz</surname><given-names>Daniel S</given-names></name>
        <name><surname>Clifford</surname><given-names>Ben</given-names></name>
        <name><surname>Kumar</surname><given-names>Rohan</given-names></name>
        <name><surname>Lacinski</surname><given-names>Lukasz</given-names></name>
        <name><surname>Chard</surname><given-names>Ryan</given-names></name>
        <name><surname>Wozniak</surname><given-names>Justin M</given-names></name>
        <name><surname>Foster</surname><given-names>Ian</given-names></name>
        <name><surname>Wilde</surname><given-names>Michael</given-names></name>
        <name><surname>Chard</surname><given-names>Kyle</given-names></name>
      </person-group>
      <article-title>Parsl: Pervasive parallel programming in python</article-title>
      <source>Proceedings of the 28th international symposium on high-performance parallel and distributed computing</source>
      <year iso-8601-date="2019">2019</year>
      <fpage>25</fpage>
      <lpage>36</lpage>
    </element-citation>
  </ref>
  <ref id="ref-prefect">
    <element-citation>
      <article-title>Prefect</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/PrefectHQ/prefect</uri>
    </element-citation>
  </ref>
  <ref id="ref-redun">
    <element-citation>
      <article-title>Redun</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/insitro/redun</uri>
    </element-citation>
  </ref>
  <ref id="ref-covalent">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Cunningham</surname><given-names>Alejandro</given-names><suffix>Will Esquivel</suffix></name>
        <name><surname>Jao</surname><given-names>Casey</given-names></name>
        <name><surname>Hasan</surname><given-names>Faiyaz</given-names></name>
        <name><surname>Bala</surname><given-names>Venkat</given-names></name>
        <name><surname>Sanand</surname><given-names>Sankalp</given-names></name>
        <name><surname>Venkatesh</surname><given-names>Prasanna</given-names></name>
        <name><surname>Tandon</surname><given-names>Madhur</given-names></name>
        <name><surname>Emmanuel Ochia</surname><given-names>Okechukwu</given-names></name>
        <name><surname>Rosen</surname><given-names>Andrew S</given-names></name>
        <name><surname>dwelsch-esi</surname></name>
        <name><surname>jkanem</surname></name>
        <name><surname>Aravind</surname></name>
        <name><surname>HaimHorowitzAgnostiq</surname></name>
        <name><surname>Li</surname><given-names>Ruihao</given-names></name>
        <name><surname>Neagle</surname><given-names>Scott Wyman</given-names></name>
        <name><surname>valkostadinov</surname></name>
        <name><surname>Ghukasyan</surname><given-names>Ara</given-names></name>
        <name><surname>Rao</surname><given-names>Poojith U</given-names></name>
        <name><surname>Dutta</surname><given-names>Sayandip</given-names></name>
        <name><surname>WingCode</surname></name>
        <name><surname>Hughes</surname><given-names>Anna</given-names></name>
        <name><surname>RaviPsiog</surname></name>
        <name><surname>Udayan</surname></name>
        <name><surname>Akalanka</surname></name>
        <name><surname>Obasi</surname><given-names>Amara</given-names></name>
        <name><surname>Singh</surname><given-names>Divyanshu</given-names></name>
        <name><surname>FilipBolt</surname></name>
      </person-group>
      <article-title>Covalent</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://doi.org/10.5281/zenodo.5903364</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.5903364</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-maggma">
    <element-citation>
      <article-title>Maggma</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/materialsproject/maggma</uri>
    </element-citation>
  </ref>
  <ref id="ref-montydb">
    <element-citation>
      <article-title>MontyDB</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/davidlatwe/montydb</uri>
    </element-citation>
  </ref>
  <ref id="ref-jobflowremote">
    <element-citation>
      <article-title>Jobflow remote</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/Matgenix/jobflow-remote</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
