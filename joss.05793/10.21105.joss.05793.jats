<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5793</article-id>
<article-id pub-id-type="doi">10.21105/joss.05793</article-id>
<title-group>
<article-title>Curifactory: A research experiment
manager</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5036-5433</contrib-id>
<name>
<surname>Martindale</surname>
<given-names>Nathan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4320-5818</contrib-id>
<name>
<surname>Stewart</surname>
<given-names>Scott L.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8931-5815</contrib-id>
<name>
<surname>Hite</surname>
<given-names>Jason</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5414-2800</contrib-id>
<name>
<surname>Adams</surname>
<given-names>Mark B.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Oak Ridge National Laboratory, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-02-20">
<day>20</day>
<month>2</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>90</issue>
<fpage>5793</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>data analysis management</kwd>
<kwd>analysis orchestration</kwd>
<kwd>analysis reporting</kwd>
<kwd>research experiment management</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Curifactory is a command line tool and framework for organizing
  Python experiment code, configuration parameters, and results. It is
  an opinionated and lightweight approach to workflow management
  infrastructure and is primarily intended to support researchers
  conducting experiments on one machine. This software was developed to
  support the reproducibility of results for several data science
  projects in the Nuclear Nonproliferation Division at Oak Ridge
  National Laboratory.</p>
  <p>Curifactory is intended to be a general framework and is not
  specific to machine learning or data science. It can aid in any field
  in which experiments are primarily computation-based studies and can
  be implemented in Python (e.g., high-energy physics, astronomy,
  computational chemistry). The design emphasizes the automated caching
  of intermediate data analysis artifacts to speed up development
  involving computationally intensive tasks. It also allows for data
  provenance and experiment reproduction. Individual experiment runs are
  tracked through logs and their output reports, and entire copies of a
  run with all cached data and metadata can be exported for others to
  run using Curifactory on another machine. Curifactory experiments can
  either be integrated into a project from the beginning or can be
  written on top of an existing codebase without needing significant
  modification. A few important views of the Curifactory library can be
  seen in
  <xref alt="[fig:curi_main]" rid="figU003Acuri_main">[fig:curi_main]</xref>.</p>
  <fig>
    <caption><p>Collection of views from the Curifactory library,
    including a code example of an experiment, the command line
    interface, and output report
    visualization.<styled-content id="figU003Acuri_main"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/curi_main.png" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Experiment organization and results management are often overlooked
  aspects of conducting research with any significant amount of software
  code. Project folders can become a mess of temporary runnable scripts
  with inconsistent outputs and conflicting or outdated data files. This
  is often a result of rapid code prototyping during the research
  process, combined with the difficulty of managing and re-using
  intermediate experimental outputs (i.e., computationally expensive
  data transforms). This can make it difficult to track experiment
  results over time and greatly complicate the task of reproducing a set
  of results. Managing large collections of possible parameter sets for
  experiment code can also be challenging, sometimes requiring scripts
  to generate configuration files that can be difficult to update if
  parameter changes occur later in the research lifecycle.</p>
  <p>Various solutions have been implemented to address some aspects of
  research experiment management, and in prior work, the authors
  explored some of these solutions and detailed a set of attributes to
  consider for comparing such systems: orchestration, parameterization,
  caching, provenance, portability, reporting, and scalability
  (<xref alt="Martindale et al., 2022" rid="ref-martindale2022design" ref-type="bibr">Martindale
  et al., 2022</xref>). We briefly explore three of those here, Kedro
  (<xref alt="Linux Foundation AI &amp; Data, 2019" rid="ref-kedro" ref-type="bibr">Linux
  Foundation AI &amp; Data, 2019</xref>) and MLFlow
  (<xref alt="LLC, 2018" rid="ref-mlflow2022" ref-type="bibr">LLC,
  2018</xref>), as well as Pachyderm
  (<xref alt="Pachyderm, 2014" rid="ref-pacyderm2022" ref-type="bibr">Pachyderm,
  2014</xref>) to highlight what distinguishes Curifactory and the types
  of problems it is suited for. We additionally compare Luigi
  (<xref alt="Spotify, 2012" rid="ref-luigi" ref-type="bibr">Spotify,
  2012</xref>) as an example of a more general task pipeline
  manager.</p>
  <p>First, Curifactory is a more generalized approach to experiments.
  Tools such as Pachyderm and MLFlow are specifically designed for
  machine learning models, whereas Curifactory makes no assumptions
  about the objective of an experiment or data analysis task. Pachyderm
  in particular is more complicated to set up because it requires a
  Kubernetes cluster
  (<xref alt="Foundation, 2014" rid="ref-kubernetes2022" ref-type="bibr">Foundation,
  2014</xref>). In practice, this means that Pachyderm is better suited
  for use by a medium or large team in a production setting, rather than
  a team with one to a few researchers. MLFlow differs in its abilities
  to configure parameters, relying on raw string key-value pairs.
  Curifactory, in contrast, directly handles configuration in Python
  files, allowing greater flexibility and dynamic parameter set
  construction. MLFlow also has no explicit means for orchestration,
  relying solely on the script in which it is run. On the other end of
  the spectrum is Luigi, a more general tool than Curifactory designed
  to help run batch job pipelines in a highly scalable way. While many
  of the same features are present, the ability to parameterize jobs,
  orchestrating job runs, and of course scalability, the emphasis of the
  tool is not on experiments. Luigi is likely well suited to certain
  tasks within an experiment, such as large amounts of relatively static
  data processing, but specifically the lack of detailed provenance
  per-output and integrated output reporting make it less effective at
  managing overall experiment workflows by default.</p>
  <p>Curifactory is very similar to Kedro in terms of the abstractions
  it provides for orchestration. Kedro’s “nodes” are functionally
  similar to Curifactory “stages,” but Kedro’s “pipelines” design
  stresses modularity and reusability such that sections of code could
  be used easily across multiple projects. This is less of an emphasis
  in Curifactory’s approach, which focuses on the organization of
  multiple experiments within a single project. Kedro is more
  effectively designed to support one primary experiment per project
  with pipelines that are easily shared between projects. The two tools
  also take different approaches for caching and reporting. Curifactory
  caches and reports information based on each specific set of
  parameters run through a select experiment. This makes re-entrancy
  through caching easier for a given experiment and parameter set.
  Kedro, on the other hand, does not explicitly version cached outptus
  by default. Finally, the two projects differ in their preferred file
  approach for parameterization. Curifactory uses Python configuration
  files for parameterizing experiments while Kedro relies on a
  YAML-based system by default.</p>
</sec>
<sec id="workflow">
  <title>Workflow</title>
  <p>The development team created Curifactory based on several
  high-level concepts discussed in this section. The first of these
  concepts is a “stage”, which functionally represents one step of an
  experimental process such as a data transformation. The stage is a
  function that should be used to make calls into the main research
  codebase and configure these calls based on user-specified experiment
  parameters.</p>
  <p>This leads to the next core concept of Curifactory, which are
  “parameters”. Parameters represent the algorithm/analysis
  hyperparameters and experiment settings necessary to configure how
  stages run. Rather than relying on typical configuration file formats
  (e.g., YAML, JSON) Curifactory assumes that these configuration values
  are stored in instances of Python dataclasses that are generated in
  “parameter files”. Keeping this type of information in code rather
  than in a more typical static format has several advantages,
  including:</p>
  <list list-type="order">
    <list-item>
      <p>A parameter can store any Python object.</p>
    </list-item>
    <list-item>
      <p>Parameter sets can be modular/compositional.</p>
    </list-item>
    <list-item>
      <p>Parameter sets can inherit from another parameter set.</p>
    </list-item>
    <list-item>
      <p>Parameter sets can be dynamically generated. For example, this
      allows researchers to generate an experiment-wide parameter grid
      search, potentially generating hundreds of parameter sets from a
      single file.</p>
    </list-item>
  </list>
  <p>Finally, an “experiment” is a Python function that takes in a
  collection of parameter sets and routes them through one or more
  sequences of stages. Experiments have a manager that is available
  throughout a run which helps automatically maintain the state of data
  passing through the various stages. These interactions are shown in
  <xref alt="[fig:components]" rid="figU003Acomponents">[fig:components]</xref>.
  Experiments represent the different overall analysis tasks that a
  researcher may want to test. For example, a researcher might have an
  experiment that evaluates which type of data-driven model converges
  best for a scenario of interest.</p>
  <fig>
    <caption><p>An experiment with multiple sets of parameters
    proceeding through stages, maintaining the state of data passing
    through various stages on records managed by the
    manager.<styled-content id="figU003Acomponents"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/flow_expanding_detail_5_300.png" />
  </fig>
  <p>Researchers can interact with Curifactory on the command line
  through the <monospace>experiment</monospace> command. This interface
  allows the user to specify an experiment to run and the set(s) of
  parameters to apply to that experiment. Various flags control
  Curifactory’s functionality, such as whether an experiment Jupyter
  Notebook summary is automatically generated at the end, whether to
  ignore some specific parameters, and whether to parallelize experiment
  execution.</p>
</sec>
<sec id="audience">
  <title>Audience</title>
  <p>The target audience for Curifactory is small research teams
  performing multiple data analysis tasks as part of a research
  activity. This could include activities like graduate research,
  business analysis tasks, or scientific experimentation. This
  open-source software is licensed under a BSD-3 clause license, is
  registered on
  <ext-link ext-link-type="uri" xlink:href="https://%20doi:10.11578/dc.20220208.1">DOE
  Code</ext-link>, and is available on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ORNL/curifactory">GitHub</ext-link>.
  The package is also pip installable with
  <monospace>pip install curifactory</monospace> with Sphinx
  (<xref alt="Komiya et al., 2008" rid="ref-sphinx" ref-type="bibr">Komiya
  et al., 2008</xref>) built
  <ext-link ext-link-type="uri" xlink:href="https://ornl.github.io/curifactory/latest/index.html">documentation</ext-link>.
  Finally, linting for this project is performed using black
  (<xref alt="Python Software Foundation, 2019" rid="ref-black-linter" ref-type="bibr">Python
  Software Foundation, 2019</xref>) and flake8
  (<xref alt="Python Code Quality Authority, 2010" rid="ref-flake8" ref-type="bibr">Python
  Code Quality Authority, 2010</xref>) as well as other pre-commit hooks
  with pre-commit
  (<xref alt="pre-commit Organization, 2017" rid="ref-precommit" ref-type="bibr">pre-commit
  Organization, 2017</xref>).</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>The authors would like to acknowledge the US Department of Energy,
  National Nuclear Security Administration’s Office of Defense Nuclear
  Nonproliferation Research and Development (NA-22) for supporting this
  work.</p>
  <p>This manuscript has been authored by UT-Battelle, LLC, under
  contract DE-AC05-00OR22725 with the US Department of Energy (DOE). The
  US government retains and the publisher, by accepting the article for
  publication, acknowledges that the US government retains a
  nonexclusive, paid-up, irrevocable, worldwide license to publish or
  reproduce the published form of this manuscript, or allow others to do
  so, for US government purposes. DOE will provide public access to
  these results of federally sponsored research in accordance with the
  DOE Public Access Plan
  (http://energy.gov/downloads/doe-public-access-plan).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-pacyderm2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Pachyderm</surname></name>
      </person-group>
      <article-title>Pachyderm: The leader in data versioning and pipelines for MLOps</article-title>
      <publisher-name>https://www.pachyderm.com/</publisher-name>
      <year iso-8601-date="2014">2014</year>
    </element-citation>
  </ref>
  <ref id="ref-mlflow2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>LLC</surname><given-names>LF Projects</given-names></name>
      </person-group>
      <article-title>MLflow: An open source platform for the machine learning lifecycle</article-title>
      <publisher-name>https://mlflow.org/</publisher-name>
      <year iso-8601-date="2018">2018</year>
    </element-citation>
  </ref>
  <ref id="ref-kubernetes2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Foundation</surname><given-names>The Linux</given-names></name>
      </person-group>
      <article-title>Kubernetes: Production-grade container orchestration</article-title>
      <publisher-name>https://kubernetes.io/</publisher-name>
      <year iso-8601-date="2014">2014</year>
    </element-citation>
  </ref>
  <ref id="ref-sphinx">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Komiya</surname><given-names>Takeshi</given-names></name>
        <name><surname>Brandl</surname><given-names>George</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Sphinx: Python document generator</article-title>
      <publisher-name>https://www.sphinx-doc.org/</publisher-name>
      <year iso-8601-date="2008">2008</year>
    </element-citation>
  </ref>
  <ref id="ref-black-linter">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Python Software Foundation</string-name>
      </person-group>
      <article-title>Black - The uncompromising code formatter</article-title>
      <publisher-name>https://github.com/psf/black</publisher-name>
      <year iso-8601-date="2019">2019</year>
    </element-citation>
  </ref>
  <ref id="ref-martindale2022design">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Martindale</surname><given-names>Nathan</given-names></name>
        <name><surname>Stewart</surname><given-names>S. L.</given-names></name>
        <name><surname>Hite</surname><given-names>Jason</given-names></name>
        <name><surname>Adams</surname><given-names>Mark</given-names></name>
      </person-group>
      <article-title>Design of a scientific data analysis support platform</article-title>
      <source>Proceedings of the 21st Python in Science Conference</source>
      <person-group person-group-type="editor">
        <name><surname>Agarwal</surname></name>
        <name><surname>Calloway</surname></name>
        <name><surname>Niederhut</surname></name>
        <name><surname>Shupe</surname></name>
      </person-group>
      <year iso-8601-date="2022">2022</year>
      <uri>https://conference.scipy.org/proceedings/scipy2022/pdfs/nathan_martindale.pdf</uri>
      <pub-id pub-id-type="doi">10.25080/majora-212e5952-01b</pub-id>
      <fpage>179 </fpage>
      <lpage> 186</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kedro">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Linux Foundation AI &amp; Data</string-name>
      </person-group>
      <article-title>Kedro - a Python framework for creating reproducible, maintainable and modular data science code.</article-title>
      <publisher-name>https://github.com/kedro-org/kedro</publisher-name>
      <year iso-8601-date="2019">2019</year>
    </element-citation>
  </ref>
  <ref id="ref-flake8">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Python Code Quality Authority</string-name>
      </person-group>
      <article-title>Flake8 - your tool for style guide enforcement</article-title>
      <publisher-name>https://flake8.pycqa.org/en/latest/</publisher-name>
      <year iso-8601-date="2010">2010</year>
    </element-citation>
  </ref>
  <ref id="ref-precommit">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>pre-commit Organization</string-name>
      </person-group>
      <article-title>Pre-commit - a framework for managing and maintaining multi-language pre-commit hooks.</article-title>
      <publisher-name>https://pre-commit.com/</publisher-name>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-luigi">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Spotify</surname></name>
      </person-group>
      <article-title>Luigi - a Python module that helps you build complex pipelines of batch jobs</article-title>
      <publisher-name>https://github.com/spotify/luigi</publisher-name>
      <year iso-8601-date="2012">2012</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
