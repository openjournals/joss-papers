<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7059</article-id>
<article-id pub-id-type="doi">10.21105/joss.07059</article-id>
<title-group>
<article-title>Jupyter Scatter: Interactive Exploration of Large-Scale
Datasets</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8432-4835</contrib-id>
<name>
<surname>Lekschas</surname>
<given-names>Fritz</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7694-5164</contrib-id>
<name>
<surname>Manz</surname>
<given-names>Trevor</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Ozette Technologies, Seattle, WA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Harvard Medical School, Boston, MA, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-05-01">
<day>1</day>
<month>5</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>101</issue>
<fpage>7059</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Jupyter widget</kwd>
<kwd>scatterplot</kwd>
<kwd>2D scatter</kwd>
<kwd>interactive data visualization</kwd>
<kwd>embedding plot</kwd>
<kwd>WebGL</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Jupyter Scatter is a Python package for rendering scalable,
  interactive, and interlinked scatterplots to explore datasets in
  Jupyter Notebook/Lab, Colab, and VS Code
  (<xref alt="[fig:teaser]" rid="figU003Ateaser">[fig:teaser]</xref>).
  Thanks to its WebGL-based rendering engine
  (<xref alt="Lekschas, 2023" rid="ref-lekschas2023regl" ref-type="bibr">Lekschas,
  2023</xref>), Jupyter Scatter can render and animate up to several
  million data points. The tool focuses on data-driven visual encodings
  and offers perceptually-effective point color and opacity settings by
  default. For interactive exploration, Jupyter Scatter features two-way
  zoom and point selections. Furthermore, it can compose multiple
  scatterplots and synchronize their views and selections, which is
  useful for comparing datasets. Finally, Jupyter Scatter’s API
  integrates with Pandas DataFrames
  (<xref alt="McKinney, 2010" rid="ref-mckinney2010data" ref-type="bibr">McKinney,
  2010</xref>) and Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>) and offers functional methods that group properties by
  type to ease accessibility and readability. Extensive documentation
  and how-tos can be found at
  <ext-link ext-link-type="uri" xlink:href="https://jupyter-scatter.dev">https://jupyter-scatter.dev</ext-link>
  and the code is available at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/flekschas/jupyter-scatter">https://github.com/flekschas/jupyter-scatter</ext-link>.</p>
  <fig>
    <caption><p>Examples of Jupyter Scatter. Top row left to right: A
    10M point scatterplot of the Roessler Attractor. A connected
    scatterplot of the market capitalization over the last five years of
    the top ten S&amp;P500 companies according to YCharts. Five linked
    embedding plots of epigenomic data
    (<xref alt="Dekker et al., 2023" rid="ref-dekker2023spatial" ref-type="bibr">Dekker
    et al., 2023</xref>) that are connected to the HiGlass genome
    browser
    (<xref alt="Kerpedjiev et al., 2018" rid="ref-kerpedjiev2018higlass" ref-type="bibr">Kerpedjiev
    et al., 2018</xref>). Bottom row left to right: A single-cell
    embedding plot of tumor data
    (<xref alt="Mair et al., 2022" rid="ref-mair2022extricating" ref-type="bibr">Mair
    et al., 2022</xref>) that was clustered and annotated with FAUST
    Greene et al.
    (<xref alt="2022" rid="ref-greene2022data" ref-type="bibr">2022</xref>).
    Several linked embedding plots of chromatin state datasets
    (<xref alt="Spracklin et al., 2023" rid="ref-spracklin2023diverse" ref-type="bibr">Spracklin
    et al., 2023</xref>). An embedding plot of news headlines
    (<xref alt="Misra, 2022" rid="ref-misra2022news" ref-type="bibr">Misra,
    2022</xref>) that is linked to a widget for displaying selected
    articles.
    <styled-content id="figU003Ateaser"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="teaser.jpg" />
  </fig>
</sec>
<sec id="usage-scenario">
  <title>Usage Scenario</title>
  <p>Jupyter Scatter simplifies the visual exploration, analysis, and
  comparison of large-scale bivariate datasets. It renders up to twenty
  million points smoothly, supports fast point selections, integrates
  with Pandas DataFrame
  (<xref alt="McKinney, 2010" rid="ref-mckinney2010data" ref-type="bibr">McKinney,
  2010</xref>), uses perceptually-effective default encodings, and
  offers a user-friendly API.</p>
  <p>In the following, we demonstrate its usage for visualizing the
  GeoNames dataset
  (<xref alt="GeoNames, 2024" rid="ref-geonames" ref-type="bibr">GeoNames,
  2024</xref>), which contains data about 120k cities worldwide. For
  instance, to visualize cities by their longitude/latitude and
  color-code them by continent
  (<xref alt="[fig:geonames]" rid="figU003Ageonames">[fig:geonames]</xref>
  Left), we create a <monospace>Scatter</monospace> instance as
  follows.</p>
  <code language="python">import jscatter
import pandas as pd

geonames = pd.read_parquet('https://paper.jupyter-scatter.dev/geonames.pq')

scatter = jscatter.Scatter(
  data=geonames,
  x='Longitude',
  y='Latitude',
  color_by='Continent',
)
scatter.show()</code>
  <fig>
    <caption><p>GeoNames Dataset of Cities Around the
    World.<styled-content id="figU003Ageonames"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="geonames.jpg" />
  </fig>
  <p>Without specifying a color map, Jupyter Scatter uses the
  categorical colorblind-safe palette from Okabe &amp; Ito
  (<xref alt="2002" rid="ref-okabe2002color" ref-type="bibr">2002</xref>)
  for the <monospace>Continent</monospace> column, which has seven
  unique values. For columns with continuous data, it automatically
  selects Matplotlib’s
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>) <italic>Viridis</italic> color palette. As shown in
  <xref alt="[fig:teaser]" rid="figU003Ateaser">[fig:teaser]</xref> and
  <xref alt="[fig:geonames]" rid="figU003Ageonames">[fig:geonames]</xref>
  Left, Jupyter Scatter dynamically adjusts the point opacity based on
  the point density within the field of view. This means points become
  more opaque when zooming into sparse areas and more transparent when
  zooming out into an area that contains many points. The dynamic
  opacity addresses over-plotting issues when zoomed out and visibility
  issues when zoomed in.</p>
  <p>Jupyter Scatter offers many ways to customize the point color,
  size, and opacity encodings. To simplify configuration, it provides
  topic-specific methods for setting up the scatterplot, rather than
  requiring all properties to be set during the instantiation of
  <monospace>Scatter</monospace>. For instance, as shown in
  <xref alt="[fig:geonames]" rid="figU003Ageonames">[fig:geonames]</xref>
  Right, the point opacity (<monospace>0.5</monospace>), size
  (asinh-normalized), and color (log-normalized population using
  Matplotlib’s
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>) <italic>Magma</italic> color palette in reverse order)
  can be set using the following methods.</p>
  <code language="python">from matplotlib.colors import AsinhNorm, LogNorm
scatter.opacity(0.5)
scatter.size(by='Population', map=(1, 8, 10), norm=AsinhNorm())
scatter.color(by='Population', map='magma', norm=LogNorm(), order='reverse')</code>
  <p>To aid interpretation of individual points and point clusters,
  Jupyter Scatter includes legends, axis labels, and tooltips. These
  features are activated and customized via their respective
  methods.</p>
  <code language="python">scatter.legend(True)
scatter.axes(True, labels=True)
scatter.tooltip(True, properties=['color', 'Latitude', 'Country'], preview='Name')</code>
  <p>The tooltip can show a point’s data distribution in context to the
  whole dataset and include a text, image, or audio-based media preview.
  For instance, the example
  (<xref alt="[fig:geonames]" rid="figU003Ageonames">[fig:geonames]</xref>
  Right) shows the distribution of the visually encoded color property
  as well as the <monospace>Latitude</monospace> and
  <monospace>Country</monospace> columns. For numerical properties, the
  distribution is visualized as a bar chart, and for categorical
  properties the distribution is visualized as a treemap. As the media
  preview we’re showing the city name.</p>
  <p>Exploring a scatterplot often involves studying subsets of the
  points. To select points, one can either long press and lasso-select
  points interactively in the plot
  (<xref alt="[fig:fashion-mnist]" rid="figU003Afashion-mnist">[fig:fashion-mnist]</xref>
  Bottom Left) or query-select points
  (<xref alt="[fig:geonames]" rid="figU003Ageonames">[fig:geonames]</xref>
  Right) as shown below. In this example, we select all cities with a
  population greater than ten million.</p>
  <code language="python">scatter.selection(geonames.query('Population &gt; 10_000_000').index)</code>
  <p>The selected cities can be retrieved by calling
  <monospace>scatter.selection()</monospace> without any arguments. It
  returns the data record indices, which can then be used to get back
  the underlying data records.</p>
  <code language="python">cities.iloc[scatter.selection()]</code>
  <p>To automatically register changes to the point selection one can
  observe the <monospace>scatter.widget.selection</monospace> traitlet.
  The observability of the selection traitlet (and many other properties
  of <monospace>scatter.widget</monospace>) makes it easy to integrate
  Jupyter Scatter with other Jupyter Widgets.</p>
  <p>For instance,
  <xref alt="[fig:fashion-mnist]" rid="figU003Afashion-mnist">[fig:fashion-mnist]</xref>
  (Left) shows a UMAP
  (<xref alt="McInnes et al., 2018" rid="ref-leland2018umap" ref-type="bibr">McInnes
  et al., 2018</xref>) embedding of the Fashion MNIST dataset
  (<xref alt="Xiao et al., 2017" rid="ref-xiao2017fashion" ref-type="bibr">Xiao
  et al., 2017</xref>) where points represent images and the point
  selection is linked to an image widget that loads the selected
  images.</p>
  <code language="python">import ipywidgets
import jscatter

fashion_mnist = pd.read_parquet('https://paper.jupyter-scatter.dev/fashion-mnist-embeddings.pq')

images = ImagesWidget() # Custom widget for displaying Fashion MNIST images

scatter = jscatter.Scatter(
    data=fashion_mnist,
    x='umapX',
    y='umapY',
    color_by='class',
    background_color='black',
    axes=False,
)

ipywidgets.link((scatter.widget, 'selection'), (images, 'images'))

ipywidgets.AppLayout(center=scatter.show(), right_sidebar=images)</code>
  <fig>
    <caption><p>Fashion MNIST Embeddings. Left: Integration of Jupyter
    Scatter with an image widget through synchronized point selections.
    Right: Four scatterplots with synchronized point selection.
    <styled-content id="figU003Afashion-mnist"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="fashion-mnist.jpg" />
  </fig>
  <p>Comparing two or more related scatterplots can be useful in various
  scenarios. For example, with high-dimensional data, it might be
  necessary to compare different properties of the same data points.
  Another scenario involves embedding the high-dimensional dataset and
  comparing different embedding methods. For large-scale datasets, it
  might be useful to compare different subsets of the same dataset or
  entirely different datasets. Jupyter Scatter supports these
  comparisons with synchronized hover, view, and point selections via
  its <monospace>compose</monospace> method.</p>
  <p>For instance, there are many ways to embed points into two
  dimensions, including linear and non-linear methods, and comparing
  point clusters between different embedding methods can be insightful.
  In the following, we compose a two-by-two grid of four embeddings of
  the Fashion MNIST dataset
  (<xref alt="Xiao et al., 2017" rid="ref-xiao2017fashion" ref-type="bibr">Xiao
  et al., 2017</xref>) created with PCA
  (<xref alt="Pearson, 1901" rid="ref-pearson1901" ref-type="bibr">Pearson,
  1901</xref>), UMAP
  (<xref alt="McInnes et al., 2018" rid="ref-leland2018umap" ref-type="bibr">McInnes
  et al., 2018</xref>), t-SNE
  (<xref alt="Maaten &amp; Hinton, 2008" rid="ref-vandermaaten2008visualizing" ref-type="bibr">Maaten
  &amp; Hinton, 2008</xref>), and a convolutional autoencoder
  (<xref alt="Kingma &amp; Welling, 2013" rid="ref-kingma2013auto" ref-type="bibr">Kingma
  &amp; Welling, 2013</xref>). As illustrated in
  <xref alt="[fig:fashion-mnist]" rid="figU003Afashion-mnist">[fig:fashion-mnist]</xref>
  (Right), the point selection of the four scatterplots is
  synchronized.</p>
  <code language="python">config = dict(
    data=fashion_mnist,
    color_by='class',
    legend=True,
    axes=False,
    zoom_on_selection=True,
)

pca = jscatter.Scatter(x='pcaX', y='pcaY', **config)
tsne = jscatter.Scatter(x='tsneX', y='tsneY', **config)
umap = jscatter.Scatter(x='umapX', y='umapY', **config)
cae = jscatter.Scatter(x='caeX', y='caeY', **config)

jscatter.compose(
    [(pca, &quot;PCA&quot;), (tsne, &quot;t-SNE&quot;), (umap, &quot;UMAP&quot;), (cae, &quot;CAE&quot;)],
    sync_selection=True,
    sync_hover=True,
    rows=2,
)</code>
  <p>Note, by setting <monospace>zoom_on_selection</monospace> to
  <monospace>True</monospace> and synchronizing selections, selecting
  points in one scatter will automatically select and zoom in on those
  points in all scatters.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Jupyter Scatter is primarily a tool for data scientists to visually
  explore and compare bivariate datasets. Its ability for two-way point
  selections and synchronized plots, enable interactive exploration and
  comparison in ways that is not possible with existing widgets (e.g.,
  multiple linked scatterplots) or requires considerable effort to set
  up (e.g., two-way communication of point selections).</p>
  <p>Further, due to its usage of traitlets
  (<xref alt="IPython development team, 2024" rid="ref-traitlets" ref-type="bibr">IPython
  development team, 2024</xref>), Jupyter Scatter integrates easily with
  other widgets, which enables visualization researchers and
  practitioners to build domain-specific applications on top of Jupyter
  Scatter. For instance, the <italic>Comparative Embedding
  Visualization</italic> widget
  (<xref alt="Manz, Lekschas, et al., 2024" rid="ref-manz2024general" ref-type="bibr">Manz,
  Lekschas, et al., 2024</xref>) uses Jupyter Scatter to display four
  synchronized scatterplots for guided comparison of embedding
  visualizations.
  <ext-link ext-link-type="uri" xlink:href="https://co-labo.org/">Andrés
  Colubri’s research group</ext-link> is actively working on a new
  version of their <italic>Single Cell Interactive Viewer</italic> which
  will be based on Jupyter Scatter.</p>
</sec>
<sec id="implementation">
  <title>Implementation</title>
  <p>Jupyter Scatter has two main components: a Python program running
  in the Jupyter kernel and a front-end program for interactive
  visualization. The Python program includes a widget and an API layer.
  The widget defines the view model for drawing scatterplots, while the
  API layer simplifies defining the view model state, integrating with
  Pandas DataFrames
  (<xref alt="McKinney, 2010" rid="ref-mckinney2010data" ref-type="bibr">McKinney,
  2010</xref>) and Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>). The front-end program is built on top of
  regl-scatterplot
  (<xref alt="Lekschas, 2023" rid="ref-lekschas2023regl" ref-type="bibr">Lekschas,
  2023</xref>), a high-performance rendering library based on WebGL,
  ensuring efficient GPU-accelerated rendering.</p>
  <p>All components are integrated using anywidget
  (<xref alt="Manz, Abdennur, et al., 2024" rid="ref-anywidget" ref-type="bibr">Manz,
  Abdennur, et al., 2024</xref>) to create a cross-platform Jupyter
  widget compatible with various environments, including Jupyter,
  JupyterLab, Google Colab, VS Code, and dashboarding frameworks like
  Shiny for Python, Solara, and Panel. The Python program uses anywidget
  and ipywidgets
  (<xref alt="Jupyter widgets community, 2015" rid="ref-ipywidgets" ref-type="bibr">Jupyter
  widgets community, 2015</xref>) to communicate with the front end,
  using binary data support to efficiently send in-memory data to the
  GPU, avoiding the overhead of JSON serialization. This approach
  enables the transfer of millions of data points from the Python kernel
  to the front end with minimal latency. Bidirectional communication
  ensures the visualization state is shared between the front-end and
  kernel, allowing updates to scatterplot properties and access to
  states like selections. Coordination is managed using anywidget APIs,
  enabling connections to other ipywidgets like sliders, dropdowns, and
  buttons for custom interactive data exploration widgets.</p>
</sec>
<sec id="related-work">
  <title>Related Work</title>
  <p>There are many Python packages for rendering scatterplots in
  notebook-like environments. General-purpose visualization libraries
  like Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>), Bokeh
  (<xref alt="Bokeh development team, 2018" rid="ref-bokeh" ref-type="bibr">Bokeh
  development team, 2018</xref>), or Altair
  (<xref alt="VanderPlas et al., 2018" rid="ref-vanderplas2018altair" ref-type="bibr">VanderPlas
  et al., 2018</xref>) offer great customizability but do not scale to
  millions of points. They also don’t offer bespoke features for
  exploring scatterplots and require manual configuration.</p>
  <p>More bespoke dataset-centric plotting libraries like Seaborn
  (<xref alt="Waskom, 2021" rid="ref-waskom2021seaborn" ref-type="bibr">Waskom,
  2021</xref>) or pyobsplot
  (<xref alt="Barnier, 2024" rid="ref-pyobsplot" ref-type="bibr">Barnier,
  2024</xref>) require less configuration and make it easier to create
  visually-pleasing scatterplots but they still fall short in terms of
  scalability.</p>
  <p>Plotly combines great customizability with interactivity and can
  render scatterplots of up to a million points. However, drawing many
  more points is challenging and the library also focuses more on
  generality than dedicated features for scatterplot exploration and
  comparison. Plotly’s WebGL rendering mode is also bound to the number
  of WebGL contexts your browser supports (typically between 8 to 16)
  meaning that it can’t render more than 8 to 16 plots when using the
  WebGL render mode. Jupyter Scatter does not have this limitation as it
  uses a single WebGL renderer for all instantiated widgets, which is
  sufficient as static figures don’t need constant re-rendering and one
  will ever only interact with a single or few plots at a time. Being
  able to render more than 8 to 16 plots can be essential in notebook
  environments as these are often used for exploratory data
  analysis.</p>
  <p>Datashader
  (<xref alt="Anaconda developers and community contributors, 2024" rid="ref-datashader" ref-type="bibr">Anaconda
  developers and community contributors, 2024</xref>) specializes in the
  static rendering of large-scale datasets and offers unparalleled
  scalability that greatly exceeds that of Jupyter Scatter. One can also
  fine-tune how data is aggregated and rasterized. However, this comes
  at the cost of limited interactivity. While it’s possible to
  interactively zoom into a rasterized image produced by Datashader, the
  image is just drawn at scale instead of being re-rendered at different
  fields of view. Re-rendering can be important though to better
  identify patterns in subsets of large scatterplots through optimized
  point size and opacity.</p>
  <p>Although Jupyter Scatter is not tied to any specific application
  area and works with any bivariate data, one common use case is to plot
  2D embeddings. In this context, Embedding Projector
  (<xref alt="Smilkov et al., 2016" rid="ref-smilkov2016embedding" ref-type="bibr">Smilkov
  et al., 2016</xref>), WizMap
  (<xref alt="Wang et al., 2023" rid="ref-wang2023wizmap" ref-type="bibr">Wang
  et al., 2023</xref>), and DataMapPlot [datamapplot] are alternatives
  to Jupyter Scatter that run in Jupyter Notebook/Lab and can scale to
  millions of points. The Embedding Projector can visualize 2D and 3D
  scatter plots but is tightly coupled with TensorFlow’s TensorBoard.
  WizMap and DataMapPlot work with any bivariate data and offer
  additional specialized features like displaying labels and cluster
  outlines/contours. However, unlike Jupyter Scatter, WizMap offers only
  a fixed visual encoding optimized for embeddings, meaning that point
  color, size, and opacity cannot be adjusted. Additionally, both WizMap
  and DataMapPlot output static HTML only, which means they do not
  integrate into the
  <ext-link ext-link-type="uri" xlink:href="https://ipywidgets.readthedocs.io/en/latest/">Jupyter
  Widget</ext-link> ecosystem. For example, while Jupyter Scatter does
  not have built-in search functionality, it can be easily implemented
  using the existing Jupyter Text Widget in combination with Jupyter
  Scatter’s two-way point selections[^1].</p>
  <p>Finally, except for Plotly, none of the tools offer readily
  available interactive <italic>two-way</italic> point selection that
  exposes the selected points for reading and writing in both the Python
  and JavaScript kernels. This is a key feature of Jupyter Scatter to
  enable follow-up analysis of subsets of the data. Also, no other
  library offers direct support for synchronized exploration of multiple
  scatterplots for comparison.</p>
  <p>[^1]
  <ext-link ext-link-type="uri" xlink:href="https://github.com/flekschas/jupyter-scatter-tutorial/blob/main/notebooks/5-Search.ipynb">https://github.com/flekschas/jupyter-scatter-tutorial/blob/main/notebooks/5-Search.ipynb</ext-link></p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge and appreciate contributions from Pablo
  Garcia-Nieto, Sehi L’Yi, Kurt McKee, and Dan Rosén. We also thank
  Nezar Abdennur for his feedback on the initial API design.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-lekschas2023regl">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lekschas</surname><given-names>Fritz</given-names></name>
      </person-group>
      <article-title>Regl-Scatterplot: A Scalable Interactive JavaScript-based Scatter Plot Library</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2023-04">2023</year><month>04</month>
      <volume>8</volume>
      <issue>84</issue>
      <uri>https://joss.theoj.org/papers/10.21105/joss.05275</uri>
      <pub-id pub-id-type="doi">10.21105/joss.05275</pub-id>
      <fpage>5275</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-hunter2007matplotlib">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D graphics environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <publisher-name>IEEE COMPUTER SOC</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <volume>9</volume>
      <issue>3</issue>
      <uri>https://doi.org/10.1109/MCSE.2007.55</uri>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dekker2023spatial">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dekker</surname><given-names>Job</given-names></name>
        <name><surname>Alber</surname><given-names>Frank</given-names></name>
        <name><surname>Aufmkolk</surname><given-names>Sarah</given-names></name>
        <name><surname>Beliveau</surname><given-names>Brian J</given-names></name>
        <name><surname>Bruneau</surname><given-names>Benoit G</given-names></name>
        <name><surname>Belmont</surname><given-names>Andrew S</given-names></name>
        <name><surname>Bintu</surname><given-names>Lacramioara</given-names></name>
        <name><surname>Boettiger</surname><given-names>Alistair</given-names></name>
        <name><surname>Calandrelli</surname><given-names>Riccardo</given-names></name>
        <name><surname>Disteche</surname><given-names>Christine M</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Spatial and temporal organization of the genome: Current state and future aims of the 4D nucleome project</article-title>
      <source>Molecular cell</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://doi.org/10.1016/j.molcel.2023.06.018</uri>
      <pub-id pub-id-type="doi">10.1016/j.molcel.2023.06.018</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kerpedjiev2018higlass">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kerpedjiev</surname><given-names>Peter</given-names></name>
        <name><surname>Abdennur</surname><given-names>Nezar</given-names></name>
        <name><surname>Lekschas</surname><given-names>Fritz</given-names></name>
        <name><surname>McCallum</surname><given-names>Chuck</given-names></name>
        <name><surname>Dinkla</surname><given-names>Kasper</given-names></name>
        <name><surname>Strobelt</surname><given-names>Hendrik</given-names></name>
        <name><surname>Luber</surname><given-names>Jacob M</given-names></name>
        <name><surname>Ouellette</surname><given-names>Scott B</given-names></name>
        <name><surname>Azhir</surname><given-names>Alaleh</given-names></name>
        <name><surname>Kumar</surname><given-names>Nikhil</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>HiGlass: Web-based visual exploration and analysis of genome interaction maps</article-title>
      <source>Genome biology</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>19</volume>
      <uri>https://doi.org/10.1186/s13059-018-1486-1</uri>
      <pub-id pub-id-type="doi">10.1186/s13059-018-1486-1</pub-id>
      <fpage>1</fpage>
      <lpage>12</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mair2022extricating">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mair</surname><given-names>Florian</given-names></name>
        <name><surname>Erickson</surname><given-names>Jami R</given-names></name>
        <name><surname>Frutoso</surname><given-names>Marie</given-names></name>
        <name><surname>Konecny</surname><given-names>Andrew J</given-names></name>
        <name><surname>Greene</surname><given-names>Evan</given-names></name>
        <name><surname>Voillet</surname><given-names>Valentin</given-names></name>
        <name><surname>Maurice</surname><given-names>Nicholas J</given-names></name>
        <name><surname>Rongvaux</surname><given-names>Anthony</given-names></name>
        <name><surname>Dixon</surname><given-names>Douglas</given-names></name>
        <name><surname>Barber</surname><given-names>Brittany</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Extricating human tumour immune alterations from tissue inflammation</article-title>
      <source>Nature</source>
      <publisher-name>Nature Publishing Group UK London</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <volume>605</volume>
      <issue>7911</issue>
      <uri>https://doi.org/10.1038/s41586-022-04718-w</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-022-04718-w</pub-id>
      <fpage>728</fpage>
      <lpage>735</lpage>
    </element-citation>
  </ref>
  <ref id="ref-greene2021new">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Greene</surname><given-names>Evan</given-names></name>
        <name><surname>Finak</surname><given-names>Greg</given-names></name>
        <name><surname>D’Amico</surname><given-names>Leonard A</given-names></name>
        <name><surname>Bhardwaj</surname><given-names>Nina</given-names></name>
        <name><surname>Church</surname><given-names>Candice D</given-names></name>
        <name><surname>Morishima</surname><given-names>Chihiro</given-names></name>
        <name><surname>Ramchurren</surname><given-names>Nirasha</given-names></name>
        <name><surname>Taube</surname><given-names>Janis M</given-names></name>
        <name><surname>Nghiem</surname><given-names>Paul T</given-names></name>
        <name><surname>Cheever</surname><given-names>Martin A</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>New interpretable machine-learning method for single-cell data reveals correlates of clinical response to cancer immunotherapy</article-title>
      <source>Patterns</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>2</volume>
      <issue>12</issue>
      <uri>https://doi.org/10.1016/j.patter.2021.100372</uri>
      <pub-id pub-id-type="doi">10.1016/j.patter.2021.100372</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-greene2022data">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Greene</surname><given-names>Evan</given-names></name>
        <name><surname>Finak</surname><given-names>Greg</given-names></name>
        <name><surname>Lekschas</surname><given-names>Fritz</given-names></name>
        <name><surname>Smith</surname><given-names>Malisa</given-names></name>
        <name><surname>D’Amico</surname><given-names>Leonard A</given-names></name>
        <name><surname>Bhardwaj</surname><given-names>Nina</given-names></name>
        <name><surname>Church</surname><given-names>Candice D</given-names></name>
        <name><surname>Morishima</surname><given-names>Chihiro</given-names></name>
        <name><surname>Ramchurren</surname><given-names>Nirasha</given-names></name>
        <name><surname>Taube</surname><given-names>Janis M</given-names></name>
        <name><surname>Nghiem</surname><given-names>Paul T</given-names></name>
        <name><surname>Cheever</surname><given-names>Martin A</given-names></name>
        <name><surname>Fling</surname><given-names>Steven P</given-names></name>
        <name><surname>Gottardo</surname><given-names>Raphael</given-names></name>
      </person-group>
      <article-title>Data Transformations for Effective Visualization of Single-Cell Embeddings</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/flekschas-ozette/ismb-biovis-2022</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.7522322</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-spracklin2023diverse">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Spracklin</surname><given-names>George</given-names></name>
        <name><surname>Abdennur</surname><given-names>Nezar</given-names></name>
        <name><surname>Imakaev</surname><given-names>Maxim</given-names></name>
        <name><surname>Chowdhury</surname><given-names>Neil</given-names></name>
        <name><surname>Pradhan</surname><given-names>Sriharsa</given-names></name>
        <name><surname>Mirny</surname><given-names>Leonid A</given-names></name>
        <name><surname>Dekker</surname><given-names>Job</given-names></name>
      </person-group>
      <article-title>Diverse silent chromatin states modulate genome compartmentalization and loop extrusion barriers</article-title>
      <source>Nature structural &amp; molecular biology</source>
      <publisher-name>Nature Publishing Group US New York</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>30</volume>
      <issue>1</issue>
      <uri>https://doi.org/10.1038/s41594-022-00892-7</uri>
      <pub-id pub-id-type="doi">10.1038/s41594-022-00892-7</pub-id>
      <fpage>38</fpage>
      <lpage>51</lpage>
    </element-citation>
  </ref>
  <ref id="ref-misra2022news">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Misra</surname><given-names>Rishabh</given-names></name>
      </person-group>
      <article-title>News category dataset</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://arxiv.org/abs/2209.11429</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2209.11429</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mckinney2010data">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>McKinney</surname></name>
      </person-group>
      <article-title>Data Structures for Statistical Computing in Python</article-title>
      <source>Proceedings of the 9th Python in Science Conference</source>
      <year iso-8601-date="2010">2010</year>
      <uri>https://doi.org/10.25080/Majora-92bf1922-00a</uri>
      <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id>
      <fpage>56</fpage>
      <lpage>61</lpage>
    </element-citation>
  </ref>
  <ref id="ref-waskom2021seaborn">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Waskom</surname><given-names>Michael L.</given-names></name>
      </person-group>
      <article-title>Seaborn: Statistical data visualization</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>6</volume>
      <issue>60</issue>
      <uri>https://doi.org/10.21105/joss.03021</uri>
      <pub-id pub-id-type="doi">10.21105/joss.03021</pub-id>
      <fpage>3021</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-okabe2002color">
    <element-citation publication-type="webpage">
      <person-group person-group-type="author">
        <name><surname>Okabe</surname><given-names>Masataka</given-names></name>
        <name><surname>Ito</surname><given-names>Kei</given-names></name>
      </person-group>
      <article-title>How to make figures and presentations that are friendly to color blind people</article-title>
      <source>University of Tokyo</source>
      <year iso-8601-date="2002">2002</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-05-20">2024</year><month>05</month><day>20</day></date-in-citation>
      <uri>https://jfly.uni-koeln.de/color/</uri>
    </element-citation>
  </ref>
  <ref id="ref-leland2018umap">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>McInnes</surname><given-names>Leland</given-names></name>
        <name><surname>Healy</surname><given-names>John</given-names></name>
        <name><surname>Melville</surname><given-names>James</given-names></name>
      </person-group>
      <article-title>UMAP: Uniform manifold approximation and projection for dimension reduction</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <uri>https://arxiv.org/abs/1802.03426</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.1802.03426</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-vandermaaten2008visualizing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Maaten</surname><given-names>Laurens van der</given-names></name>
        <name><surname>Hinton</surname><given-names>Geoffrey</given-names></name>
      </person-group>
      <article-title>Visualizing data using t-SNE</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2008">2008</year>
      <volume>9</volume>
      <issue>86</issue>
      <uri>http://jmlr.org/papers/v9/vandermaaten08a.html</uri>
      <fpage>2579</fpage>
      <lpage>2605</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kingma2013auto">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kingma</surname><given-names>Diederik P</given-names></name>
        <name><surname>Welling</surname><given-names>Max</given-names></name>
      </person-group>
      <article-title>Auto-encoding variational Bayes</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <uri>https://arxiv.org/abs/1312.6114</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.1312.6114</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pearson1901">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pearson</surname><given-names>Karl</given-names></name>
      </person-group>
      <article-title>On lines and planes of closest fit to systems of points is space</article-title>
      <source>The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science</source>
      <publisher-name>Taylor &amp; Francis</publisher-name>
      <year iso-8601-date="1901">1901</year>
      <volume>2</volume>
      <issue>11</issue>
      <uri>https://doi.org/10.1080/14786440109462720</uri>
      <pub-id pub-id-type="doi">10.1080/14786440109462720</pub-id>
      <fpage>559</fpage>
      <lpage>572</lpage>
    </element-citation>
  </ref>
  <ref id="ref-xiao2017fashion">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Xiao</surname><given-names>Han</given-names></name>
        <name><surname>Rasul</surname><given-names>Kashif</given-names></name>
        <name><surname>Vollgraf</surname><given-names>Roland</given-names></name>
      </person-group>
      <article-title>Fashion-MNIST: A novel image dataset for benchmarking machine learning algorithms</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2017-08-28">2017</year><month>08</month><day>28</day>
      <uri>https://arxiv.org/abs/1708.07747</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.1708.07747</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-bokeh">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Bokeh development team</string-name>
      </person-group>
      <article-title>Bokeh: Python library for interactive visualization</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://bokeh.pydata.org/en/latest/</uri>
    </element-citation>
  </ref>
  <ref id="ref-datashader">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Anaconda developers and community contributors</string-name>
      </person-group>
      <article-title>Datashader: Accurately render even the largest data</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/holoviz/datashader</uri>
    </element-citation>
  </ref>
  <ref id="ref-traitlets">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>IPython development team</string-name>
      </person-group>
      <article-title>Traitlets: A lightweight Traits like module</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/ipython/traitlets</uri>
    </element-citation>
  </ref>
  <ref id="ref-anywidget">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Manz</surname><given-names>Trevor</given-names></name>
        <name><surname>Abdennur</surname><given-names>Nezar</given-names></name>
        <name><surname>Gehlenborg</surname><given-names>Nils</given-names></name>
      </person-group>
      <article-title>Anywidget: Reusable widgets for interactive analysis and visualization in computational notebooks</article-title>
      <publisher-name>OSF Preprints</publisher-name>
      <year iso-8601-date="2024-06">2024</year><month>06</month>
      <uri>osf.io/tw9sg</uri>
      <pub-id pub-id-type="doi">10.31219/osf.io/tw9sg</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-geonames">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>GeoNames</string-name>
      </person-group>
      <article-title>GeoNames</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://www.geonames.org</uri>
    </element-citation>
  </ref>
  <ref id="ref-vanderplas2018altair">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>VanderPlas</surname><given-names>Jacob</given-names></name>
        <name><surname>Granger</surname><given-names>Brian</given-names></name>
        <name><surname>Heer</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Moritz</surname><given-names>Dominik</given-names></name>
        <name><surname>Wongsuphasawat</surname><given-names>Kanit</given-names></name>
        <name><surname>Satyanarayan</surname><given-names>Arvind</given-names></name>
        <name><surname>Lees</surname><given-names>Eitan</given-names></name>
        <name><surname>Timofeev</surname><given-names>Ilia</given-names></name>
        <name><surname>Welsh</surname><given-names>Ben</given-names></name>
        <name><surname>Sievert</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>Altair: Interactive statistical visualizations for python</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>3</volume>
      <issue>32</issue>
      <uri>https://doi.org/10.21105/joss.01057</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01057</pub-id>
      <fpage>1057</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pyobsplot">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Barnier</surname><given-names>Julien</given-names></name>
      </person-group>
      <article-title>Observable Plot in Jupyter notebooks and Quarto documents</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/juba/pyobsplot</uri>
    </element-citation>
  </ref>
  <ref id="ref-manz2024general">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Manz</surname><given-names>Trevor</given-names></name>
        <name><surname>Lekschas</surname><given-names>Fritz</given-names></name>
        <name><surname>Greene</surname><given-names>Evan</given-names></name>
        <name><surname>Finak</surname><given-names>Greg</given-names></name>
        <name><surname>Gehlenborg</surname><given-names>Nils</given-names></name>
      </person-group>
      <article-title>A general framework for comparing embedding visualizations across class-label hierarchies</article-title>
      <publisher-name>OSF Preprints</publisher-name>
      <year iso-8601-date="2024-04">2024</year><month>04</month>
      <uri>https://osf.io/puxnf</uri>
      <pub-id pub-id-type="doi">10.31219/osf.io/puxnf</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ipywidgets">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Jupyter widgets community</string-name>
      </person-group>
      <article-title>Ipywidgets: Interactive widgets for the jupyter notebook</article-title>
      <year iso-8601-date="2015">2015</year>
      <uri>https://github.com/jupyter-widgets/ipywidgets</uri>
    </element-citation>
  </ref>
  <ref id="ref-wang2023wizmap">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wang</surname><given-names>Zijie J.</given-names></name>
        <name><surname>Hohman</surname><given-names>Fred</given-names></name>
        <name><surname>Chau</surname><given-names>Duen Horng</given-names></name>
      </person-group>
      <article-title>WizMap: Scalable Interactive Visualization for Exploring Large Machine Learning Embeddings</article-title>
      <source>arXiv 2306.09328</source>
      <year iso-8601-date="2023">2023</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-06-16">2023</year><month>06</month><day>16</day></date-in-citation>
      <uri>http://arxiv.org/abs/2306.09328</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2306.09328</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-smilkov2016embedding">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Smilkov</surname><given-names>Daniel</given-names></name>
        <name><surname>Thorat</surname><given-names>Nikhil</given-names></name>
        <name><surname>Nicholson</surname><given-names>Charles</given-names></name>
        <name><surname>Reif</surname><given-names>Emily</given-names></name>
        <name><surname>Viégas</surname><given-names>Fernanda B.</given-names></name>
        <name><surname>Wattenberg</surname><given-names>Martin</given-names></name>
      </person-group>
      <article-title>Embedding projector: Interactive visualization and interpretation of embeddings</article-title>
      <year iso-8601-date="2016">2016</year>
      <uri>https://arxiv.org/abs/1611.05469</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.1611.05469</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
