<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4142</article-id>
<article-id pub-id-type="doi">10.21105/joss.04142</article-id>
<title-group>
<article-title>PyAMG: Algebraic Multigrid Solvers in
Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Bell</surname>
<given-names>Nathan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5283-6104</contrib-id>
<name>
<surname>Olson</surname>
<given-names>Luke N.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1076-9206</contrib-id>
<name>
<surname>Schroder</surname>
<given-names>Jacob</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Google, Mountain View, CA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Computer Science, University of Illinois at
Urbana-Champaign, Urbana, IL USA 61801</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Mathematics and Statistics, University of New
Mexico, Albuquerque, NM USA 87131</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-01-22">
<day>22</day>
<month>1</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>72</issue>
<fpage>4142</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>algebraic multigrid</kwd>
<kwd>preconditioning</kwd>
<kwd>sparse matrix</kwd>
<kwd>Krylov</kwd>
<kwd>iterative methods</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>PyAMG</monospace> is a Python package of algebraic
  multigrid (AMG) solvers and supporting tools for approximating the
  solution to large, sparse linear systems of algebraic equations,
  <disp-formula><alternatives>
  <tex-math><![CDATA[A x = b,]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>A</mml:mi><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mi>b</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[A]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>A</mml:mi></mml:math></alternatives></inline-formula>
  is an <inline-formula><alternatives>
  <tex-math><![CDATA[n\times n]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>n</mml:mi><mml:mo>×</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  sparse matrix. Sparse linear systems arise in a range of problems in
  science, from fluid flows to solid mechanics to data analysis. While
  the direct solvers available in SciPy’s sparse linear algebra package
  (<monospace>scipy.sparse.linalg</monospace>) are highly efficient, in
  many cases <italic>iterative</italic> methods are preferred due to
  overall complexity. However, the iterative methods in SciPy, such as
  CG and GMRES, often require an efficient preconditioner in order to
  achieve a lower complexity. Preconditioning is a powerful tool whereby
  the conditioning of the linear system and convergence rate of the
  iterative method are both dramatically improved.
  <monospace>PyAMG</monospace> constructs multigrid solvers for use as a
  preconditioner in this setting. A summary of multigrid and algebraic
  multigrid solvers can be found in Olson
  (<xref alt="2015a" rid="ref-encamg" ref-type="bibr">2015a</xref>), in
  Olson
  (<xref alt="2015b" rid="ref-encmg" ref-type="bibr">2015b</xref>), and
  in Falgout
  (<xref alt="2006" rid="ref-amgintro" ref-type="bibr">2006</xref>); a
  detailed description can be found in Briggs et al.
  (<xref alt="2000" rid="ref-mgtutorial" ref-type="bibr">2000</xref>)
  and Trottenberg et al.
  (<xref alt="2001" rid="ref-mgbook" ref-type="bibr">2001</xref>).</p>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p>The overarching goals of <monospace>PyAMG</monospace> include both
  readability and performance. This includes readable implementations of
  popular variations of AMG (see the Methods section), the ability to
  reproduce results in the literature, and a user-friendly interface to
  AMG allowing straightforward access to the variety of AMG parameters
  in the method(s). Additionally, pure Python implementations are not
  efficient for many sparse matrix operations not already available in
  <monospace>scipy.sparse</monospace> — e.g., the sparse matrix graph
  coarsening algorithms needed by AMG. For such cases in
  <monospace>PyAMG</monospace>, the compute (or memory) intensive
  kernels are typically expressed in C++ and wrapped through PyBind11,
  while the method interface and error handling is implemented directly
  in Python (more in the next section). </p>
  <p>In the end, the goal of <monospace>PyAMG</monospace> is to provide
  quick access, rapid prototyping of new AMG solvers, and performant
  execution of AMG methods. The extensive PyAMG
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pyamg/pyamg-examples">Examples</ext-link>
  page highlights many of the package’s advanced AMG capabilities, e.g.,
  for Hermitian, complex, nonsymmetric, and other challenging system
  types. It is important to note that many other AMG packages exist,
  mainly with a focus on parallelism and performance, rather than quick
  access and rapid prototyping. This includes BoomerAMG in hypre
  (<xref alt="Henson &amp; Yang, 2002" rid="ref-henson2002155" ref-type="bibr">Henson
  &amp; Yang, 2002</xref>;
  <xref alt="hypre, 2022" rid="ref-hypre" ref-type="bibr">hypre,
  2022</xref>), MueLu in Trilinos
  (<xref alt="The MueLu Project Team, 2020" rid="ref-muelu-website" ref-type="bibr">The
  MueLu Project Team, 2020</xref>;
  <xref alt="The Trilinos Project Team, 2020" rid="ref-trilinos-website" ref-type="bibr">The
  Trilinos Project Team, 2020</xref>), and GAMG within PETSc
  (<xref alt="Balay et al., 2021" rid="ref-petsc-web-page" ref-type="bibr">Balay
  et al., 2021</xref>), along with other packages focused on
  accelerators
  (<xref alt="Bell et al., 2012" rid="ref-amggpu" ref-type="bibr">Bell
  et al., 2012</xref>), such as AmgX
  (<xref alt="Naumov et al., 2015" rid="ref-amgx" ref-type="bibr">Naumov
  et al., 2015</xref>), CUSP
  (<xref alt="Dalton et al., 2014" rid="ref-cusp" ref-type="bibr">Dalton
  et al., 2014</xref>), and AMGCL
  (<xref alt="Demidov, 2019" rid="ref-amgcl" ref-type="bibr">Demidov,
  2019</xref>).</p>
</sec>
<sec id="design">
  <title>Design</title>
  <p>The central data model in <monospace>PyAMG</monospace> is that of a
  <monospace>MultiLevel</monospace> object, which is constructed in the
  <italic>setup</italic> phase of AMG. The multigrid hierarchy is
  expressed in this object (details below) along with information for
  the <italic>solve</italic> phase, which can be executed on various
  input data, <inline-formula><alternatives>
  <tex-math><![CDATA[b]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>b</mml:mi></mml:math></alternatives></inline-formula>,
  to solve <inline-formula><alternatives>
  <tex-math><![CDATA[A x = b]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>A</mml:mi><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mi>b</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  <p>The <monospace>MultiLevel</monospace> object consists of a list of
  multigrid <monospace>Level</monospace> objects and diagnostic
  information. For example, a <monospace>MultiLevel</monospace> object
  named <monospace>ml</monospace> contains the list
  <monospace>ml.levels</monospace>. Then, the data on level
  <monospace>i</monospace> (with the finest level denoted
  <monospace>i=0</monospace>) accessible in
  <monospace>ml.levels[i]</monospace> includes the following
  information:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>A</monospace>: the sparse matrix operator, in CSR or
      BSR format, on level <monospace>i</monospace>;</p>
    </list-item>
    <list-item>
      <p><monospace>P</monospace>: a sparse matrix interpolation
      operator to transfer grid vectors from level
      <monospace>i+1</monospace> to <monospace>i</monospace>;</p>
    </list-item>
    <list-item>
      <p><monospace>R</monospace>: a sparse matrix restriction operator
      to transfer grid vectors from level <monospace>i</monospace> to
      <monospace>i+1</monospace>; and</p>
    </list-item>
    <list-item>
      <p><monospace>presmoother</monospace>,
      <monospace>postsmoother</monospace>: functions that implement
      pre/post-relaxation in the solve phase, such as weighted Jacobi or
      Gauss-Seidel.</p>
    </list-item>
  </list>
  <p>Other data may be retained for additional diagnostics, such as grid
  splitting information, aggregation information, etc., and would be
  included in each level.</p>
  <p>Specific multigrid methods (next section) in
  <monospace>PyAMG</monospace> and their parameters are generally
  described and constructed in Python, while key performance components
  of both the setup and solve phase are written in C++. Heavy looping
  that cannot be accomplished with vectorized or efficient calls to
  NumPy or sparse matrix operations that are not readily expressed as
  SciPy sparse (CSR or CSC) operations are contained in short, templated
  C++ functions. The templates are used to avoid type recasting the
  variety of input arrays. The direct wrapping to Python is handled
  through another layer with PyBind11. Roughly 26% of PyAMG is in C++,
  with the rest in Python.</p>
</sec>
<sec id="methods">
  <title>Methods</title>
  <p><monospace>PyAMG</monospace> implements several base AMG methods,
  each with a range of options. The base forms for a solver include</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>ruge_stuben_solver()</monospace>: the classical form
      of C/F-type AMG
      (<xref alt="Ruge &amp; Stüben, 1987" rid="ref-cfamgU003A1987" ref-type="bibr">Ruge
      &amp; Stüben, 1987</xref>);</p>
    </list-item>
    <list-item>
      <p><monospace>smoothed_aggregation_solver()</monospace>: smoothed
      aggregation based AMG as introduced in
      (<xref alt="Vaněk et al., 1996" rid="ref-aggamgU003A1996" ref-type="bibr">Vaněk
      et al., 1996</xref>);</p>
    </list-item>
    <list-item>
      <p><monospace>adaptive_sa_solver()</monospace>: a so-called
      adaptive form of smoothed aggregation from
      (<xref alt="Brezina et al., 2005" rid="ref-adaptiveamgU003A2005" ref-type="bibr">Brezina
      et al., 2005</xref>); and</p>
    </list-item>
    <list-item>
      <p><monospace>rootnode_solver()</monospace>: the root-node AMG
      method from
      (<xref alt="Manteuffel et al., 2017" rid="ref-rootnodeamgU003A2017" ref-type="bibr">Manteuffel
      et al., 2017</xref>), applicable also to some nonsymmetric
      systems.</p>
    </list-item>
  </list>
  <p>In each of these, the <italic>base</italic> algorithm is available
  but defaults may be modified for robustness. Options such as the
  default pre/postsmoother or smoothing the input candidate vectors (in
  the case of smoothed aggregation AMG), can be modified to tune the
  solver. In addition, several cycles are available, including the
  standard V and W cycles, for the solve phase. The resulting method can
  also be used as a preconditioner within the Krylov methods available
  in <monospace>PyAMG</monospace> or with SciPy’s Krylov methods. The
  methods in <monospace>PyAMG</monospace> (generally) support complex
  data types and nonsymmetric matrices.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>As an example, consider a five-point finite difference
  approximation to a Poisson problem, <inline-formula><alternatives>
  <tex-math><![CDATA[-\Delta u = f]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>−</mml:mo><mml:mi>Δ</mml:mi><mml:mi>u</mml:mi><mml:mo>=</mml:mo><mml:mi>f</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
  given in matrix form as <inline-formula><alternatives>
  <tex-math><![CDATA[A x = b]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>A</mml:mi><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mi>b</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.
  The AMG setup phase is called with</p>
  <code language="python">import pyamg
A = pyamg.gallery.poisson((10000,10000), format='csr')
ml = pyamg.smoothed_aggregation_solver(A, max_coarse=10)</code>
  <p>For this case, with 100M unknowns, the following multilevel
  hierarchy is generated for smoothed aggregation (using
  <monospace>print(ml)</monospace>):</p>
  <preformat>MultilevelSolver
Number of Levels:     9
Operator Complexity:  1.338
Grid Complexity:      1.188
Coarse Solver:        'pinv'
  level   unknowns     nonzeros
     0   100000000    499960000 [74.76%]
     1    16670000    149993328 [22.43%]
     2     1852454     16670676 [2.49%]
     3      205859      1852805 [0.28%]
     4       22924       208516 [0.03%]
     5        2539        23563 [0.00%]
     6         289         2789 [0.00%]
     7          34          332 [0.00%]
     8           4           16 [0.00%]</preformat>
  <p>In this case, the hierarchy consists of nine levels, with SciPy’s
  pseudoinverse (<monospace>pinv</monospace>) being used on the coarsest
  level. Also displayed is the ratio of unknowns (nonzeros) on all
  levels compared to the fine level, also known as the grid (operator)
  complexity.</p>
  <p>The solve phase, using standard V-cycles, is executed with the
  object’s solve:</p>
  <code language="python">import numpy as np
x0 = np.random.rand(A.shape[0])
b = np.zeros(A.shape[0])
res = []
x = ml.solve(b, x0, tol=1e-8, residuals=res)</code>
  <p>This leads to the residual history shown in
  <xref alt="Figure 1" rid="figU003Aexample">Figure 1</xref>.</p>
  <fig>
    <caption><p>Algebraic multigrid convergence (relative
    residual).<styled-content id="figU003Aexample"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/example.pdf" xlink:title="" />
  </fig>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-cfamgU003A1987">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Ruge</surname><given-names>J. W.</given-names></name>
        <name><surname>Stüben</surname><given-names>K.</given-names></name>
      </person-group>
      <article-title>Algebraic multigrid (AMG)</article-title>
      <source>Multigrid methods</source>
      <person-group person-group-type="editor">
        <name><surname>McCormick</surname><given-names>S. F.</given-names></name>
      </person-group>
      <publisher-name>SIAM</publisher-name>
      <publisher-loc>Philadelphia, PA</publisher-loc>
      <year iso-8601-date="1987">1987</year>
      <volume>3</volume>
      <pub-id pub-id-type="doi">10.1137/1.9781611971057</pub-id>
      <fpage>73</fpage>
      <lpage>130</lpage>
    </element-citation>
  </ref>
  <ref id="ref-aggamgU003A1996">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vaněk</surname><given-names>Petr</given-names></name>
        <name><surname>Mandel</surname><given-names>Jan</given-names></name>
        <name><surname>Brezina</surname><given-names>Marian</given-names></name>
      </person-group>
      <article-title>Algebraic multigrid by smoothed aggregation for second and fourth order elliptic problems</article-title>
      <source>Computing</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="1996">1996</year>
      <volume>56</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1007/BF02238511</pub-id>
      <fpage>179</fpage>
      <lpage>196</lpage>
    </element-citation>
  </ref>
  <ref id="ref-adaptiveamgU003A2005">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brezina</surname><given-names>Marian</given-names></name>
        <name><surname>Falgout</surname><given-names>R</given-names></name>
        <name><surname>MacLachlan</surname><given-names>Scott</given-names></name>
        <name><surname>Manteuffel</surname><given-names>T</given-names></name>
        <name><surname>McCormick</surname><given-names>S</given-names></name>
        <name><surname>Ruge</surname><given-names>J</given-names></name>
      </person-group>
      <article-title>Adaptive smoothed aggregation (\alpha SA) multigrid</article-title>
      <source>SIAM review</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="2005">2005</year>
      <volume>47</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1137/050626272</pub-id>
      <fpage>317</fpage>
      <lpage>346</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rootnodeamgU003A2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Manteuffel</surname><given-names>Thomas A.</given-names></name>
        <name><surname>Olson</surname><given-names>Luke N.</given-names></name>
        <name><surname>Schroder</surname><given-names>Jacob B.</given-names></name>
        <name><surname>Southworth</surname><given-names>Ben S.</given-names></name>
      </person-group>
      <article-title>A root-node–based algebraic multigrid method</article-title>
      <source>SIAM Journal on Scientific Computing</source>
      <year iso-8601-date="2017">2017</year>
      <volume>39</volume>
      <issue>5</issue>
      <pub-id pub-id-type="doi">10.1137/16M1082706</pub-id>
      <fpage>S723</fpage>
      <lpage>S756</lpage>
    </element-citation>
  </ref>
  <ref id="ref-encamg">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Olson</surname><given-names>Luke</given-names></name>
      </person-group>
      <article-title>Multigrid methods: algebraic</article-title>
      <source>Encyclopedia of applied and computational mathematics</source>
      <person-group person-group-type="editor">
        <name><surname>Engquist</surname><given-names>Björn</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <uri>https://lukeo.cs.illinois.edu/files/2015_Ol_encamg.pdf</uri>
      <pub-id pub-id-type="doi">10.1007/978-3-540-70529-1_337</pub-id>
      <fpage>977</fpage>
      <lpage>981</lpage>
    </element-citation>
  </ref>
  <ref id="ref-encmg">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Olson</surname><given-names>Luke</given-names></name>
      </person-group>
      <article-title>Multigrid methods: geometric</article-title>
      <source>Encyclopedia of applied and computational mathematics</source>
      <person-group person-group-type="editor">
        <name><surname>Engquist</surname><given-names>Björn</given-names></name>
      </person-group>
      <publisher-name>Springer Berlin Heidelberg</publisher-name>
      <publisher-loc>Berlin, Heidelberg</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <uri>https://lukeo.cs.illinois.edu/files/2015_Ol_encmg.pdf</uri>
      <pub-id pub-id-type="doi">10.1007/978-3-540-70529-1_338</pub-id>
      <fpage>981</fpage>
      <lpage>987</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mgtutorial">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Briggs</surname><given-names>William L.</given-names></name>
        <name><surname>Henson</surname><given-names>Van Emden</given-names></name>
        <name><surname>McCormick</surname><given-names>Steve F.</given-names></name>
      </person-group>
      <source>A multigrid tutorial, second edition</source>
      <publisher-name>Society for Industrial; Applied Mathematics</publisher-name>
      <year iso-8601-date="2000">2000</year>
      <edition>Second</edition>
      <pub-id pub-id-type="doi">10.1137/1.9780898719505</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mgbook">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Trottenberg</surname><given-names>U.</given-names></name>
        <name><surname>Oosterlee</surname><given-names>C. W.</given-names></name>
        <name><surname>Schüller</surname><given-names>A.</given-names></name>
      </person-group>
      <source>Multigrid</source>
      <publisher-name>Academic Press, Inc., San Diego, CA</publisher-name>
      <year iso-8601-date="2001">2001</year>
      <isbn>0-12-701070-X</isbn>
      <fpage>xvi+631</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-amgintro">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Falgout</surname><given-names>R. D.</given-names></name>
      </person-group>
      <article-title>An introduction to algebraic multigrid</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <year iso-8601-date="2006-10">2006</year><month>10</month>
      <volume>8</volume>
      <issue>6</issue>
      <uri>https://www.osti.gov/biblio/897960</uri>
      <pub-id pub-id-type="doi">10.1109/MCSE.2006.105</pub-id>
      <fpage>24</fpage>
      <lpage>33</lpage>
    </element-citation>
  </ref>
  <ref id="ref-henson2002155">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Henson</surname><given-names>Van Emden</given-names></name>
        <name><surname>Yang</surname><given-names>Ulrike Meier</given-names></name>
      </person-group>
      <article-title>BoomerAMG: A parallel algebraic multigrid solver and preconditioner</article-title>
      <source>Applied Numerical Mathematics</source>
      <year iso-8601-date="2002">2002</year>
      <volume>41</volume>
      <issue>1</issue>
      <issn>0168-9274</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0168927401001155</uri>
      <pub-id pub-id-type="doi">10.1016/S0168-9274(01)00115-5</pub-id>
      <fpage>155</fpage>
      <lpage>177</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hypre">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>hypre</surname></name>
      </person-group>
      <article-title>High performance preconditioners</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/hypre-space/hypre</uri>
    </element-citation>
  </ref>
  <ref id="ref-trilinos-website">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Team</surname><given-names>The Trilinos Project</given-names></name>
      </person-group>
      <source>The Trilinos Project Website</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://trilinos.github.io</uri>
    </element-citation>
  </ref>
  <ref id="ref-muelu-website">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Team</surname><given-names>The MueLu Project</given-names></name>
      </person-group>
      <source>The MueLu Project Website</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://trilinos.github.io/muelu.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-petsc-web-page">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Balay</surname><given-names>Satish</given-names></name>
        <name><surname>Abhyankar</surname><given-names>Shrirang</given-names></name>
        <name><surname>Adams</surname><given-names>Mark F.</given-names></name>
        <name><surname>Benson</surname><given-names>Steven</given-names></name>
        <name><surname>Brown</surname><given-names>Jed</given-names></name>
        <name><surname>Brune</surname><given-names>Peter</given-names></name>
        <name><surname>Buschelman</surname><given-names>Kris</given-names></name>
        <name><surname>Constantinescu</surname><given-names>Emil M.</given-names></name>
        <name><surname>Dalcin</surname><given-names>Lisandro</given-names></name>
        <name><surname>Dener</surname><given-names>Alp</given-names></name>
        <name><surname>Eijkhout</surname><given-names>Victor</given-names></name>
        <name><surname>Gropp</surname><given-names>William D.</given-names></name>
        <name><surname>Hapla</surname><given-names>Václav</given-names></name>
        <name><surname>Isaac</surname><given-names>Tobin</given-names></name>
        <name><surname>Jolivet</surname><given-names>Pierre</given-names></name>
        <name><surname>Karpeev</surname><given-names>Dmitry</given-names></name>
        <name><surname>Kaushik</surname><given-names>Dinesh</given-names></name>
        <name><surname>Knepley</surname><given-names>Matthew G.</given-names></name>
        <name><surname>Kong</surname><given-names>Fande</given-names></name>
        <name><surname>Kruger</surname><given-names>Scott</given-names></name>
        <name><surname>May</surname><given-names>Dave A.</given-names></name>
        <name><surname>McInnes</surname><given-names>Lois Curfman</given-names></name>
        <name><surname>Mills</surname><given-names>Richard Tran</given-names></name>
        <name><surname>Mitchell</surname><given-names>Lawrence</given-names></name>
        <name><surname>Munson</surname><given-names>Todd</given-names></name>
        <name><surname>Roman</surname><given-names>Jose E.</given-names></name>
        <name><surname>Rupp</surname><given-names>Karl</given-names></name>
        <name><surname>Sanan</surname><given-names>Patrick</given-names></name>
        <name><surname>Sarich</surname><given-names>Jason</given-names></name>
        <name><surname>Smith</surname><given-names>Barry F.</given-names></name>
        <name><surname>Zampini</surname><given-names>Stefano</given-names></name>
        <name><surname>Zhang</surname><given-names>Hong</given-names></name>
        <name><surname>Zhang</surname><given-names>Hong</given-names></name>
        <name><surname>Zhang</surname><given-names>Junchao</given-names></name>
      </person-group>
      <article-title>PETSc Web page</article-title>
      <publisher-name>https://petsc.org/</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://petsc.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-cusp">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dalton</surname><given-names>Steven</given-names></name>
        <name><surname>Bell</surname><given-names>Nathan</given-names></name>
        <name><surname>Olson</surname><given-names>Luke</given-names></name>
        <name><surname>Garland</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>Cusp: Generic parallel algorithms for sparse matrix and graph computations</article-title>
      <year iso-8601-date="2014">2014</year>
      <uri>http://cusplibrary.github.io/</uri>
    </element-citation>
  </ref>
  <ref id="ref-amgx">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Naumov</surname><given-names>M.</given-names></name>
        <name><surname>Arsaev</surname><given-names>M.</given-names></name>
        <name><surname>Castonguay</surname><given-names>P.</given-names></name>
        <name><surname>Cohen</surname><given-names>J.</given-names></name>
        <name><surname>Demouth</surname><given-names>J.</given-names></name>
        <name><surname>Eaton</surname><given-names>J.</given-names></name>
        <name><surname>Layton</surname><given-names>S.</given-names></name>
        <name><surname>Markovskiy</surname><given-names>N.</given-names></name>
        <name><surname>Reguly</surname><given-names>I.</given-names></name>
        <name><surname>Sakharnykh</surname><given-names>N.</given-names></name>
        <name><surname>Sellappan</surname><given-names>V.</given-names></name>
        <name><surname>Strzodka</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>AmgX: A library for GPU accelerated algebraic multigrid and preconditioned iterative methods</article-title>
      <source>SIAM Journal on Scientific Computing</source>
      <year iso-8601-date="2015">2015</year>
      <volume>37</volume>
      <issue>5</issue>
      <uri>https://doi.org/10.1137/140980260</uri>
      <pub-id pub-id-type="doi">10.1137/140980260</pub-id>
      <fpage>S602</fpage>
      <lpage>S626</lpage>
    </element-citation>
  </ref>
  <ref id="ref-amgcl">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Demidov</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>AMGCL: An efficient, flexible, and extensible algebraic multigrid implementation</article-title>
      <source>Lobachevskii Journal of Mathematics</source>
      <publisher-name>Pleiades Publishing Ltd</publisher-name>
      <year iso-8601-date="2019-05">2019</year><month>05</month>
      <volume>40</volume>
      <issue>5</issue>
      <issn>1818-9962</issn>
      <uri>http://dx.doi.org/10.1134/S1995080219050056</uri>
      <pub-id pub-id-type="doi">10.1134/s1995080219050056</pub-id>
      <fpage>535</fpage>
      <lpage>546</lpage>
    </element-citation>
  </ref>
  <ref id="ref-amggpu">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bell</surname><given-names>Nathan</given-names></name>
        <name><surname>Dalton</surname><given-names>Steven</given-names></name>
        <name><surname>Olson</surname><given-names>Luke N.</given-names></name>
      </person-group>
      <article-title>Exposing fine-grained parallelism in algebraic multigrid methods</article-title>
      <source>SIAM Journal on Scientific Computing</source>
      <year iso-8601-date="2012">2012</year>
      <volume>34</volume>
      <issue>4</issue>
      <uri>https://doi.org/10.1137/110838844</uri>
      <pub-id pub-id-type="doi">10.1137/110838844</pub-id>
      <fpage>C123</fpage>
      <lpage>C152</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
