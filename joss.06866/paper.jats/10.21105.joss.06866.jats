<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6866</article-id>
<article-id pub-id-type="doi">10.21105/joss.06866</article-id>
<title-group>
<article-title>Dimensionally Aligned Signal Projection Algorithms
Library</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-4565-2692</contrib-id>
<name>
<surname>Smith</surname>
<given-names>Jacob</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5036-5433</contrib-id>
<name>
<surname>Martindale</surname>
<given-names>Nathan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5414-2800</contrib-id>
<name>
<surname>Adams</surname>
<given-names>Mark B.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4320-5818</contrib-id>
<name>
<surname>Stewart</surname>
<given-names>Scott L.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4616-6084</contrib-id>
<name>
<surname>Bingham</surname>
<given-names>Phillip</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Oak Ridge National Laboratory, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-10-12">
<day>12</day>
<month>10</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>104</issue>
<fpage>6866</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2024</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
<kwd>signal processing</kwd>
<kwd>signal visualization</kwd>
<kwd>harmonics</kwd>
<kwd>signal feature extraction</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Dimensionally aligned signal projection (DASP) algorithms are used
  to analyze fast Fourier transforms (FFTs) and generate visualizations
  that help focus on the harmonics for specific signals. At a high
  level, these algorithms extract the FFT segments around each harmonic
  frequency center, and then align them in equally sized arrays ordered
  by increasing distance from the base frequency. This allows for a
  focused view of the harmonic frequencies, which, among other use
  cases, can enable machine learning algorithms to more easily identify
  salient patterns. This work seeks to provide an effective open-source
  implementation of the DASP algorithms proposed by Vann et al.
  (<xref alt="2018" rid="ref-7907255" ref-type="bibr">2018</xref>) as
  well as functionality to help explore and test how these algorithms
  work with an interactive dashboard and signal-generation tool.</p>
  <p>The DASP library is implemented in Python and contains four types
  of algorithms for implementing these feature engineering techniques:
  fixed harmonically aligned signal projection (HASP), decimating HASP,
  interpolating HASP, and frequency aligned signal projection (FASP).
  Each algorithm returns a numerical array, which can be visualized as
  an image. The HASP algorithms are variations of the algorithms
  originally presented by Vann et al.
  (<xref alt="2018" rid="ref-7907255" ref-type="bibr">2018</xref>). For
  consistency, FASP, which is the terminology used for the short-time
  Fourier transform (STFT), has been implemented as part of the library
  to provide a similar interface to the STFT of the raw signal.
  Additionally, the library contains an algorithm to generate artificial
  signals with basic customizations such as the base frequency, sample
  rate, duration, number of harmonics, noise, and number of signals.</p>
  <p>Finally, the library provides multiple interactive visualizations,
  each of which is implemented using IPyWidgets and works in a Jupyter
  environment. A dashboard-style visualization is provided, which
  contains some common signal-processing visual components (signal, FFT,
  spectogram) updating in unison with the HASP functions (see Figure 1
  below). Separate from the dashboard, an independent visualization is
  provided for each of the DASP algorithms as well as for the artifical
  signal generator. These visualizations are included in the library to
  aid in developing an intuitive understanding how the algorithms are
  affected by different input signals and parameter selections.</p>
  <fig>
    <caption><p>Interactive dashboard displaying the custom sine wave
    (upper left), spectogram (upper right), FFT with added red bands
    around the bandwidth (bottom left), and Fixed HASP output (bottom
    right)</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="minidash_v1.png" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Signals analysis in problem domains such as nonintrusive load
  monitoring often requires subject matter experts to create highly
  specific signal transforms for the target devices under test. The DASP
  algorithms were originally created as a feature-engineering technique
  to emphasize the harmonics present in a signal. This added emphasis
  has been shown to improve the performance of models that classify the
  type of downstream device(s) in noninstrusive load monitoring (NILM)
  applications
  (<xref alt="Vann et al., 2018" rid="ref-7907255" ref-type="bibr">Vann
  et al., 2018</xref>).</p>
  <p>Although the DASP algorithms have proven useful for signal-feature
  extraction, at the time of this writing few open-source libraries
  focus on harmonic-structure extraction and manipulation. NILMTK
  (<xref alt="Batra et al., 2014" rid="ref-batra2014nilmtk" ref-type="bibr">Batra
  et al., 2014</xref>) provides an expansive library for preprocessing
  and analyzing NILM-specific data but has no functionality for
  harmonics. TorchSig
  (<xref alt="Boegner et al., 2022" rid="ref-boegner2022large" ref-type="bibr">Boegner
  et al., 2022</xref>) is a machine learning toolkit for manipulating
  signals in PyTorch and has an expansive array of signal transforms and
  augmentations but also has nothing specific to harmonic structure. An
  implementation of an algorithm using average harmonic structure to
  extract notes of specific instruments from audio data
  (<xref alt="Duan et al., 2008" rid="ref-4469889" ref-type="bibr">Duan
  et al., 2008</xref>) exists
  (<xref alt="cpvlordelo, 2021" rid="ref-cpvlordelo" ref-type="bibr">cpvlordelo,
  2021</xref>), but this algorithm focuses on learning harmonic models
  of specific instruments rather than as a general feature-engineering
  technique.</p>
</sec>
<sec id="algorithm-details">
  <title>Algorithm Details</title>
  <p>This section describes technical details of each algorithm included
  in the DASP library, shows an example figure of the output using a
  data sample which collected the electromagnetic spectrum around two
  fluorescent lightbulbs at a sample rate of 2 megasamples per second,
  and provides pseudocode for the general structure of the
  algorithm.</p>
  <sec id="harmonically-aligned-signal-projection">
    <title>Harmonically Aligned Signal Projection</title>
    <p>Each HASP algorithm follows the general structure of first
    calculating the appropriate step size to locate the index of each
    harmonic center, extracting the value at each index (harmonic
    center) along with an equal number of adjacent points from each
    side, and then unioning these equally sized segments before
    outputting them as one HASP array.</p>
    <sec id="fixed">
      <title>Fixed</title>
      <p>Fixed HASP groups each harmonic center with its surrounding
      points using a fixed number of points. See Figure 2 below.</p>
      <fig>
        <caption><p>(Left) Normalized and scaled fixed HASP image with a
        base frequency of 45,033 hertz. (Right) Fixed HASP
        pseudocode.</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="fixed_hasp_with_pseudo.png" />
      </fig>
    </sec>
    <sec id="decimating">
      <title>Decimating</title>
      <p>Decimating HASP groups each harmonic center with its
      surrounding points, allowing the number of points to grow as the
      harmonics (and frequency) increase, and then decimates each
      harmonic (row) to be equal to the number of points in the row with
      the lowest frequency (and by extension the smallest number of
      points). See Figure 3 below.</p>
      <fig>
        <caption><p>(Left) Normalized and scaled decimating HASP image
        with a base frequency of 45,033 hertz. (Right) Decimating HASP
        pseudocode.</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="decimating_hasp_with_pseudo.png" />
      </fig>
      <p>This version of the algorithm increases resolution at lower
      harmonics.</p>
    </sec>
    <sec id="interpolating">
      <title>Interpolating</title>
      <p>Interpolating HASP groups each harmonic center with its
      surrounding points, allowing the number of points to grow as the
      harmonics (and frequency) increase, and then interpolates each
      harmonic (row) to be equal to the number of points in the highest
      frequency (and by extension the largest row). See Figure 4
      below.</p>
      <fig>
        <caption><p>(Left) Normalized and scaled interpolating HASP
        image with a base frequency of 45,033 hertz. (Right)
        Interpolating HASP pseudocode.</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="interpolating_hasp_with_pseudo.png" />
      </fig>
      <p>This version of the algorithm increases resolution at higher
      harmonics.</p>
    </sec>
  </sec>
  <sec id="frequency-aligned-signal-projection">
    <title>Frequency Aligned Signal Projection</title>
    <p>FASP simply creates a spectogram of the input signal. See Figure
    5 below. </p>
    <fig>
      <caption><p>(Left) Normalized FASP image with normalized rows.
      (Right) FASP pseudocode.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="fasp_with_pseudo.png" />
    </fig>
  </sec>
</sec>
<sec id="audience">
  <title>Audience</title>
  <p>The target audience for a DASP algorithms library is researchers,
  data scientists, and engineers in the field of signal processing who
  want to use machine learning as a tool for identifying patterns in
  signals.</p>
  <p>This open-source software is licensed under a BSD-3 clause license,
  is registered on
  <ext-link ext-link-type="uri" xlink:href="https://%20doi:10.11578/dc.20220208.1">DOE
  Code</ext-link>, and is available on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ORNL/dasp-stacker">GitHub</ext-link>.
  The package is also pip installable with
  <monospace>pip install dasp-stacker</monospace>. Finally, linting for
  this project is performed using black
  (<xref alt="Python Software Foundation, 2022" rid="ref-black-linter" ref-type="bibr">Python
  Software Foundation, 2022</xref>) and flake8
  (<xref alt="Python Code Quality Authority, 2023" rid="ref-flake8" ref-type="bibr">Python
  Code Quality Authority, 2023</xref>) as well as other pre-commit hooks
  with pre-commit
  (<xref alt="pre-commit Organization, 2023" rid="ref-precommit" ref-type="bibr">pre-commit
  Organization, 2023</xref>).</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors would like to acknowledge the US Department of Energy,
  National Nuclear Security Administration’s Office of Defense Nuclear
  Nonproliferation Research and Development (NA-22) for supporting this
  work.</p>
  <p>This manuscript has been authored by UT-Battelle, LLC, under
  contract DE-AC05-00OR22725 with the US Department of Energy (DOE). The
  US government retains and the publisher, by accepting the article for
  publication, acknowledges that the US government retains a
  nonexclusive, paid-up, irrevocable, worldwide license to publish or
  reproduce the published form of this manuscript, or allow others to do
  so, for US government purposes. DOE will provide public access to
  these results of federally sponsored research in accordance with the
  DOE Public Access Plan
  (http://energy.gov/downloads/doe-public-access-plan).</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-black-linter">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Python Software Foundation</string-name>
      </person-group>
      <article-title>Black - the uncompromising code formatter</article-title>
      <publisher-name>https://github.com/psf/black</publisher-name>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-flake8">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Python Code Quality Authority</string-name>
      </person-group>
      <article-title>Flake8 - your tool for style guide enforcement</article-title>
      <publisher-name>https://flake8.pycqa.org/en/latest/</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-precommit">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>pre-commit Organization</string-name>
      </person-group>
      <article-title>Pre-commit - a framework for managing and maintaining multi-language pre-commit hooks.</article-title>
      <publisher-name>https://pre-commit.com/</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-7907255">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vann</surname><given-names>Jason Michael</given-names></name>
        <name><surname>Karnowski</surname><given-names>Thomas P.</given-names></name>
        <name><surname>Kerekes</surname><given-names>Ryan</given-names></name>
        <name><surname>Cooke</surname><given-names>Corey D.</given-names></name>
        <name><surname>Anderson</surname><given-names>Adam L.</given-names></name>
      </person-group>
      <article-title>A dimensionally aligned signal projection for classification of unintended radiated emissions</article-title>
      <source>IEEE Transactions on Electromagnetic Compatibility</source>
      <year iso-8601-date="2018">2018</year>
      <volume>60</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1109/TEMC.2017.2692962</pub-id>
      <fpage>122</fpage>
      <lpage>131</lpage>
    </element-citation>
  </ref>
  <ref id="ref-batra2014nilmtk">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Batra</surname><given-names>Nipun</given-names></name>
        <name><surname>Kelly</surname><given-names>Jack</given-names></name>
        <name><surname>Parson</surname><given-names>Oliver</given-names></name>
        <name><surname>Dutta</surname><given-names>Haimonti</given-names></name>
        <name><surname>Knottenbelt</surname><given-names>William</given-names></name>
        <name><surname>Rogers</surname><given-names>Alex</given-names></name>
        <name><surname>Singh</surname><given-names>Amarjeet</given-names></name>
        <name><surname>Srivastava</surname><given-names>Mani</given-names></name>
      </person-group>
      <article-title>NILMTK: An open source toolkit for non-intrusive load monitoring</article-title>
      <source>Proceedings of the 5th international conference on future energy systems</source>
      <year iso-8601-date="2014">2014</year>
      <fpage>265</fpage>
      <lpage>276</lpage>
    </element-citation>
  </ref>
  <ref id="ref-boegner2022large">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Boegner</surname><given-names>Luke</given-names></name>
        <name><surname>Gulati</surname><given-names>Manbir</given-names></name>
        <name><surname>Vanhoy</surname><given-names>Garrett</given-names></name>
        <name><surname>Vallance</surname><given-names>Phillip</given-names></name>
        <name><surname>Comar</surname><given-names>Bradley</given-names></name>
        <name><surname>Kokalj-Filipovic</surname><given-names>Silvija</given-names></name>
        <name><surname>Lennon</surname><given-names>Craig</given-names></name>
        <name><surname>Miller</surname><given-names>Robert D.</given-names></name>
      </person-group>
      <article-title>Large scale radio frequency signal classification</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://arxiv.org/abs/2207.09918</uri>
    </element-citation>
  </ref>
  <ref id="ref-4469889">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Duan</surname><given-names>Zhiyao</given-names></name>
        <name><surname>Zhang</surname><given-names>Yungang</given-names></name>
        <name><surname>Zhang</surname><given-names>Changshui</given-names></name>
        <name><surname>Shi</surname><given-names>Zhenwei</given-names></name>
      </person-group>
      <article-title>Unsupervised single-channel music source separation by average harmonic structure modeling</article-title>
      <source>IEEE Transactions on Audio, Speech, and Language Processing</source>
      <year iso-8601-date="2008">2008</year>
      <volume>16</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/TASL.2008.919073</pub-id>
      <fpage>766</fpage>
      <lpage>778</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cpvlordelo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>cpvlordelo</surname></name>
      </person-group>
      <article-title>Source-separation-AHS</article-title>
      <source>GitHub repository</source>
      <publisher-name>https://github.com/cpvlordelo/source-separation-AHS; GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
