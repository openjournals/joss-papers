<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3959</article-id>
<article-id pub-id-type="doi">10.21105/joss.03959</article-id>
<title-group>
<article-title>Dune-MMesh: The Dune Grid Module for Moving
Interfaces</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2566-9777</contrib-id>
<name>
<surname>Burbulla</surname>
<given-names>Samuel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Dedner</surname>
<given-names>Andreas</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Hörl</surname>
<given-names>Maximilian</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Rohde</surname>
<given-names>Christian</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University of Stuttgart, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of Warwick, UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-10-05">
<day>5</day>
<month>10</month>
<year>2021</year>
</pub-date>
<volume>7</volume>
<issue>74</issue>
<fpage>3959</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>C++</kwd>
<kwd>Dune</kwd>
<kwd>partial differential equations</kwd>
<kwd>mixed-dimensional</kwd>
<kwd>moving mesh</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>In several physical and environmental processes that concern
  multiphase flows, biological systems, and geophysical phenomena,
  important physical processes occur along thin physical interfaces.
  These processes include effects that may alter the interface’s
  position or topology over time creating a moving interface, which
  complicates traditional modeling techniques. Moving interface problems
  thus require advanced numerical tools with specific treatment of the
  interface and the simultaneous ability to implement complex physical
  effects, which this work seeks to create solutions for.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>In this work, we present Dune-MMesh that is tailored for numerical
  applications with moving physical interfaces. Dune-MMesh is an
  implementation of the well-developed Dune
  (<xref alt="Bastian et al., 2021" rid="ref-BBDU002B21" ref-type="bibr">Bastian
  et al., 2021</xref>) grid interface and is well-suited for the
  numerical discretization of partial differential equations (PDEs). The
  package wraps two and three dimensional CGAL triangulations
  (<xref alt="The CGAL Project, 2020" rid="ref-CGAL" ref-type="bibr">The
  CGAL Project, 2020</xref>) in high-level objects like intersections of
  grid entities, index and id sets and geometry transformations and
  exports a predefined set of facets as a separate interface grid. In
  two dimensions, the arbitrary movement of vertices is enhanced with a
  re-meshing algorithm that implements non-hierarchical adaptation
  procedures. Besides the adaptation of the triangulation, Dune-MMesh
  provides the necessary data structures to adapt discrete functions
  defined on the bulk grid or the interface. This adaptation approach
  complements existing grid implementations within the Dune framework
  that strictly rely on hierarchical adaptation. Various examples in
  Python have been implemented based on the discretization module
  Dune-Fem
  (<xref alt="Dedner et al., 2020" rid="ref-DNK20" ref-type="bibr">Dedner
  et al., 2020</xref>) that demonstrate the versatile applicability of
  Dune-MMesh. Due to the ability to handle custom PDEs in their weak
  from written in Unified Form Language (UFL) and the mesh adaptation
  capabilities, we believe Dune-MMesh provides a useful tool for solving
  mixed-dimensional PDEs on moving interfaces that arise from various
  fields of modelling.</p>
</sec>
<sec id="cgal-wrapper">
  <title>CGAL Wrapper</title>
  <p>In its core, Dune-MMesh is a wrapper of CGAL Triangulations in
  <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbb{R}^d, d = 2, 3,]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msup><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle><mml:mi>d</mml:mi></mml:msup><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
  that implements the Dune grid interface. A CGAL triangulation is a set
  of simplicial cells and vertices where each cell gives access to its
  <inline-formula><alternatives>
  <tex-math><![CDATA[d+1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  incident vertices and cells. Facets are not explicitly represented: a
  facet is given by the pair of a cell <inline-formula><alternatives>
  <tex-math><![CDATA[c]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>c</mml:mi></mml:math></alternatives></inline-formula>
  and an index <inline-formula><alternatives>
  <tex-math><![CDATA[i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>i</mml:mi></mml:math></alternatives></inline-formula>
  and has two implicit representations. For
  <inline-formula><alternatives>
  <tex-math><![CDATA[d=3]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
  edges are represented by triples of a cell
  <inline-formula><alternatives>
  <tex-math><![CDATA[c]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>c</mml:mi></mml:math></alternatives></inline-formula>
  and two indices <inline-formula><alternatives>
  <tex-math><![CDATA[i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>i</mml:mi></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[j]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>j</mml:mi></mml:math></alternatives></inline-formula>
  that indicate the two vertices of the edge.</p>
  <fig>
    <caption><p>CGAL representation of cells and differing Dune
    numbering in brackets. The vertex numbering is maintained, facets
    are renumbered, and the edges of tetrahedrons are equipped with
    indices according to the Dune reference element numbering.
    <styled-content id="figU003Awrapper"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/wrapper.png" xlink:title="" />
  </fig>
  <p>In order to match the Dune grid reference cell numbering we apply
  an index mapping, cf. Figure
  <xref alt="1" rid="figU003Awrapper">1</xref>. Here, the edges of
  tetrahedrons are equipped with indices according to the Dune reference
  element numbering. Dune intersections, i.e., intersections of mesh
  entities of codimension 0 with a neighboring element or with the
  domain boundary, can directly be represented by CGAL’s cell-index
  representations of facets which are already equipped with an
  orientation. The index and id sets of the Dune grid interface are
  realized by consecutive numbering of cells and vertices. Various
  iterators of CGAL triangulations can directly be used to construct the
  Dune grid range generators. Additional (non-standard Dune) iterators
  have been added, e.g. iterating over incident cells of a vertex.</p>
</sec>
<sec id="interface-grid">
  <title>Interface Grid</title>
  <p>Consider a domain <inline-formula><alternatives>
  <tex-math><![CDATA[\Omega \subset \mathbb{R}^d, d \in \{2,3\},]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>Ω</mml:mi><mml:mo>⊂</mml:mo><mml:msup><mml:mstyle mathvariant="double-struck"><mml:mi>ℝ</mml:mi></mml:mstyle><mml:mi>d</mml:mi></mml:msup><mml:mo>,</mml:mo><mml:mi>d</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
  that includes a <inline-formula><alternatives>
  <tex-math><![CDATA[(d-1)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>d</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>-dimensional
  interface <inline-formula><alternatives>
  <tex-math><![CDATA[\Gamma \subset \Omega]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>Γ</mml:mi><mml:mo>⊂</mml:mo><mml:mi>Ω</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
  as depicted in Figure
  <xref alt="2" rid="figU003Atriangulation">2</xref>. We assume the
  domain is triangulated conforming to the interface
  <inline-formula><alternatives>
  <tex-math><![CDATA[\Gamma]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>Γ</mml:mi></mml:math></alternatives></inline-formula>.</p>
  <fig>
    <caption><p>A domain with a T-shaped interface and an example for a
    conforming
    triangulation.<styled-content id="figU003Atriangulation"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/triangulation.png" xlink:title="" />
  </fig>
  <p>Dune-MMesh features a second implementation of the Dune grid
  interface that represents the interface triangulation. Here, a codim-0
  entity of the interface grid is represented by a CGAL cell-index pair.
  The interface grid also supports networks, cf. Figure
  <xref alt="3" rid="figU003Ajunction">3</xref>, and it is possible to
  convert bulk intersections to interface grid cells and vice versa.</p>
  <fig>
    <caption><p>Outer normals at
    junctions.<styled-content id="figU003Ajunction"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/junction.png" xlink:title="" />
  </fig>
</sec>
<sec id="moving-mesh">
  <title>Moving Mesh</title>
  <p>Most interface driven-problems have time-dependent interfaces
  <inline-formula><alternatives>
  <tex-math><![CDATA[\Gamma = \Gamma(t)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>Γ</mml:mi><mml:mo>=</mml:mo><mml:mi>Γ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.
  Therefore, Dune-MMesh features capabilities of moving and re-meshing
  in spatial dimension two. Here we follow the approach of moving the
  interface edges and adapt the mesh next to the interface.</p>
  <sec id="moving-vertices">
    <title>Moving Vertices</title>
    <p>We assume that movement is given by a shift of interface vertices
    (or all grid vertices), cf. Figure
    <xref alt="4" rid="figU003Amovmark">4</xref> (left).</p>
    <fig>
      <caption><p>Left: Moving the interface is performed by shifting
      vertices. The blue shift vectors tranform the gray two-dimensional
      triangulation into the black one. Right: Marking cells for
      refinement (green) or coarsening
      (red).<styled-content id="figU003Amovmark"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/movmark.png" xlink:title="" />
    </fig>
    <p>To prevent degeneration of the triangulation, i.e. cells have
    non-positive volume, Dune-MMesh is equipped with re-meshing routines
    that will be described in the subsequent.</p>
  </sec>
  <sec id="adaptation">
    <title>Adaptation</title>
    <p>Adaptation in Dune is usually hierarchical by definition and the
    adaptation procedure is performed in two stages:</p>
    <list list-type="order">
      <list-item>
        <p>Mark: Grid cells are marked for coarsening or refinement.</p>
      </list-item>
      <list-item>
        <p>Adapt: The cells are modified due to their markers and
        discrete functions are restricted or prolongated.</p>
      </list-item>
    </list>
    <p>In Dune-MMesh, due to the moving mesh, non-hierarchic adaptation
    is unavoidable. However, we will try to follow the general Dune
    approach and separate the adaptation into two stages.</p>
    <p><bold>Stage 1: Mark</bold></p>
    <p>Dune-MMesh provides utility functions to mark cells either in
    expectation of a movement of vertices or regarding to their current
    geometrical properties, cf. Figure
    <xref alt="4" rid="figU003Amovmark">4</xref> (right). For instance,
    when moving the interface would cause a cell to get a negative
    volume, we mark this cell for coarsening (marked red in Figure
    <xref alt="4" rid="figU003Amovmark">4</xref>). Similarly, we use the
    edge length as indicator for coarsening or refinement (marked
    green). However, one can also use a proprietary procedure marking
    cells manually, or one can insert and remove vertices directly.</p>
    <p><bold>Stage 2: Adapt</bold></p>
    <p>After marking cells an adapt routine performs the actual
    adaptation process. The adaptation is performed by insertion and
    removal of points.</p>
    <fig>
      <caption><p>Left: Inserting and removing points. Right: Connected
      components.<styled-content id="figU003Aadaptconn"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/adaptconn.png" xlink:title="" />
    </fig>
    <p>In each cell that is marked for refinement we bisect the longest
    edge, cf. Figure <xref alt="5" rid="figU003Aadaptconn">5</xref>
    (left). In all cells marked for coarsening, the least important
    vertex is removed. When a vertex is removed, the resulting
    star-shaped hole is re-triangulated with respect to the
    interface.</p>
    <p>For the purpose of projection, we introduce , see Figure
    <xref alt="5" rid="figU003Aadaptconn">5</xref> (right), and
    implement a generalized callback adaptation in Dune-Fem.</p>
    <fig>
      <caption><p>Non-hierarchic projection with cut-set
      triangulation.<styled-content id="figU003Aprojection"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/projection.png" xlink:title="" />
    </fig>
    <p>A conservative projection of discrete functions can be performed
    by intermediate prolongation and restriction on the cut-set cells,
    cf. Figure <xref alt="6" rid="figU003Aprojection">6</xref>. We use a
    similar concept on the interface grid that enables projection of
    discrete functions on the interface.</p>
  </sec>
</sec>
<sec id="trace-and-skeleton">
  <title>Trace and skeleton</title>
  <p>Dune-MMesh exports both traces of bulk discrete functions on the
  interface and skeleton representations of interface discrete functions
  on bulk edges.</p>
  <p>The trace is a discrete function on the interface grid that
  evaluates a given bulk discrete function. It can be restricted to both
  sides of the interface and might be used in UFL forms.</p>
  <p>Analogously, the skeleton function is a discrete function that
  returns the interface’s discrete function values on interface bulk
  facets.</p>
  <p>Both <monospace>trace</monospace> and
  <monospace>skeleton</monospace> can be used to couple bulk and
  interface problems. Such couplings occur, for example, in
  mixed-dimensional PDEs.</p>
</sec>
<sec id="coupled-solve">
  <title>Coupled solve</title>
  <p>We provide two helper functions to solve bulk and interface schemes
  in a coupled way.</p>
  <p>The first method <monospace>iterativeSolve</monospace> uses an
  iterative solution strategy which alternately solves both schemes
  until the two norm between two iterates is below an objective
  tolerance.</p>
  <p>The second helper function <monospace>monolithicSolve</monospace>
  solves bulk and interface scheme coupled monolithically. A newton
  method is implemented assembling the underlying jacobian matrix where
  the coupling jacobian blocks are evaluated by finite differences.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>We implemented a few examples to display how Dune-MMesh can be used
  in different contexts. All examples can be found in
  <ext-link ext-link-type="uri" xlink:href="https://github.com/samuelburbulla/dune-mmesh/tree/master/doc/examples"><monospace>dune-mmesh/doc/examples</monospace></ext-link>
  as IPython notebooks. Some numerical results of these examples are
  visualized in Figure <xref alt="7" rid="figU003Afvmm">7</xref>, Figure
  <xref alt="8" rid="figU003Aporo">8</xref> and Figure
  <xref alt="9" rid="figU003Anavierstokes">9</xref>.</p>
  <fig>
    <caption><p>Finite volume moving mesh method to track a
    discontinuity
    (<xref alt="Chalons et al., 2018" rid="ref-CMRU002B18" ref-type="bibr">Chalons
    et al.,
    2018</xref>)<styled-content id="figU003Afvmm"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/fvmm.png" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Mixed-dimensional model of poro-elasticity with a
    T-shaped
    fracture.<styled-content id="figU003Aporo"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/poro.png" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Two-phase Navier-Stokes equation
    (<xref alt="Gerstenberger et al., 2020" rid="ref-GBK20" ref-type="bibr">Gerstenberger
    et al.,
    2020</xref>).<styled-content id="figU003Anavierstokes"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/img/navierstokes.png" xlink:title="" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Funded by the Deutsche Forschungsgemeinschaft (DFG, German Research
  Foundation) - Project Number 327154368 - SFB 1313.</p>
  <p>We thank all contributors that improved Dune-MMesh via the GitLab
  repository, especially Timo Koch.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-BBDU002B21">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bastian</surname><given-names>P.</given-names></name>
        <name><surname>Blatt</surname><given-names>M.</given-names></name>
        <name><surname>Dedner</surname><given-names>A.</given-names></name>
        <name><surname>Dreier</surname><given-names>N.-A.</given-names></name>
        <name><surname>Engwer</surname><given-names>C.</given-names></name>
        <name><surname>Fritze</surname><given-names>R.</given-names></name>
        <name><surname>Gräser</surname><given-names>C.</given-names></name>
        <name><surname>Grüninger</surname><given-names>C.</given-names></name>
        <name><surname>Kempf</surname><given-names>D.</given-names></name>
        <name><surname>Klöfkorn</surname><given-names>R.</given-names></name>
        <name><surname>Ohlberger</surname><given-names>M.</given-names></name>
        <name><surname>Sander</surname><given-names>O.</given-names></name>
      </person-group>
      <article-title>The DUNE framework: Basic concepts and recent developments</article-title>
      <source>Computers &amp; Mathematics with Applications</source>
      <year iso-8601-date="2021">2021</year>
      <volume>81</volume>
      <pub-id pub-id-type="doi">10.1016/j.camwa.2020.06.007</pub-id>
      <fpage>75</fpage>
      <lpage>112</lpage>
    </element-citation>
  </ref>
  <ref id="ref-CGAL">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <string-name>The CGAL Project</string-name>
      </person-group>
      <article-title>CGAL user and reference manual</article-title>
      <source>CGAL Editorial Board</source>
      <year iso-8601-date="2020">2020</year>
      <volume>5.2 edition</volume>
    </element-citation>
  </ref>
  <ref id="ref-DNK20">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Dedner</surname><given-names>A.</given-names></name>
        <name><surname>Nolte</surname><given-names>M.</given-names></name>
        <name><surname>Klöfkorn</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>Python bindings for the DUNE-FEM module.</article-title>
      <source>Zenodo</source>
      <year iso-8601-date="2020">2020</year>
      <pub-id pub-id-type="doi">10.5281/zenodo.3706994</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-CMRU002B18">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chalons</surname><given-names>C.</given-names></name>
        <name><surname>Magiera</surname><given-names>J.</given-names></name>
        <name><surname>Rohde</surname><given-names>C.</given-names></name>
        <name><surname>Wiebe</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>A finite-volume tracking scheme for two-phase compressible flow</article-title>
      <source>Theory and Numerics and Applications of Hyperbolic Problems I</source>
      <year iso-8601-date="2018">2018</year>
      <pub-id pub-id-type="doi">10.1007/978-3-319-91545-6_25</pub-id>
      <fpage>309</fpage>
      <lpage>322</lpage>
    </element-citation>
  </ref>
  <ref id="ref-GBK20">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gerstenberger</surname><given-names>J.</given-names></name>
        <name><surname>Burbulla</surname><given-names>S.</given-names></name>
        <name><surname>Kröner</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>Discontinuous galerkin method for incompressible two-phase flows</article-title>
      <source>Finite Volumes for Complex Applications IX - Methods and Theoretical Aspects and Examples</source>
      <year iso-8601-date="2020">2020</year>
      <fpage>675</fpage>
      <lpage>683</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
