<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7946</article-id>
<article-id pub-id-type="doi">10.21105/joss.07946</article-id>
<title-group>
<article-title>abspy: A Python package for 3D adaptive binary space
partitioning and modeling</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7084-0994</contrib-id>
<name>
<surname>Chen</surname>
<given-names>Zhaiyu</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Technical University of Munich, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-02-20">
<day>20</day>
<month>2</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>110</issue>
<fpage>7946</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>3D modeling</kwd>
<kwd>point cloud</kwd>
<kwd>binary space partitioning</kwd>
<kwd>surface reconstruction</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Efficient and robust space partitioning of 3D space underpins many
  applications in computer graphics. <italic>abspy</italic> is a Python
  package for adaptive binary space partitioning and 3D modeling. At its
  core, <italic>abspy</italic> constructs a plane arrangement by
  recursively subdividing 3D space with planar primitives to form a
  linear cell complex that reflects the underlying geometric structure.
  This adaptive scheme iteratively refines the spatial decomposition,
  producing a compact representation that supports efficient 3D modeling
  and analysis. Built on robust arithmetic kernels and interoperable
  data structures, <italic>abspy</italic> exposes a high‑level Python
  API that lets researchers prototype advanced 3D pipelines such as
  surface reconstruction, volumetric analysis, and feature extraction
  for machine learning.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>In many scientific and engineering workflows, raw 3D data must be
  transformed into compact volumetric representations for visualization,
  simulation, and analysis of complex 3D environments. Sensor-acquired
  point clouds and photogrammetric meshes often contain hundreds of
  millions of irregular, noisy samples that are expensive to store,
  transmit, and query, and that provide little inherent structure.
  Converting such data into a well-defined spatial decomposition, in
  which each cell represents a coherent geometric region, reduces memory
  usage, spares downstream algorithms from ad-hoc filtering and enables
  exact spatial predicates such as intersection, containment, and
  adjacency. The central challenge is to obtain this decomposition
  without inheriting the aliasing artefacts of coarse voxel grids or the
  combinatorial explosion produced by exhaustive plane arrangements
  (<xref alt="Edelsbrunner et al., 1986" rid="ref-edelsbrunner1986constructing" ref-type="bibr">Edelsbrunner
  et al., 1986</xref>).</p>
  <p><italic>How can 3D space be partitioned into a minimal yet
  meaningful set of units that faithfully capture geometric
  detail?</italic> Adaptive binary space partitioning (BSP)
  (<xref alt="Murali &amp; Funkhouser, 1997" rid="ref-murali1997consistent" ref-type="bibr">Murali
  &amp; Funkhouser, 1997</xref>) addresses this challenge by dynamically
  subdividing 3D space according to the data’s intrinsic features,
  constructing a plane arrangement that conforms to geometric
  boundaries. Despite its theoretical advantages, a high-level
  implementation suitable for modern research use cases has been
  missing. <italic>abspy</italic> fills this gap with a modern Python
  API for adaptive partitioning that delivers reliable and efficient 3D
  modeling. Researchers can thus tackle large-scale and complex
  reconstruction challenges with great reliability and precision. Unlike
  general-purpose libraries such as CGAL
  (<xref alt="Fabri &amp; Pion, 2009" rid="ref-fabri2009cgal" ref-type="bibr">Fabri
  &amp; Pion, 2009</xref>) and Open3D
  (<xref alt="Zhou et al., 2018" rid="ref-zhou2018open3d" ref-type="bibr">Zhou
  et al., 2018</xref>), which mainly supply low-level geometric
  utilities, <italic>abspy</italic> uniquely integrates adaptive BSP and
  exact arithmetic within a single framework, facilitating direct
  integration into research workflows tailored for compact, dynamic 3D
  modeling tasks and beyond.</p>
  <p><xref alt="[fig:2d]" rid="figU003A2d">[fig:2d]</xref> illustrates
  how <italic>abspy</italic> uses user-supplied or extracted planar
  primitives to recursively subdivide space into a convex cell complex.
  Beginning with user-supplied planes, we insert each plane only into
  the BSP-tree leaves whose bounding boxes it intersects. This local,
  on-demand splitting keeps every cell convex, updates adjacency on the
  fly, and, by skipping unrelated plane pairs, avoids the prohibitive
  cost of exhaustive arrangements. The result is a compact cell complex.
  Initially developed for research purposes, <italic>abspy</italic> has
  since evolved to support diverse 3D applications, particularly for
  compact surface reconstructions. It has been employed in several
  research projects and featured in scientific publications
  (<xref alt="Chen et al., 2022" rid="ref-chen2022points2poly" ref-type="bibr">Chen
  et al., 2022</xref>,
  <xref alt="2024" rid="ref-chen2024polygnn" ref-type="bibr">2024</xref>;
  <xref alt="Sulzer &amp; Lafarge, 2024" rid="ref-sulzer2024concise" ref-type="bibr">Sulzer
  &amp; Lafarge, 2024</xref>) as well as graduate students’
  projects.</p>
  <fig>
    <caption><p>A 2D illustration for adaptive binary space
    partitioning. The ambient space is recursively partitioned into a
    cell complex with the insertion of planar
    primitives.<styled-content id="figU003A2d"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="2d.png" />
  </fig>
</sec>
<sec id="overview-of-features">
  <title>Overview of features</title>
  <p>The core features of <italic>abspy</italic> include:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Planar primitive manipulation:</bold>
      <italic>abspy</italic> extracts planar primitives from point
      clouds or meshes, and refines or perturbs the primitives to
      control noise, ensuring a robust representation of the input
      geometric structures.</p>
    </list-item>
    <list-item>
      <p><bold>Linear cell complex construction:</bold> Using adaptive
      binary space partitioning, <italic>abspy</italic> recursively
      subdivides 3D space into a cell complex that reflects the data’s
      spatial layout. This structured decomposition facilitates
      efficient spatial queries and further processing.</p>
    </list-item>
    <list-item>
      <p><bold>Dynamic graph generation:</bold> The package iteratively
      constructs and updates a BSP-tree as a dynamic graph, supporting
      operations like connectivity analysis and neighborhood
      searches.</p>
    </list-item>
    <list-item>
      <p><bold>Robust spatial operations:</bold> By leveraging the
      rational ring from SageMath
      (<xref alt="The SageMath Developers, 2025" rid="ref-sage2024sage" ref-type="bibr">The
      SageMath Developers, 2025</xref>), <italic>abspy</italic> performs
      exact geometric computations that avoid inaccuracies associated
      with floating-point arithmetic, leading to reliable intersection
      tests and robust boundary determinations.</p>
    </list-item>
    <list-item>
      <p><bold>Surface reconstruction:</bold> <italic>abspy</italic>
      identifies boundaries between interior and exterior cells to
      reconstruct polygonal surfaces using graph cuts, enabling the
      generation of surface models suitable for visualization and
      analysis.</p>
    </list-item>
    <list-item>
      <p><bold>Ease of integration:</bold> With a Pythonic interface,
      comprehensive documentation, and practical examples,
      <italic>abspy</italic> integrates smoothly into existing research
      workflows. Its data structures are designed for interoperability
      with tools such as NetworkX
      (<xref alt="Hagberg et al., 2008" rid="ref-hagberg2008exploring" ref-type="bibr">Hagberg
      et al., 2008</xref>) and Easy3D
      (<xref alt="Nan, 2021" rid="ref-nan2021easy3d" ref-type="bibr">Nan,
      2021</xref>), facilitating further development.</p>
    </list-item>
  </list>
  <p><xref alt="[fig:3d]" rid="figU003A3d">[fig:3d]</xref> showcases a
  few geometric representations that <italic>abspy</italic> can provide.
  From an input point cloud, for example, the library can manipulate
  points grouped by their supporting planar primitives, build a linear
  cell complex with its adaptive partitioning routine, extract a
  watertight polygonal surface from that complex through its graph-cut
  API, and sample representative points from the cells with the built-in
  samplers. These representations allow users to choose whichever level
  of abstraction best fits their application or to combine several of
  them as needed. The
  <ext-link ext-link-type="uri" xlink:href="https://abspy.readthedocs.io/">documentation
  of <italic>abspy</italic></ext-link> contains tutorials for the
  package, its API reference, and file format specifications.</p>
  <fig>
    <caption><p>An overview of representations supported by
    <italic>abspy</italic>, shown left to right: points grouped and
    colored by planar primitives; cell complex of colored polyhedral
    volumes generated by adaptive space partitioning; reconstructed
    surface mesh; and sampled representative points from each cell
    volume, colored to match their
    cells.<styled-content id="figU003A3d"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="3d.png" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank Liangliang Nan, Hugo Ledoux, Yuqing Wang, Qian Bai, and
  the JOSS reviewers for bug fixes, testing, and feedback. This work was
  supported in part by TUM Georg Nemetschek Institute under the
  AI4TWINNING project.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-edelsbrunner1986constructing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Edelsbrunner</surname><given-names>Herbert</given-names></name>
        <name><surname>O’Rourke</surname><given-names>Joseph</given-names></name>
        <name><surname>Seidel</surname><given-names>Raimund</given-names></name>
      </person-group>
      <article-title>Constructing arrangements of lines and hyperplanes with applications</article-title>
      <source>SIAM Journal on Computing</source>
      <publisher-name>SIAM</publisher-name>
      <year iso-8601-date="1986">1986</year>
      <volume>15</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1109/sfcs.1983.11</pub-id>
      <fpage>341</fpage>
      <lpage>363</lpage>
    </element-citation>
  </ref>
  <ref id="ref-murali1997consistent">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Murali</surname><given-names>TM</given-names></name>
        <name><surname>Funkhouser</surname><given-names>Thomas A</given-names></name>
      </person-group>
      <article-title>Consistent solid and boundary representations from arbitrary polygonal data</article-title>
      <source>Proceedings of the symposium on interactive 3D graphics</source>
      <year iso-8601-date="1997">1997</year>
      <pub-id pub-id-type="doi">10.1145/253284.253326</pub-id>
      <fpage>155</fpage>
      <lpage>162</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hagberg2008exploring">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Hagberg</surname><given-names>Aric</given-names></name>
        <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
        <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
      </person-group>
      <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
      <publisher-name>Los Alamos National Laboratory (LANL), Los Alamos, NM (United States)</publisher-name>
      <year iso-8601-date="2008-01">2008</year><month>01</month>
      <uri>https://www.osti.gov/biblio/960616</uri>
      <pub-id pub-id-type="doi">10.25080/tcwv9851</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-nan2021easy3d">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nan</surname><given-names>Liangliang</given-names></name>
      </person-group>
      <article-title>Easy3D: A lightweight, easy-to-use, and efficient C++ library for processing and rendering 3D data</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2021">2021</year>
      <volume>6</volume>
      <issue>64</issue>
      <uri>https://doi.org/10.21105/joss.03255</uri>
      <pub-id pub-id-type="doi">10.21105/joss.03255</pub-id>
      <fpage>3255</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-chen2022points2poly">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chen</surname><given-names>Zhaiyu</given-names></name>
        <name><surname>Ledoux</surname><given-names>Hugo</given-names></name>
        <name><surname>Khademi</surname><given-names>Seyran</given-names></name>
        <name><surname>Nan</surname><given-names>Liangliang</given-names></name>
      </person-group>
      <article-title>Reconstructing compact building models from point clouds using deep implicit fields</article-title>
      <source>ISPRS Journal of Photogrammetry and Remote Sensing</source>
      <year iso-8601-date="2022">2022</year>
      <volume>194</volume>
      <issn>0924-2716</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0924271622002611</uri>
      <pub-id pub-id-type="doi">10.1016/j.isprsjprs.2022.09.017</pub-id>
      <fpage>58</fpage>
      <lpage>73</lpage>
    </element-citation>
  </ref>
  <ref id="ref-chen2024polygnn">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chen</surname><given-names>Zhaiyu</given-names></name>
        <name><surname>Shi</surname><given-names>Yilei</given-names></name>
        <name><surname>Nan</surname><given-names>Liangliang</given-names></name>
        <name><surname>Xiong</surname><given-names>Zhitong</given-names></name>
        <name><surname>Zhu</surname><given-names>Xiao Xiang</given-names></name>
      </person-group>
      <article-title>PolyGNN: Polyhedron-based graph neural network for 3D building reconstruction from point clouds</article-title>
      <source>ISPRS Journal of Photogrammetry and Remote Sensing</source>
      <year iso-8601-date="2024">2024</year>
      <volume>218</volume>
      <issn>0924-2716</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0924271624003691</uri>
      <pub-id pub-id-type="doi">10.1016/j.isprsjprs.2024.09.031</pub-id>
      <fpage>693</fpage>
      <lpage>706</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sulzer2024concise">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Sulzer</surname><given-names>Raphael</given-names></name>
        <name><surname>Lafarge</surname><given-names>Florent</given-names></name>
      </person-group>
      <article-title>Concise plane arrangements for low-poly surface and volume modelling</article-title>
      <source>Computer vision – ECCV 2024</source>
      <publisher-name>Springer Nature Switzerland</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2024">2024</year>
      <isbn>978-3-031-72904-1</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-031-72904-1_21</pub-id>
      <fpage>357</fpage>
      <lpage>373</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sage2024sage">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>The SageMath Developers</string-name>
      </person-group>
      <article-title>SageMath</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2025-01">2025</year><month>01</month>
      <pub-id pub-id-type="doi">10.5281/zenodo.8042260</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-fabri2009cgal">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Fabri</surname><given-names>Andreas</given-names></name>
        <name><surname>Pion</surname><given-names>Sylvain</given-names></name>
      </person-group>
      <article-title>CGAL: The computational geometry algorithms library</article-title>
      <source>Proceedings of the 17th ACM SIGSPATIAL international conference on advances in geographic information systems</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2009">2009</year>
      <isbn>9781605586496</isbn>
      <pub-id pub-id-type="doi">10.1145/1653771.1653865</pub-id>
      <fpage>538</fpage>
      <lpage>539</lpage>
    </element-citation>
  </ref>
  <ref id="ref-zhou2018open3d">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhou</surname><given-names>Qian-Yi</given-names></name>
        <name><surname>Park</surname><given-names>Jaesik</given-names></name>
        <name><surname>Koltun</surname><given-names>Vladlen</given-names></name>
      </person-group>
      <article-title>Open3D: A modern library for 3D data processing</article-title>
      <source>arXiv preprint arXiv:1801.09847</source>
      <year iso-8601-date="2018">2018</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
