<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5868</article-id>
<article-id pub-id-type="doi">10.21105/joss.05868</article-id>
<title-group>
<article-title>Fitspy: A Python package for spectral
decomposition</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0008-6936-1249</contrib-id>
<name>
<surname>Quéméré</surname>
<given-names>Patrick</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Univ. Grenoble Alpes, CEA, Leti, F-38000 Grenoble,
France</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-07-11">
<day>11</day>
<month>7</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>96</issue>
<fpage>5868</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>spectrum</kwd>
<kwd>spectra</kwd>
<kwd>decomposition</kwd>
<kwd>fit</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><bold><monospace>Fitspy</monospace></bold> is a dedicated tool to
  <bold>fit</bold> <bold>sp</bold>ectra in <bold>py</bold>thon. Spectrum
  decomposition (also known as fitting) is the choice of a linear
  combination of peak models to best represent an experimental spectrum.
  <monospace>Fitspy</monospace> currently has implementations for
  Gaussian, Lorentzian, related asymmetric functions and the Pseudovoigt
  as peak models. User-defined models can also be added. For the
  fitting, the model parameters can be subject to bounds and
  constraints. From a practical point of view, the
  <monospace>Fitspy</monospace> GUI (see
  <xref alt="[fig:GUI]" rid="figU003AGUI">[fig:GUI]</xref>) is designed
  to be as simple and intuitive to use as possible.</p>
  <fig>
    <caption><p>The <monospace>Fitpsy</monospace> GUI featuring
    application options on the right-hand side, and in the central area,
    the current experimental spectrum displayed in black, the
    corresponding fit in blue, and the various modeled peaks shown in
    different colors.
    <styled-content id="figU003AGUI"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/0ce8e1fee62014ca872f74a6e17a59a68209f764.png" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The analysis of spectra in many areas of physics, from materials
  characterisation to astrophysics, often requires their decomposition
  into more or less complex models to estimate the composition of the
  subject being analysed. To carry out these decompositions, research
  communities can rely on spectral decomposition tools. While many
  open-source tools for spectral decomposition exist, most of them have,
  however, been designed for specific application domains, offering a
  broad range of services beyond mere spectral fitting. Consequently,
  these tools can prove challenging to use, especially for less
  experienced individuals.</p>
  <p>In the vein of generic tools like <monospace>Fityk</monospace>
  (<xref alt="Wojdyr, 2010" rid="ref-Fityk" ref-type="bibr">Wojdyr,
  2010</xref>) or <monospace>PRISMA</monospace>
  (<xref alt="Flores et al., 2022" rid="ref-PRISMA" ref-type="bibr">Flores
  et al., 2022</xref>), <monospace>Fitspy</monospace> is a dedicated
  tool for spectral fitting — and only spectral fitting — with the
  following characteristics or functionalities:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Agnostic Nature</bold>: <monospace>Fitspy</monospace> is
      not tied to any specific physical quantity or database. It is
      designed to process spectra regardless of their x-support and
      y-intensity without any prior knowledge.</p>
    </list-item>
    <list-item>
      <p><bold>Python Implementation</bold>:
      <monospace>Fitspy</monospace> is coded in Python. As a result, for
      individuals with basic knowledge of the language, spectra can be
      easily processed by scripts.</p>
    </list-item>
    <list-item>
      <p><bold>User Models</bold>: <monospace>Fitspy</monospace> allows
      the user to input their own models either in the form of literal
      expressions (for simple models) or through Python scripts (for
      more complex models).</p>
    </list-item>
    <list-item>
      <p><bold>2D Maps</bold>: <monospace>Fitspy</monospace> has been
      designed to handle spectra derived from 2D acquisitions. Note that
      “2D” can encompass time or any other dimension. When dealing with
      2D data, an interactive map in the <monospace>Fitspy</monospace>
      GUI allows the user to locate and select spectra of interest
      easily.</p>
    </list-item>
    <list-item>
      <p><bold>Multiprocessing Capabilities</bold>:
      <monospace>Fitspy</monospace> enables spectral fit processing on
      multiple processors, enhancing efficiency.</p>
    </list-item>
    <list-item>
      <p><bold>Constrained Parameters</bold>: Leveraging the
      <monospace>lmfit</monospace> library
      (<xref alt="Newville et al., 2014" rid="ref-lmfit" ref-type="bibr">Newville
      et al., 2014</xref>), <monospace>Fitspy</monospace> empowers the
      user to impose constraints on parameter ranges or establish
      constraints between parameters using literal expressions.</p>
    </list-item>
    <list-item>
      <p><bold>Simple GUI</bold>: <monospace>Fitspy</monospace> has been
      designed to be as intuitive and simple to use as possible
      (subjective criterion).</p>
    </list-item>
  </list>
  <p>To the author’s knowledge, although other open-source software
  packages are much more advanced in certain aspects mentioned, none of
  them seem to encompass all the functionalities described above.
  Therefore, the features of <monospace>Fitspy</monospace> make it an
  ideal tool for quickly fitting a few spectra through its GUI or for
  fitting several thousand of spectra (or more) by Python batches, as
  can occur in the context of large-scale parametric studies
  (<xref alt="Meyer et al., 2023" rid="ref-wafer" ref-type="bibr">Meyer
  et al., 2023</xref>).</p>
</sec>
<sec id="fitspy-workflow-short-description">
  <title><monospace>Fitspy</monospace> workflow short
  description</title>
  <p><monospace>Fitspy</monospace> accepts at the time of writing two
  types of input data file formats:</p>
  <list list-type="bullet">
    <list-item>
      <p>a first format where each spectrum is stored individually in a
      <monospace>.txt</monospace> file. The input data file consists of
      a two-column base format, with the first column containing the
      physical support of the spectrum (typically wavelengths) and the
      second to the corresponding spectrum intensity.</p>
    </list-item>
    <list-item>
      <p>the second format is associated with 2D-maps of spectra
      acquisitions. The related spectra are stored in a single file in
      which each spectrum is identified by its grid coordinates
      (X,Y).</p>
    </list-item>
  </list>
  <p>Once loaded in the GUI via a files selection widget, the spectra
  can be processed one by one or in groups (depending on spectra
  selected with the cursor in the file selection widget), or as a whole
  dataset.</p>
  <p>Firstly, the user can choose to reduce the physical support
  (wavelength axis) to a range of interest for subsequent processing.
  They can also activate the <monospace>Attractors</monospace>
  capability, which automatically returns the local maxima of spectra
  obtained with the <italic>signal.find_peaks()</italic> function of the
  <monospace>scipy</monospace> library
  (<xref alt="Gommers et al., 2023" rid="ref-scipy" ref-type="bibr">Gommers
  et al., 2023</xref>). These attractors can be used subsequently to
  normalise spectra or to select points associated with the baseline and
  peaks to be modelled (see below).</p>
  <p>Once the range of interest and the spectra are (optionally)
  normalised, the user can define a <bold>baseline</bold> so that the
  spectra have a common, flat zero-intensity level. This baseline can be
  defined in an automatic way or by the user, who positions
  characteristic points on the figure with the cursor. These points can
  be left at their initial positions or attached to the spectrum profile
  (<monospace>Attached</monospace> mode). In the latter case, the points
  can be attached either to the raw spectrum or to an averaged spectrum
  if the user wishes to attenuate the effects of noise. The baseline is
  then approximated over the entire spectrum range using either
  piecewise linear interpolation or an <italic>n</italic>-order
  polynomial approximation.</p>
  <p>Once the baseline has been subtracted, the next step consists of
  defining the <bold>peaks</bold> of interest for the decomposition.
  This can be done either directly in the figure by clicking, or by an
  <monospace>Auto</monospace> mode which consists of an iterative
  process to automatically determine the main peak locations. Each peak
  is associated with a model, which can be either a predefined
  <monospace>Fitspy</monospace> model (Gaussian model, Lorentzian model,
  their asymmetric variants, or a Pseudovoigt model) or a user-defined
  model issued from literal expressions in a .txt file or from a Python
  script in a .py file. These models rely essentially on 3 main
  parameters: a position, an amplitude and a width (full-width
  half-maximum, FWHM) which is divided into <italic>left</italic> and
  <italic>right</italic> component for an asymmetric model.</p>
  <p>For the fit, an additional background model can be added. Similar
  to peak models, background models can be defined using pre-defined
  models provided by <monospace>Fitspy</monospace> (Constant, Linear,
  Parabolic or Exponential) or by loading user-defined models from .txt
  or .py files.</p>
  <p><bold>Bounds</bold> can be imposed for each of the parameters as
  well as associated <bold>constraints</bold>. If required, these
  constraints can be used to link model parameters with each other, for
  instance in the case where a physical ratio between the amplitudes of
  two peaks is expected.</p>
  <p>Finally, the parameters can be free to evolve during the fit
  processing or maintained fixed at their initial values.</p>
  <p>Several fit options are also proposed, such as:</p>
  <list list-type="bullet">
    <list-item>
      <p>taking into account only the positive values of the
      spectra.</p>
    </list-item>
    <list-item>
      <p>a (limited) choice of minimisation algorithms</p>
    </list-item>
    <list-item>
      <p>the maximum number of fit iterations</p>
    </list-item>
    <list-item>
      <p>the number of CPUs to be used during the fit processing.</p>
    </list-item>
  </list>
  <p>At the end of the fit, the fit parameters and the statistics
  returned by <monospace>lmfit</monospace> are displayed in related
  widgets and can be exported in .csv and .txt files respectively.</p>
  <p>All the processing steps previously described constitute a model in
  the sense of the <monospace>Fitspy</monospace> application that can be
  saved (in a .json file) and easily replayed as-is or applied to other
  spectra datasets.</p>
  <p>In terms of visualisation, the GUI allows the user to display all
  of the spectra simultaneously (<monospace>Show All</monospace> mode)
  or, when a spectrum is selected, to display the corresponding fit
  decomposition and its residual. Figure titles and axis names can be
  customised and peak models labeled.</p>
  <p>All the actions described above can be performed through Python
  scripts without using the GUI. In practice, when performing repeated
  analyses, users familiar with Python may find it helpful to use
  <monospace>Fitspy</monospace> as follows:</p>
  <list list-type="order">
    <list-item>
      <p>create a <monospace>Fitspy model</monospace> with the GUI</p>
    </list-item>
    <list-item>
      <p>save the model</p>
    </list-item>
    <list-item>
      <p>apply the model to several datasets using a Python script</p>
    </list-item>
  </list>
  <p>This approach has recently been used by Meyer
  (<xref alt="Meyer et al., 2023" rid="ref-wafer" ref-type="bibr">Meyer
  et al., 2023</xref>) to process tens of thousands of PhotoLuminescence
  and Raman spectra acquired on wafers, taking advantage of the
  parallelism capabilities offered by <monospace>Fitpsy</monospace> (see
  <xref alt="[fig:wafer]" rid="figU003Awafer">[fig:wafer]</xref>).</p>
  <fig>
    <caption><p>Example of a <monospace>Fitpsy</monospace> application
    used in photoluminescence to characterise exciton intensities on a
    wafer
    (<xref alt="Meyer et al., 2023" rid="ref-wafer" ref-type="bibr">Meyer
    et al.,
    2023</xref>).<styled-content id="figU003Awafer"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/587eaefc8c3740025c5f7ac67947ee667a1b0b31.png" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work, carried out on the Platform for Nanocharacterisation
  (PFNC), was supported by the “Recherche Technologique de Base” program
  of the French National Research Agency (ANR).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Fityk">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Wojdyr</surname><given-names>Marcin</given-names></name>
      </person-group>
      <article-title>Fityk: a general-purpose peak fitting program</article-title>
      <source>Journal of Applied Crystallography</source>
      <year iso-8601-date="2010-10">2010</year><month>10</month>
      <volume>43</volume>
      <uri>https://doi.org/10.1107/S0021889810030499</uri>
      <pub-id pub-id-type="doi">10.1107/S0021889810030499</pub-id>
      <fpage>1126</fpage>
      <lpage>1128</lpage>
    </element-citation>
  </ref>
  <ref id="ref-PRISMA">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Flores</surname><given-names>Eibar</given-names></name>
        <name><surname>Mozhzhukhina</surname><given-names>Nataliia</given-names></name>
        <name><surname>Li</surname><given-names>Xinyu</given-names></name>
        <name><surname>Norby</surname><given-names>Poul</given-names></name>
        <name><surname>Matic</surname><given-names>Aleksandar</given-names></name>
        <name><surname>Vegge</surname><given-names>Tejs</given-names></name>
      </person-group>
      <article-title>PRISMA: A robust and intuitive tool for high-throughput processing of chemical spectra</article-title>
      <source>Chemistry–Methods</source>
      <year iso-8601-date="2022">2022</year>
      <volume>2</volume>
      <uri>https://chemistry-europe.onlinelibrary.wiley.com/doi/abs/10.1002/cmtd.202100094</uri>
      <pub-id pub-id-type="doi">10.1002/cmtd.202100094</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-lmfit">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Newville</surname><given-names>Matthew</given-names></name>
        <name><surname>Stensitzki</surname><given-names>Till</given-names></name>
        <name><surname>Allen</surname><given-names>Daniel B.</given-names></name>
        <name><surname>Ingargiola</surname><given-names>Antonino</given-names></name>
      </person-group>
      <article-title>LMFIT: Non-linear least-square minimization and curve-fitting for python</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2014-09">2014</year><month>09</month>
      <uri>https://doi.org/10.5281/zenodo.11813</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.11813</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-scipy">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>alexbrc</surname></name>
        <name><surname>Nelson</surname><given-names>Andrew</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Roy</surname><given-names>Pamphile</given-names></name>
        <name><surname>Wilson</surname><given-names>Josh</given-names></name>
        <name><surname>Polat</surname><given-names>Ilhan</given-names></name>
        <name><surname>endolith</surname></name>
        <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Walt</surname><given-names>Stefan van der</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
        <name><surname>Larson</surname><given-names>Eric</given-names></name>
        <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
        <name><surname>Sakai</surname><given-names>Atsushi</given-names></name>
        <name><surname>Lars</surname></name>
        <name><surname>peterbell10</surname></name>
        <name><surname>Mulbregt</surname><given-names>Paul van</given-names></name>
        <name><surname>Carey</surname><given-names>CJ</given-names></name>
        <name><surname>eric-jones</surname></name>
        <name><surname>McKibben</surname><given-names>Nicholas</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Kai</surname></name>
      </person-group>
      <article-title>Scipy/scipy: SciPy 1.11.1</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2023-06">2023</year><month>06</month>
      <uri>https://doi.org/10.5281/zenodo.8092679</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.8092679</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-wafer">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>Thibaut</given-names></name>
        <name><surname>Quéméré</surname><given-names>Patrick</given-names></name>
        <name><surname>Brunet</surname><given-names>Paul</given-names></name>
        <name><surname>Rolland</surname><given-names>Emmanuel</given-names></name>
        <name><surname>Cadot</surname><given-names>Stéphane</given-names></name>
        <name><surname>Le Van-Jodin</surname><given-names>Lucie</given-names></name>
      </person-group>
      <article-title>Full wafer-scale characterization method for 2D materials. 10th International Conference on Advanced Applied Raman Spectroscopy</article-title>
      <publisher-name>RamanFest 2023 conference</publisher-name>
      <publisher-loc>Paris</publisher-loc>
      <year iso-8601-date="2023-11">2023</year><month>11</month>
      <uri>https://www.ramanfestconf.com/2023/Abstracts/2023_Meyer_Thibaut_52.pdf</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
