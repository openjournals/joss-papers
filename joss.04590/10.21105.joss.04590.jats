<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4590</article-id>
<article-id pub-id-type="doi">10.21105/joss.04590</article-id>
<title-group>
<article-title>MARTINI: The Little Match and Replace Tool for Automatic
Code Rewriting</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7199-8221</contrib-id>
<name>
<surname>Johnson</surname>
<given-names>Alister</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Coti</surname>
<given-names>Camille</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Malony</surname>
<given-names>Allen D.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7870-8963</contrib-id>
<name>
<surname>Doerfert</surname>
<given-names>Johannes</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University of Oregon, Eugene, OR, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Université du Québec à Montréal, Montréal, QC,
Canada</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Argonne National Laboratory, Lemont, IL, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-06-30">
<day>30</day>
<month>6</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>76</issue>
<fpage>4590</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Clang</kwd>
<kwd>meteprogramming</kwd>
<kwd>refactoring</kwd>
<kwd>AST matchers</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Rewriting code for cleanliness, API changes, and new programming
  models is a common, yet time-consuming task. Localized or syntax-based
  changes are often mechanical and can be automated with text-based
  tools, like Unix’s <monospace>sed</monospace>. However, non-localized
  or semantic-based changes require specialized tools that usually come
  with complex, hard-coded rules that require expertise in compilers.
  This means existing techniques for code rewriting are either too
  simple for complex tasks or too complex to be customized by non-expert
  users; in either case, developers are often forced to manually update
  their code instead.</p>
  <p>This work presents MARTINI, a new approach to code rewriting built
  on the Clang compiler, which exposes complex and semantic-driven
  rewrite capabilities to users in a simple and natural way. Rewrite
  rules are expressed as a pair of parameterized “before-and-after” code
  snippets in the source language, one to describe what to match and one
  to describe what the replacement looks like. Through this novel and
  user-friendly interface, programmers can automate and customize
  complex code changes which require a deep understanding of the
  language without any knowledge of compiler internals.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Once rewrites span code ranges or require semantic reasoning,
  text-based tooling is inadequate or requires complex implementations
  (for example, tracking balanced parentheses with extended regular
  expressions). Traditionally, this is where compiler-based tooling
  comes in
  (<xref alt="Quinlan &amp; Liao, 2011" rid="ref-rose2" ref-type="bibr">Quinlan
  &amp; Liao, 2011</xref>). The compiler’s frontend has parsing and
  semantic analysis capabilities that allow more complete understanding
  of the source code and, consequently, semantic-based rewriting over
  most arbitrary code ranges. However, developing and customizing such
  tooling requires a deep understanding of the compiler and its
  rewriting infrastructure (if one exists), which restricts the
  developer pool drastically
  (<xref alt="Murai et al., 2018" rid="ref-omni" ref-type="bibr">Murai
  et al., 2018</xref>;
  <xref alt="Takizawa et al., 2014" rid="ref-xevolver" ref-type="bibr">Takizawa
  et al., 2014</xref>). Previously, as long as the number of rewrites
  was small and customization was not required, hard-coded rules in a
  compiler-based tool were sufficient. Today, however, language
  standards are changing more rapidly and new parallel programming
  models are constantly being developed.</p>
  <p>Programmers who wish to keep their applications up-to-date must use
  a streamlined refactoring process
  (<xref alt="Wright et al., 2013" rid="ref-clangmr" ref-type="bibr">Wright
  et al., 2013</xref>). For instance, testing a new programming model is
  an intriguing and often difficult proposition; parts might be a simple
  matter of replacing one API with another, but most often complex
  changes have to be made as well, especially if the new model has any
  kind of parallelism. Other rewriting tasks, such as adding
  instrumentation or error-checking asserts, are just as time-consuming
  and important. These changes often follow patterns, however, and if
  programmers are able to capture those patterns in some way, these
  tasks seem like they <italic>should</italic> be able to be
  automated.</p>
  <sec id="example">
    <title>Example</title>
    <p>As an example, consider the “simple” rewriting task done by the
    <monospace>clang-tidy</monospace> rule
    <ext-link ext-link-type="uri" xlink:href="https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html">“modernize-use-nullptr”</ext-link>.
    This rule replaces constants, like <monospace>NULL</monospace> and
    <monospace>0</monospace>, assigned to pointer variables with the
    C++11 <monospace>nullptr</monospace> keyword, which is both safer
    and more readable.
    <xref alt="Figure 1" rid="figU003Amodernize_nullptr_example">Figure 1</xref>
    illustrates the changes <monospace>clang-tidy</monospace> can
    perform. The first replacement, where <monospace>a</monospace> is
    initialized to <monospace>0</monospace>, could be done with a
    text-based tool, like <monospace>sed</monospace>, although
    constructing a generic regular expression to match arbitrary types
    and variable names could be tricky. However, the other two
    replacements are difficult if not impossible to handle without
    semantic context. The physical distance between the type of the
    variable and the <monospace>0</monospace>-literal can cross file
    boundaries, and most languages allow for various other complexities.
    This semantic context is out of reach for purely text-based tools.
    Being built on the Clang compiler, MARTINI has the context needed to
    emulate most of <monospace>clang-tidy</monospace>’s
    “modernize-use-nullptr” rule using just the three matcher-replacer
    pairs in
    <xref alt="Figure 2" rid="figU003Amartini_nullptr_example">Figure 2</xref>.
    While <monospace>clang-tidy</monospace>’s rule is over 100 lines of
    complex code that requires extensive knowledge of Clang internals,
    MARTINI can be understood by the average programmer.</p>
    <fig>
      <caption><p>Example to showcase the “modernize-use-nullptr”
      <monospace>clang-tidy</monospace> rewrite rule, which replaces
      <monospace>0</monospace>-literal pointers with
      <monospace>nullptr</monospace>.<styled-content id="figU003Amodernize_nullptr_example"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/modernize-use-nullptr-ex.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="related-work">
    <title>Related Work</title>
    <p>Most previous work in automatic code rewriting relies on compiler
    experts directly working with the code’s abstract syntax tree (AST).
    ClangMR
    (<xref alt="Wright et al., 2013" rid="ref-clangmr" ref-type="bibr">Wright
    et al., 2013</xref>) and the Clang Transformer library
    (<xref alt="Clang Developers, n.d." rid="ref-transformer" ref-type="bibr">Clang
    Developers, n.d.</xref>) are similar code rewriting tools
    implemented in Clang, but both of these use AST matchers (with a few
    additions) as a user interface. MARTINI is designed to provide
    similar functionality but be usable by non-compiler experts.</p>
    <p>Other code rewriting frameworks include the ROSE compiler
    (<xref alt="Quinlan &amp; Liao, 2011" rid="ref-rose2" ref-type="bibr">Quinlan
    &amp; Liao, 2011</xref>), Xevolver
    (<xref alt="Takizawa et al., 2014" rid="ref-xevolver" ref-type="bibr">Takizawa
    et al., 2014</xref>) (built on ROSE), and the Omni source-to-source
    compiler
    (<xref alt="Murai et al., 2018" rid="ref-omni" ref-type="bibr">Murai
    et al., 2018</xref>). These tools provide more low-level interfaces
    than ours, and thus more precise control over rewriting, but at the
    cost of requiring users to be compiler experts. Neither of these are
    very user-friendly, as users have to directly describe AST
    manipulations and use syntax specific to each tool. MARTINI, on the
    other hand, only requires knowledge of C++ and the semantics of a
    few new attributes.</p>
    <p>The most similar work to our own is Nobrainer
    (<xref alt="V. Savchenko et al., 2019" rid="ref-nobrainer1" ref-type="bibr">V.
    Savchenko et al., 2019</xref>;
    <xref alt="V. V. Savchenko et al., 2020" rid="ref-nobrainer2" ref-type="bibr">V.
    V. Savchenko et al., 2020</xref>), which also uses C/C++ code
    snippets and AST matchers to match application code and describe how
    to modify it, and inspired some of our user interface. As the
    Nobrainer project has existed for longer than ours, it supports more
    of the C++ standard. However, Nobrainer uses more restrictive and
    specialized syntax and generally enforces more restrictions on
    transformations than we do. They do this to ensure their
    transformations are (type-)safe, but we opted to take a more lenient
    approach. For example, it’s easy to imagine cases where users may
    want to change the type of an expression, such as testing multiple
    precision arithmetic, but this is nearly impossible in Nobrainer.
    Nobrainer’s design philosophy is to make matchers as specific as
    possible and force users to add generality - they assume all names
    in a matcher are literals unless they are specified as parameters
    and do their best to enforce safety. Our philosophy is almost
    precisely the opposite: our matchers are as general as possible and
    users must add specificity, e.g., with literals, and we allow users
    to define any transformations they wish with minimal restrictions on
    safety. Nobrainer is also, sadly, not open-source.</p>
    <fig>
      <caption><p>MARTINI’s equivalent to
      <monospace>clang-tidy</monospace>’s “modernize-use-nullptr” rule,
      using abbreviated MARTINI
      syntax.<styled-content id="figU003Amartini_nullptr_example"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/martini-nullptr-ex.png" xlink:title="" />
    </fig>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-xevolver">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Takizawa</surname><given-names>H.</given-names></name>
        <name><surname>Hirasawa</surname><given-names>S.</given-names></name>
        <name><surname>Hayashi</surname><given-names>Y.</given-names></name>
        <name><surname>Egawa</surname><given-names>R.</given-names></name>
        <name><surname>Kobayashi</surname><given-names>H.</given-names></name>
      </person-group>
      <article-title>Xevolver: An XML-based code translation framework for supporting HPC application migration</article-title>
      <source>2014 21st international conference on high performance computing (HiPC)</source>
      <year iso-8601-date="2014">2014</year>
      <volume></volume>
      <issn>1094-7256</issn>
      <pub-id pub-id-type="doi">10.1109/HiPC.2014.7116902</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-rose2">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Quinlan</surname><given-names>Dan</given-names></name>
        <name><surname>Liao</surname><given-names>Chunhua</given-names></name>
      </person-group>
      <article-title>The ROSE source-to-source compiler infrastructure</article-title>
      <source>Cetus users and compiler infrastructure workshop @PACT</source>
      <year iso-8601-date="2011">2011</year>
    </element-citation>
  </ref>
  <ref id="ref-omni">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Murai</surname><given-names>H.</given-names></name>
        <name><surname>Sato</surname><given-names>M.</given-names></name>
        <name><surname>Nakao</surname><given-names>M.</given-names></name>
        <name><surname>Lee</surname><given-names>J.</given-names></name>
      </person-group>
      <article-title>Metaprogramming framework for existing HPC languages based on the Omni compiler infrastructure</article-title>
      <source>International symposium on computing and networking workshops (CANDARW)</source>
      <year iso-8601-date="2018">2018</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/CANDARW.2018.00054</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-nobrainer1">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Savchenko</surname><given-names>Valeriy</given-names></name>
        <name><surname>Sorokin</surname><given-names>Konstantin</given-names></name>
        <name><surname>Pankratenko</surname><given-names>Georgiy</given-names></name>
        <name><surname>Markov</surname><given-names>Sergey</given-names></name>
        <name><surname>Spiridonov</surname><given-names>Alexander</given-names></name>
        <name><surname>Alexandrov</surname><given-names>Ilia</given-names></name>
        <name><surname>Volkov</surname><given-names>Alexander</given-names></name>
        <name><surname>Sun</surname><given-names>Kwangwon</given-names></name>
      </person-group>
      <article-title>Nobrainer: An example-driven framework for C/C++ code transformations</article-title>
      <source>Perspectives of system informatics</source>
      <person-group person-group-type="editor">
        <name><surname>Bjørner</surname><given-names>Nikolaj</given-names></name>
        <name><surname>Virbitskaite</surname><given-names>Irina</given-names></name>
        <name><surname>Voronkov</surname><given-names>Andrei</given-names></name>
      </person-group>
      <publisher-name>Springer International Publishing</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <isbn>978-3-030-37487-7</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-030-37487-7\_12</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-nobrainer2">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Savchenko</surname><given-names>V. V.</given-names></name>
        <name><surname>Sorokin</surname><given-names>K. S.</given-names></name>
        <name><surname>Bronshtein</surname><given-names>I. E.</given-names></name>
        <name><surname>Volkov</surname><given-names>A. S.</given-names></name>
        <name><surname>Kachanov</surname><given-names>V. V.</given-names></name>
        <name><surname>Pankratenko</surname><given-names>G. A.</given-names></name>
        <name><surname>Ermakov</surname><given-names>M. K.</given-names></name>
        <name><surname>Markov</surname><given-names>S. I.</given-names></name>
        <name><surname>Spiridonov</surname><given-names>A. V.</given-names></name>
        <name><surname>Aleksandrov</surname><given-names>I. V.</given-names></name>
      </person-group>
      <article-title>NOBRAINER: A tool for example-based transformation of C/C++ code</article-title>
      <source>Programming and Computer Software</source>
      <year iso-8601-date="2020">2020</year>
      <volume>46</volume>
      <issue>5</issue>
      <issn>1608-3261</issn>
      <pub-id pub-id-type="doi">10.1134/S0361768820040052</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-clangmr">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Wright</surname><given-names>Hyrum K.</given-names></name>
        <name><surname>Jasper</surname><given-names>Daniel</given-names></name>
        <name><surname>Klimek</surname><given-names>Manuel</given-names></name>
        <name><surname>Carruth</surname><given-names>Chandler</given-names></name>
        <name><surname>Wan</surname><given-names>Zhanyong</given-names></name>
      </person-group>
      <article-title>Large-scale automated refactoring using ClangMR</article-title>
      <source>International conference on software maintenance</source>
      <year iso-8601-date="2013">2013</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ICSM.2013.93</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-transformer">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Clang Developers</string-name>
      </person-group>
      <article-title>clang::tooling::Transformer class reference</article-title>
      <uri>https://clang.llvm.org/doxygen/classclang\_1\_1tooling\_1\_1Transformer.html</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
