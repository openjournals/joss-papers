<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5777</article-id>
<article-id pub-id-type="doi">10.21105/joss.05777</article-id>
<title-group>
<article-title>gesel: a JavaScript package for client-side gene set
enrichment</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3564-4813</contrib-id>
<name>
<surname>Lun</surname>
<given-names>Aaron Tin Long</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5855-5031</contrib-id>
<name>
<surname>Kancherla</surname>
<given-names>Jayaram</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Genentech Inc., South San Francisco, United States of
America</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-03-12">
<day>12</day>
<month>3</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>90</issue>
<fpage>5777</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>JavaScript</kwd>
<kwd>bioinformatics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>gesel</monospace> is a JavaScript package for performing
  gene set enrichment analyses within the browser. All calculations are
  performed on the client device, without any no need for a dedicated
  backend server. This eliminates concerns around cost, scalability,
  latency, and data ownership that are associated with a backend-based
  architecture. We demonstrate the use of <monospace>gesel</monospace>
  with a basic web application that performs enrichment analyses on
  user-supplied genes with sets derived from the Gene Ontology and
  MSigDB. Developers can also use <monospace>gesel</monospace> to
  incorporate gene set enrichment capabilities into their own
  applications.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Gene set enrichment analyses (GSEA) are commonly used to interpret
  the biological activity of a user-supplied list of interesting genes
  (<xref alt="Subramanian et al., 2005" rid="ref-subramanian2005gene" ref-type="bibr">Subramanian
  et al., 2005</xref>). Briefly, this task involves quantifying the
  enrichment of each reference gene set’s members inside the
  user-supplied list, where the reference sets are derived from a
  variety of sources such as previous experimental studies or <italic>de
  novo</italic> computational analyses. GSEA allows scientists to
  summarize a large list of gene identifiers into a tangible biological
  concept such as “syntaxin binding” or “T cell receptor signaling
  pathway”. User-supplied lists are typically derived from differential
  expression analyses of transcriptome-wide assays like RNA sequencing,
  but any list of genes can be used, e.g., cluster-specific marker lists
  from single-cell RNA sequencing studies.</p>
  <p>Given the popularity of GSEA in transcriptomics, it is not
  surprising that many software tools are already available to perform
  this analysis. Most existing GSEA tools operate inside frameworks like
  R/Bioconductor
  (<xref alt="Korotkevich et al., 2021" rid="ref-korotkevich2021fast" ref-type="bibr">Korotkevich
  et al., 2021</xref>;
  <xref alt="Wu &amp; Smyth, 2012" rid="ref-wu2012camera" ref-type="bibr">Wu
  &amp; Smyth, 2012</xref>;
  <xref alt="Young et al., 2010" rid="ref-young2010gene" ref-type="bibr">Young
  et al., 2010</xref>) and require both installation of software and
  associated programming knowledge to use. Web applications like Enrichr
  and GeneTrail
  (<xref alt="Backes et al., 2007" rid="ref-backes2007genetrail" ref-type="bibr">Backes
  et al., 2007</xref>;
  <xref alt="Chen et al., 2013" rid="ref-chen2013enrichr" ref-type="bibr">Chen
  et al., 2013</xref>) provide more user-friendly interfaces that
  require minimal computational knowledge, targeted to the majority of
  bench scientists. These applications use a conventional backend
  architecture where the browser sends a request containing the
  user-supplied list of genes to a backend server; the backend then
  performs the analysis and returns the results to the user’s device
  (i.e., the client) for inspection.</p>
  <p>While common, this backend-based architecture is subject to a
  number of concerns around cost, scalability, latency, and data
  ownership. The application maintainer is responsible for provisioning,
  deploying, monitoring and maintaining a backend server, which requires
  both money and time. The maintainer is also responsible for scaling up
  the backend compute in response to increased usage, further increasing
  costs in an unpredictable manner. The user-supplied lists need to be
  transferred to the backend and the results need to be transferred back
  to the client, introducing latency to the user experience. Finally,
  the fact that the user’s inputs are accessible to the backend
  introduces potential issues of data ownership, e.g., for confidential
  biomarker lists or signatures.</p>
  <p>Here, we present <monospace>gesel</monospace>
  (https://npmjs.com/package/gesel), a JavaScript library for gene set
  enrichment analyses that operates fully inside the client. Web
  applications can easily incorporate <monospace>gesel</monospace> via
  the standard <monospace>npm</monospace> installation process, enabling
  developers to create user-friendly interfaces for GSEA in different
  contexts. The browser will then handle all GSEA-related computation
  within these applications, eliminating the responsibility of
  maintaining a backend and avoiding any transfer of user data. This
  obviates the problems associated with a backend architecture and
  allows the application to scale naturally to any number of user
  devices. We demonstrate the use of <monospace>gesel</monospace> by
  creating a simple web application (https://ltla.github.io/gesel-app)
  for identifying interesting gene sets based on overlaps with
  user-supplied lists.</p>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p><monospace>gesel</monospace>’s analysis involves testing for
  significant overlap between each reference gene set and the
  user-supplied list of genes. While this is the simplest form of GSEA,
  it is fast, intuitive, mostly effective and avoids the need for users
  to specify a ranking across the supplied genes. The algorithm can also
  be phrased as a search for the gene sets that contain at least one
  entry of the user-supplied list. To demonstrate, consider the
  following list of gene symbols mixed with Ensembl and Entrez
  identifiers.</p>
  <code language="javascript">let user_supplied = [ &quot;SNAP25&quot;, &quot;NEUROD6&quot;, &quot;ENSG00000123307&quot;, &quot;1122&quot; ];</code>
  <p>Our first task is to map these user-supplied gene identifiers to
  <monospace>gesel</monospace>’s internal identifiers. In this case, we
  are interested in human gene sets, hence the taxonomy identifier in
  the <monospace>searchGenes()</monospace> call.</p>
  <code language="javascript">let input_mapped = await gesel.searchGenes(&quot;9606&quot;, user_supplied);
console.log(input_mapped);
// [ [ 4639 ], [ 12767 ], [ 12577 ], [ 828 ] ]</code>
  <p>To simplify matters, we will ony use the first matching
  <monospace>gesel</monospace> gene identifier for each user-supplied
  gene. Other applications may prefer to handle multi-mapping genes by,
  e.g., throwing an error to require clarification from the user.</p>
  <code language="javascript">let input_list = [];
for (const x of input_mapped) {
    if (x.length &gt;= 1) {
        input_list.push(x[0]);
    }
}
console.log(input_list);
// [ 4639, 12767, 12577, 828 ]</code>
  <p>We call <monospace>findOverlappingSets()</monospace> to search for
  all human gene sets that overlap the user-supplied list. This returns
  an array of objects with the set identifier, the number of overlapping
  genes, the size of each set and the enrichment p-value based on the
  hypergeometric distribution. Applications can sort this array by the
  p-value to prioritize sets with significant overlap.</p>
  <code language="javascript">let overlaps = await gesel.findOverlappingSets(&quot;9606&quot;, input_list);
console.log(overlaps.length);
// 935

console.log(overlaps[0]);
// { id: 379, count: 1, size: 10, pvalue: 0.0009525509051785397 }</code>
  <p>Given a set identifier, we obtain that set’s details with the
  <monospace>fetchSingleSet()</monospace> function.</p>
  <code language="javascript">let set_details = await gesel.fetchSingleSet(&quot;9606&quot;, overlaps[0].id);
console.log(set_details);
// {
//   name: 'GO:0001504',
//   description: 'neurotransmitter uptake',
//   size: 10,
//   collection: 0,
//   number: 379
// }</code>
  <p>The same approach can also be used to obtain the details of the
  collection containing that set.</p>
  <code language="javascript">let parent_collection = await gesel.fetchSingleCollection(&quot;9606&quot;, set_details.collection);
console.log(parent_collection);
// {
//   title: 'Gene ontology',
//   description: 'Gene sets defined from the Gene Ontology (version 2022-07-01), sourced from the Bioconductor package org.Hs.eg.db 3.16.0.',
//   species: '9606',
//   maintainer: 'Aaron Lun',
//   source: 'https://github.com/LTLA/gesel-feedstock/blob/gene-ontology-v1.0.0/go/build.R',
//   start: 0,
//   size: 18933
// }</code>
  <p>The membership of each set is obtained with the
  <monospace>fetchGenesForSet()</monospace> function. This returns an
  array of <monospace>gesel</monospace>’s internal gene identifiers,
  which can be mapped to various standard identifiers or symbols using
  the <monospace>fetchAllGenes()</monospace> function.</p>
  <code language="javascript">let set_members = await gesel.fetchGenesForSet(&quot;9606&quot;, overlaps[0].id);
console.log(set_members);
// Uint32Array(10) [
//     343, 1452, 2222,
//    4543, 4547, 4548,
//    4639, 6238, 6246,
//   14046
// ]

let all_symbols = (await gesel.fetchAllGenes(&quot;9606&quot;)).get(&quot;symbol&quot;);
console.log(Array.from(set_members).map(i =&gt; all_symbols[i]));
// [
//   [ 'ATP1A2' ],
//   [ 'SLC29A1' ],
//   [ 'SLC29A2' ],
//   [ 'SLC1A3' ],
//   [ 'SLC1A6' ],
//   [ 'SLC1A7' ],
//   [ 'SNAP25' ],
//   [ 'SYNGR3' ],
//   [ 'SLC6A5' ],
//   [ 'SLC38A1' ]
// ]</code>
  <p>Each set also has some associated free text in its name and
  description. <monospace>gesel</monospace> can query this text to find
  sets of interest, with some basic support for the
  <monospace>?</monospace> and <monospace>*</monospace> wildcards.</p>
  <code language="javascript">let hits = await gesel.searchSetText(&quot;9606&quot;, &quot;B immunity&quot;);
let first_hit = await gesel.fetchSingleSet(&quot;9606&quot;, hits[0]);
// {
//   name: 'GO:0019724',
//   description: 'B cell mediated immunity',
//   size: 4,
//   collection: 0,
//   number: 5715
// }

let hits2 = await gesel.searchSetText(&quot;9606&quot;, &quot;B immun*&quot;);
let first_hit2 = await gesel.fetchSingleSet(&quot;9606&quot;, hits2[0]);
// {
//   name: 'GO:0002312',
//   description: 'B cell activation involved in immune response',
//   size: 2,
//   collection: 0,
//   number: 858
// }</code>
  <p>The output of <monospace>searchSetText()</monospace> can then be
  combined with the output of
  <monospace>findOverlappingSets()</monospace> to implement advanced
  searches in downstream applications.</p>
  <p>To demonstrate <monospace>gesel</monospace>’s functionality, we
  developed a simple web application that tests for gene set enrichment
  among user-supplied genes
  (<xref alt="A. Lun &amp; Kancherla, 2023" rid="ref-geselapp" ref-type="bibr">A.
  Lun &amp; Kancherla, 2023</xref>). Given several parameters such as a
  list of user-supplied genes and a free-text query, the application
  shows a table containing the gene sets that satisfy the search
  parameters. Sets are sorted by increasing p-value to focus on those
  with significant enrichment. Clicking on a row corresponding to a
  particular gene set shows the identities of its genes, with emphasis
  applied to those in the user-supplied list. The parameters of each
  search are captured by query strings, allowing users to easily save
  and share searches by copying the URL from the browser’s address bar.
  More adventurous users can also navigate a 2-dimensional embedding
  (<xref alt="Van der Maaten &amp; Hinton, 2008" rid="ref-van2008visualizing" ref-type="bibr">Van
  der Maaten &amp; Hinton, 2008</xref>) of gene sets, where sets with
  similar members are placed next to each other on the embedding; this
  provides an alternative representation of the search results that
  encourages exploration of related gene sets.</p>
</sec>
<sec id="implementation-details">
  <title>Implementation details</title>
  <p><monospace>gesel</monospace> supports two modes of operation - a
  “full client-side” mode and a more lightweight “on-demand” mode. These
  differ with respect to how they obtain the database files containing
  the reference gene sets. In full client-side mode,
  <monospace>gesel</monospace> will download the relevant database files
  from the static file server to the client. All calls to
  <monospace>gesel</monospace> functions will then perform queries
  directly on the downloaded files. In this mode, the user pays an
  up-front cost for the initial download such that all subsequent
  calculations are fully handled within the client. This avoids any
  further network activity and the associated latency. For many
  applications, the up-front cost is likely to be modest - for example,
  the total size of the default human gene set database is just over 9
  MB - so full client-side operation is simple and practical in most
  cases.</p>
  <p>In the on-demand mode, <monospace>gesel</monospace> will perform
  HTTP range requests to fetch relevant slices of each database file.
  For example, <monospace>findOverlappingSets()</monospace> needs to
  obtain the mapping of each gene to the gene sets of which it is a
  member. Rather than downloading the entire mapping file,
  <monospace>gesel</monospace> will ask the server to return the range
  of bytes containing only the mapping for the desired gene. This is
  inspired by similar strategies for querying genomics data
  (<xref alt="Kancherla et al., 2020" rid="ref-kancherla2020epiviz" ref-type="bibr">Kancherla
  et al., 2020</xref>) and reduces the burden on the client device and
  network. Range requests are suited for applications that expect only
  sporadic usage of <monospace>gesel</monospace> such that an up-front
  download of the entire database cannot be justified. They are also
  more scalable as the number of gene sets increases into the millions,
  where an up-front download may become too large to be practical.
  Obviously, using this mode involves increased network activity and
  latency from multiple range requests if <monospace>gesel</monospace>
  functions are frequently called. This is partially mitigated by
  <monospace>gesel</monospace>’s transparent caching of responses in
  memory.</p>
  <p>In both cases, we stress that <monospace>gesel</monospace> only
  requires a static file server to host the database files and
  optionally to support range requests. We do not have to provision and
  maintain a dedicated back-end server to handle the
  <monospace>gesel</monospace> queries, saving time and money; rather,
  any generic static server can be used, including free offerings, e.g.,
  from GitHub. The client machine performs all of the calculations and
  the user receives the results immediately on completion, enabling
  low-latency applications that minimize network traffic. Similarly,
  there is no transfer of user-supplied gene lists to an external
  server, avoiding any questions over data ownership. Most importantly,
  as each user brings their own compute to the application, it scales to
  any number of users at no cost to us (i.e., the
  <monospace>gesel</monospace> maintainers). Indeed, we consider
  <monospace>gesel</monospace>’s development to be a natural consequence
  of the “client-side compute” philosophy described in A. T. L. Lun
  &amp; Kancherla
  (<xref alt="2023" rid="ref-lun2023single" ref-type="bibr">2023</xref>).</p>
  <p><monospace>gesel</monospace> works with any database files prepared
  according to the contract outlined in the feedstock repository
  (<xref alt="A. Lun, 2023" rid="ref-geselfeedstock" ref-type="bibr">A.
  Lun, 2023</xref>). These are simple tab-separated text files
  containing information about the genes, sets, collections, and the
  mappings between them. We store the byte ranges for each relationship
  in the mapping files to enable on-demand range requests. To reduce
  data transfer, we apply some standard practices like delta-encoding
  the sorted gene identifiers and Gzip-compressing the byte range files.
  <monospace>gesel</monospace>’s default database incorporates public
  gene sets from the Gene Ontology
  (<xref alt="Ashburner et al., 2000" rid="ref-ashburner2000go" ref-type="bibr">Ashburner
  et al., 2000</xref>) and, for human and mouse, the majority of the
  relevant MSigDB subcollections
  (<xref alt="Liberzon et al., 2011" rid="ref-liberzon2011molecular" ref-type="bibr">Liberzon
  et al., 2011</xref>). However, application developers can easily point
  <monospace>gesel</monospace> to a different database by overriding the
  request URL. For example, we adapted the scripts in the feedstock
  repository to create a company-specific database of custom gene sets
  based on biomarker lists and other signatures. This is hosted inside
  our internal network for use by our in-house
  <monospace>gesel</monospace>-based applications.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Thanks to Chris Bolen, Alejandro Chibly, Brandon Kayser and
  Xiangnan Guan, for the scientific questions that motivated the
  development of this library; Hector Corrada Bravo, for his feedback on
  the uselessness of the early versions of the free-text search; and
  Allison Vuong and Luke Hoberecht, for recovering ATLL’s scarf when he
  forgot it while thinking about the library design during a team
  dinner.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-chen2013enrichr">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Chen</surname><given-names>E. Y.</given-names></name>
        <name><surname>Tan</surname><given-names>C. M.</given-names></name>
        <name><surname>Kou</surname><given-names>Y.</given-names></name>
        <name><surname>Duan</surname><given-names>Q.</given-names></name>
        <name><surname>Wang</surname><given-names>Z.</given-names></name>
        <name><surname>Meirelles</surname><given-names>G. V.</given-names></name>
        <name><surname>Clark</surname><given-names>N. R.</given-names></name>
        <name><surname>Ma’ayan</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>Enrichr: interactive and collaborative HTML5 gene list enrichment analysis tool</article-title>
      <source>BMC Bioinformatics</source>
      <year iso-8601-date="2013-04">2013</year><month>04</month>
      <volume>14</volume>
      <pub-id pub-id-type="doi">10.1186/1471-2105-14-128</pub-id>
      <fpage>128</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-geselfeedstock">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lun</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>Build gene sets to feed gesel</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/LTLA/gesel-feedstock</uri>
    </element-citation>
  </ref>
  <ref id="ref-geselapp">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lun</surname><given-names>A.</given-names></name>
        <name><surname>Kancherla</surname><given-names>J.</given-names></name>
      </person-group>
      <article-title>Gesel gene set search</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://ltla.github.io/gesel-app</uri>
    </element-citation>
  </ref>
  <ref id="ref-liberzon2011molecular">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Liberzon</surname><given-names>A.</given-names></name>
        <name><surname>Subramanian</surname><given-names>A.</given-names></name>
        <name><surname>Pinchback</surname><given-names>R.</given-names></name>
        <name><surname>Thorvaldsdóttir</surname><given-names>H.</given-names></name>
        <name><surname>Tamayo</surname><given-names>P.</given-names></name>
        <name><surname>Mesirov</surname><given-names>J. P.</given-names></name>
      </person-group>
      <article-title>Molecular signatures database (MSigDB) 3.0</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2011-06">2011</year><month>06</month>
      <volume>27</volume>
      <issue>12</issue>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btr260</pub-id>
      <fpage>1739</fpage>
      <lpage>1740</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ashburner2000go">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ashburner</surname><given-names>M.</given-names></name>
        <name><surname>Ball</surname><given-names>C. A.</given-names></name>
        <name><surname>Blake</surname><given-names>J. A.</given-names></name>
        <name><surname>Botstein</surname><given-names>D.</given-names></name>
        <name><surname>Butler</surname><given-names>H.</given-names></name>
        <name><surname>Cherry</surname><given-names>J. M.</given-names></name>
        <name><surname>Davis</surname><given-names>A. P.</given-names></name>
        <name><surname>Dolinski</surname><given-names>K.</given-names></name>
        <name><surname>Dwight</surname><given-names>S. S.</given-names></name>
        <name><surname>Eppig</surname><given-names>J. T.</given-names></name>
        <name><surname>Harris</surname><given-names>M. A.</given-names></name>
        <name><surname>Hill</surname><given-names>D. P.</given-names></name>
        <name><surname>Issel-Tarver</surname><given-names>L.</given-names></name>
        <name><surname>Kasarskis</surname><given-names>A.</given-names></name>
        <name><surname>Lewis</surname><given-names>S.</given-names></name>
        <name><surname>Matese</surname><given-names>J. C.</given-names></name>
        <name><surname>Richardson</surname><given-names>J. E.</given-names></name>
        <name><surname>Ringwald</surname><given-names>M.</given-names></name>
        <name><surname>Rubin</surname><given-names>G. M.</given-names></name>
        <name><surname>Sherlock</surname><given-names>G.</given-names></name>
      </person-group>
      <article-title>Gene ontology: tool for the unification of biology. The Gene Ontology Consortium</article-title>
      <source>Nat Genet</source>
      <year iso-8601-date="2000-05">2000</year><month>05</month>
      <volume>25</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1038/75556</pub-id>
      <fpage>25</fpage>
      <lpage>29</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lun2023single">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lun</surname><given-names>Aaron T. L.</given-names></name>
        <name><surname>Kancherla</surname><given-names>Jayaram</given-names></name>
      </person-group>
      <article-title>Powering single-cell analyses in the browser with WebAssembly</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>89</issue>
      <uri>https://doi.org/10.21105/joss.05603</uri>
      <pub-id pub-id-type="doi">10.21105/joss.05603</pub-id>
      <fpage>5603</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-kancherla2020epiviz">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kancherla</surname><given-names>J.</given-names></name>
        <name><surname>Yang</surname><given-names>Y.</given-names></name>
        <name><surname>Chae</surname><given-names>H.</given-names></name>
        <name><surname>Corrada Bravo</surname><given-names>H.</given-names></name>
      </person-group>
      <article-title>Epiviz File Server: Query, transform and interactively explore data from indexed genomic files</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>36</volume>
      <issue>18</issue>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa591</pub-id>
      <fpage>4682</fpage>
      <lpage>4690</lpage>
    </element-citation>
  </ref>
  <ref id="ref-subramanian2005gene">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Subramanian</surname><given-names>A.</given-names></name>
        <name><surname>Tamayo</surname><given-names>P.</given-names></name>
        <name><surname>Mootha</surname><given-names>V. K.</given-names></name>
        <name><surname>Mukherjee</surname><given-names>S.</given-names></name>
        <name><surname>Ebert</surname><given-names>B. L.</given-names></name>
        <name><surname>Gillette</surname><given-names>M. A.</given-names></name>
        <name><surname>Paulovich</surname><given-names>A.</given-names></name>
        <name><surname>Pomeroy</surname><given-names>S. L.</given-names></name>
        <name><surname>Golub</surname><given-names>T. R.</given-names></name>
        <name><surname>Lander</surname><given-names>E. S.</given-names></name>
        <name><surname>Mesirov</surname><given-names>J. P.</given-names></name>
      </person-group>
      <article-title>Gene set enrichment analysis: a knowledge-based approach for interpreting genome-wide expression profiles</article-title>
      <source>Proc Natl Acad Sci U S A</source>
      <year iso-8601-date="2005-10">2005</year><month>10</month>
      <volume>102</volume>
      <issue>43</issue>
      <pub-id pub-id-type="doi">10.1073/pnas.0506580102</pub-id>
      <fpage>15545</fpage>
      <lpage>15550</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wu2012camera">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wu</surname><given-names>D.</given-names></name>
        <name><surname>Smyth</surname><given-names>G. K.</given-names></name>
      </person-group>
      <article-title>Camera: a competitive gene set test accounting for inter-gene correlation</article-title>
      <source>Nucleic Acids Res</source>
      <year iso-8601-date="2012-09">2012</year><month>09</month>
      <volume>40</volume>
      <issue>17</issue>
      <pub-id pub-id-type="doi">10.1093/nar/gks461</pub-id>
      <fpage>e133</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-young2010gene">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Young</surname><given-names>M. D.</given-names></name>
        <name><surname>Wakefield</surname><given-names>M. J.</given-names></name>
        <name><surname>Smyth</surname><given-names>G. K.</given-names></name>
        <name><surname>Oshlack</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>Gene ontology analysis for RNA-seq: accounting for selection bias</article-title>
      <source>Genome Biol</source>
      <year iso-8601-date="2010">2010</year>
      <volume>11</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1186/gb-2010-11-2-r14</pub-id>
      <fpage>R14</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-korotkevich2021fast">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Korotkevich</surname><given-names>G.</given-names></name>
        <name><surname>Sukhov</surname><given-names>V.</given-names></name>
        <name><surname>Budin</surname><given-names>N.</given-names></name>
        <name><surname>Shpak</surname><given-names>B.</given-names></name>
        <name><surname>Artyomov</surname><given-names>M. N.</given-names></name>
        <name><surname>Sergushichev</surname><given-names>A.</given-names></name>
      </person-group>
      <article-title>Fast gene set enrichment analysis</article-title>
      <source>bioRxiv</source>
      <publisher-name>Cold Spring Harbor Laboratory</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://www.biorxiv.org/content/early/2021/02/01/060012</uri>
      <pub-id pub-id-type="doi">10.1101/060012</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-backes2007genetrail">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Backes</surname><given-names>C.</given-names></name>
        <name><surname>Keller</surname><given-names>A.</given-names></name>
        <name><surname>Kuentzer</surname><given-names>J.</given-names></name>
        <name><surname>Kneissl</surname><given-names>B.</given-names></name>
        <name><surname>Comtesse</surname><given-names>N.</given-names></name>
        <name><surname>Elnakady</surname><given-names>Y. A.</given-names></name>
        <name><surname>ller</surname><given-names>R.</given-names></name>
        <name><surname>Meese</surname><given-names>E.</given-names></name>
        <name><surname>Lenhof</surname><given-names>H. P.</given-names></name>
      </person-group>
      <article-title>GeneTrail–advanced gene set enrichment analysis</article-title>
      <source>Nucleic Acids Res</source>
      <year iso-8601-date="2007-07">2007</year><month>07</month>
      <volume>35</volume>
      <issue>Web Server issue</issue>
      <pub-id pub-id-type="doi">10.1093/nar/gkm323</pub-id>
      <fpage>W186</fpage>
      <lpage>192</lpage>
    </element-citation>
  </ref>
  <ref id="ref-van2008visualizing">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Van der Maaten</surname><given-names>Laurens</given-names></name>
        <name><surname>Hinton</surname><given-names>Geoffrey</given-names></name>
      </person-group>
      <article-title>Visualizing data using t-SNE</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2008">2008</year>
      <volume>9</volume>
      <issue>86</issue>
      <uri>http://jmlr.org/papers/v9/vandermaaten08a.html</uri>
      <fpage>2579</fpage>
      <lpage>2605</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
