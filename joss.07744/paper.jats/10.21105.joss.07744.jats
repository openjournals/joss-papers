<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7744</article-id>
<article-id pub-id-type="doi">10.21105/joss.07744</article-id>
<title-group>
<article-title>Pi4Micronaut: A Java Library for IoT Research Instruments
on Raspberry Pi</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Mannem</surname>
<given-names>Ruthvik</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Swindle</surname>
<given-names>Adrian</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Open Source with SLU, Saint Louis University,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-10-10">
<day>10</day>
<month>10</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>7744</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Java</kwd>
<kwd>Micronaut</kwd>
<kwd>RaspberryPi</kwd>
<kwd>Pi4j</kwd>
<kwd>GPIO</kwd>
<kwd>IoT</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Pi4Micronaut is a Java-based library designed and optimized for
  Internet of Things (IoT) applications on the Raspberry Pi. It enables
  easy integration with various electronic components, including
  sensors, displays, and actuators, helping researchers incorporate
  these components into their experiments and custom-built instruments.
  By leveraging the versatility and affordability of the Raspberry Pi,
  Pi4Micronaut allows researchers to develop sophisticated IoT
  applications that run directly on the Raspberry Pi platform without
  needing a separate computer.</p>
  <p>Pi4Micronaut acts as a bridge between the high-level Micronaut
  framework and the low-level hardware control provided by Pi4J, making
  it easier for researchers to focus on the application logic rather
  than the complexities of hardware interaction. It is ideal for a wide
  range of fields, including environmental monitoring, behavioral
  research, and automation of experimental processes, providing a
  flexible, scalable solution for building custom research tools.</p>
  <fig>
    <caption><p>Pi4Micronaut</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="architecture_pi4micronaut.png" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Scientific research often requires customized data-gathering
  instruments that can be integrated with a computing platform. While
  some research devices can be connected to a PC, there are situations
  where more flexible, cost-effective solutions are necessary. The
  Raspberry Pi, due to its affordability, size, and versatility, is a
  popular choice for such research. Applications for the Raspberry Pi
  include rat licking behavior
  (<xref alt="Longley M, 2017" rid="ref-LongleyU003A2017" ref-type="bibr">Longley
  M, 2017</xref>), greenhouse gas effect monitoring system
  (<xref alt="Shah &amp; Bhatt, 2017" rid="ref-ShahU003A2017" ref-type="bibr">Shah
  &amp; Bhatt, 2017</xref>),and many other applications
  (<xref alt="Jolles, 2021" rid="ref-JollesU003A2021" ref-type="bibr">Jolles,
  2021</xref>). However, interfacing with sensors and other electronic
  components in Java poses significant challenges.</p>
  <p>Pi4Micronaut addresses this gap by providing a Java-based solution
  that integrates with Pi4J for GPIO (General Purpose Input/Output)
  control. This allows researchers to use Java, a well-established
  programming language in scientific computing
  (<xref alt="P. Knoll, 2010" rid="ref-KnollU003A2010" ref-type="bibr">P.
  Knoll, 2010</xref>), to interact with hardware components on the
  Raspberry Pi, enabling the development of custom research instruments
  at a lower cost. The ability to interface multiple sensors
  simultaneously also promotes collaborative use in shared research
  environments, reducing the bottleneck often encountered when multiple
  users need to access sensor data concurrently.</p>
  <p>Existing software packages for Raspberry Pi GPIO control include
  <bold>RPi.GPIO</bold>
  (<xref alt="Croston, 2024" rid="ref-RPi.GPIO" ref-type="bibr">Croston,
  2024</xref>), a popular Python library that provides direct, low-level
  access to GPIO pins and is widely used for simple hardware interfacing
  and scripting. However, RPi.GPIO is limited to Python and does not
  offer abstractions for hardware components or support for scalable
  application architectures. <bold>Diozero</bold>
  (<xref alt="Hawkins, 2024" rid="ref-Diozero" ref-type="bibr">Hawkins,
  2024</xref>) provides a component-oriented Java API for GPIO, I2C,
  SPI, and PWM devices, encapsulating devices as high-level classes and
  supporting multiple board types.</p>
  <p>Both Diozero and Pi4Micronaut abstract hardware details, but
  Pi4Micronaut is mainly focused on Raspberry Pi and is distinguished by
  its deep integration with the Micronaut framework, enabling advanced
  features such as dependency injection, modular microservice
  architectures, and seamless bean management. In Pi4Micronaut, hardware
  components are managed as Micronaut beans, enabling scalable and
  maintainable IoT applications for complex research and scientific
  computing.</p>
  <p>Pi4Micronaut simplifies deployment by allowing developers to
  package the entire application as a single <monospace>.jar</monospace>
  file, reducing complexity and improving maintainability. Additionally,
  this deployment model ensures that the entire application, including
  dependencies, is bundled in one executable file, simplifying
  installation and reducing the risk of version conflicts.</p>
  <p>Researchers can interact with hardware components through intuitive
  API calls, simplifying the process of developing and extending
  IoT-based research instruments. Micronaut’s efficient bean management
  ensures that beans are instantiated only when needed, reducing memory
  usage and enhancing performance — a crucial benefit for the limited
  resources of the Raspberry Pi. This design choice improves
  responsiveness and ensures stable performance during real-time data
  collection, automation, and hardware control.</p>
</sec>
<sec id="functionality">
  <title>Functionality</title>
  <p>Pi4Micronaut provides an abstraction layer over Pi4J, making it
  easier for developers to interact with Raspberry Pi’s GPIO pins
  without dealing with low-level hardware programming. By combining the
  Micronaut framework, which is well-suited for building modular
  microservices, with Pi4J’s GPIO control, Pi4Micronaut enables
  responsive, real-time interaction with hardware components through
  Java.</p>
  <p>Key functionalities include:</p>
  <list list-type="bullet">
    <list-item>
      <p>Running Micronaut applications directly on Raspberry Pi</p>
    </list-item>
    <list-item>
      <p>Interacting with GPIO-based sensors and actuators using
      pre-built interfaces</p>
    </list-item>
    <list-item>
      <p>Supporting real-time data collection and analysis for research
      purposes</p>
    </list-item>
  </list>
</sec>
<sec id="availability">
  <title>Availability</title>
  <list list-type="bullet">
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://central.sonatype.com/artifact/io.github.oss-slu/pi4micronaut-utils">Pi4Micronaut
      library package</ext-link>.</p>
    </list-item>
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://github.com/oss-slu/Pi4Micronaut">Repository</ext-link></p>
    </list-item>
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://oss-slu.github.io/Pi4Micronaut/">Documentation</ext-link>.</p>
    </list-item>
  </list>
  <p>A
  <ext-link ext-link-type="uri" xlink:href="https://github.com/oss-slu/SLU_OSS_CheckIn">check-in
  system</ext-link> and a simple
  <ext-link ext-link-type="uri" xlink:href="https://github.com/oss-slu/Pi4Micronaut/tree/Home_Automation">security
  system</ext-link> were created as examples for how to use this
  library.</p>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p>To start using Pi4Micronaut, follow these steps:</p>
  <list list-type="order">
    <list-item>
      <p>Create a
      <ext-link ext-link-type="uri" xlink:href="https://micronaut.io/launch/">Micronaut
      Application</ext-link>.</p>
    </list-item>
    <list-item>
      <p>Add the Pi4Micronaut library
      (<monospace>implementation 'io.github.oss-slu:pi4micronaut-utils:v1.1'</monospace>)
      and any required dependencies.</p>
    </list-item>
    <list-item>
      <p>Set up the electronic components (e.g., sensors) on a Raspberry
      Pi GPIO extension board.</p>
    </list-item>
    <list-item>
      <p>Configure the components in the
      <monospace>application.yml</monospace> file for easy setup and
      integration.</p>
    </list-item>
    <list-item>
      <p>Setup and use the APIs to control and interact with the
      hardware components from your Micronaut application.</p>
    </list-item>
    <list-item>
      <p>Run the Micronaut application on the Raspberry Pi to begin
      monitoring or controlling the sensors.</p>
    </list-item>
  </list>
</sec>
<sec id="supported-components">
  <title>Supported Components</title>
  <p>Pi4Micronaut currently supports a wide range of sensors and
  actuators, including:</p>
  <list list-type="bullet">
    <list-item>
      <p>Push Button</p>
    </list-item>
    <list-item>
      <p>Slide Switch</p>
    </list-item>
    <list-item>
      <p>Tilt Switch</p>
    </list-item>
    <list-item>
      <p>Micro Switch</p>
    </list-item>
    <list-item>
      <p>Rotary Encoder</p>
    </list-item>
    <list-item>
      <p>RFID Scanner</p>
    </list-item>
    <list-item>
      <p>LED</p>
    </list-item>
    <list-item>
      <p>RGB LED</p>
    </list-item>
    <list-item>
      <p>LCD 1602 Screen</p>
    </list-item>
    <list-item>
      <p>Photo Resistor Sensor</p>
    </list-item>
    <list-item>
      <p>Touch Switch Sensor</p>
    </list-item>
    <list-item>
      <p>Active Buzzer</p>
    </list-item>
    <list-item>
      <p>Passive Buzzer</p>
    </list-item>
    <list-item>
      <p>PIR Motion Sensor</p>
    </list-item>
    <list-item>
      <p>Ultrasonic Sensor</p>
    </list-item>
    <list-item>
      <p>Servo Motor</p>
    </list-item>
  </list>
  <p>More components are planned for future releases.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>We would like to express our sincere gratitude to Alex Delgado, Joe
  Folen, John Yanev, and all other contributors who played an integral
  role in the development of Pi4Micronaut. Their efforts and dedication
  were essential in shaping the project, leading to the successful
  releases of versions 1.0 and 1.1. We extend special thanks to the
  early project team, whose groundwork laid the foundation for these
  milestones. Additionally, we are deeply grateful to Jeff Brown from
  the Unity Foundation for his invaluable guidance and support
  throughout the project. Finally, we offer our appreciation to Dr. Kate
  Holdener and Daniel Shown from Open Source with SLU for providing both
  funding and continuous support, making this project possible.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-JollesU003A2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jolles</surname><given-names>Jolle W.</given-names></name>
      </person-group>
      <article-title>Broad‐scale applications of the Raspberry Pi: A review and guide for biologists</article-title>
      <source>Methods in Ecology and Evolution</source>
      <year iso-8601-date="2021">2021</year>
      <volume>12</volume>
      <uri>https://doi.org/10.1111/2041-210X.13652</uri>
      <pub-id pub-id-type="doi">10.1111/2041-210X.13652</pub-id>
      <fpage>1562</fpage>
      <lpage>1579</lpage>
    </element-citation>
  </ref>
  <ref id="ref-LongleyU003A2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Longley M</surname><given-names>Tay CX</given-names><suffix>Willis EL</suffix></name>
      </person-group>
      <article-title>An open source device for operant licking in rats</article-title>
      <source>PeerJ</source>
      <year iso-8601-date="2017">2017</year>
      <volume>5</volume>
      <uri>https://doi.org/10.7717/peerj.2981</uri>
      <pub-id pub-id-type="doi">10.7717/peerj.2981</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ShahU003A2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Shah</surname><suffix>Neel P.</suffix></name>
        <name><surname>Bhatt</surname><given-names>Priyang</given-names></name>
      </person-group>
      <article-title>Greenhouse automation and monitoring system design and implementation</article-title>
      <source>International Journal of Advanced Research in Computer Science</source>
      <year iso-8601-date="2017">2017</year>
      <volume>8</volume>
      <uri>http://dx.doi.org/10.26483/ijarcs.v8i9.4981</uri>
      <pub-id pub-id-type="doi">10.26483/ijarcs.v8i9.4981</pub-id>
      <fpage>468</fpage>
      <lpage>471</lpage>
    </element-citation>
  </ref>
  <ref id="ref-KnollU003A2010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>P. Knoll</surname><given-names>S. Mirzaei</given-names></name>
      </person-group>
      <article-title>Scientific computing with Java</article-title>
      <source>Wiley Periodicals, Inc. Computions Applications in Engineering Education</source>
      <year iso-8601-date="2010">2010</year>
      <volume>18</volume>
      <uri>https://doi.org/10.1002/cae.20217</uri>
      <pub-id pub-id-type="doi">10.1002/cae.20217</pub-id>
      <fpage>495</fpage>
      <lpage>501</lpage>
    </element-citation>
  </ref>
  <ref id="ref-RPi.GPIO">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Croston</surname><given-names>Ben</given-names></name>
      </person-group>
      <article-title>RPi.GPIO: A Python library for Raspberry Pi GPIO control</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://pypi.org/project/RPi.GPIO/</uri>
    </element-citation>
  </ref>
  <ref id="ref-Diozero">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Hawkins</surname><given-names>Matt</given-names></name>
      </person-group>
      <article-title>Diozero: Device I/O library for the Raspberry Pi and other platforms</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/mattjlewis/diozero</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
