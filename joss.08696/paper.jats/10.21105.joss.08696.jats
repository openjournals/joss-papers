<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8696</article-id>
<article-id pub-id-type="doi">10.21105/joss.08696</article-id>
<title-group>
<article-title>Enabling the Verification and Formalization of Hybrid
Quantum-Classical Computing with OpenQASM 3.0 compatible QASM-TS
2.0</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0006-1223-1895</contrib-id>
<name>
<surname>Kim</surname>
<given-names>Sean</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6591-9585</contrib-id>
<name>
<surname>Edwards</surname>
<given-names>Marcus</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>George Washington University, United States of
America</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of British Columbia, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-07-30">
<day>30</day>
<month>7</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>8696</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>TypeScript</kwd>
<kwd>Quantum computing</kwd>
<kwd>Compiling</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The unique features of the hybrid quantum-classical computing model
  implied by the specification of OpenQASM 3.0 motivate new approaches
  to quantum program verification. We implement and thoroughly test a
  QASM 3.0 parser in TypeScript to enable implementations of
  verification and validation software, compilers, and more. We aim to
  help the community to formalize the logic of hybrid quantum-classical
  computing by providing tools that may help with such efforts.</p>
  <sec id="top-level-abstractions">
    <title>Top Level Abstractions</title>
    <p>The parser implements recursive descent parsing with support for
    expression precedence and type checking. At a high level, the
    parsing can be split into three logical sections: expression
    parsing, quantum-specific parsing, and classical parsing.</p>
    <p>Expression parsing forms the foundation for both quantum and
    classical parsing by breaking down expressions into their
    constituent parts and rebuilding them according to the mathematical
    and operator syntax defined in the OpenQASM 3.0 official grammar
    (<xref alt="OpenQASM 3.0 Grammar, n.d." rid="ref-noauthor_qasm_grammar_nodate" ref-type="bibr"><italic>OpenQASM
    3.0 Grammar</italic>, n.d.</xref>). Starting with basic elements
    like numbers, variables, and operators, the parser constructs an
    abstract syntax tree that reflects proper operator precedence and
    nesting. This process handles not only mathematical operations but
    also array accesses, function calls, and parameter lists, creating a
    structured representation that maintains the logical relationships
    between all parts of the expression.</p>
    <p>Quantum operation parsing manages the core quantum computing
    elements of QASM, ensuring that quantum operations are syntactically
    correct. The parser maintains strict tracking of quantum resources
    through its <italic>gates</italic>, <italic>standardGates</italic>,
    and <italic>customGates</italic> sets, validating that each quantum
    operation references only properly defined gates and qubits. It
    processes quantum register declarations, custom gate definitions,
    gate applications (including gate modifiers), measurement
    operations, and timing-critical operations like barriers and delays.
    Each quantum operation is validated in its context.</p>
    <p>The classical parsing processes classical variable declarations
    with strict type checking, function definitions with parameter and
    return type validation, control flow structures like conditional
    statements and loops, and array operations. The parser maintains
    separate tracking for classical and quantum resources while ensuring
    they can interact in well-defined ways. This enables QASM programs
    to express complex quantum algorithms that require classical
    processing while maintaining type safety and operational
    validity.</p>
    <p>Our parser produces a strongly-typed AST that captures the full
    structure of QASM programs and is designed to enable subsequent
    semantic analysis.</p>
  </sec>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>The OpenQASM 3.0 type system supports classical and quantum types
  as well as functions which can be used to specify hybrid
  quantum-classical programs.</p>
  <p>There is need for formal analysis and verification of hybrid
  quantum classical programs and we argue that mathematical frameworks
  and software frameworks are needed to address this gap.</p>
  <p>Hand-in-hand with formalization efforts are the development of
  community standards for quantum programming. The standardization of
  quantum computer programming is ongoing
  (<xref alt="Cross et al., 2022" rid="ref-Cross_2022" ref-type="bibr">Cross
  et al., 2022</xref>;
  <xref alt="Di Matteo et al., 2024" rid="ref-di_matteo_abstraction_2024" ref-type="bibr">Di
  Matteo et al., 2024</xref>) and relies significantly on open source
  software and frameworks including some released only last year
  (<xref alt="Seidel et al., 2024" rid="ref-seidel2024qrispframeworkcompilablehighlevel" ref-type="bibr">Seidel
  et al., 2024</xref>;
  <xref alt="Wille et al., 2024" rid="ref-qdmi" ref-type="bibr">Wille et
  al., 2024</xref>). Some community standards such as the 2022 Open
  Quantum Assembly (OpenQASM) 3.0 specification boast typing as well as
  interoperability and portability between quantum systems of different
  types. However, others such as the QUASAR instruction set architecture
  assume some backend details such as a classical co-processor to
  complement the Quantum Processing Unit (QPU)
  (<xref alt="Shammah et al., 2024" rid="ref-shammah_open_2024" ref-type="bibr">Shammah
  et al., 2024</xref>). To what extent the classical surrounds of a
  quantum processing unit should be assumed or specified and at what
  part of the stack is an open question. This “piping” can leverage many
  classical programming paradigms including web technology. What we
  refer to here is distinct from cloud quantum computing which simply
  offers a web-accessible front-end to users of quantum computers.
  Instead, we are interested in parts of the programming model itself,
  such as pieces of the compile toolchain (compilers, transpilers,
  assemblers, noise profilers, schedulers) that are implemented using
  web technology. An example of this is Quantinuum’s QEC decoder
  toolkit, which uses a WebAssembly (WASM) virtual machine (WAVM) as a
  real-time classical compute environment for QEC decoding
  (<xref alt="QEC Decoder Toolkit - H-Series, n.d." rid="ref-noauthor_qec_nodate" ref-type="bibr"><italic>QEC
  Decoder Toolkit - H-Series</italic>, n.d.</xref>). Other examples
  include our ports of Quantum Assembly (QASM), Quantum Macro Assembler
  (QMASM), and Blackbrid to TypeScript
  (<xref alt="Edwards, 2023" rid="ref-edwards_three_2023" ref-type="bibr">Edwards,
  2023</xref>).</p>
  <p>An important part of standardization is verification. Our typed
  OpenQASM 3.0 parser implements a system that infers types from QASM
  syntax. This opens the door to the type-based formal verification of
  QASM code. A body of work exists regarding the verification of quantum
  software, and it is summarized in Fortunato et al.
  (<xref alt="2024" rid="ref-exman_verification_2024" ref-type="bibr">2024</xref>).</p>
  <p>The primary future direction that we see is the development of
  verification tools such as static analysis tools based on QASM-TS in
  the vein of QChecker
  (<xref alt="Zhao et al., 2023" rid="ref-zhao_qchecker_2023" ref-type="bibr">Zhao
  et al., 2023</xref>). This could be complemented by a formal type
  theory of OpenQASM 3.0.</p>
  <p>Virtually every quantum computing company has provided access
  through a hybrid cloud. This demands that parts of the stack be
  implemented in web technology, and we argue that it is optimal in a
  sense to use technology that is designed for this environment when we
  find ourselves working in a hybrid quantum / classical cloud. We
  suggest that a closer marriage of open source efforts to the
  inherently web-based stack supporting existing quantum computing
  offerings is desirable.</p>
  <p>We note that Osaka University’s open-source quantum computer
  operating system project “Oqtopus” already depends on and makes use of
  Qasm-ts
  (<xref alt="Aso et al., 2024" rid="ref-osaka_2025" ref-type="bibr">Aso
  et al., 2024</xref>) and thank the Oqtopus team for their interest in
  our work.</p>
</sec>
<sec id="outcomes">
  <title>Outcomes</title>
  <p>Our comparative analysis focused on two promiment OpenQASM 3.0
  parsers: Qiskit’s Python ANLTR-based reference implementation and
  Qiskit’s experimental Rust parser.</p>
  <sec id="performance-benchmarking">
    <title>Performance Benchmarking</title>
    <table-wrap>
      <table>
        <thead>
          <tr>
            <th align="left">Benchmark Results</th>
            <th></th>
            <th></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">Result</td>
            <td>ANTLR Parser</td>
            <td>Rust Parser</td>
            <td>Qasm-ts</td>
          </tr>
          <tr>
            <td align="left">Success Rate</td>
            <td>100% (11/11 files)</td>
            <td>18.2% (2/11 files)</td>
            <td>100% (11/11 files)</td>
          </tr>
          <tr>
            <td align="left">Average Time</td>
            <td>8.53 ms</td>
            <td>0.59 ms</td>
            <td>0.90 ms</td>
          </tr>
          <tr>
            <td align="left">Min Time</td>
            <td>1.93 ms</td>
            <td>0.55 ms</td>
            <td>0.36 ms</td>
          </tr>
          <tr>
            <td align="left">Max Time</td>
            <td>30.54 ms</td>
            <td>0.62 ms</td>
            <td>3.68 ms</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p>The benchmarking reveals that when just taking into account the
    AST generation, the Rust implementation generally offers superior
    raw performance, but suffers from only currently supporting a subset
    of the full OpenQASM 3.0 specification. The QASM-TS parser provides
    competitive performance for web deployment scenarios, while the
    ANTLR parser offers a balance of features and performance suitable
    for development and testing.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank Dr. Shohini Ghose for support and helpful
  discussions regarding the previous version of this software package,
  QASM-TS 1.0, which has had use in the community by hundreds (counted
  by npm downloads).</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-di_matteo_abstraction_2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Di Matteo</surname><given-names>Olivia</given-names></name>
        <name><surname>Nunez-Corrales</surname><given-names>Santiago</given-names></name>
        <name><surname>Stechly</surname><given-names>Michal</given-names></name>
        <name><surname>Reinhardt</surname><given-names>Steven P.</given-names></name>
        <name><surname>Mattson</surname><given-names>Tim</given-names></name>
      </person-group>
      <article-title>An abstraction hierarchy toward productive quantum programming</article-title>
      <source>IEEE International Conference on Quantum Computing and Engineering (QCE) 2024</source>
      <year iso-8601-date="2024">2024</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-08-13">2025</year><month>08</month><day>13</day></date-in-citation>
      <uri>https://ieeexplore.ieee.org/document/10821267</uri>
      <pub-id pub-id-type="doi">10.1109/qce60285.2024.00117</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Cross_2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cross</surname><given-names>Andrew</given-names></name>
        <name><surname>Javadi-Abhari</surname><given-names>Ali</given-names></name>
        <name><surname>Alexander</surname><given-names>Thomas</given-names></name>
        <name><surname>De Beaudrap</surname><given-names>Niel</given-names></name>
        <name><surname>Bishop</surname><given-names>Lev S.</given-names></name>
        <name><surname>Heidel</surname><given-names>Steven</given-names></name>
        <name><surname>Ryan</surname><given-names>Colm A.</given-names></name>
        <name><surname>Sivarajah</surname><given-names>Prasahnt</given-names></name>
        <name><surname>Smolin</surname><given-names>John</given-names></name>
        <name><surname>Gambetta</surname><given-names>Jay M.</given-names></name>
        <name><surname>Johnson</surname><given-names>Blake R.</given-names></name>
      </person-group>
      <article-title>OpenQASM 3: A broader and deeper quantum assembly language</article-title>
      <source>ACM Transactions on Quantum Computing</source>
      <publisher-name>Association for Computing Machinery (ACM)</publisher-name>
      <year iso-8601-date="2022-09">2022</year><month>09</month>
      <volume>3</volume>
      <issue>3</issue>
      <issn>2643-6817</issn>
      <uri>http://dx.doi.org/10.1145/3505636</uri>
      <pub-id pub-id-type="doi">10.1145/3505636</pub-id>
      <fpage>1</fpage>
      <lpage>50</lpage>
    </element-citation>
  </ref>
  <ref id="ref-seidel2024qrispframeworkcompilablehighlevel">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Seidel</surname><given-names>Raphael</given-names></name>
        <name><surname>Bock</surname><given-names>Sebastian</given-names></name>
        <name><surname>Zander</surname><given-names>René</given-names></name>
        <name><surname>Petrič</surname><given-names>Matic</given-names></name>
        <name><surname>Steinmann</surname><given-names>Niklas</given-names></name>
        <name><surname>Tcholtchev</surname><given-names>Nikolay</given-names></name>
        <name><surname>Hauswirth</surname><given-names>Manfred</given-names></name>
      </person-group>
      <article-title>Qrisp: A framework for compilable high-level programming of gate-based quantum computers</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://arxiv.org/abs/2406.14792</uri>
    </element-citation>
  </ref>
  <ref id="ref-shammah_open_2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Shammah</surname><given-names>Nathan</given-names></name>
        <name><surname>Roy</surname><given-names>Anurag Saha</given-names></name>
        <name><surname>Almudever</surname><given-names>Carmen G.</given-names></name>
        <name><surname>Bourdeauducq</surname><given-names>Sébastien</given-names></name>
        <name><surname>Butko</surname><given-names>Anastasiia</given-names></name>
        <name><surname>Cancelo</surname><given-names>Gustavo</given-names></name>
        <name><surname>Clark</surname><given-names>Susan M.</given-names></name>
        <name><surname>Heinsoo</surname><given-names>Johannes</given-names></name>
        <name><surname>Henriet</surname><given-names>Loïc</given-names></name>
        <name><surname>Huang</surname><given-names>Gang</given-names></name>
        <name><surname>Jurczak</surname><given-names>Christophe</given-names></name>
        <name><surname>Kotilahti</surname><given-names>Janne</given-names></name>
        <name><surname>Landra</surname><given-names>Alessandro</given-names></name>
        <name><surname>LaRose</surname><given-names>Ryan</given-names></name>
        <name><surname>Mari</surname><given-names>Andrea</given-names></name>
        <name><surname>Nowrouzi</surname><given-names>Kasra</given-names></name>
        <name><surname>Ockeloen-Korppi</surname><given-names>Caspar</given-names></name>
        <name><surname>Prawiroatmodjo</surname><given-names>Guen</given-names></name>
        <name><surname>Siddiqi</surname><given-names>Irfan</given-names></name>
        <name><surname>Zeng</surname><given-names>William J.</given-names></name>
      </person-group>
      <article-title>Open hardware solutions in quantum technology</article-title>
      <source>APL Quantum</source>
      <year iso-8601-date="2024-03">2024</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-09-09">2024</year><month>09</month><day>09</day></date-in-citation>
      <volume>1</volume>
      <issue>1</issue>
      <issn>2835-0103</issn>
      <uri>http://arxiv.org/abs/2309.17233</uri>
      <pub-id pub-id-type="doi">10.1063/5.0180987</pub-id>
      <fpage>011501</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-edwards_three_2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Edwards</surname><given-names>Marcus</given-names></name>
      </person-group>
      <article-title>Three quantum programming language parser implementations for the web</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2023-10">2023</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-11-20">2024</year><month>11</month><day>20</day></date-in-citation>
      <uri>http://arxiv.org/abs/2310.10802</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2310.10802</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-noauthor_qasm_grammar_nodate">
    <element-citation>
      <article-title>OpenQASM 3.0 Grammar</article-title>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-11-24">2024</year><month>11</month><day>24</day></date-in-citation>
      <uri>https://openqasm.com/grammar/index.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-noauthor_qec_nodate">
    <element-citation>
      <article-title>QEC Decoder Toolkit - H-Series</article-title>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-11-20">2024</year><month>11</month><day>20</day></date-in-citation>
      <uri>https://www.quantinuum.com/blog/making-fault-tolerance-a-reality-introducing-our-qec-decoder-toolkit</uri>
    </element-citation>
  </ref>
  <ref id="ref-qdmi">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Wille</surname><given-names>Robert</given-names></name>
        <name><surname>Schmid</surname><given-names>Ludwig</given-names></name>
        <name><surname>Stade</surname><given-names>Yannick</given-names></name>
        <name><surname>Echavarria</surname><given-names>Jorge</given-names></name>
        <name><surname>Schulz</surname><given-names>Martin</given-names></name>
        <name><surname>Schulz</surname><given-names>Laura</given-names></name>
        <name><surname>Burgholzer</surname><given-names>Lukas</given-names></name>
      </person-group>
      <article-title>QDMI – Quantum Device Management Interface: A standardized interface for quantum computing platforms</article-title>
      <source>IEEE international conference on quantum computing and engineering (QCE)</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-exman_verification_2024">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Fortunato</surname><given-names>Daniel</given-names></name>
        <name><surname>Jiménez-Navajas</surname><given-names>Luis</given-names></name>
        <name><surname>Campos</surname><given-names>José</given-names></name>
        <name><surname>Abreu</surname><given-names>Rui</given-names></name>
      </person-group>
      <article-title>Verification and validation of quantum software</article-title>
      <source>Quantum Software</source>
      <person-group person-group-type="editor">
        <name><surname>Exman</surname><given-names>Iaakov</given-names></name>
        <name><surname>Pérez-Castillo</surname><given-names>Ricardo</given-names></name>
        <name><surname>Piattini</surname><given-names>Mario</given-names></name>
        <name><surname>Felderer</surname><given-names>Michael</given-names></name>
      </person-group>
      <publisher-name>Springer Nature Switzerland</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2024">2024</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-11-21">2024</year><month>11</month><day>21</day></date-in-citation>
      <isbn>978-3-031-64136-7</isbn>
      <uri>https://link.springer.com/10.1007/978-3-031-64136-7_5</uri>
      <pub-id pub-id-type="doi">10.1007/978-3-031-64136-7_5</pub-id>
      <fpage>93</fpage>
      <lpage>123</lpage>
    </element-citation>
  </ref>
  <ref id="ref-zhao_qchecker_2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Zhao</surname><given-names>Pengzhan</given-names></name>
        <name><surname>Wu</surname><given-names>Xiongfei</given-names></name>
        <name><surname>Li</surname><given-names>Zhuo</given-names></name>
        <name><surname>Zhao</surname><given-names>Jianjun</given-names></name>
      </person-group>
      <article-title>QChecker: Detecting bugs in quantum programs via static analysis</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2023-04">2023</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-11-25">2024</year><month>11</month><day>25</day></date-in-citation>
      <uri>http://arxiv.org/abs/2304.04387</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2304.04387</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-osaka_2025">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Aso</surname><given-names>Noriyasu</given-names></name>
        <name><surname>Feluś</surname><given-names>Karolina</given-names></name>
        <name><surname>Gaj</surname><given-names>Adrian</given-names></name>
        <name><surname>Gokita</surname><given-names>Shun</given-names></name>
        <name><surname>Góralczyk</surname><given-names>Sławomir</given-names></name>
        <name><surname>Kakuko</surname><given-names>Norihiro</given-names></name>
        <name><surname>Masumoto</surname><given-names>Naoyuki</given-names></name>
        <name><surname>Miyaji</surname><given-names>Kosuke</given-names></name>
        <name><surname>Miyanaga</surname><given-names>Takafumi</given-names></name>
        <name><surname>Mori</surname><given-names>Toshio</given-names></name>
        <name><surname>Noda</surname><given-names>Kunihiro</given-names></name>
        <name><surname>Tsukano</surname><given-names>Satoyuki</given-names></name>
        <name><surname>Ymaguchi</surname><given-names>Masaomi</given-names></name>
        <name><surname>Żybort</surname><given-names>Dobrosław</given-names></name>
      </person-group>
      <article-title>OQTOPUS cloud</article-title>
      <year iso-8601-date="2024-09">2024</year><month>09</month>
      <uri>https://github.com/oqtopus-team/oqtopus-cloud</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
