<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8385</article-id>
<article-id pub-id-type="doi">10.21105/joss.08385</article-id>
<title-group>
<article-title>Tesseract Core: Universal, autodiff-native software
components for Simulation Intelligence</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4465-7317</contrib-id>
<name>
<surname>Häfner</surname>
<given-names>Dion</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3422-7820</contrib-id>
<name>
<surname>Lavin</surname>
<given-names>Alexander</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Pasteur Labs, Brooklyn, NY, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-05-14">
<day>14</day>
<month>5</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>111</issue>
<fpage>8385</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>automatic-differentiation</kwd>
<kwd>differentiable-programming</kwd>
<kwd>scientific-machine-learning</kwd>
<kwd>simulation</kwd>
<kwd>container</kwd>
<kwd>remote-procedure-call</kwd>
<kwd>cloud-computing</kwd>
<kwd>scientific-computing</kwd>
<kwd>python</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Tesseracts are universal software components for scientific
  computing, simulation, and machine learning (ML), summarized as
  “simulation intelligence” (SI)
  (<xref alt="Lavin et al., 2021" rid="ref-lavin-si" ref-type="bibr">Lavin
  et al., 2021</xref>). Specifically, Tesseracts enable and expedite the
  transition from experimental, research-grade software to production
  environments. This includes native support for automatic
  differentiation between heterogeneous software artifacts in
  distributed and cloud contexts, which enables end-to-end
  differentiable programming, hybrid ML and simulation systems, and more
  for SI at scale.</p>
  <p>Tesseract Core is a Python library that serves as the reference
  implementation for defining, containerizing, executing, and deploying
  Tesseract components. It provides user entry points to wrap existing
  software artifacts such as Python functions, Julia code, C++
  libraries, or remote services into Tesseract components. By
  unambiguously defining allowed inputs and outputs of each Tesseract
  via Pydantic models
  (<xref alt="Colvin et al., 2025" rid="ref-pydantic" ref-type="bibr">Colvin
  et al., 2025</xref>), Tesseract Core enables external data validation
  and auto-generation of machine-readable API schemas. This allows users
  to explore the capabilities of Tesseract components without
  interacting with code, and enables workflow engines to compose them
  into larger, self-validating pipelines that are, by the virtue of
  implementing Tesseracts, end-to-end differentiable. Tesseract
  components are built to be deployed in distributed contexts, including
  support for containerization and remote procedure calls (RPC) via
  network.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The last few years have seen a rapid increase in the use of machine
  learning and data-driven methods within scientific computing and
  industrial simulation. However, when moving beyond the research lab
  and into real-world engineering workflows, the gap between
  (GPU-accelerated, autodiff-native, high-level, bare-bones) research
  code and (CPU-bound, non-differentiable, low-level, feature-rich)
  production code is often too large to bridge. Similar issues arise
  when integrating components of different software stacks (e.g.,
  Python, Julia, C++), and when deploying components in heterogeneous or
  distributed environments (e.g., cloud vs. on-prem, high-performance
  computing (HPC), and supercomputers).</p>
  <p>These software bottlenecks translate to significant untapped
  potential of differentiable programming in particular and simulation
  intelligence in general—for example, when exploring the merits of
  hybrid AI-simulator systems in differentiable physics contexts
  (<xref alt="Avila Belbute-Peres et al., 2018" rid="ref-diffphys" ref-type="bibr">Avila
  Belbute-Peres et al., 2018</xref>;
  <xref alt="Kochkov et al., 2024" rid="ref-neuralgcm" ref-type="bibr">Kochkov
  et al., 2024</xref>;
  <xref alt="Um et al., 2020" rid="ref-solverintheloop" ref-type="bibr">Um
  et al., 2020</xref>), or when using machine learning to augment
  existing simulation codes
  (<xref alt="Freitas et al., 2024" rid="ref-closure1" ref-type="bibr">Freitas
  et al., 2024</xref>;
  <xref alt="Shankar et al., 2025" rid="ref-closure2" ref-type="bibr">Shankar
  et al., 2025</xref>).</p>
  <p>Tesseract Core remediates these bottlenecks and elevates
  integration possibilities by acting as glue between several user
  groups
  (<xref alt="[fig:user-groups]" rid="figU003Auser-groups">[fig:user-groups]</xref>):</p>
  <fig>
    <caption><p>Creating, deploying, and using Tesseracts through the
    lens of various user
    groups.<styled-content id="figU003Auser-groups"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="tesseract-user-interactions.png" />
  </fig>
  <list list-type="order">
    <list-item>
      <p><bold>Researchers</bold> building multi-component systems and
      experiment pipelines: Tesseract Core provides consistent
      interfaces to interact with any Tesseract component in the same
      way. This allows users to discover and download existing Tesseract
      containers, lowering the bar for researchers to experiment with
      many different components when developing <italic>systems</italic>
      rather than single <italic>operations</italic>.</p>
    </list-item>
    <list-item>
      <p><bold>R&amp;D software engineers</bold> building research tools
      and packaging them: Tesseracts are defined via a Python-based
      interface with minimal configuration. Users specify input/output
      schemas for each Tesseract, enabling transparent I/O validation,
      automatic differentiation, and remote execution behind a unified
      interface. Tesseract Core provides the tools to validate and build
      Docker containers from Tesseract definitions.</p>
    </list-item>
    <list-item>
      <p><bold>Platform and HPC engineers</bold> building SI workloads
      at scale: Tesseracts can be executed in any environment that
      supports the Tesseract runtime. This allows them to be embedded
      into virtually any orchestration framework and executed on bare
      metal, in the cloud, or on compute clusters. Tesseracts expose
      their input/output schemas according to the machine-readable
      OpenAPI format, facilitating automated integration into external
      workflows engines.</p>
    </list-item>
  </list>
  <p>This is a markedly different scope than what is found in existing
  software solutions, which typically focus on a single aspect of the
  problem space—such as containerization (e.g., Docker, Singularity),
  remote procedure calls (e.g., gRPC), automatic differentiation (e.g.,
  JAX, PyTorch), and container orchestration (e.g., Kubernetes, Docker
  Compose)—or are geared towards specific use cases, like Gymnasium
  (<xref alt="Brockman et al., 2016" rid="ref-brockman2016openai" ref-type="bibr">Brockman
  et al., 2016</xref>) for reinforcement learning, or UM-Bridge
  (<xref alt="Seelinger et al., 2023" rid="ref-seelinger2023bridge" ref-type="bibr">Seelinger
  et al., 2023</xref>) for probabilistic programming and HPC. Tesseract
  Core aims to unify the most valuable parts of these aspects into a
  single, coherent ecosystem that makes it easy to use and deploy SI
  methods across different environments.</p>
  <p>Concretely, Tesseract Core addresses many of the fundamental issues
  that arise when building real-world SI systems, including but not
  limited to:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Code sharing</bold> – How do I make my research-grade
      simulation code available to other users who are not familiar with
      the codebase?</p>
    </list-item>
    <list-item>
      <p><bold>Reproducibility</bold> – How can I ensure that my
      simulation code is executed in a consistent and reproducible
      manner, regardless of the environment?</p>
    </list-item>
    <list-item>
      <p><bold>Streamlined experimentation</bold> – How can I experiment
      with different 3rd party simulators, differentiable meshing
      routines, or ML models without having to install all their
      dependencies or study their documentation in depth?</p>
    </list-item>
    <list-item>
      <p><bold>Dependency management</bold> – How do I resolve conflicts
      between different software or hardware requirements of components
      working together in a pipeline?</p>
    </list-item>
    <list-item>
      <p><bold>Remote execution</bold> – How do I execute my SciML
      software on a cloud VM and query it from my local machine?</p>
    </list-item>
    <list-item>
      <p><bold>Explicit interfaces</bold> – How do I discover at a
      glance which parameters of a software branded as “differentiable
      simulator” are differentiable and which are not?</p>
    </list-item>
    <list-item>
      <p><bold>Distributed differentiable programming</bold> – How do I
      propagate gradients end-to-end through complex pipelines mixing
      torch, JAX, and Julia code?</p>
    </list-item>
  </list>
  <p>Specific end-to-end examples that leverage the Tesseract ecosystem
  to address these issues in research and engineering settings are
  highlighted and continuously published in the
  <ext-link ext-link-type="uri" xlink:href="https://si-tesseract.discourse.group/c/showcase">Tesseract
  community showcase</ext-link>.</p>
</sec>
<sec id="software-design">
  <title>Software design</title>
  <fig>
    <caption><p>The make-up of a Tesseract highlighting its external and
    internal
    interfaces.<styled-content id="figU003Atess-interfaces"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="what-makes-a-tesseract.png" />
  </fig>
  <p>A Tesseract is any object that is served behind the Tesseract
  runtime, which ships with Tesseract Core and bundles a command-line
  interface (CLI), Python API, and REST API. Each of these external
  interfaces maps to the same internal code path, which ultimately
  invokes a <monospace>tesseract_api.py</monospace> Python module,
  provided by the Tesseract creator
  (<xref alt="[fig:tess-interfaces]" rid="figU003Atess-interfaces">[fig:tess-interfaces]</xref>).</p>
  <p>The structure of <monospace>tesseract_api.py</monospace> (and thus
  the Tesseract interface itself) is centered around a functional
  programming style without internal state. Specifically, this means
  that each Tesseract is assumed to wrap a single operation
  (<monospace>apply</monospace>) that takes a set of (arbitrarily
  nested) inputs and produces a set of outputs. All other Tesseract
  endpoints like <monospace>jacobian</monospace>,
  <monospace>abstract_eval</monospace>, or
  <monospace>vector_jacobian_product</monospace> represent
  transformations of the <monospace>apply</monospace> function. This is
  strongly inspired by JAX primitives
  (<xref alt="Bradbury et al., 2018" rid="ref-jax2018github" ref-type="bibr">Bradbury
  et al., 2018</xref>), and enables the efficient use of automatic
  differentiation (AD) techniques such as reverse-mode AD and
  forward-mode AD
  (<xref alt="Ma et al., 2021" rid="ref-autodiff" ref-type="bibr">Ma et
  al., 2021</xref>), invoked manually or through existing AD engines
  (<xref alt="[fig:tess-pipeline]" rid="figU003Atess-pipeline">[fig:tess-pipeline]</xref>).</p>
  <fig>
    <caption><p>Example data flow through a Tesseract-driven compute
    pipeline, both during forward application and reverse-mode AD. When
    using a Tesseract-aware AD engine, implementation details of
    Tesseract endpoints (such as <monospace>apply</monospace>
    vs. <monospace>vector_jacobian_product</monospace>) are hidden from
    the
    user.<styled-content id="figU003Atess-pipeline"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="tesseract-dataflow.png" />
  </fig>
  <p>These methods and the myriad scenarios in which they can be applied
  continue to be real-world validated in diverse scientific contexts,
  engineering physics applications, and industrial simulation
  environments. Progress in these areas and more can be found in the
  Tesseract open-source community, at
  <ext-link ext-link-type="uri" xlink:href="https://si-tesseract.discourse.group">https://si-tesseract.discourse.group</ext-link>.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-lavin-si">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lavin</surname><given-names>Alexander</given-names></name>
        <name><surname>Krakauer</surname><given-names>David</given-names></name>
        <name><surname>Zenil</surname><given-names>Hector</given-names></name>
        <name><surname>Gottschlich</surname><given-names>Justin</given-names></name>
        <name><surname>Mattson</surname><given-names>Tim</given-names></name>
        <name><surname>Brehmer</surname><given-names>Johann</given-names></name>
        <name><surname>Anandkumar</surname><given-names>Anima</given-names></name>
        <name><surname>Choudry</surname><given-names>Sanjay</given-names></name>
        <name><surname>Rocki</surname><given-names>Kamil</given-names></name>
        <name><surname>Baydin</surname><given-names>Atılım Güneş</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Simulation intelligence: Towards a new generation of scientific methods</article-title>
      <source>arXiv preprint arXiv:2112.03235</source>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2112.03235</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pydantic">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Colvin</surname><given-names>Samuel</given-names></name>
        <name><surname>Jolibois</surname><given-names>Eric</given-names></name>
        <name><surname>Ramezani</surname><given-names>Hasan</given-names></name>
        <name><surname>Garcia Badaracco</surname><given-names>Adrian</given-names></name>
        <name><surname>Dorsey</surname><given-names>Terrence</given-names></name>
        <name><surname>Montague</surname><given-names>David</given-names></name>
        <name><surname>Matveenko</surname><given-names>Serge</given-names></name>
        <name><surname>Trylesinski</surname><given-names>Marcelo</given-names></name>
        <name><surname>Runkle</surname><given-names>Sydney</given-names></name>
        <name><surname>Hewitt</surname><given-names>David</given-names></name>
        <name><surname>Hall</surname><given-names>Alex</given-names></name>
        <name><surname>Plot</surname><given-names>Victorien</given-names></name>
      </person-group>
      <article-title>Pydantic</article-title>
      <year iso-8601-date="2025-04">2025</year><month>04</month>
      <uri>https://github.com/pydantic/pydantic</uri>
    </element-citation>
  </ref>
  <ref id="ref-neuralgcm">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kochkov</surname><given-names>Dmitrii</given-names></name>
        <name><surname>Yuval</surname><given-names>Janni</given-names></name>
        <name><surname>Langmore</surname><given-names>Ian</given-names></name>
        <name><surname>Norgaard</surname><given-names>Peter</given-names></name>
        <name><surname>Smith</surname><given-names>Jamie</given-names></name>
        <name><surname>Mooers</surname><given-names>Griffin</given-names></name>
        <name><surname>Klöwer</surname><given-names>Milan</given-names></name>
        <name><surname>Lottes</surname><given-names>James</given-names></name>
        <name><surname>Rasp</surname><given-names>Stephan</given-names></name>
        <name><surname>Düben</surname><given-names>Peter</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Neural general circulation models for weather and climate</article-title>
      <source>Nature</source>
      <publisher-name>Nature Publishing Group UK London</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <volume>632</volume>
      <issue>8027</issue>
      <pub-id pub-id-type="doi">10.1038/s41586-024-07744-y</pub-id>
      <fpage>1060</fpage>
      <lpage>1066</lpage>
    </element-citation>
  </ref>
  <ref id="ref-solverintheloop">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Um</surname><given-names>Kiwon</given-names></name>
        <name><surname>Brand</surname><given-names>Robert</given-names></name>
        <name><surname>Fei</surname><given-names>Yun Raymond</given-names></name>
        <name><surname>Holl</surname><given-names>Philipp</given-names></name>
        <name><surname>Thuerey</surname><given-names>Nils</given-names></name>
      </person-group>
      <article-title>Solver-in-the-loop: Learning from differentiable physics to interact with iterative PDE-solvers</article-title>
      <source>Advances in neural information processing systems</source>
      <year iso-8601-date="2020">2020</year>
      <volume>33</volume>
      <fpage>6111</fpage>
      <lpage>6122</lpage>
    </element-citation>
  </ref>
  <ref id="ref-diffphys">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Avila Belbute-Peres</surname><given-names>Filipe de</given-names></name>
        <name><surname>Smith</surname><given-names>Kevin</given-names></name>
        <name><surname>Allen</surname><given-names>Kelsey</given-names></name>
        <name><surname>Tenenbaum</surname><given-names>Josh</given-names></name>
        <name><surname>Kolter</surname><given-names>J Zico</given-names></name>
      </person-group>
      <article-title>End-to-end differentiable physics for learning and control</article-title>
      <source>Advances in neural information processing systems</source>
      <year iso-8601-date="2018">2018</year>
      <volume>31</volume>
    </element-citation>
  </ref>
  <ref id="ref-closure1">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Freitas</surname><given-names>André</given-names></name>
        <name><surname>Um</surname><given-names>Kiwon</given-names></name>
        <name><surname>Desbrun</surname><given-names>Mathieu</given-names></name>
        <name><surname>Buzzicotti</surname><given-names>Michele</given-names></name>
        <name><surname>Biferale</surname><given-names>Luca</given-names></name>
      </person-group>
      <article-title>Solver-in-the-loop approach to turbulence closure</article-title>
      <source>arXiv preprint arXiv:2411.13194</source>
      <year iso-8601-date="2024">2024</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2411.13194</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-closure2">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Shankar</surname><given-names>Varun</given-names></name>
        <name><surname>Chakraborty</surname><given-names>Dibyajyoti</given-names></name>
        <name><surname>Viswanathan</surname><given-names>Venkatasubramanian</given-names></name>
        <name><surname>Maulik</surname><given-names>Romit</given-names></name>
      </person-group>
      <article-title>Differentiable turbulence: Closure as a partial differential equation constrained optimization</article-title>
      <source>Physical Review Fluids</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2025">2025</year>
      <volume>10</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1103/PhysRevFluids.10.024605</pub-id>
      <fpage>024605</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-jax2018github">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Frostig</surname><given-names>Roy</given-names></name>
        <name><surname>Hawkins</surname><given-names>Peter</given-names></name>
        <name><surname>Johnson</surname><given-names>Matthew James</given-names></name>
        <name><surname>Leary</surname><given-names>Chris</given-names></name>
        <name><surname>Maclaurin</surname><given-names>Dougal</given-names></name>
        <name><surname>Necula</surname><given-names>George</given-names></name>
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Wanderman-Milne</surname><given-names>Skye</given-names></name>
        <name><surname>Zhang</surname><given-names>Qiao</given-names></name>
      </person-group>
      <article-title>JAX: Composable transformations of Python+NumPy programs</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>http://github.com/jax-ml/jax</uri>
    </element-citation>
  </ref>
  <ref id="ref-autodiff">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ma</surname><given-names>Yingbo</given-names></name>
        <name><surname>Dixit</surname><given-names>Vaibhav</given-names></name>
        <name><surname>Innes</surname><given-names>Michael J</given-names></name>
        <name><surname>Guo</surname><given-names>Xingjian</given-names></name>
        <name><surname>Rackauckas</surname><given-names>Chris</given-names></name>
      </person-group>
      <article-title>A comparison of automatic differentiation and continuous sensitivity analysis for derivatives of differential equation solutions</article-title>
      <source>2021 IEEE high performance extreme computing conference (HPEC)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.1109/hpec49654.2021.9622796</pub-id>
      <fpage>1</fpage>
      <lpage>9</lpage>
    </element-citation>
  </ref>
  <ref id="ref-seelinger2023bridge">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Seelinger</surname><given-names>Linus</given-names></name>
        <name><surname>Cheng-Seelinger</surname><given-names>Vivian</given-names></name>
        <name><surname>Davis</surname><given-names>Andrew</given-names></name>
        <name><surname>Parno</surname><given-names>Matthew</given-names></name>
        <name><surname>Reinarz</surname><given-names>Anne</given-names></name>
      </person-group>
      <article-title>UM-bridge: Uncertainty quantification and modeling bridge</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>Open Journals</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>83</issue>
      <pub-id pub-id-type="doi">10.21105/joss.04748</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-brockman2016openai">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brockman</surname><given-names>Greg</given-names></name>
        <name><surname>Cheung</surname><given-names>Vicki</given-names></name>
        <name><surname>Pettersson</surname><given-names>Ludwig</given-names></name>
        <name><surname>Schneider</surname><given-names>Jonas</given-names></name>
        <name><surname>Schulman</surname><given-names>John</given-names></name>
        <name><surname>Tang</surname><given-names>Jie</given-names></name>
        <name><surname>Zaremba</surname><given-names>Wojciech</given-names></name>
      </person-group>
      <article-title>OpenAI gym</article-title>
      <source>arXiv preprint arXiv:1606.01540</source>
      <year iso-8601-date="2016">2016</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1606.01540</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
