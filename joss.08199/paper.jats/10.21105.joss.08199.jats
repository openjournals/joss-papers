<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8199</article-id>
<article-id pub-id-type="doi">10.21105/joss.08199</article-id>
<title-group>
<article-title>LMDiskANN.jl: An Implementation of the Low Memory Disk
Approximate Nearest Neighbors Search Algorithm</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0026-5725</contrib-id>
<name>
<surname>Mantzaris</surname>
<given-names>Alexander V.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Statistics and Data Science, University of
Central Florida (UCF), USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-01-25">
<day>25</day>
<month>1</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>110</issue>
<fpage>8199</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Julia</kwd>
<kwd>ANN</kwd>
<kwd>Embeddings</kwd>
<kwd>Search</kwd>
<kwd>Vector DB</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><bold>LMDiskANN.jl</bold> is a Julia
  (<xref alt="Bezanson et al., 2017" rid="ref-julia" ref-type="bibr">Bezanson
  et al., 2017</xref>) package that implements the Low Memory Disk
  Approximate Nearest Neighbor search algorithm (LM-DiskANN)
  (<xref alt="Pan et al., 2023" rid="ref-pan2023lm" ref-type="bibr">Pan
  et al., 2023</xref>), extending DiskANN-based methods
  (<xref alt="Jayaram Subramanya et al., 2019" rid="ref-jayaram2019diskann" ref-type="bibr">Jayaram
  Subramanya et al., 2019</xref>;
  <xref alt="Singh et al., 2021" rid="ref-singh2021freshdiskann" ref-type="bibr">Singh
  et al., 2021</xref>) for fast, accurate billion-point nearest neighbor
  search while significantly reducing in-memory usage. By leveraging
  memory-mapped files, a dynamic graph-based index, and tunable BFS
  expansions, <bold>LMDiskANN.jl</bold> enables large-scale similarity
  search on commodity hardware. This package integrates well with
  embedding-based workflows common in vector databases and modern
  machine learning pipelines. It also allows for insertions and
  deletions after the index has been constructed with operations to keep
  the index pruned of unnecessary connections in the graph.</p>
  <p>Features include:</p>
  <list list-type="bullet">
    <list-item>
      <p>Low-memory adjacency storage on disk using memory maps.</p>
    </list-item>
    <list-item>
      <p>Dynamic insert and delete operations on the graph index,
      adapting to changes in datasets.</p>
    </list-item>
    <list-item>
      <p>Configurable to tune performance vs. recall.</p>
    </list-item>
    <list-item>
      <p>Optional user-key LevelDB mapping for flexible ID to and from
      key lookups.</p>
    </list-item>
  </list>
  <p>By combining these capabilities, <bold>LMDiskANN.jl</bold> aims to
  reduce the memory footprint and overhead for large-scale nearest
  neighbor searches. It can be incorporated into any workflow that
  requires efficient embedding retrieval or similarity search for
  vectors in high-dimensional spaces.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Approximate Nearest Neighbor (ANN) search is a crucial component in
  domains such as recommendation systems, information retrieval, and
  representation learning (e.g., embeddings for natural language or
  computer vision). Traditional approaches can suffer from excessive
  memory usage and slow scaling when dealing with billions of points
  (<xref alt="Nene &amp; Nayar, 1997" rid="ref-nene1997simple" ref-type="bibr">Nene
  &amp; Nayar, 1997</xref>;
  <xref alt="Wang et al., 2021" rid="ref-wang2021comprehensive" ref-type="bibr">Wang
  et al., 2021</xref>). By persisting adjacency structures on disk
  rather than in memory, <bold>LMDiskANN.jl</bold> addresses some of
  these bottlenecks, providing:</p>
  <list list-type="order">
    <list-item>
      <p><bold>Reduced Memory Overhead</bold>: Only a minimal fraction
      of data needs to reside in RAM, making it feasible to handle
      larger datasets on modest machines.</p>
    </list-item>
    <list-item>
      <p><bold>Dynamic Updates</bold>: Graph-based insertions and
      deletions support real-time or streaming scenarios where data is
      continually changing.</p>
    </list-item>
    <list-item>
      <p><bold>High Recall</bold>: Tuning BFS expansions and adjacency
      degrees can yield high-quality nearest neighbor results.</p>
    </list-item>
    <list-item>
      <p><bold>Insertions and Deletions</bold>: Ability to insert and
      delete from a built index.</p>
    </list-item>
    <list-item>
      <p><bold>Scalable Architecture</bold>: Built on Julia’s
      high-performance ecosystem, bridging native disk operations and
      advanced numeric libraries.</p>
    </list-item>
  </list>
  <p>This approach benefits practitioners who need large-scale nearest
  neighbor indexing without specialized cluster infrastructures or
  extremely large memory capacities. The set up is made to have minimal
  requirements and has a simple installation procedure. Using the
  package involves a few number of steps and examples are provided in
  the documentation.</p>
  <sec id="state-of-the-field">
    <title>State of the field</title>
    <p>There are various open source ANN implementations and variants in
    other languages that are standalone or reside within different
    packages. Within the Julia ecosystem there are fewer options for
    users to choose from. The package SimilaritySearch.jl
    (<xref alt="Tellez &amp; Ruiz, 2022a" rid="ref-tellez2022similarity" ref-type="bibr">Tellez
    &amp; Ruiz, 2022a</xref>,
    <xref alt="2022b" rid="ref-Tellez2022" ref-type="bibr">2022b</xref>),
    offers the most mature codebase. Other notable options exist such as
    HNSW.jl and NearestNeighborDescent.jl. For applications involving
    massive datasets that exceed available RAM, these options do not
    leverage disk space. These alternatives do not offer the user the
    same flexibility to both insert and delete entries from an already
    constructed index which is essential for online framework
    integrations. This was the main motivation for Singh et al.
    (<xref alt="2021" rid="ref-singh2021freshdiskann" ref-type="bibr">2021</xref>)
    which describes the need for such utility.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Thanks to the Julia community for their continued support of
  open-source scientific computing. We also acknowledge the authors of
  LMDiskANN
  (<xref alt="Pan et al., 2023" rid="ref-pan2023lm" ref-type="bibr">Pan
  et al., 2023</xref>) and other works it is based on, Jayaram
  Subramanya et al.
  (<xref alt="2019" rid="ref-jayaram2019diskann" ref-type="bibr">2019</xref>)
  and Singh et al.
  (<xref alt="2021" rid="ref-singh2021freshdiskann" ref-type="bibr">2021</xref>)
  for foundational ideas in disk-based graph indexing.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-pan2023lm">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Pan</surname><given-names>Yu</given-names></name>
        <name><surname>Sun</surname><given-names>Jianxin</given-names></name>
        <name><surname>Yu</surname><given-names>Hongfeng</given-names></name>
      </person-group>
      <article-title>Lm-diskann: Low memory footprint in disk-native dynamic graph-based ann indexing</article-title>
      <source>2023 IEEE international conference on big data (BigData)</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.1109/BigData59044.2023.10386517</pub-id>
      <fpage>5987</fpage>
      <lpage>5996</lpage>
    </element-citation>
  </ref>
  <ref id="ref-singh2021freshdiskann">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Singh</surname><given-names>Aditi</given-names></name>
        <name><surname>Subramanya</surname><given-names>Suhas Jayaram</given-names></name>
        <name><surname>Krishnaswamy</surname><given-names>Ravishankar</given-names></name>
        <name><surname>Simhadri</surname><given-names>Harsha Vardhan</given-names></name>
      </person-group>
      <article-title>Freshdiskann: A fast and accurate graph-based ann index for streaming similarity search</article-title>
      <source>arXiv preprint arXiv:2105.09613</source>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2105.09613</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-jayaram2019diskann">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jayaram Subramanya</surname><given-names>Suhas</given-names></name>
        <name><surname>Devvrit</surname><given-names>Fnu</given-names></name>
        <name><surname>Simhadri</surname><given-names>Harsha Vardhan</given-names></name>
        <name><surname>Krishnawamy</surname><given-names>Ravishankar</given-names></name>
        <name><surname>Kadekodi</surname><given-names>Rohan</given-names></name>
      </person-group>
      <article-title>Diskann: Fast accurate billion-point nearest neighbor search on a single node</article-title>
      <source>Advances in neural information processing Systems</source>
      <year iso-8601-date="2019">2019</year>
      <volume>32</volume>
    </element-citation>
  </ref>
  <ref id="ref-wang2021comprehensive">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wang</surname><given-names>Mengzhao</given-names></name>
        <name><surname>Xu</surname><given-names>Xiaoliang</given-names></name>
        <name><surname>Yue</surname><given-names>Qiang</given-names></name>
        <name><surname>Wang</surname><given-names>Yuxiang</given-names></name>
      </person-group>
      <article-title>A comprehensive survey and experimental comparison of graph-based approximate nearest neighbor search</article-title>
      <source>arXiv preprint arXiv:2101.12631</source>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2101.12631</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-nene1997simple">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nene</surname><given-names>Sameer A</given-names></name>
        <name><surname>Nayar</surname><given-names>Shree K</given-names></name>
      </person-group>
      <article-title>A simple algorithm for nearest neighbor search in high dimensions</article-title>
      <source>IEEE Transactions on pattern analysis and machine intelligence</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="1997">1997</year>
      <volume>19</volume>
      <issue>9</issue>
      <pub-id pub-id-type="doi">10.1109/34.615448</pub-id>
      <fpage>989</fpage>
      <lpage>1003</lpage>
    </element-citation>
  </ref>
  <ref id="ref-tellez2022similarity">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tellez</surname><given-names>Eric S.</given-names></name>
        <name><surname>Ruiz</surname><given-names>Guillermo</given-names></name>
      </person-group>
      <article-title>Similarity search on neighbor graphs with automatic Pareto optimal performance and minimum expected quality setups based on hyperparameter optimization</article-title>
      <source>CoRR</source>
      <year iso-8601-date="2022">2022</year>
      <volume>abs/2201.07917</volume>
      <uri>https://arxiv.org/abs/2201.07917</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2201.07917</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Tellez2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tellez</surname><given-names>Eric S.</given-names></name>
        <name><surname>Ruiz</surname><given-names>Guillermo</given-names></name>
      </person-group>
      <article-title>SimilaritySearch.jl: Autotuned nearest neighbor indexes for Julia</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <volume>7</volume>
      <issue>75</issue>
      <uri>https://doi.org/10.21105/joss.04442</uri>
      <pub-id pub-id-type="doi">10.21105/joss.04442</pub-id>
      <fpage>4442</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-julia">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
        <name><surname>Edelman</surname><given-names>Alan</given-names></name>
        <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
        <name><surname>Shah</surname><given-names>Viral B.</given-names></name>
      </person-group>
      <article-title>Julia: A fresh approach to numerical computing</article-title>
      <source>SIAM Review</source>
      <publisher-name>Society for Industrial &amp; Applied Mathematics (SIAM)</publisher-name>
      <year iso-8601-date="2017-01">2017</year><month>01</month>
      <volume>59</volume>
      <issue>1</issue>
      <uri>https://doi.org/10.1137%2F141000671</uri>
      <pub-id pub-id-type="doi">10.1137/141000671</pub-id>
      <fpage>65</fpage>
      <lpage>98</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
