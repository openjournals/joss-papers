<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6235</article-id>
<article-id pub-id-type="doi">10.21105/joss.06235</article-id>
<title-group>
<article-title>Koverage: Read-coverage analysis for massive
(meta)genomics datasets</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1488-5148</contrib-id>
<name>
<surname>Roach</surname>
<given-names>Michael J.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8110-2460</contrib-id>
<name>
<surname>Hart</surname>
<given-names>Bradley J.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3935-2279</contrib-id>
<name>
<surname>Beecroft</surname>
<given-names>Sarah J.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5359-3100</contrib-id>
<name>
<surname>Papudeshi</surname>
<given-names>Bhavya</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7919-8563</contrib-id>
<name>
<surname>Inglis</surname>
<given-names>Laura K.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4738-3451</contrib-id>
<name>
<surname>Grigson</surname>
<given-names>Susanna R.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2651-8719</contrib-id>
<name>
<surname>Mallawaarachchi</surname>
<given-names>Vijini</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5885-4186</contrib-id>
<name>
<surname>Bouras</surname>
<given-names>George</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8383-8949</contrib-id>
<name>
<surname>Edwards</surname>
<given-names>Robert A.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Flinders Accelerator for Microbiome Exploration, Flinders
University, Adelaide, SA, Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Adelaide Centre for Epigenetics and the South Australian
Immunogenomics Cancer Institute, Faculty of Health and Medical Sciences,
The University of Adelaide, Adelaide, SA, Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Health and Biomedical Innovation, Clinical and Health
Sciences, University of South Australia, SA, Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Pawsey Supercomputing Research Centre, Kensington, WA,
Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Adelaide Medical School, Faculty of Health and Medical
Sciences, The University of Adelaide, Adelaide, SA,
Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>The Department of Surgery – Otolaryngology Head and Neck
Surgery, Central Adelaide Local Health Network, Adelaide, SA,
Australia</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<volume>9</volume>
<issue>94</issue>
<fpage>6235</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Snakemake</kwd>
<kwd>Genomics</kwd>
<kwd>Metagenomics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Genomes of organisms are constructed by assembling sequence reads
  from whole genome sequencing. It is useful to determine sequence
  read-coverage of genome assemblies, for instance identifying
  duplication or deletion events, identifying related contigs for
  binning metagenomes
  (<xref alt="Mallawaarachchi et al., 2021" rid="ref-graphbin2" ref-type="bibr">Mallawaarachchi
  et al., 2021</xref>;
  <xref alt="Mallawaarachchi &amp; Lin, 2022" rid="ref-metacoag" ref-type="bibr">Mallawaarachchi
  &amp; Lin, 2022</xref>), or analysing taxonomic compositions of
  metagenomes
  (<xref alt="Wu et al., 2023" rid="ref-condiga" ref-type="bibr">Wu et
  al., 2023</xref>). Although calculating read-coverage is a routine
  task, it typically involves several complete read and write operations
  (I/O operations). This is not a problem for small datasets, but can be
  a significant bottleneck for very large datasets. Koverage reduces I/O
  burden as much as possible to enable maximum scalability. Koverage
  includes a kmer-based method that significantly reduces the
  computational complexity for very large reference genomes. Koverage
  uses Snakemake
  (<xref alt="Mölder et al., 2021" rid="ref-snakemake" ref-type="bibr">Mölder
  et al., 2021</xref>), providing out-of-the-box support for HPC and
  cloud environments. It utilises the Snaketool
  (<xref alt="Roach, Pierce-Ward, et al., 2022" rid="ref-snaketool" ref-type="bibr">Roach,
  Pierce-Ward, et al., 2022</xref>) command line interface, and is
  installable with PIP or Conda for maximum ease of use. Source code and
  documentation are available at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/beardymcjohnface/Koverage">https://github.com/beardymcjohnface/Koverage</ext-link>.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>With the current state of sequencing technologies, it is trivial to
  generate terabytes of sequencing data for hundreds or even thousands
  of samples. Databases such as the Sequence Read Archive and the
  European Nucleotide Archive, containing nearly 100 petabytes combined
  of sequencing data, are constantly being mined and reanalysed in
  bioinformatics analyses. Memory and I/O bottlenecks lead to
  under-utilisation of CPUs, and computational inefficiencies at such
  scales waste thousands of dollars in compute costs. I/O heavy
  processes in large parallel batches can result in significantly
  impaired performance. This is especially true for HPC clusters with
  shared file storage, or for cloud environments using cost-efficient
  bucket storage.</p>
  <p>While there are existing tools for performing coverage
  calculations, they are not optimised for deployment at large scales,
  or when analysing large reference files. They require several complete
  I/O operations of the sequencing data in order to generate coverage
  statistics. Mapping to very large genomes requires large amounts of
  memory, or alternatively, aligning reads in chunks creating more I/O
  operations. Moving I/O operations into memory, for example via
  <monospace>tempfs</monospace> may alleviate I/O bottlenecks. However,
  this is highly system-dependent and will exacerbate memory
  bottlenecks.</p>
  <p>Koverage addresses these I/O bottlenecks by eliminating the
  sorting, reading, and writing of intermediate alignments. Koverage
  includes a kmer-based implementation to eliminate memory bottlenecks
  from screening large genomes. Koverage can be utilised as is, but has
  also been incorporated into the metagenomics pipelines Hecatomb
  (<xref alt="Roach, Beecroft, et al., 2022" rid="ref-hecatomb" ref-type="bibr">Roach,
  Beecroft, et al., 2022</xref>), Phables
  (<xref alt="Mallawaarachchi et al., 2023" rid="ref-phables" ref-type="bibr">Mallawaarachchi
  et al., 2023</xref>), and Reneo
  (<xref alt="Mallawaarachchi, 2023" rid="ref-reneo" ref-type="bibr">Mallawaarachchi,
  2023</xref>).</p>
</sec>
<sec id="implementation">
  <title>Implementation</title>
  <p>Koverage is written in Snakemake
  (<xref alt="Mölder et al., 2021" rid="ref-snakemake" ref-type="bibr">Mölder
  et al., 2021</xref>) and Python, and uses the Snaketool
  (<xref alt="Roach, Pierce-Ward, et al., 2022" rid="ref-snaketool" ref-type="bibr">Roach,
  Pierce-Ward, et al., 2022</xref>) command line interface (CLI).
  Snaketool takes the user input command line arguments to build a
  runtime config file, generate the Snakemake command, and run the
  pipeline. Any unrecognised arguments are assumed to be Snakemake
  arguments and are added to the Snakemake command. For cluster- or
  cloud-based execution, users are encouraged to generate a Snakemake
  profile, and Koverage is compatible with Snakemake’s Cookiecutter
  (<xref alt="Greenfeld, 2013" rid="ref-cookiecutter" ref-type="bibr">Greenfeld,
  2013</xref>) template profiles. The only required inputs are the
  reference FASTA-format file (<monospace>--ref</monospace>), and the
  sample reads (<monospace>--reads</monospace>).</p>
</sec>
<sec id="sample-parsing">
  <title>Sample parsing</title>
  <p>Koverage will parse reads (<monospace>--reads</monospace>) using
  MetaSnek <monospace>fastq_finder</monospace>
  (<xref alt="Roach, 2023" rid="ref-metasnek" ref-type="bibr">Roach,
  2023</xref>). Users supply either a directory of sequencing reads, or
  a tab-separated values (TSV) file of sample names and corresponding
  read filepaths. For a directory, sample names and read file pairs will
  be inferred from the file names. For a TSV file, sample names and
  filepaths are read from the file. More information and examples are
  available at
  <ext-link ext-link-type="uri" xlink:href="https://gist.github.com/beardymcjohnface/bb161ba04ae1042299f48a4849e917c8">https://gist.github.com/beardymcjohnface/bb161ba04ae1042299f48a4849e917c8</ext-link></p>
</sec>
<sec id="mapping-based-coverage">
  <title>Mapping-based coverage</title>
  <p>This is the default method for calculating coverage statistics.
  Reads are mapped sample-by-sample to the reference genome using
  Minimap2 (<xref alt="Li, 2018" rid="ref-minimap" ref-type="bibr">Li,
  2018</xref>). The alignments are piped to a script that collects the
  counts per contig and total counts per sample. Koverage uses mapping
  coordinates to collect read counts for <italic>bins</italic> or
  <italic>windows</italic> along each contig. This allows for a fast
  approximation of the coverage of each contig by at least one read
  (hitrate), and of the evenness of coverage (variance) for each contig.
  The final counts, mean, median, hitrate, and variance are written to a
  Python pickle. A second script calculates the Reads Per Million (RPM),
  Reads Per Kilobase Million (RPKM), Reads Per Kilobase (RPK), and
  Transcripts Per Million (TPM) like so:</p>
  <p><bold>RPM</bold> = <inline-formula><alternatives>
  <tex-math><![CDATA[\frac{10^6 \times N}{T}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:msup><mml:mn>10</mml:mn><mml:mn>6</mml:mn></mml:msup><mml:mo>×</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mi>T</mml:mi></mml:mfrac></mml:math></alternatives></inline-formula></p>
  <p><bold>RPKM</bold> = <inline-formula><alternatives>
  <tex-math><![CDATA[\frac{ 10^6 \times N}{T \times L}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:msup><mml:mn>10</mml:mn><mml:mn>6</mml:mn></mml:msup><mml:mo>×</mml:mo><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>×</mml:mo><mml:mi>L</mml:mi></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula></p>
  <p><bold>RPK</bold> = <inline-formula><alternatives>
  <tex-math><![CDATA[\frac{N}{L}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mi>N</mml:mi><mml:mi>L</mml:mi></mml:mfrac></mml:math></alternatives></inline-formula></p>
  <p><bold>TPM</bold> = <inline-formula><alternatives>
  <tex-math><![CDATA[\frac{10^6 \times RPK}{R}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:msup><mml:mn>10</mml:mn><mml:mn>6</mml:mn></mml:msup><mml:mo>×</mml:mo><mml:mi>R</mml:mi><mml:mi>P</mml:mi><mml:mi>K</mml:mi></mml:mrow><mml:mi>R</mml:mi></mml:mfrac></mml:math></alternatives></inline-formula></p>
  <p>Where:</p>
  <list list-type="bullet">
    <list-item>
      <p>N = number of reads mapped to the contig</p>
    </list-item>
    <list-item>
      <p>T = Total number of mapped reads for that sample</p>
    </list-item>
    <list-item>
      <p>L = length of contig in kilobases</p>
    </list-item>
    <list-item>
      <p>R = sum of all RPK values for that sample</p>
    </list-item>
  </list>
  <p>To generate fast estimations for mean, median, hitrate, and
  variance, Koverage first collects the counts of the start coordinates
  of mapped reads within <italic>bins</italic> (or
  <italic>windows</italic>) across each contig
  (<xref alt="[fig:counts]" rid="figU003Acounts">[fig:counts]</xref>).
  The user can customise bin width (default 100 bp); mean and median
  counts are comparable to read-depth when the binwidth is equal to the
  library’s read length. Variance is calculated directly as the standard
  variance of the bin counts. The hitrate is calculated as the fraction
  of bins greater than zero.</p>
  <fig>
    <caption><p>Windowed-coverage counts. Counts of start coordinates of
    mapped reads are collected for each bin across a contig. The counts
    array is used to calculate estimates for coverage hitrate and
    variance.<styled-content id="figU003Acounts"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig1.png" />
  </fig>
  <p>The coverage from all samples are collated, and a summary for each
  contig coverage by all samples is calculated. A summary HTML report is
  generated which includes interactive graphs and tables for both the
  per sample coverage, and the combined coverage from all samples. We
  utilized Datapane
  (<xref alt="Datapane Team, 2023" rid="ref-datapane" ref-type="bibr">Datapane
  Team, 2023</xref>) to embed a combined bar and line chart from Plotly
  (<xref alt="Plotly Technologies Inc, 2023" rid="ref-plotly" ref-type="bibr">Plotly
  Technologies Inc, 2023</xref>) and an interactive table displaying the
  results.</p>
</sec>
<sec id="kmer-based-coverage">
  <title>Kmer-based coverage</title>
  <p>Mapping to very large reference genomes can place considerable
  strain on computer resources. Koverage offers a kmer-based approach to
  estimating coverage. First, the reference genome is processed and
  kmers are sampled evenly across each contig. The user can customise
  kmer size, sampling interval, and minimum and maximum number of kmers
  to sample per contig. Jellyfish
  (<xref alt="Marçais &amp; Kingsford, 2011" rid="ref-jellyfish" ref-type="bibr">Marçais
  &amp; Kingsford, 2011</xref>) databases are created for each sample.
  The sampled reference kmers are queried against the sample kmer
  database. The kmer counts, and a kmer count array is created for each
  contig. The sum, mean, and median are calculated directly from the
  count array. Hitrate is calculated as the number of kmer counts &gt; 0
  divided by the total number of kmers queried. Variance is highly
  sensitive to large outliers, and kmer counts are especially prone to
  large outliers. Therefore, variance is calculated as the standard
  variance of the lowest 95 % of kmer counts.</p>
</sec>
<sec id="coverm-wrapper">
  <title>CoverM wrapper</title>
  <p>Koverage includes a wrapper for the popular CoverM
  (<xref alt="Woodcroft &amp; Newell, 2017" rid="ref-coverm" ref-type="bibr">Woodcroft
  &amp; Newell, 2017</xref>) tool. CoverM can parse aligned and sorted
  reads in BAM format. It can also align reads with Minimap2, saving the
  sorted alignments in a temporary filesystem (tempfs), and then process
  the aligned and sorted reads from tempfs. When a large enough tempfs
  is available, this method of running CoverM is extremely fast.
  However, if the tempfs is insufficient for storing the alignments,
  they are instead written to and read from regular disk storage which
  can be a significant I/O bottleneck. This wrapper in Koverage will
  generate alignments with Minimap2, sort and save them in BAM format
  with SAMtools
  (<xref alt="Danecek et al., 2021" rid="ref-samtools" ref-type="bibr">Danecek
  et al., 2021</xref>), and run CoverM on the resulting BAM file. CoverM
  is currently not available for macOS and as such, this wrapper will
  only run on Linux systems.</p>
</sec>
<sec id="benchmarks">
  <title>Benchmarks</title>
  <p>We tested Koverage’s methods on the Pawsey Supercomputing Research
  Centre’s Setonix HPC (commissioned in 2023)
  (<xref alt="Pawsey Supercomputing Research Centre, 2023" rid="ref-setonix" ref-type="bibr">Pawsey
  Supercomputing Research Centre, 2023</xref>) using a small coral
  metagenome dataset
  (<xref alt="Lima et al., 2023" rid="ref-coral" ref-type="bibr">Lima et
  al., 2023</xref>) consisting of 34 samples, a 360 Mbp metagenome
  assembly, and 9.1 GB of sequencing reads. This represents a typical
  metagenomics application in optimal conditions. Table 1 shows that
  CoverM is slightly faster than the default mapping-based method in
  spite of the extra read and write operations.</p>
  <p><bold>Table 1: Coral metagenome benchmarks with high performance
  I/O</bold></p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="11%" />
        <col width="23%" />
        <col width="28%" />
        <col width="17%" />
        <col width="20%" />
      </colgroup>
      <thead>
        <tr>
          <th>Method</th>
          <th>Runtime (HH:MM:SS)</th>
          <th>CPU Walltime (HH:MM:SS)</th>
          <th>Mean load (%)</th>
          <th>Peak memory (Gb)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Map</td>
          <td>00:40:34</td>
          <td>01:49:38</td>
          <td>270</td>
          <td>4.6</td>
        </tr>
        <tr>
          <td>Kmer</td>
          <td>02:20:58</td>
          <td>00:51:40</td>
          <td>37</td>
          <td>4.2</td>
        </tr>
        <tr>
          <td>CoverM</td>
          <td>00:31:49</td>
          <td>01:12:17</td>
          <td>227</td>
          <td>7.4</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p>We repeated the above benchmarking with Koverage directly reading
  and writing to Pawsey’s S3 network bucket storage mounted using
  s3fs-fuse. Unlike the local scratch partition, this represents a
  scenario with a significant I/O bottleneck. Table 2 shows that while
  all methods are slower, Koverage’s mapping and kmer methods perform
  much faster than the CoverM wrapper. The poor performance of the
  CoverM wrapper is entirely the result of generating the alignment BAM
  files, accounting for 85% of the overall runtime, rather than CoverM
  itself.</p>
  <p><bold>Table 2: Coral metagenome benchmarks with bottlenecked
  I/O</bold></p>
  <table-wrap>
    <table>
      <colgroup>
        <col width="11%" />
        <col width="23%" />
        <col width="28%" />
        <col width="17%" />
        <col width="20%" />
      </colgroup>
      <thead>
        <tr>
          <th>Method</th>
          <th>Runtime (HH:MM:SS)</th>
          <th>CPU Walltime (HH:MM:SS)</th>
          <th>Mean load (%)</th>
          <th>Peak memory (Gb)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Map</td>
          <td>03:34:15</td>
          <td>01:49:01</td>
          <td>50</td>
          <td>4.6</td>
        </tr>
        <tr>
          <td>Kmer</td>
          <td>03:18:33</td>
          <td>01:13:53</td>
          <td>14</td>
          <td>4.6</td>
        </tr>
        <tr>
          <td>CoverM</td>
          <td>11:13:39</td>
          <td>01:32:10</td>
          <td>22</td>
          <td>7.3</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>This work was supported by resources provided by the Pawsey
  Supercomputing Research Centre with funding from the Australian
  Government and the Government of Western Australia. The support
  provided by Flinders University for HPC research resources is
  acknowledged. This work was supported by an award from NIH NIDDK
  RC2DK116713 and an award from the Australian Research Council
  DP220102915.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-snakemake">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mölder</surname><given-names>F</given-names></name>
        <name><surname>Jablonski</surname><given-names>KP</given-names></name>
        <name><surname>Letcher</surname><given-names>B</given-names></name>
        <name><surname>Hall</surname><given-names>MB</given-names></name>
        <name><surname>Tomkins-Tinch</surname><given-names>CH</given-names></name>
        <name><surname>Sochat</surname><given-names>V</given-names></name>
        <name><surname>Forster</surname><given-names>J</given-names></name>
        <name><surname>Lee</surname><given-names>S</given-names></name>
        <name><surname>Twardziok</surname><given-names>SO</given-names></name>
        <name><surname>Kanitz</surname><given-names>A</given-names></name>
        <name><surname>Wilm</surname><given-names>A</given-names></name>
        <name><surname>Holtgrewe</surname><given-names>M</given-names></name>
        <name><surname>Rahmann</surname><given-names>S</given-names></name>
        <name><surname>Nahnsen</surname><given-names>S</given-names></name>
        <name><surname>Köster</surname><given-names>J</given-names></name>
      </person-group>
      <article-title>Sustainable data analysis with Snakemake</article-title>
      <source>F1000Research</source>
      <year iso-8601-date="2021">2021</year>
      <volume>10</volume>
      <issue>33</issue>
      <pub-id pub-id-type="doi">10.12688/f1000research.29032.1</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-snaketool">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Roach</surname><given-names>Michael J</given-names></name>
        <name><surname>Pierce-Ward</surname><given-names>N Tessa</given-names></name>
        <name><surname>Suchecki</surname><given-names>Radoslaw</given-names></name>
        <name><surname>Mallawaarachchi</surname><given-names>Vijini</given-names></name>
        <name><surname>Papudeshi</surname><given-names>Bhavya</given-names></name>
        <name><surname>Handley</surname><given-names>Scott A</given-names></name>
        <name><surname>Brown</surname><given-names>C Titus</given-names></name>
        <name><surname>Watson-Haigh</surname><given-names>Nathan S</given-names></name>
        <name><surname>Edwards</surname><given-names>Robert A</given-names></name>
      </person-group>
      <article-title>Ten simple rules and a template for creating workflows-as-applications</article-title>
      <source>PLOS Computational Biology</source>
      <publisher-name>Public Library of Science</publisher-name>
      <year iso-8601-date="2022-12">2022</year><month>12</month>
      <volume>18</volume>
      <issue>12</issue>
      <uri>https://doi.org/10.1371/journal.pcbi.1010705</uri>
      <pub-id pub-id-type="doi">10.1371/journal.pcbi.1010705</pub-id>
      <fpage>1</fpage>
      <lpage>9</lpage>
    </element-citation>
  </ref>
  <ref id="ref-minimap">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Li</surname><given-names>Heng</given-names></name>
      </person-group>
      <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2018-05">2018</year><month>05</month>
      <volume>34</volume>
      <issue>18</issue>
      <issn>1367-4803</issn>
      <uri>https://doi.org/10.1093/bioinformatics/bty191</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id>
      <fpage>3094</fpage>
      <lpage>3100</lpage>
    </element-citation>
  </ref>
  <ref id="ref-jellyfish">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Marçais</surname><given-names>Guillaume</given-names></name>
        <name><surname>Kingsford</surname><given-names>Carl</given-names></name>
      </person-group>
      <article-title>A fast, lock-free approach for efficient parallel counting of occurrences of k-mers</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2011-01">2011</year><month>01</month>
      <volume>27</volume>
      <issue>6</issue>
      <issn>1367-4803</issn>
      <uri>https://doi.org/10.1093/bioinformatics/btr011</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btr011</pub-id>
      <fpage>764</fpage>
      <lpage>770</lpage>
    </element-citation>
  </ref>
  <ref id="ref-samtools">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Danecek</surname><given-names>Petr</given-names></name>
        <name><surname>Bonfield</surname><given-names>James K</given-names></name>
        <name><surname>Liddle</surname><given-names>Jennifer</given-names></name>
        <name><surname>Marshall</surname><given-names>John</given-names></name>
        <name><surname>Ohan</surname><given-names>Valeriu</given-names></name>
        <name><surname>Pollard</surname><given-names>Martin O</given-names></name>
        <name><surname>Whitwham</surname><given-names>Andrew</given-names></name>
        <name><surname>Keane</surname><given-names>Thomas</given-names></name>
        <name><surname>McCarthy</surname><given-names>Shane A</given-names></name>
        <name><surname>Davies</surname><given-names>Robert M</given-names></name>
        <name><surname>Li</surname><given-names>Heng</given-names></name>
      </person-group>
      <article-title>Twelve years of SAMtools and BCFtools</article-title>
      <source>GigaScience</source>
      <year iso-8601-date="2021-02">2021</year><month>02</month>
      <volume>10</volume>
      <issue>2</issue>
      <issn>2047-217X</issn>
      <uri>https://doi.org/10.1093/gigascience/giab008</uri>
      <pub-id pub-id-type="doi">10.1093/gigascience/giab008</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-setonix">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Pawsey Supercomputing Research Centre</string-name>
      </person-group>
      <article-title>Setonix (HPC)</article-title>
      <publisher-name>Pawsey Supercomputing Research Centre</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://support.pawsey.org.au/documentation/display/US/Setonix+Guides</uri>
      <pub-id pub-id-type="doi"></pub-id>
    </element-citation>
  </ref>
  <ref id="ref-graphbin2">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mallawaarachchi</surname><given-names>Vijini</given-names></name>
        <name><surname>Wickramarachchi</surname><given-names>Anuradha S</given-names></name>
        <name><surname>Lin</surname><given-names>Yu</given-names></name>
      </person-group>
      <article-title>Improving metagenomic binning results with overlapped bins using assembly graphs</article-title>
      <source>Algorithms for Molecular Biology</source>
      <year iso-8601-date="2021-05-04">2021</year><month>05</month><day>04</day>
      <volume>16</volume>
      <issue>1</issue>
      <issn>1748-7188</issn>
      <uri>https://doi.org/10.1186/s13015-021-00185-6</uri>
      <pub-id pub-id-type="doi">10.1186/s13015-021-00185-6</pub-id>
      <fpage>3</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-metacoag">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mallawaarachchi</surname><given-names>Vijini</given-names></name>
        <name><surname>Lin</surname><given-names>Yu</given-names></name>
      </person-group>
      <article-title>Accurate Binning of Metagenomic Contigs Using Composition, Coverage, and Assembly Graphs</article-title>
      <source>Journal of Computational Biology</source>
      <year iso-8601-date="2022">2022</year>
      <volume>29</volume>
      <issue>12</issue>
      <uri>https://doi.org/10.1089/cmb.2022.0262</uri>
      <pub-id pub-id-type="doi">10.1089/cmb.2022.0262</pub-id>
      <fpage>1357</fpage>
      <lpage>1376</lpage>
    </element-citation>
  </ref>
  <ref id="ref-condiga">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wu</surname><given-names>Enhui</given-names></name>
        <name><surname>Mallawaarachchi</surname><given-names>Vijini</given-names></name>
        <name><surname>Zhao</surname><given-names>Jinzhi</given-names></name>
        <name><surname>Yang</surname><given-names>Yi</given-names></name>
        <name><surname>Liu</surname><given-names>Hebin</given-names></name>
        <name><surname>Wang</surname><given-names>Xiaoqing</given-names></name>
        <name><surname>Shen</surname><given-names>Chengpin</given-names></name>
        <name><surname>Lin</surname><given-names>Yu</given-names></name>
        <name><surname>Qiao</surname><given-names>Liang</given-names></name>
      </person-group>
      <article-title>Contigs directed gene annotation (ConDiGA) for accurate protein sequence database construction in metaproteomics</article-title>
      <source>bioRxiv</source>
      <publisher-name>Cold Spring Harbor Laboratory</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://www.biorxiv.org/content/early/2023/04/20/2023.04.19.537311</uri>
      <pub-id pub-id-type="doi">10.1101/2023.04.19.537311</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-coverm">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Woodcroft</surname><given-names>BJ</given-names></name>
        <name><surname>Newell</surname><given-names>R</given-names></name>
      </person-group>
      <article-title>WWOOD/coverm: Read coverage calculator for metagenomics</article-title>
      <publisher-name>https://github.com/wwood/CoverM</publisher-name>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-cookiecutter">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Greenfeld</surname><given-names>Audrey Roy</given-names></name>
      </person-group>
      <article-title>Cookiecutter: A cross-platform command-line utility that creates projects from cookiecutters (project templates), e.g. Python package projects, C projects.</article-title>
      <publisher-name>https://github.com/cookiecutter/cookiecutter/</publisher-name>
      <year iso-8601-date="2013">2013</year>
    </element-citation>
  </ref>
  <ref id="ref-metasnek">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Roach</surname><given-names>Michael J</given-names></name>
      </person-group>
      <article-title>MetaSnek: Misc functions for metagenomic pipelines</article-title>
      <publisher-name>https://github.com/beardymcjohnface/metasnek</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-coral">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lima</surname><given-names>Laís FO</given-names></name>
        <name><surname>Alker</surname><given-names>Amanda T</given-names></name>
        <name><surname>Papudeshi</surname><given-names>Bhavya</given-names></name>
        <name><surname>Morris</surname><given-names>Megan M</given-names></name>
        <name><surname>Edwards</surname><given-names>Robert A</given-names></name>
        <name><surname>de Putron</surname><given-names>Samantha J</given-names></name>
        <name><surname>Dinsdale</surname><given-names>Elizabeth A</given-names></name>
      </person-group>
      <article-title>Coral and Seawater Metagenomes Reveal Key Microbial Functions to Coral Health and Ecosystem Functioning Shaped at Reef Scale</article-title>
      <source>Microbial Ecology</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://doi.org/10.1007/s00248-022-02094-6</uri>
      <pub-id pub-id-type="doi">10.1007/s00248-022-02094-6</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-phables">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mallawaarachchi</surname><given-names>Vijini</given-names></name>
        <name><surname>Roach</surname><given-names>Michael J</given-names></name>
        <name><surname>Decewicz</surname><given-names>Przemyslaw</given-names></name>
        <name><surname>Papudeshi</surname><given-names>Bhavya</given-names></name>
        <name><surname>Giles</surname><given-names>Sarah K</given-names></name>
        <name><surname>Grigson</surname><given-names>Susanna R</given-names></name>
        <name><surname>Bouras</surname><given-names>George</given-names></name>
        <name><surname>Hesse</surname><given-names>Ryan D</given-names></name>
        <name><surname>Inglis</surname><given-names>Laura K</given-names></name>
        <name><surname>Hutton</surname><given-names>Abbey L K</given-names></name>
        <name><surname>Dinsdale</surname><given-names>Elizabeth A</given-names></name>
        <name><surname>Edwards</surname><given-names>Robert A</given-names></name>
      </person-group>
      <article-title>Phables: from fragmented assemblies to high-quality bacteriophage genomes</article-title>
      <source>Bioinformatics</source>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <volume>39</volume>
      <issue>10</issue>
      <issn>1367-4811</issn>
      <uri>https://doi.org/10.1093/bioinformatics/btad586</uri>
      <pub-id pub-id-type="doi">10.1093/bioinformatics/btad586</pub-id>
      <fpage>btad586</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-hecatomb">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Roach</surname><given-names>Michael J</given-names></name>
        <name><surname>Beecroft</surname><given-names>Sarah J</given-names></name>
        <name><surname>Mihindukulasuriya</surname><given-names>Kathie A</given-names></name>
        <name><surname>Wang</surname><given-names>Leran</given-names></name>
        <name><surname>Paredes</surname><given-names>Anne</given-names></name>
        <name><surname>Henry-Cocks</surname><given-names>Kara</given-names></name>
        <name><surname>Lima</surname><given-names>Lais Farias Oliveira</given-names></name>
        <name><surname>Dinsdale</surname><given-names>Elizabeth A</given-names></name>
        <name><surname>Edwards</surname><given-names>Robert A</given-names></name>
        <name><surname>Handley</surname><given-names>Scott A</given-names></name>
      </person-group>
      <article-title>Hecatomb: An End-to-End Research Platform for Viral Metagenomics</article-title>
      <source>bioRxiv</source>
      <publisher-name>Cold Spring Harbor Laboratory</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>{https://www.biorxiv.org/content/early/2022/10/05/2022.05.15.492003}</uri>
      <pub-id pub-id-type="doi">10.1101/2022.05.15.492003</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-reneo">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Mallawaarachchi</surname><given-names>Vijini</given-names></name>
      </person-group>
      <article-title>reneo: Unraveling Viral Genomes from Metagenomes</article-title>
      <publisher-name>https://github.com/Vini2/reneo</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-datapane">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Datapane Team</string-name>
      </person-group>
      <article-title>Datapane (0.16.5) [Software]</article-title>
      <publisher-name>https://www.datapane.com</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-plotly">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Plotly Technologies Inc</string-name>
      </person-group>
      <article-title>Plotly (5.15.0) [Software]</article-title>
      <publisher-name>https://plot.ly</publisher-name>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
