<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7490</article-id>
<article-id pub-id-type="doi">10.21105/joss.07490</article-id>
<title-group>
<article-title>pyMechT: A Python package for mechanics of soft
tissues</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1755-8807</contrib-id>
<name>
<surname>Aggarwal</surname>
<given-names>Ankush</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5433-4933</contrib-id>
<name>
<surname>Williams</surname>
<given-names>Ross</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0000-0038-4321</contrib-id>
<name>
<surname>Rosnel</surname>
<given-names>Claire</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2325-8771</contrib-id>
<name>
<surname>Renon</surname>
<given-names>Silvia</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Hussain</surname>
<given-names>Jude M.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Schmidt</surname>
<given-names>André F.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0007-5020-9020</contrib-id>
<name>
<surname>Huang</surname>
<given-names>Shiting</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2428-2669</contrib-id>
<name>
<surname>McGinty</surname>
<given-names>Sean</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7153-3777</contrib-id>
<name>
<surname>McBride</surname>
<given-names>Andrew</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Glasgow Computational Engineering Centre (GCEC), University
of Glasgow, G12 8LT, United Kingdom</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>James Watt School of Engineering, University of Glasgow,
G12 8LT, United Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-08-17">
<day>17</day>
<month>8</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>106</issue>
<fpage>7490</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>mechanics</kwd>
<kwd>large deformation</kwd>
<kwd>hyperelasticity</kwd>
<kwd>soft tissues</kwd>
<kwd>biomechanics</kwd>
<kwd>ex-vivo testing</kwd>
<kwd>parameter estimation</kwd>
<kwd>Bayesian inference</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>pyMechT</monospace> fills an important gap for
  simulating simplified models in soft tissue mechanics, such as for
  ex-vivo testing protocols. Instead of detailed finite element
  simulations, which can be time-consuming and excessive for certain
  scenarios, <monospace>pyMechT</monospace> allows one to configure and
  run simulations extremely quickly. Moreover, the Python package makes
  it straightforward to perform parameter estimation and Bayesian
  inference. Its unique capabilities include incorporating layered
  structure of tissues and residual stresses.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Mechanics of soft tissues plays an important role in several
  physiological problems, including cardio-vascular and musculoskeletal
  systems. Common ex-vivo biomechanical testing protocols used to
  characterize tissues include uniaxial extension for one-dimensional
  structures, such as tendons and ligaments, biaxial extension for
  planar tissues, such as heart valves and skin, and inflation-extension
  for tubular tissue structures, such as blood vessels (Figure
  <xref alt="[ex-vivo-protocols]" rid="ex-vivo-protocols">[ex-vivo-protocols]</xref>).
  These experiments aim to induce a uniform deformation that can be
  easily related to the generated stresses.</p>
  <fig>
    <caption><p>Three common ex-vivo experimental protocols and
    corresponding load-deformation plots: a) uniaxial extension, b)
    planar biaxial extension, and c) extension-inflation at different
    longitudinal stretch <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda_Z]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>λ</mml:mi><mml:mi>Z</mml:mi></mml:msub></mml:math></alternatives></inline-formula><styled-content id="ex-vivo-protocols"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="./ex-vivo-protocols.svg" />
  </fig>
  <p>While several finite element analysis packages are available for
  performing biomechanical simulation, they are generally intended for
  more complex scenarios involving non-uniform/non-affine deformations.
  For simulating the ex-vivo experiments, which induce close-to-uniform
  deformations, in-house codes are commonly developed. However, the
  absence of a common framework can lead to lack of consistency and
  reproducibility. Moreover, advanced analyses require statistical
  approaches, such as Monte Carlo simulations and Bayesian inference. To
  fill this gap, we have developed the open-source Python package
  <monospace>pyMechT</monospace>.</p>
</sec>
<sec id="structure">
  <title>Structure</title>
  <fig>
    <caption><p>Structure of <monospace>pyMechT</monospace>
    <styled-content id="figU003Aoverview"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="svg+xml" xlink:href="drawing-1.svg" />
  </fig>
  <p>The package is implemented in Python using an object-oriented
  structure. The package builds upon widely-used Python libraries:
  NumPy, SciPy, Pandas, Matplotlib, and PyTorch.
  <monospace>pyMechT</monospace> consists of four main modules (see
  Figure
  <xref alt="[fig:overview]" rid="figU003Aoverview">[fig:overview]</xref>):
  1) <monospace>MatModel</monospace> for defining constitutive models
  for materials, 2) <monospace>SampleExperiment</monospace> for
  simulating ex-vivo uniaxial/biaxial/inflation-extension experiments,
  3) <monospace>ParamFitter</monospace> for performing parameter
  estimation based on experimental data, and 4)
  <monospace>MCMC</monospace>/<monospace>RandomParameters</monospace>
  for performing Bayesian inference using Monte Carlo (MC) or Markov
  Chain Monte Carlo (MCMC) simulations. Currently, there are eighteen
  material models implemented in <monospace>MatModel</monospace>,
  including fourteen analytical hyperelastic models, two data-based
  hyperelastic models, and one structural model. In addition, an
  arbitrary hyperelastic model is also implemented, where a user-defined
  form of the free energy functional is automatically implemented based
  on symbolic differentiation. Below is the list of the material models
  available to-date:</p>
  <list list-type="bullet">
    <list-item>
      <p>‘NH’: Neo-Hookean model</p>
    </list-item>
    <list-item>
      <p>‘MR’: Mooney-Rivlin model</p>
    </list-item>
    <list-item>
      <p>‘YEOH’: Yeoh model</p>
    </list-item>
    <list-item>
      <p>‘LS’: Lee-Sacks model</p>
    </list-item>
    <list-item>
      <p>‘MN’: May-Newman model</p>
    </list-item>
    <list-item>
      <p>‘GOH’: Gasser-Ogden-Holzapfel model</p>
    </list-item>
    <list-item>
      <p>‘HGO’: Holzapfel-Gasser-Ogden model</p>
    </list-item>
    <list-item>
      <p>‘expI1’: A model with an exponential of I1</p>
    </list-item>
    <list-item>
      <p>‘polyI4’: A model with a polynomial of I4</p>
    </list-item>
    <list-item>
      <p>‘HY’: Humphrey-Yin model</p>
    </list-item>
    <list-item>
      <p>‘Holzapfel’: Holzapfel model</p>
    </list-item>
    <list-item>
      <p>‘volPenalty’: A penalty model for volumetric change</p>
    </list-item>
    <list-item>
      <p>‘ArrudaBoyce’: Arruda-Boyce model</p>
    </list-item>
    <list-item>
      <p>‘Gent’: Gent model</p>
    </list-item>
    <list-item>
      <p>‘splineI1’: A spline model of I1</p>
    </list-item>
    <list-item>
      <p>‘splineI1I4’: A spline model of I1 and I4</p>
    </list-item>
    <list-item>
      <p>‘StructModel’: A structural model with fiber distribution</p>
    </list-item>
    <list-item>
      <p>‘ARB’: Arbitrary model with user-defined strain energy density
      function</p>
    </list-item>
  </list>
  <p>A particular focus is on parameters, for which a custom dictionary
  has been implemented named <monospace>ParamDict</monospace>. This
  dictionary facilitates handling large numbers of parameters via
  string-based identifiers (“Keys”), and stores lower/upper bounds,
  fixed/variable flags, in addition to the current parameter values. The
  dictionary can also be saved/read as csv files. An example set of
  parameters is shown in Table
  <xref alt="1" rid="tableU003Aparams">1</xref> below.</p>
  <table-wrap>
    <caption>
      <p>Example set of parameters saved as
      <monospace>ParamDict</monospace> object where “Key” acts as
      string-based identifier
      <styled-content id="tableU003Aparams"></styled-content></p>
    </caption>
    <table>
      <colgroup>
        <col width="28%" />
        <col width="18%" />
        <col width="18%" />
        <col width="18%" />
        <col width="18%" />
      </colgroup>
      <thead>
        <tr>
          <th align="center">Keys</th>
          <th align="center">Value</th>
          <th align="center">Fixed?</th>
          <th align="center">Lower bound</th>
          <th align="center">Upper bound</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="center">mu_0</td>
          <td align="center">100</td>
          <td align="center">No</td>
          <td align="center">0.01</td>
          <td align="center">500</td>
        </tr>
        <tr>
          <td align="center">L10</td>
          <td align="center">0.3</td>
          <td align="center">No</td>
          <td align="center">0.1</td>
          <td align="center">0.5</td>
        </tr>
        <tr>
          <td align="center">L20</td>
          <td align="center">1.0</td>
          <td align="center">No</td>
          <td align="center">0.1</td>
          <td align="center">2.0</td>
        </tr>
        <tr>
          <td align="center">thick</td>
          <td align="center">0.05</td>
          <td align="center">Yes</td>
          <td align="center">-</td>
          <td align="center">-</td>
        </tr>
        <tr>
          <td align="center">phi</td>
          <td align="center">50</td>
          <td align="center">No</td>
          <td align="center">0</td>
          <td align="center">90</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
</sec>
<sec id="documentation-and-examples">
  <title>Documentation and examples</title>
  <p>Detailed documentation is hosted on
  <ext-link ext-link-type="uri" xlink:href="https://pymecht.readthedocs.io/en/latest/index.html"><monospace>readthedocs</monospace></ext-link>.
  The documentation starts with an overview of the package, and leads to
  a basic tutorial that helps one getting started and briefly
  demonstrates all of the essential features. Additionally, eleven
  examples have been provided to illustrate all the features and options
  available in <monospace>pyMechT</monospace>. These include the unique
  features of modeling layered structures with different reference
  dimensions, which is commonly encountered in biological soft tissues.
  Simulating such a model with any finite element software would be
  non-trivial. Then, the theoretical background of the implemented
  models is provided, before concluding with a package reference
  automatically generated using <monospace>Sphinx</monospace>.</p>
</sec>
<sec id="advantages-over-finite-element-simulation">
  <title>Advantages over finite element simulation</title>
  <p>In principle, the problems that can be solved using
  <monospace>pyMechT</monospace> can also be solved using any finite
  element simulation software. However, <monospace>pyMechT</monospace>
  offers the following advantages:</p>
  <list list-type="bullet">
    <list-item>
      <p>Geometry and mesh creation would be required for a finite
      element simulation, which usually takes some time. However, the
      pre-defined geometrical features in <monospace>pyMechT</monospace>
      means that one only needs to choose the right class and
      parameters. In addition, no meshing is required. This means that
      setting up the problem (i.e., defining the geometry/mesh and
      loads) is much faster in <monospace>pyMechT</monospace>. Once the
      model has been setup, the computational time required to solve it
      is comparable, depending on the finite element mesh density.</p>
    </list-item>
    <list-item>
      <p>Enforcing incompressibility in a finite element simulation can
      be numerically challenging, necessitating approaches such as
      Lagrange multiplier with a three-field formulation. Instead, in
      <monospace>pyMechT</monospace>, the incompressibility is
      analytically enforced <italic>exactly</italic>, thus making the
      results more robust.</p>
    </list-item>
    <list-item>
      <p>The fast nature of simulations in
      <monospace>pyMechT</monospace> makes it feasible to run
      <inline-formula><alternatives>
      <tex-math><![CDATA[\mathcal{O}(10^5)]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>𝒪</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>5</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
      simulations in several minutes, thus facilitating Monte Carlo and
      Bayesian inference. This adds the capability of calculating, not
      only the mean response, but also the confidence intervals of model
      fits and predictions.</p>
    </list-item>
    <list-item>
      <p>The reference zero-stress state of biological tissues can be
      unknown or ambiguous. Moreover, the biological tissues are
      heterogeneous, with multiple layers each of varying properties.
      These aspects are non-trivial to incorporate in a finite element
      simulation, due to the need for recreating the geometry and/or
      incompatibility of the initial state. However, it is
      straightforward to simulate these in
      <monospace>pyMechT</monospace>.</p>
    </list-item>
  </list>
  <p>Overall, there are many other tools that can perform constitutive
  model fitting. Commercial finite element software
  <ext-link ext-link-type="uri" xlink:href="https://www.3ds.com/products/simulia/abaqus">Abaqus</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://www.ansys.com/">Ansys</ext-link>
  have in-built constitutive model fitting tools, such as,
  <ext-link ext-link-type="uri" xlink:href="https://www.ansys.com/products/structures/polyumod">PolyUMod</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://www.ansys.com/products/structures/mcalibration">MCalibration</ext-link>.
  <ext-link ext-link-type="uri" xlink:href="https://www.hyperfit.cz/home.php">Hyperfit</ext-link>
  is a commercial software specifically for constitutive model fitting,
  with the advantage of having a graphical user interface. However,
  these are commercial and are not free/open-source. There are
  alternative open-source tools for constitutive model fitting, such as
  <ext-link ext-link-type="uri" xlink:href="https://github.com/KnutAM/matmodfit/tree/master">matmodelfit</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/adtzlr/hyperelastic">hyperelastic</ext-link>.
  However, these are not specifically focused on tissues and lack the
  capability of simulating layered samples or inflation-extension
  experiment on tubular structures, common in tissue mechanics. Lastly,
  most of the existing tools do not incorporate Bayesian inference,
  which is important for providing a confidence interval on fitted
  parameters and model predictions.</p>
</sec>
<sec id="uses-in-literature">
  <title>Uses in literature</title>
  <p><monospace>pyMechT</monospace> has been used for Bayesian model
  selection based on extensive planar biaxial extension data
  (<xref alt="Aggarwal, Hudson, et al., 2023" rid="ref-AGGARWAL2023105657" ref-type="bibr">Aggarwal,
  Hudson, et al., 2023</xref>). This work required rapid simulation of
  varied constitutive models, which was facilitated by
  <monospace>pyMechT</monospace>. Similarly, the Bayesian inference via
  Markov Chain Monte Carlo in <monospace>pyMechT</monospace> was used to
  infer the distribution of aortic biomechanical and geometrical
  properties based on in-vivo measurements (as likelihood) and ex-vivo
  biaxial extension data (as prior distribution)
  (<xref alt="Aggarwal et al., 2025" rid="ref-Aggarwal2025" ref-type="bibr">Aggarwal
  et al., 2025</xref>). Moreover, data-driven model developed in
  Aggarwal, Jensen, et al.
  (<xref alt="2023" rid="ref-AGGARWAL2023115812" ref-type="bibr">2023</xref>)
  has been used in <monospace>pyMechT</monospace> via the
  <monospace>splineI1</monospace> and <monospace>splineI1I4</monospace>
  material models.</p>
</sec>
<sec id="conclusion-and-future-plans">
  <title>Conclusion and future plans</title>
  <p><monospace>pyMechT</monospace> fills an important gap and allows
  soft tissue biomechanics researchers to model ex-vivo testing setups
  in a fast, robust, and flexible manner. The package is numerically
  efficient and extensively documented. It has facilitated several
  publications, and we believe that it can benefit the wider community.
  In the future, we plan to extend the capabilities of the package to
  include more material models, such as inelastic (viscoelastic,
  plastic, damage, growth &amp; remodeling) pre-defined formulations,
  and other ex-vivo setups (such as microindentation using Hertz contact
  model). Lastly, the package could be coupled with others to allow
  multi-physics simulations, such as for hemodynamics
  (<xref alt="Coccarelli et al., 2021a" rid="ref-coccarelli2021framework" ref-type="bibr">Coccarelli
  et al., 2021a</xref>,
  <xref alt="2021b" rid="ref-alberto_coccarelli_2021_4522152" ref-type="bibr">2021b</xref>)
  and biochemical regulation
  (<xref alt="Coccarelli et al., 2024" rid="ref-coccarelli2024new" ref-type="bibr">Coccarelli
  et al., 2024</xref>).</p>
</sec>
<sec id="author-contributions">
  <title>Author contributions</title>
  <p><bold>Ankush Aggarwal</bold>: Conceptualization, Methodology,
  Software, Writing - Original Draft, Supervision. <bold>Ross
  Williams</bold>: Methodology, Software, Writing - Review and Editing.
  <bold>Claire Rosnel</bold>: Software, Testing. <bold>Silvia
  Renon</bold>: Testing. <bold>Jude M. Hussain</bold>: Testing.
  <bold>André F. Schmidt</bold>: Testing. <bold>Shiting Huang</bold>:
  Software. <bold>Sean McGinty</bold>: Supervision, Writing - Review and
  Editing. <bold>Andrew McBride</bold>: Supervision, Writing - Review
  and Editing.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-AGGARWAL2023115812">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Aggarwal</surname><given-names>Ankush</given-names></name>
        <name><surname>Jensen</surname><given-names>Bjørn Sand</given-names></name>
        <name><surname>Pant</surname><given-names>Sanjay</given-names></name>
        <name><surname>Lee</surname><given-names>Chung-Hao</given-names></name>
      </person-group>
      <article-title>Strain energy density as a gaussian process and its utilization in stochastic finite element analysis: Application to planar soft tissues</article-title>
      <source>Computer Methods in Applied Mechanics and Engineering</source>
      <year iso-8601-date="2023">2023</year>
      <volume>404</volume>
      <issn>0045-7825</issn>
      <pub-id pub-id-type="doi">10.1016/j.cma.2022.115812</pub-id>
      <fpage>115812</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-AGGARWAL2023105657">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Aggarwal</surname><given-names>Ankush</given-names></name>
        <name><surname>Hudson</surname><given-names>Luke T</given-names></name>
        <name><surname>Laurence</surname><given-names>Devin W</given-names></name>
        <name><surname>Lee</surname><given-names>Chung-Hao</given-names></name>
        <name><surname>Pant</surname><given-names>Sanjay</given-names></name>
      </person-group>
      <article-title>A bayesian constitutive model selection framework for biaxial mechanical testing of planar soft tissues: Application to porcine aortic valves</article-title>
      <source>Journal of the Mechanical Behavior of Biomedical Materials</source>
      <year iso-8601-date="2023">2023</year>
      <volume>138</volume>
      <issn>1751-6161</issn>
      <pub-id pub-id-type="doi">10.1016/j.jmbbm.2023.105657</pub-id>
      <fpage>105657</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Aggarwal2025">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Aggarwal</surname><given-names>Ankush</given-names></name>
        <name><surname>Coccarelli</surname><given-names>Alberto</given-names></name>
        <name><surname>McGinty</surname><given-names>Sean</given-names></name>
      </person-group>
      <article-title>Heterogeneity and multi-scale modeling in vascular biomechanics</article-title>
      <person-group person-group-type="editor">
        <name><surname>Liao</surname><given-names>Jun</given-names></name>
        <name><surname>Wong</surname><given-names>Joyce Y.</given-names></name>
      </person-group>
      <publisher-name>Springer Nature Switzerland</publisher-name>
      <year iso-8601-date="2025">2025</year>
      <isbn>978-3-031-81742-7</isbn>
    </element-citation>
  </ref>
  <ref id="ref-coccarelli2021framework">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coccarelli</surname><given-names>Alberto</given-names></name>
        <name><surname>Carson</surname><given-names>Jason M</given-names></name>
        <name><surname>Aggarwal</surname><given-names>Ankush</given-names></name>
        <name><surname>Pant</surname><given-names>Sanjay</given-names></name>
      </person-group>
      <article-title>A framework for incorporating 3D hyperelastic vascular wall models in 1D blood flow simulations</article-title>
      <source>Biomechanics and Modeling in Mechanobiology</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>20</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1007/s10237-021-01437-5</pub-id>
      <fpage>1231</fpage>
      <lpage>1249</lpage>
    </element-citation>
  </ref>
  <ref id="ref-alberto_coccarelli_2021_4522152">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Coccarelli</surname><given-names>Alberto</given-names></name>
        <name><surname>Carson</surname><given-names>Jason M</given-names></name>
        <name><surname>Aggarwal</surname><given-names>Ankush</given-names></name>
        <name><surname>Pant</surname><given-names>Sanjay</given-names></name>
      </person-group>
      <article-title>1D-hyperelastic-haemodynamics: Version1</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2021-02">2021</year><month>02</month>
      <pub-id pub-id-type="doi">10.5281/zenodo.4522152</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-coccarelli2024new">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Coccarelli</surname><given-names>Alberto</given-names></name>
        <name><surname>Pant</surname><given-names>Sanjay</given-names></name>
        <name><surname>Polydoros</surname><given-names>Ioannis</given-names></name>
        <name><surname>Harraz</surname><given-names>Osama F</given-names></name>
      </person-group>
      <article-title>A new model for evaluating pressure-induced vascular tone in small cerebral arteries</article-title>
      <source>Biomechanics and Modeling in Mechanobiology</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <volume>23</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1007/s10237-023-01774-7</pub-id>
      <fpage>271</fpage>
      <lpage>286</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
