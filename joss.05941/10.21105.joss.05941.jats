<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5941</article-id>
<article-id pub-id-type="doi">10.21105/joss.05941</article-id>
<title-group>
<article-title>pymatgen-analysis-defects: A Python package for analyzing
point defects in crystalline materials</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2743-7531</contrib-id>
<name>
<surname>Shen</surname>
<given-names>Jimmy-Xuan</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5384-5248</contrib-id>
<name>
<surname>Varley</surname>
<given-names>Joel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Lawrence Livermore National Laboratory, Livermore,
California 94550, United States</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>9</volume>
<issue>93</issue>
<fpage>5941</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
<kwd>materials science</kwd>
<kwd>point defects</kwd>
<kwd>finite-size corrections</kwd>
<kwd>database building</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Point defects can often determine the properties of semiconductor
  and optoelectronic materials. Due to the large simulation cell and the
  higher-cost density functionals required for defect simulations, the
  computational cost of defect calculations is often orders of magnitude
  higher than that of bulk calculations. As such, managing and curating
  the results of the defect calculations generated by a single user has
  the potential to save a significant amount of computational resources.
  Moreover, eventually building a high-quality, persistent defects
  database will significantly reduce the computational cost of defect
  calculations for the entire community.</p>
  <p>Simulation of point defects is one of the most complex workflows in
  computational materials science, involving extensive pre- and
  post-processing of the structural and electronic structure data
  (<xref alt="Freysoldt et al., 2014" rid="ref-CGWalle_defects_RMP" ref-type="bibr">Freysoldt
  et al., 2014</xref>). Multiple software packages exist to automate the
  simulation of point defects including work from Broberg et al.
  (<xref alt="2018" rid="ref-Broberg2018" ref-type="bibr">2018</xref>),
  Kumagai et al.
  (<xref alt="2021" rid="ref-Kumagai2021" ref-type="bibr">2021</xref>),
  Huang et al.
  (<xref alt="2022" rid="ref-Huang2022" ref-type="bibr">2022</xref>),
  Arrigoni &amp; Madsen
  (<xref alt="2021" rid="ref-Arrigoni2021Jul" ref-type="bibr">2021</xref>),
  Goyal et al.
  (<xref alt="2017" rid="ref-Goyal2017Apr" ref-type="bibr">2017</xref>),
  and Kavanagh et al.
  (<xref alt="2023" rid="ref-Smtg-Bham2023Dec" ref-type="bibr">2023</xref>);
  however, no available code focuses on:</p>
  <list list-type="order">
    <list-item>
      <p>Integration of but not insistence on standardized
      high-throughput workflow frameworks</p>
    </list-item>
    <list-item>
      <p>Building large, persistent databases of point defects that are
      extensible to new calculations over time</p>
    </list-item>
  </list>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p>Since the combinatorics of point defects in crystalline materials
  can be daunting, it is important to have a software package that can
  be easily integrated into high-throughput workflows to manage these
  complex calculations. However, most users of defect analysis packages
  will not need to run thousands of calculations, so it is important to
  have code focused purely on the defect analysis and relegate the
  high-throughput workflow aspect to a separate package. A focus of the
  present package is also to provide a base library for the analysis of
  point defects without invoking any high-throughput workflow
  frameworks. Even though this package was designed with high-throughput
  in mind and developed alongside a high-throughput workflow framework,
  it is not dependent on any particular workflow framework and can be
  used as a standalone analysis package.</p>
  <p>Additionally, a well-known problem in the simulation of point
  defects is the fact that current structure optimization techniques can
  miss the ground state structure based on the initial guess in a
  sizable minority of cases, so the ability to easily re-visit and
  re-optimize structures is crucial to building a reliable database of
  point defects. Towards that end, we have developed a Python package,
  <monospace>pymatgen-analysis-defects</monospace>, and integrated it
  with the popular <monospace>atomate2</monospace> workflow framework to
  provide a complete set of tools for simulating, analyzing, and
  managing the results of point defect calculations.</p>
  <p>Since the ability to revisit calculations is crucial to building a
  reliable database, but user tagging of calculations is inconsistent,
  especially in a high-throughput context, we have codified a
  structure-only definition of point defects that can be used to
  aggregate the results of multiple calculations of the same defect.
  This allows for the creation of a database of point defects that can
  be easily extended to new calculations over time. In addition to the
  focus on database building, we have also implemented several tools for
  analyzing carrier recombination in defects, these include:</p>
  <list list-type="order">
    <list-item>
      <p>Obtaining the chemical potential contribution to the defect
      formation energy without explicit calculations of the competing
      phases</p>
    </list-item>
    <list-item>
      <p>Obtaining the Freysoldt finite-size correction without user
      intervention</p>
    </list-item>
    <list-item>
      <p>Calculation of the optical transition between states under the
      independent-particle approximation</p>
    </list-item>
    <list-item>
      <p>Calculation of the non-radiative recombination using the
      <monospace>nonrad</monospace> code
      (<xref alt="Turiansky et al., 2021" rid="ref-turiansky_nonrad_2021" ref-type="bibr">Turiansky
      et al., 2021</xref>)</p>
    </list-item>
  </list>
  <p>Details of the implementation and tutorials for using the different
  parts of the package are provided at
  <ext-link ext-link-type="uri" xlink:href="https://materialsproject.github.io/pymatgen-analysis-defects/intro.html">https://materialsproject.github.io/pymatgen-analysis-defects/intro.html</ext-link>.</p>
  <sec id="defect-definition">
    <title>Defect Definition</title>
    <p>A core feature of
    <monospace>pymatgen-analysis-defects</monospace> is the ability to
    define point defects automatically. While symmetry analysis on the
    atomic structure alone is usually enough to define the distinct
    substitutional and vacancy defects, we found that the electronic
    charge density was the most effective at placing the interstitial
    defect at symmetry-inequivalent positions. A basic example of
    creating a full list of defects is shown below:</p>
    <code language="python">from pymatgen.analysis.defects.generators import generate_all_native_defects
from pymatgen.ext.matproj import MPRester

with MPRester() as mpr:
    chgcar = mpr.get_charge_density_from_material_id(&quot;mp-804&quot;)

defects = []
for defect in generate_all_native_defects(chgcar):
    print(defect)
    defects.append(defect)</code>
    <preformat>Ga Vacancy defect at site #0
N Vacancy defect at site #2
N subsitituted on the Ga site at at site #0
Ga subsitituted on the N site at at site #2
Ga intersitial site at [0.00,0.00,0.20]
Ga intersitial site at [0.35,0.65,0.69]
N intersitial site at [0.00,0.00,0.20]
N intersitial site at [0.35,0.65,0.69]</preformat>
    <p>In the code above, we query the Materials Project database for
    the charge density object, which contains information about the bulk
    structure, as well as the electronic charge density. Using the
    <monospace>generate_all_native_defects</monospace> function, we can
    generate a list of all of the native point defects for this
    structure.</p>
    <fig>
      <caption><p>Defect generation.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/fig1.png" />
    </fig>
  </sec>
  <sec id="defect-simulation-workflow">
    <title>Defect Simulation Workflow</title>
    <p>A basic example of integration with the
    <monospace>atomate2</monospace> workflow framework is provided
    below:</p>
    <code language="python">from atomate2.vasp.flows.defect import FormationEnergyMaker
from jobflow import Flow
from pymatgen.analysis.defects.generators import generate_all_native_defects
from pymatgen.ext.matproj import MPRester

with MPRester() as mpr:
    chgcar = mpr.get_charge_density_from_material_id(&quot;mp-804&quot;)


maker = FormationEnergyMaker()
jobs = []
for defect in generate_all_native_defects(chgcar):
    jobs.append(maker.make(defect))
flow = Flow(jobs)</code>
    <p>The code above will generate a <monospace>Flow</monospace> object
    that contains all of the instructions to dynamically create all of
    the required defect calculations, which can be sent to the job
    manager on an HPC system.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The following parts of the present package contain contributions
  from other open-source projects: the finite size correction is based
  on the original implementation in <monospace>pyCDT</monospace> by
  Dr. Danny Broberg, the non-radiative recombination code is based on
  the original implementation in <monospace>nonrad</monospace> by
  Dr. Mark E. Turiansky. This work was performed under the auspices of
  the U.S. DOE by Lawrence Livermore National Laboratory under contract
  DE-AC52-07NA27344, and partially supported by LLNL LDRD funding under
  project number 22-SI-003.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-turiansky_nonrad_2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Turiansky</surname><given-names>Mark E.</given-names></name>
        <name><surname>Alkauskas</surname><given-names>Audrius</given-names></name>
        <name><surname>Engel</surname><given-names>Manuel</given-names></name>
        <name><surname>Kresse</surname><given-names>Georg</given-names></name>
        <name><surname>Wickramaratne</surname><given-names>Darshana</given-names></name>
        <name><surname>Shen</surname><given-names>Jimmy-Xuan</given-names></name>
        <name><surname>Dreyer</surname><given-names>Cyrus E.</given-names></name>
        <name><surname>Van de Walle</surname><given-names>Chris G.</given-names></name>
      </person-group>
      <article-title>Nonrad: Computing nonradiative capture coefficients from first principles</article-title>
      <source>Comput. Phys. Commun.</source>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <volume>267</volume>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2021.108056</pub-id>
      <fpage>108056</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-CGWalle_defects_RMP">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Freysoldt</surname><given-names>Christoph</given-names></name>
        <name><surname>Grabowski</surname><given-names>Blazej</given-names></name>
        <name><surname>Hickel</surname><given-names>Tilmann</given-names></name>
        <name><surname>Neugebauer</surname><given-names>Jörg</given-names></name>
        <name><surname>Kresse</surname><given-names>Georg</given-names></name>
        <name><surname>Janotti</surname><given-names>Anderson</given-names></name>
        <name><surname>Walle</surname><given-names>Chris G de</given-names></name>
      </person-group>
      <article-title>First-principles calculations for point defects in solids</article-title>
      <source>Rev. Mod. Phys.</source>
      <publisher-name>APS</publisher-name>
      <year iso-8601-date="2014">2014</year>
      <volume>86</volume>
      <pub-id pub-id-type="doi">10.1103/RevModPhys.86.253</pub-id>
      <fpage>253</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Broberg2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Broberg</surname><given-names>Danny</given-names></name>
        <name><surname>Medasani</surname><given-names>Bharat</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Nils E R</given-names></name>
        <name><surname>Yu</surname><given-names>Guodong</given-names></name>
        <name><surname>Canning</surname><given-names>Andrew</given-names></name>
        <name><surname>Haranczyk</surname><given-names>Maciej</given-names></name>
        <name><surname>Asta</surname><given-names>Mark</given-names></name>
        <name><surname>Hautier</surname><given-names>Geoffroy</given-names></name>
      </person-group>
      <article-title>PyCDT: A python toolkit for modeling point defects in semiconductors and insulators</article-title>
      <source>Comput. Phys. Commun.</source>
      <publisher-name>North-Holland</publisher-name>
      <year iso-8601-date="2018-05">2018</year><month>05</month>
      <volume>226</volume>
      <issn>0010-4655</issn>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2018.01.004</pub-id>
      <fpage>165</fpage>
      <lpage>179</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kumagai2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kumagai</surname><given-names>Yu</given-names></name>
        <name><surname>Tsunoda</surname><given-names>Naoki</given-names></name>
        <name><surname>Takahashi</surname><given-names>Akira</given-names></name>
        <name><surname>Oba</surname><given-names>Fumiyasu</given-names></name>
      </person-group>
      <article-title>Insights into oxygen vacancies from high-throughput first-principles calculations</article-title>
      <source>Phys. Rev. Mater.</source>
      <publisher-name>American Physical Society</publisher-name>
      <year iso-8601-date="2021-12">2021</year><month>12</month>
      <volume>5</volume>
      <issn>2475-9953</issn>
      <pub-id pub-id-type="doi">10.1103/PhysRevMaterials.5.123803</pub-id>
      <fpage>123803</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Huang2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Huang</surname><given-names>Menglin</given-names></name>
        <name><surname>Zheng</surname><given-names>Zhengneng</given-names></name>
        <name><surname>Dai</surname><given-names>Zhenxing</given-names></name>
        <name><surname>Guo</surname><given-names>Xinjing</given-names></name>
        <name><surname>Wang</surname><given-names>Shanshan</given-names></name>
        <name><surname>Jiang</surname><given-names>Lilai</given-names></name>
        <name><surname>Wei</surname><given-names>Jinchen</given-names></name>
        <name><surname>Chen</surname><given-names>Shiyou</given-names></name>
      </person-group>
      <article-title>DASP: Defect and dopant ab-initio simulation package</article-title>
      <source>J. Semicond.</source>
      <publisher-name>Chinese Institute of Electronics</publisher-name>
      <year iso-8601-date="2022-04">2022</year><month>04</month>
      <volume>43</volume>
      <issn>1674-4926</issn>
      <pub-id pub-id-type="doi">10.1088/1674-4926/43/4/042101</pub-id>
      <fpage>42101</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Arrigoni2021Jul">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Arrigoni</surname><given-names>Marco</given-names></name>
        <name><surname>Madsen</surname><given-names>Georg K. H.</given-names></name>
      </person-group>
      <article-title>Spinney: Post-processing of first-principles calculations of point defects in semiconductors with Python</article-title>
      <source>Comput. Phys. Commun.</source>
      <publisher-name>North-Holland</publisher-name>
      <year iso-8601-date="2021-07">2021</year><month>07</month>
      <volume>264</volume>
      <issn>0010-4655</issn>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2021.107946</pub-id>
      <fpage>107946</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Goyal2017Apr">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Goyal</surname><given-names>Anuj</given-names></name>
        <name><surname>Gorai</surname><given-names>Prashun</given-names></name>
        <name><surname>Peng</surname><given-names>Haowei</given-names></name>
        <name><surname>Lany</surname><given-names>Stephan</given-names></name>
        <name><surname>Stevanović</surname><given-names>Vladan</given-names></name>
      </person-group>
      <article-title>A computational framework for automation of point defect calculations</article-title>
      <source>Comput. Mater. Sci.</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2017-04">2017</year><month>04</month>
      <volume>130</volume>
      <issn>0927-0256</issn>
      <pub-id pub-id-type="doi">10.1016/j.commatsci.2016.12.040</pub-id>
      <fpage>1</fpage>
      <lpage>9</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Smtg-Bham2023Dec">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Kavanagh</surname><given-names>Seán R.</given-names></name>
        <name><surname>Mosquera-Lois</surname><given-names>Irea</given-names></name>
        <name><surname>Walsh</surname><given-names>Aron</given-names></name>
        <name><surname>Scanlon</surname><given-names>David O.</given-names></name>
      </person-group>
      <article-title>doped</article-title>
      <source>GitHub</source>
      <year iso-8601-date="2023-12">2023</year><month>12</month>
      <uri>https://github.com/SMTG-Bham/doped</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
