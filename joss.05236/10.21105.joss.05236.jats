<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5236</article-id>
<article-id pub-id-type="doi">10.21105/joss.05236</article-id>
<title-group>
<article-title><monospace>BridgeStan</monospace>: Efficient in-memory
access to the methods of a Stan model</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8757-3463</contrib-id>
<name>
<surname>Roualdes</surname>
<given-names>Edward A.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9841-3342</contrib-id>
<name>
<surname>Ward</surname>
<given-names>Brian</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2433-9688</contrib-id>
<name>
<surname>Carpenter</surname>
<given-names>Bob</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4239-4541</contrib-id>
<name>
<surname>Seyboldt</surname>
<given-names>Adrian</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3933-8247</contrib-id>
<name>
<surname>Axen</surname>
<given-names>Seth D.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>California State University, Chico</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Center for Computational Mathematics, Flatiron
Institute</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>PyMC Labs</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Cluster of Excellence Machine Learning: New Perspectives
for Science, University of Tübingen</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-01-05">
<day>5</day>
<month>1</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>87</issue>
<fpage>5236</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Stan</kwd>
<kwd>Python</kwd>
<kwd>Julia</kwd>
<kwd>R</kwd>
<kwd>Rust</kwd>
<kwd>C</kwd>
<kwd>C++</kwd>
<kwd>automatic differentiation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Stan provides a probabilistic programming language in which users
  can code Bayesian models
  (<xref alt="Carpenter et al., 2017" rid="ref-CarpenterU003A2017" ref-type="bibr">Carpenter
  et al., 2017</xref>;
  <xref alt="Stan Development Team, 2022" rid="ref-StanU003A2022" ref-type="bibr">Stan
  Development Team, 2022</xref>). A Stan program is transpiled to to a
  C++ class that links to the Stan math library to implement smooth,
  unconstrained posterior log densities, gradients, and Hessians as well
  as constraining/unconstraining transforms. Implementation is provided
  through automatic differentiation in the Stan math library
  (<xref alt="Carpenter et al., 2015" rid="ref-CarpenterU003A2015" ref-type="bibr">Carpenter
  et al., 2015</xref>). <monospace>BridgeStan</monospace> provides
  in-memory access to the methods of Stan models through Python, Julia,
  R, and Rust. This allows algorithm development in these languages with
  the numerical efficiency and expressiveness of Stan models.
  Furthermore, these features are exposed through a language-agnostic C
  API, allowing foreign function interfaces in other languages to
  utilize <monospace>BridgeStan</monospace> with minimal additional
  development.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Stan was developed for applied statisticians working on real-world
  problems and has been used by hundreds of thousands of researchers and
  practitioners across the social, biological, and physical sciences, as
  well as engineering, education, sports, and finance. Stan provides
  several state-of-the-art, gradient-based algorithms: full Bayesian
  inference with Hamiltonian Monte Carlo, Laplace approximation based on
  L-BFGS optimization, and automatic differentiation variational
  inference (ADVI).</p>
  <p>In the statistical software environment R, Stan is heavily relied
  upon for development of applied statistics packages. Using Google’s
  <ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S016975529800110X">PageRank</ext-link>
  algorithm on the dependency graph
  (<xref alt="de Vries, 2014" rid="ref-de-VriesU003A2014" ref-type="bibr">de
  Vries, 2014</xref>) amongst the 19,159 R packages listed on the
  Comprehensive R Archive Network (CRAN) as of 2022-12-31, three R
  packages that exist solely to provide access to Stan rank quite well:
  <monospace>rstan</monospace> ranks at number 70,
  <monospace>rstantools</monospace> 179, and
  <monospace>rstanarm</monospace> 502. Further, two Python interfaces to
  Stan, <monospace>pystan</monospace> and
  <monospace>cmdstanpy</monospace>, both rank in the top 600 packages by
  downloads on the Python Package Index (PyPI).</p>
  <p>C++ can be cumbersome for algorithm prototyping. As such,
  developers have been requesting ways to access Stan models for
  algorithm development in Python, R, and Julia.
  <monospace>BridgeStan</monospace> answers this call, making it easy
  for algorithm developers to incorporate existing Stan models in their
  evaluation, e.g., the dozens of diverse models with reference
  posteriors in
  <ext-link ext-link-type="uri" xlink:href="https://github.com/stan-dev/posteriordb"><monospace>posteriordb</monospace></ext-link>
  (<xref alt="Magnusson et al., 2022" rid="ref-MagnussonU003A2022" ref-type="bibr">Magnusson
  et al., 2022</xref>). <monospace>BridgeStan</monospace> further aids
  algorithm development by leveraging the functions in the Stan Math
  library, which are written to appropriately handle numerical issues
  such as under/over-flow and sum-to-one constraints. Algorithm
  developers using <monospace>BridgeStan</monospace> can thus focus more
  on their algorithms and less on their implementations. These benefits
  also ensure more precise and stable implementations of statistical
  algorithms, allowing for more fair comparisons.</p>
  <p><monospace>BridgeStan</monospace> is an interface, written in
  C-compatible C++, between a Stan program and any higher level language
  that exposes a C foreign function interface. Julia, Python, R, and
  Rust each have C foreign function interfaces. Using memory allocated
  within such higher level languages, <monospace>BridgeStan</monospace>
  provides computations of the log joint density function and
  corresponding gradient of a Stan model, which is itself implemented
  using highly templated C++ from the Stan math library. Using a
  memory-compatible C interface makes this possible even if the host
  language (e.g., R) was compiled with a different compiler, something
  no prior interface that exposed Stan’s log density calculations could
  allow.</p>
  <p>Other software in the Stan ecosystem provides some overlapping
  features with <monospace>BridgeStan</monospace>. For instance,
  <monospace>rstan</monospace>
  (<xref alt="Stan Development Team, 2023" rid="ref-rstan" ref-type="bibr">Stan
  Development Team, 2023</xref>) provides functions
  <monospace>log_prob</monospace> and
  <monospace>grad_log_prob</monospace>, which provide access to the log
  joint density and its gradient. Similarly,
  <monospace>httpstan</monospace>
  (<xref alt="Riddell et al., 2021" rid="ref-httpstan" ref-type="bibr">Riddell
  et al., 2021</xref>) offers <monospace>log_prob</monospace> and
  <monospace>log_prob_grad</monospace>. Such cases of similar
  functionality are unfortunately limited. As of 2023-05-19,
  <monospace>rstan</monospace> via CRAN is still on Stan version 2.21.0
  (released 2019-10-18), and the development version of
  <monospace>rstan</monospace>, which is not hosted on CRAN, is on Stan
  version 2.26.1 (released 2021-02-17), while the latest version of Stan
  is on 2.32.2 (released 2023-05-15). Further,
  <monospace>rstan</monospace> is limited to the host language R. On the
  other hand, <monospace>httpstan</monospace> is a Python package that
  offers a REST API, primarily targeting the Stan algorithms, which
  allows some limited access to the methods of a Stan model. The REST
  API may be used by languages other than Python but by design cannot
  take advantage of direct memory access of the host language.
  Additionally, <monospace>httpstan</monospace> is not natively
  supported on Windows operating systems.
  <monospace>BridgeStan</monospace> addresses these issues by providing
  a portable and easy to maintain shim between any host language with a
  foreign function interface to C and the core C++ of Stan.</p>
  <p>Existing tools with similar automatic differentiation functionality
  include <monospace>JAX</monospace>
  (<xref alt="Bradbury et al., 2018" rid="ref-BradburyU003A2018" ref-type="bibr">Bradbury
  et al., 2018</xref>) and <monospace>Turing.jl</monospace> via the
  <monospace>JuliaAD</monospace> ecosystem
  (<xref alt="Ge et al., 2018" rid="ref-GeU003A2018" ref-type="bibr">Ge
  et al., 2018</xref>). <monospace>BridgeStan</monospace> differs from
  these tools by providing access to the existing, well-known DSL for
  modeling and highly efficient CPU computation of the Stan ecosystem.
  The Stan community predominantly uses CPU hardware, and since Stan has
  been tuned for CPU performance, <monospace>BridgeStan</monospace> is
  more efficient than its competitors in implementing differentiable log
  densities on CPUs
  (<xref alt="Carpenter et al., 2015" rid="ref-CarpenterU003A2015" ref-type="bibr">Carpenter
  et al., 2015</xref>;
  <xref alt="Radul et al., 2020" rid="ref-RadulU003A2020" ref-type="bibr">Radul
  et al., 2020</xref>;
  <xref alt="Tarek et al., 2020" rid="ref-TarekU003A2020" ref-type="bibr">Tarek
  et al., 2020</xref>). Like the immutable Stan models they interface,
  <monospace>BridgeStan</monospace> functions are thread-safe for
  parallel applications. They also support all of the internal
  parallelization of Stan models, such as internal parallel map
  functions and GPU-enabled matrix operations.</p>
  <p><monospace>BridgeStan</monospace> enables memory allocated in the
  host language (Julia, Python, R, or Rust), to be reused within Stan,
  though any language with a C foreign function interface could be
  similarly interfaced to access Stan methods. For instance, the
  <monospace>BridgeStan</monospace> function
  <monospace>log_density_gradient</monospace> has as an optional output
  argument the array into which the gradient will be stored. By avoiding
  unnecessary copies, <monospace>BridgeStan</monospace> is a zero-cost
  abstraction built upon Stan’s math library. If no output argument is
  passed to <monospace>log_density_gradient</monospace>, then at most
  one memory allocation, occuring in the host language, takes place.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>The probabilistic programming language Stan, together with its
  automatic differentiation tools, enables parameterizations of
  otherwise numerically challenging distributions. Consider the
  following Stan program, which encodes an isotropic multivariate
  Student-t distribution of dimension <inline-formula><alternatives>
  <tex-math><![CDATA[D]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>D</mml:mi></mml:math></alternatives></inline-formula>
  and degrees of freedom <inline-formula><alternatives>
  <tex-math><![CDATA[df]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mi>f</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  <p>This parameterization<xref ref-type="fn" rid="fn1">1</xref> of the
  Student-t distribution enables gradient-based Markov chain Monte Carlo
  algorithms to capture the heaviness of the tails when
  <inline-formula><alternatives>
  <tex-math><![CDATA[df]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mi>f</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  is less than <inline-formula><alternatives>
  <tex-math><![CDATA[\sim 30]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>30</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.
  Calculating the gradient of the joint log density of this
  parameterization of the Student-t distribution is not difficult, but
  it is cumbersome and time-consuming to encode in software. Since
  <monospace>BridgeStan</monospace> uses Stan, users of
  <monospace>BridgeStan</monospace> can trust that their bespoke
  parameterizations of numerically challenging distributions will be
  differentiated with thoroughly tested tools from Stan. </p>
  <code language="stan">data {
  int D;
  real df;
}
transformed data {
  vector[D] mu = rep_vector(0.0, D);
  matrix[D, D] Sigma = identity_matrix(D);
  real&lt;lower=0.0&gt; nu = 0.5 * df;
}
parameters {
  vector[D] z;
  vector&lt;lower=0&gt;[D] ig;  // ig constrained so ig &gt; 0
}
transformed parameters {
  vector[D] x = z .* sqrt(ig);
}
model {
  z ~ multi_normal(mu, Sigma);
  ig ~ inv_gamma(nu, nu);
}</code>
  <p><monospace>BridgeStan</monospace> users can access the gradient of
  this model easily, allowing for simple implementations of sampling
  algorithms. In the below example, we show an implementation of the
  Metropolis-adjusted Langevin algorithm (MALA)
  (<xref alt="Besag, 1994" rid="ref-BesagU003A1994" ref-type="bibr">Besag,
  1994</xref>) built on <monospace>BridgeStan</monospace>. </p>
  <code language="python">import bridgestan as bs
import numpy as np

stan_model = &quot;path/to/student-t.stan&quot;
stan_data = &quot;path/to/student-t.json&quot;
model = bs.StanModel.from_stan_file(stan_model, stan_data)
D = model.param_unc_num()
M = 10000

def MALA(model, theta, epsilon=0.45):
    def correction(theta_prime, theta, grad_theta):
        x = theta_prime - theta - epsilon * grad_theta
        return (-0.25 / epsilon) * x.dot(x)

    lp, grad = model.log_density_gradient(theta)
    theta_prop = (
        theta
        + epsilon * grad
        + np.sqrt(2 * epsilon) * np.random.normal(size=model.param_unc_num())
    )

    lp_prop, grad_prop = model.log_density_gradient(theta_prop)
    if np.log(np.random.random()) &lt; lp_prop + correction(
        theta, theta_prop, grad_prop
    ) - lp - correction(theta_prop, theta, grad):
        return theta_prop
    return theta

unc_draws = np.empty(shape=(M, D))
unc_draws[0] = MALA(model, np.random.normal(size=D))
for m in range(1, M):
    unc_draws[m] = MALA(model, unc_draws[m - 1])

# post processing: recover constrained/transformed parameters
draws = np.empty(shape=(M, model.param_num(include_tp=True, include_gq=True)))
for (i, draw) in enumerate(unc_draws):
    draws[i] = model.param_constrain(draw, include_tp=True, include_gq=True)</code>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>On the
  <ext-link ext-link-type="uri" xlink:href="https://discourse.mc-stan.org/">Stan
  Discourse forums</ext-link>, statistical algorithm developers have
  long asked for access to the gradients and Hessians that underlie the
  statistical model of a Stan program. Examples include requests on the
  Stan Discourse forums related to the phrase
  <ext-link ext-link-type="uri" xlink:href="https://discourse.mc-stan.org/search?q=extract%20gradient">extract
  gradient</ext-link> or the software from which
  <monospace>BridgeStan</monospace> is derived:
  <ext-link ext-link-type="uri" xlink:href="https://github.com/bob-carpenter/stan-model-server/">Stan
  Model Server</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/dmuck/redding-stan">ReddingStan</ext-link>.
  <monospace>BridgeStan</monospace> enables access to these methods with
  a portable and in-memory solution. Further, because statistical models
  are so easy to write in Stan, algorithm developers can write their
  model in common statistical notation using the Stan programming
  language and then rely on the Stan math library and its automatic
  differentiation toolset to more easily build advanced gradient-based
  statistical inference algorithms. <monospace>BridgeStan</monospace>
  documentation and example programs are found at
  <ext-link ext-link-type="uri" xlink:href="https://roualdes.github.io/bridgestan/index.html">https://roualdes.github.io/bridgestan/index.html</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Edward A. Roualdes received support from Flatiron Institute during
  the beginning of this project. Seth D. Axen is funded by the Deutsche
  Forschungsgemeinschaft (DFG, German Research Foundation) under
  Germany’s Excellence Strategy – EXC number 2064/1 – Project number
  390727645.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-TarekU003A2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tarek</surname><given-names>Mohamed</given-names></name>
        <name><surname>Xu</surname><given-names>Kai</given-names></name>
        <name><surname>Trapp</surname><given-names>Martin</given-names></name>
        <name><surname>Ge</surname><given-names>Hong</given-names></name>
        <name><surname>Ghahramani</surname><given-names>Zoubin</given-names></name>
      </person-group>
      <article-title>DynamicPPL: Stan-like speed for dynamic probabilistic models</article-title>
      <source>arXiv preprint arXiv:2002.02702</source>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
  <ref id="ref-RadulU003A2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Radul</surname><given-names>Alexey</given-names></name>
        <name><surname>Patton</surname><given-names>Brian</given-names></name>
        <name><surname>Maclaurin</surname><given-names>Dougal</given-names></name>
        <name><surname>Hoffman</surname><given-names>Matthew</given-names></name>
        <name><surname>A Saurous</surname><given-names>Rif</given-names></name>
      </person-group>
      <article-title>Automatically batching control-intensive programs for modern accelerators</article-title>
      <source>Proceedings of Machine Learning and Systems</source>
      <year iso-8601-date="2020">2020</year>
      <volume>2</volume>
      <fpage>390</fpage>
      <lpage>399</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BradburyU003A2018">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Bradbury</surname><given-names>James</given-names></name>
        <name><surname>Frostig</surname><given-names>Roy</given-names></name>
        <name><surname>Hawkins</surname><given-names>Peter</given-names></name>
        <name><surname>Johnson</surname><given-names>Matthew James</given-names></name>
        <name><surname>Leary</surname><given-names>Chris</given-names></name>
        <name><surname>Maclaurin</surname><given-names>Dougal</given-names></name>
        <name><surname>Necula</surname><given-names>George</given-names></name>
        <name><surname>Paszke</surname><given-names>Adam</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Wanderman-Milne</surname><given-names>Skye</given-names></name>
        <name><surname>Zhang</surname><given-names>Qiao</given-names></name>
      </person-group>
      <article-title>JAX: Composable transformations of Python+NumPy programs</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>http://github.com/google/jax</uri>
    </element-citation>
  </ref>
  <ref id="ref-de-VriesU003A2014">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>de Vries</surname><given-names>Andrie</given-names></name>
      </person-group>
      <article-title>Finding the essential R packages using the pagerank algorithm</article-title>
      <year iso-8601-date="2014-12">2014</year><month>12</month>
      <uri>https://blog.revolutionanalytics.com/2014/12/a-reproducible-r-example-finding-the-most-popular-packages-using-the-pagerank-algorithm.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-StanU003A2022">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Stan Development Team</string-name>
      </person-group>
      <article-title>About Stan</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://mc-stan.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-CarpenterU003A2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Carpenter</surname><given-names>Bob</given-names></name>
        <name><surname>Hoffman</surname><given-names>Matthew D</given-names></name>
        <name><surname>Brubaker</surname><given-names>Marcus</given-names></name>
        <name><surname>Lee</surname><given-names>Daniel</given-names></name>
        <name><surname>Li</surname><given-names>Peter</given-names></name>
        <name><surname>Betancourt</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>The stan math library: Reverse-mode automatic differentiation in c++</article-title>
      <source>arXiv preprint arXiv:1509.07164</source>
      <year iso-8601-date="2015">2015</year>
    </element-citation>
  </ref>
  <ref id="ref-CarpenterU003A2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Carpenter</surname><given-names>Bob</given-names></name>
        <name><surname>Gelman</surname><given-names>Andrew</given-names></name>
        <name><surname>Hoffman</surname><given-names>Matthew D</given-names></name>
        <name><surname>Lee</surname><given-names>Daniel</given-names></name>
        <name><surname>Goodrich</surname><given-names>Ben</given-names></name>
        <name><surname>Betancourt</surname><given-names>Michael</given-names></name>
        <name><surname>Brubaker</surname><given-names>Marcus</given-names></name>
        <name><surname>Guo</surname><given-names>Jiqiang</given-names></name>
        <name><surname>Li</surname><given-names>Peter</given-names></name>
        <name><surname>Riddell</surname><given-names>Allen</given-names></name>
      </person-group>
      <article-title>Stan: A probabilistic programming language</article-title>
      <source>Journal of statistical software</source>
      <publisher-name>Columbia Univ., New York, NY (United States); Harvard Univ., Cambridge, MA …</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>76</volume>
      <issue>1</issue>
    </element-citation>
  </ref>
  <ref id="ref-MagnussonU003A2022">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Magnusson</surname><given-names>Måns</given-names></name>
        <name><surname>Bürkner</surname><given-names>Paul</given-names></name>
        <name><surname>Vehtari</surname><given-names>Aki</given-names></name>
      </person-group>
      <article-title>posteriordb: a set of posteriors for Bayesian inference and probabilistic programming</article-title>
      <year iso-8601-date="2022-11">2022</year><month>11</month>
      <uri>https://github.com/stan-dev/posteriordb</uri>
    </element-citation>
  </ref>
  <ref id="ref-GeU003A2018">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ge</surname><given-names>Hong</given-names></name>
        <name><surname>Xu</surname><given-names>Kai</given-names></name>
        <name><surname>Ghahramani</surname><given-names>Zoubin</given-names></name>
      </person-group>
      <article-title>Turing: A language for flexible probabilistic inference</article-title>
      <source>International conference on artificial intelligence and statistics, AISTATS 2018, 9-11 april 2018, playa blanca, lanzarote, canary islands, spain</source>
      <year iso-8601-date="2018">2018</year>
      <uri>http://proceedings.mlr.press/v84/ge18b.html</uri>
      <fpage>1682</fpage>
      <lpage>1690</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BesagU003A1994">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Besag</surname><given-names>Julian</given-names></name>
      </person-group>
      <article-title>Comments on &quot;Representations of knowledge in complex systems&quot; by U. Grenander and MI Miller</article-title>
      <source>Journal of the Royal Statistical Society, Series B</source>
      <year iso-8601-date="1994">1994</year>
      <volume>56</volume>
      <issue>591-592</issue>
      <fpage>4</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-httpstan">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Riddell</surname><given-names>Allen</given-names></name>
        <name><surname>Hartikainen</surname><given-names>Ari</given-names></name>
        <name><surname>Carter</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>Httpstan (4.4.0)</article-title>
      <publisher-name>PyPI</publisher-name>
      <year iso-8601-date="2021-03">2021</year><month>03</month>
    </element-citation>
  </ref>
  <ref id="ref-rstan">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Stan Development Team</string-name>
      </person-group>
      <article-title>RStan: The R interface to Stan</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://mc-stan.org/</uri>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>See Wikipedia’s page on the
    <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Student%27s_t-distribution#Characterization">Student’s
    t-distribution</ext-link>for a brief introduction to this
    parameterization.</p>
  </fn>
</fn-group>
</back>
</article>
