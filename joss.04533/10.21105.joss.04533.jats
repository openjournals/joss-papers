<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4533</article-id>
<article-id pub-id-type="doi">10.21105/joss.04533</article-id>
<title-group>
<article-title>EPICpy: A Python Interface for EPIC Computational
Cognitive Modeling</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Seymour</surname>
<given-names>Travis L.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University of California Santa Cruz, US</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-04-04">
<day>4</day>
<month>4</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>76</issue>
<fpage>4533</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
<kwd>cognitive architecture</kwd>
<kwd>cognitive psychology</kwd>
<kwd>human performance</kwd>
<kwd>simulation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Executive-Process Interactive Control (EPIC) is a computational
  cognitive architecture that specifies a theory of human performance
  and a facility to create behavioral simulations using that theory
  (<xref alt="Meyer &amp; Kieras, 1997a" rid="ref-MeyerU0026Kieras1997a" ref-type="bibr">Meyer
  &amp; Kieras, 1997a</xref>,
  <xref alt="1997b" rid="ref-MeyerU0026Kieras1997b" ref-type="bibr">1997b</xref>).
  EPIC compacts decades of psychological theory and findings into a rich
  set of processors, including those that model sensory, perceptual,
  motor, cognitive, and memory subsystems of the human mind. EPIC is
  particularly suited to stimulus-response type human performance tasks
  including those involving multitasking and task-switching. Although
  many research articles, technical reports, talks, and conference
  presentations have been published using EPIC, these have been produced
  by a relatively small number of researchers. One reason EPIC has not
  been used more widely is due to its complex design and basis in the
  C++ programming language. Another challenge is the complete lack of
  documentation on how to set up and use its development environment. A
  final limitation is that EPIC is only available for MacOS. None of
  these issues are a problem for an experienced C++ developer, but they
  can be significant hurdles for those with limited C++ expertise, a
  state that is exceedingly common in the cognitive science community
  most likely to be interested in using EPIC.</p>
  <p>Rather than C++, the current approach uses the popular Python
  programing language. Because Python is now the language used in most
  introductory programming courses, researchers, their collaborators,
  and their students are more likely to be familiar with it than with
  C++. EPICpy not only provides a new Python-based graphical interface
  for EPIC modeling, but it allows programming simulated tasks, and
  perceptual models in Python
  (<xref alt="Seymour, 2022b" rid="ref-EPICpyGithub" ref-type="bibr">Seymour,
  2022b</xref>). In addition, EPICpy is cross-platform and provides
  executables for Linux, MacOS, and Windows (via WSL2). It is also
  possible to use EPICpy with the included Docker file on any operating
  system. EPICpy is accompanied by rich documentation
  (<xref alt="Seymour, 2022a" rid="ref-EPICpyDocs" ref-type="bibr">Seymour,
  2022a</xref>) for those wanting to install and run existing
  simulations, those wishing to create and test new simulations, as well
  as those wishing to set up an environment for developing EPICpy
  itself. Hopefully EPICpy and its documentation will facilitate wider
  use of EPIC in cognitive science research, as well as easing the
  process of teaching EPIC to a new generation of modelers in the
  classroom and in workshops.</p>
</sec>
<sec id="current-approach-using-epicapp">
  <title>Current Approach Using EPICapp</title>
  <p>Interest in using computational cognitive architectures to
  understand human cognitive performance has hardly waned for 40 years
  (<xref alt="Kotseruba &amp; Tsotsos, 2020" rid="ref-Kotseruba2020" ref-type="bibr">Kotseruba
  &amp; Tsotsos, 2020</xref>). Among the 50 or so actively used
  cognitive architectures, EPIC is one of the few allowing high-fidelity
  modeling of tasks relying on perceptual, motor, and control processes.
  Despite this, it can be challenging to create new EPIC simulations for
  many cognitive scientists. The overview of an EPIC stimulation can be
  seen in Figure 1.</p>
  <fig>
    <caption><p>Overview of EPICapp’s C++ Based
    Modeling.<styled-content id="figU003Aepicappoverview"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/files/epicapp_overview.png" xlink:title="" />
  </fig>
  <p>The EPIC Architecture exists as a compiled dynamically-linked
  library (a MacOS .dylib file) called <italic>EPICLib</italic> and is
  based on 64,000 lines of C++ code across 321 files. It embodies both
  the psychological model of a human performer and the code that allows
  one to use that model to create simulations. EPICapp is a MacOS
  Graphical User Interface (GUI) application that allows users to load
  various model components and control EPIC simulations. EPICapp is
  written in C++ and Objective-C. Standard EPIC modeling involves
  working with some subset of the following components (see Figure
  1):</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Task Device</bold>. In EPIC a device is a simulated task
      environment that typically emulates a related human task. It
      includes virtual outputs such as a computer screen capable of
      displaying arbitrary graphics and text, virtual sound sources
      (speakers, headphones, human voice, etc.), and a variety of input
      devices such as a keyboard, mouse, joystick, button box,
      microphone. EPIC devices are written in C++.</p>
    </list-item>
    <list-item>
      <p><bold>Perceptual Encoders</bold>. Although EPIC already models
      how visual and auditory information from the device is encoded by
      the virtual performer, an EPIC modeler can specify alternate
      models for how visual and/or auditory information is encoded in
      the task being studied. Perpetual encoders are written in C++.</p>
    </list-item>
    <list-item>
      <p><bold>Task Rules</bold>. Task rules primarily embody the
      researcher’s theory for how humans perform the task under
      investigation. If this performance theory reflected in the rules
      is correct, EPIC will likely produce simulated data (e.g., RT,
      eye-movements, response accuracy, etc.) that matches data from
      humans performing equivalent tasks. The hypothesized performance
      strategy is not expressed using a programming language, instead it
      is written as a set of IF-THEN production rules that specify
      associations between perceptual or memory states and cognitive
      (e.g., storing information in working memory) or motor actions
      (e.g., looking at a visual object, or pressing a button).</p>
    </list-item>
  </list>
</sec>
<sec id="previous-research-using-epic-via-epicapp">
  <title>Previous Research Using EPIC via EPICapp</title>
  <p>Many studies have been published with EPIC models created using the
  existing EPICapp
  application<xref ref-type="fn" rid="fn1">1</xref>:</p>
  <list list-type="bullet">
    <list-item>
      <p>Kieras
      (<xref alt="2018" rid="ref-Kieras2018" ref-type="bibr">2018</xref>)
      presented a new EPIC modeling approach using “Explanatory
      Sequences” with which the author showed classic visual search
      tasks can be explained without visual attention.</p>
    </list-item>
    <list-item>
      <p>Kieras &amp; Wakefield
      (<xref alt="2014" rid="ref-Kieras2014" ref-type="bibr">2014</xref>)
      proposed a novel computational account of how people can follow
      individual streams of speech in a context full of irrelevant
      speech (i.e., the Cocktail Party Effect)</p>
    </list-item>
    <list-item>
      <p>Zhang &amp; Hornof
      (<xref alt="2014" rid="ref-Zhang2014" ref-type="bibr">2014</xref>)
      used a computer-cluster to search in parallel for parameter
      combinations that helped reveal the subtle ways in which
      micro-strategy choices in complex multitasking environments can
      lead to individual differences in performance.</p>
    </list-item>
    <list-item>
      <p>Seymour &amp; Schumacher
      (<xref alt="2009" rid="ref-SeymourEMG" ref-type="bibr">2009</xref>)
      used an EPIC model for an exclude-recognition task to predict
      electromyographic signals during performance.</p>
    </list-item>
    <list-item>
      <p>Meyer et al.
      (<xref alt="2001" rid="ref-Meyer20Questions2001" ref-type="bibr">2001</xref>)
      showed how EPIC can be parameterized to simulate human performance
      in older adults and revealed that some supposed age-related
      declines are actually due to strategic choices.</p>
    </list-item>
  </list>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>There are several issues that motivate a new approach to EPIC
  modeling. One is that it is currently not easy to publicly obtain a
  working copy of the EPICapp software. What is available is the C++
  source code for EPICLib and EPICapp for MacOS. This code is available
  on a GitHub website
  (<xref alt="Kieras, 2016" rid="ref-EPICappGithub" ref-type="bibr">Kieras,
  2016</xref>), but it contains no information about how to set up or
  use the required development environment. Furthermore, there is no
  information on how to program devices, or encoders for use with
  EPICapp. Without instructions, use of this code would likely be
  restricted to experienced C++ programmers capable of reading through
  the source code and extracting the necessary information.</p>
  <p>Although there have been a few conference-based workshops given by
  David Kieras and colleagues (e.g.,
  <xref alt="Kieras &amp; Hornof, 2004" rid="ref-Tutorial2004" ref-type="bibr">Kieras
  &amp; Hornof, 2004</xref>), these have been limited to writing and
  editing production rules for existing task devices to avoid the need
  for C++ expertise. Although there are 2 publicly available EPIC
  models<xref ref-type="fn" rid="fn2">2</xref>, they are both offered as
  raw code only. To compile these devices for use in EPICapp, the entire
  EPICLib/EPICapp development environment would have to be set up. Thus,
  there is currently no option for non-C++ programmers.</p>
  <p>There is obviously no problem with a simulation system being
  targeted to C++ programmers, and the aforementioned lack of
  development documentation could be remedied by someone with sufficient
  knowledge. However, it has become increasingly rare for the target
  Cognitive Science audience of EPIC to have any, let alone sufficient,
  expertise in C++. According to recent surveys administered by TIOBE BV
  (<xref alt="2022" rid="ref-TIOBEIndex2022" ref-type="bibr">2022</xref>)
  and Stack Overflow Inc.
  (<xref alt="2021" rid="ref-StackOverflow2022" ref-type="bibr">2021</xref>),
  the Python programming language is ranked significantly higher in
  popularity compared to C++ (currently Python is #1) and is
  additionally most likely to be taught as an introductory language in
  college courses. This presents a mismatch between the skills required
  to use EPIC and those being taught in Cognitive Science and Computer
  Science programs.</p>
  <p>A second major issue is one of platform; only offering EPIC for the
  MacOS operating system further limits the potential pool of users.</p>
  <p>Finally, EPIC only allows for basic descriptive statistics such as
  arithmetic mean and correlation, as well as goodness of fit statistics
  like R^2 and RMSE. Any other analyses would have to be programmed from
  scratch in C++ by the modeller who wished to use them. Alternatively,
  a simulation system written in Python could take advantage of a
  growing cornucopia of available tools for numerical processing,
  statistical analyses and graphing.</p>
</sec>
<sec id="a-new-approach-using-epicpy">
  <title>A New Approach Using EPICpy</title>
  <p>EPICpy offers a new cross-platform GUI application for EPIC
  modeling, with executables and detailed instructions made publicly
  available for Linux (Ubuntu v18 and newer, and related Debian-based
  distributions), MacOS (Catalina v10.15 and newer), as well as Windows
  (v10.21H2 and newer via the Window Subsystem for Linux v2). For
  potential users on other operating systems, a Dockerfile is also
  provided for containerized EPIC modeling.</p>
  <p>EPICpy is based on the Python programming language instead of C++
  and follows the structure shown in Figure 2.</p>
  <fig>
    <caption><p>Overview of EPICpy’s Python-Based
    Modeling.<styled-content id="figU003Aepicpyoverview"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/files/epicpy_overview.png" xlink:title="" />
  </fig>
  <p>Although EPICLib (the compiled library containing the EPIC
  architecture) is still programmed in C++, all other components of the
  simulation system are programmed in Python. This means that modellers
  can program new task devices and perceptual encoders in Python. It is
  important to note that devices and encoders do not need to be compiled
  in EPICpy – they are loaded as raw Python files directly into the
  application (along with a set of production rules). Thus, most EPIC
  modellers can use EPICapp without needing to set up the EPICpy
  development environment. This also means that devices and encoders can
  be shared between EPIC modelers without regards to operating system.
  To make it easy to create new devices and encoders, two demo models
  (including devices, encoders, and rulesets) are provided that can be
  edited and extended as necessary. Because the EPICpy GUI application
  is itself programmed in Python, those wishing to alter or extend
  EPICpy can do so, but in this case, EPICpy’s development environment
  will need to be set up. Whether using one of the available EPICpy
  binaries, or running EPICpy from the development environment, detailed
  step-by-step instructions for getting started are available on the
  EPICpy documentation website
  (<xref alt="Seymour, 2022a" rid="ref-EPICpyDocs" ref-type="bibr">Seymour,
  2022a</xref>).</p>
  <p>In addition to its popularity, another advantage of using Python is
  the availability of powerful and easy to use statistics and graphing
  packages. In typical EPIC workflows, comparing simulated data to human
  data using statistics and graphs require moving the datafile generated
  by EPIC into other applications. By exposing the Pingouin statistics
  and graphing package
  (<xref alt="Vallat, 2018" rid="ref-Vallat2018" ref-type="bibr">Vallat,
  2018</xref>), EPICpy allows device programmers access to statistical
  analyses ranging from simple descriptive statistics to
  machine-learning based analyses. It also provides both the matplotlib
  and seaborn packages for graphing. Thus, via EPICpy’s new statistical
  output window, device modellers can present complex statistics and
  graphs directly within the EPICpy GUI following each simulation
  run.</p>
  <p>EPICpy includes a large list of improvements and enhancements not
  available in EPICapp with the goal of enhancing EPIC modelling for
  existing and new EPIC modellers. These include powerful new features
  such as parameterized runs, batch rule running, automatic
  model-specific reinstatement of settings and GUI metrics. A complete
  list of enhancements is available in the documentation.</p>
</sec>
<sec id="limitations">
  <title>Limitations</title>
  <p>Getting an existing C++ library to work seamlessly with Python code
  is no easy feat. Although this coordination was partially aided by the
  cppyy library for the automatic creation of C++/Python bindings
  (<xref alt="Lavrijsen &amp; Dutta, 2016" rid="ref-cppyy2016" ref-type="bibr">Lavrijsen
  &amp; Dutta, 2016</xref>), the back and forth translation between C++
  and Python has a significant penalty in run-time. In addition, having
  the entire user interface, device, and all encoders in Python also
  contributes to a significant runtime penalty compared to EPICapp. For
  example, running the provided demo Choice-Task “Hard” condition for
  100 trials in EPICpy takes 1.36 seconds to complete compared to 0.81
  seconds in EPICapp, making the C++ version 40% faster than the Python
  version<xref ref-type="fn" rid="fn3">3</xref>. When continuous graphic
  and text output are enabled, the speed advantage of C++ is even more
  dramatic. However, it is our hope that this trades off with the
  decrease in <italic>development</italic> time typically associated
  with moving from C++ to Python, especially for inexperienced
  developers.</p>
  <p>Because EPICLib itself is still compiled from C++ code, making
  changes to the EPIC architecture itself still requires C++ expertise.
  On the other hand, this means that future updates to EPIC (which is
  still being developed by David Kieras in C++) can be easily
  incorporated into EPICpy just by compiling the library and copying it
  into the EPICpy resources folder.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>I acknowledge the generous contributions of David Kieras who helped
  me understand the architecture and design patterns used in the EPIC
  C++ code, as well as in producing a workable EPICLIb commandline
  interface that served as the starting point for EPICpy. I also
  acknowledge the contributions of Allison Hefley and Holly Pike who
  helped with earlier attempts to create a cross-platform version of
  EPIC.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-MeyerU0026Kieras1997a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>David</given-names></name>
        <name><surname>Kieras</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>A computational theory of executive cognitive processes and multiple-task performance: Part 1. Basic mechanisms</article-title>
      <source>Psychological review</source>
      <year iso-8601-date="1997-02">1997</year><month>02</month>
      <volume>104</volume>
      <pub-id pub-id-type="doi">10.1037/0033-295X.104.1.3</pub-id>
      <fpage>3</fpage>
      <lpage>65</lpage>
    </element-citation>
  </ref>
  <ref id="ref-MeyerU0026Kieras1997b">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>David</given-names></name>
        <name><surname>Kieras</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>A computational theory of executive cognitive processes and multiple-task performance: Part 2. Accounts of psychological refractory-period phenomena</article-title>
      <source>Psychological Review - PSYCHOL REV</source>
      <year iso-8601-date="1997-07">1997</year><month>07</month>
      <volume>104</volume>
      <pub-id pub-id-type="doi">10.1037//0033-295X.104.4.749</pub-id>
      <fpage>749</fpage>
      <lpage>791</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kotseruba2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kotseruba</surname><given-names>Yulia</given-names></name>
        <name><surname>Tsotsos</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>40 years of cognitive architectures: Core cognitive abilities and practical applications</article-title>
      <source>Artificial Intelligence Review</source>
      <year iso-8601-date="2020-01">2020</year><month>01</month>
      <volume>53</volume>
      <pub-id pub-id-type="doi">10.1007/s10462-018-9646-y</pub-id>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Tutorial2004">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kieras</surname><given-names>David</given-names></name>
        <name><surname>Hornof</surname><given-names>Anthony</given-names></name>
      </person-group>
      <article-title>Building cognitive models with the EPIC architecture for human cognition and performance.</article-title>
      <source>Proceedings of the 6th international conference on cognitive modeling</source>
      <publisher-name>Taylor; Francis</publisher-name>
      <year iso-8601-date="2004-01">2004</year><month>01</month>
      <isbn>9781135603137</isbn>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kieras2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kieras</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>Visual search without selective attention: A cognitive architecture account</article-title>
      <source>Topics in Cognitive Science</source>
      <year iso-8601-date="2018-12">2018</year><month>12</month>
      <volume>11</volume>
      <pub-id pub-id-type="doi">10.1111/tops.12406</pub-id>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-EPICappGithub">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Kieras</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>Executive-process interactive control (EPIC) computational cognitive architecture</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <uri>https://github.com/dekieras/EPIC</uri>
    </element-citation>
  </ref>
  <ref id="ref-EPICpyGithub">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Seymour</surname><given-names>Travis L.</given-names></name>
      </person-group>
      <article-title>EPICpy: A python interface for the EPIC computational cognitive architecture</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/travisseymour/EPICpy</uri>
    </element-citation>
  </ref>
  <ref id="ref-EPICpyDocs">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Seymour</surname><given-names>Travis L.</given-names></name>
      </person-group>
      <article-title>EPICpy documentation</article-title>
      <source>GitHub.io Documentation Site</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://travisseymour.github.io/EPICpyDocs/</uri>
    </element-citation>
  </ref>
  <ref id="ref-TIOBEIndex2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>BV</surname><given-names>TIOBE Software</given-names></name>
      </person-group>
      <article-title>EPICpy documentation</article-title>
      <source>TIOBE Index Website</source>
      <publisher-name>TIOBE Software BV</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.tiobe.com/tiobe-index/</uri>
    </element-citation>
  </ref>
  <ref id="ref-StackOverflow2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Inc.</surname><given-names>Stack Exchange</given-names></name>
      </person-group>
      <article-title>2021 developer survey</article-title>
      <source>StackOverflow</source>
      <publisher-name>Stack Exchange Inc.</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://insights.stackoverflow.com/survey/2021#most-popular-technologies-language</uri>
    </element-citation>
  </ref>
  <ref id="ref-Vallat2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vallat</surname><given-names>Raphael</given-names></name>
      </person-group>
      <article-title>Pingouin: Statistics in python</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>3</volume>
      <issue>31</issue>
      <uri>https://doi.org/10.21105/joss.01026</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01026</pub-id>
      <fpage>1026</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kieras2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kieras</surname><given-names>David</given-names></name>
        <name><surname>Wakefield</surname><given-names>Gregory</given-names></name>
      </person-group>
      <article-title>Developing models for multi-talker listening tasks using the EPIC architecture: Wrong turns and lessons learned</article-title>
      <year iso-8601-date="2014-08">2014</year><month>08</month>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-SeymourEMG">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Seymour</surname><given-names>Travis L.</given-names></name>
        <name><surname>Schumacher</surname><given-names>Eric</given-names></name>
      </person-group>
      <article-title>Electromyographic evidence for response conflict in the exclude recognition task</article-title>
      <source>Cognitive, affective &amp; behavioral neuroscience</source>
      <year iso-8601-date="2009-04">2009</year><month>04</month>
      <volume>9</volume>
      <pub-id pub-id-type="doi">10.3758/CABN.9.1.71</pub-id>
      <fpage>71</fpage>
      <lpage>82</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Zhang2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Yunfeng</given-names></name>
        <name><surname>Hornof</surname><given-names>Anthony</given-names></name>
      </person-group>
      <article-title>Understanding multitasking through parallelized strategy exploration and individualized cognitive modeling</article-title>
      <source>Conference on Human Factors in Computing Systems - Proceedings</source>
      <year iso-8601-date="2014-04">2014</year><month>04</month>
      <isbn>978-1-4503-2473-1</isbn>
      <pub-id pub-id-type="doi">10.1145/2556288.2557351</pub-id>
      <fpage></fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Meyer20Questions2001">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>David</given-names></name>
        <name><surname>Glass</surname><given-names>Jennifer</given-names></name>
        <name><surname>Mueller</surname><given-names>Shane</given-names></name>
        <name><surname>Seymour</surname><given-names>Travis L.</given-names></name>
        <name><surname>Kieras</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>Executive-process interactive control: A unified computational theory for answering 20 questions (and more) about cognitive ageing</article-title>
      <source>European Journal of Cognitive Psychology</source>
      <year iso-8601-date="2001-03">2001</year><month>03</month>
      <volume>13</volume>
      <pub-id pub-id-type="doi">10.1080/09541440042000250</pub-id>
      <fpage>123</fpage>
      <lpage>164</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cppyy2016">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Lavrijsen</surname><given-names>Wim T. L. P.</given-names></name>
        <name><surname>Dutta</surname><given-names>Aditi</given-names></name>
      </person-group>
      <article-title>High-performance python-c++ bindings with PyPy and cling</article-title>
      <source>2016 6th workshop on python for high-performance and scientific computing (PyHPC)</source>
      <year iso-8601-date="2016">2016</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/PyHPC.2016.008</pub-id>
      <fpage>27</fpage>
      <lpage>35</lpage>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>For a larger curated list, see
    https://travisseymour.github.io/EPICpyDocs/epicresources/, and for a
    more complete collection, see
    https://www.researchgate.net/profile/David-Kieras</p>
  </fn>
  <fn id="fn2">
    <label>2</label><p>https://github.com/dekieras/EPIC_HZ_model and
    https://github.com/dekieras/EPIC_BMS_model</p>
  </fn>
  <fn id="fn3">
    <label>3</label><p>These times were achieved by disabling all
    graphical view output, disabling all text output, and setting all
    model step delays to 0.0 during each run. Context: Pop!_OS Linux
    v21.10, AMD Ryzen 7 3700X with 8(16) cores @ 3.6GHz, 64GB RAM</p>
  </fn>
</fn-group>
</back>
</article>
