<?xml version="1.0" encoding="UTF-8"?>
<doi_batch xmlns="http://www.crossref.org/schema/4.4.0" xmlns:ai="http://www.crossref.org/AccessIndicators.xsd" xmlns:rel="http://www.crossref.org/relations.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="4.4.0" xsi:schemaLocation="http://www.crossref.org/schema/4.4.0 http://www.crossref.org/schemas/crossref4.4.0.xsd">
  <head>
    <doi_batch_id>e7db62e4ef312e831fdea37e0ed785af</doi_batch_id>
    <timestamp>20200801125944</timestamp>
    <depositor>
      <depositor_name>JOSS Admin</depositor_name>
      <email_address>admin@theoj.org</email_address>
    </depositor>
    <registrant>The Open Journal</registrant>
  </head>
  <body>
    <journal>
      <journal_metadata>
        <full_title>Journal of Open Source Software</full_title>
        <abbrev_title>JOSS</abbrev_title>
        <issn media_type="electronic">2475-9066</issn>
        <doi_data>
          <doi>10.21105/joss</doi>
          <resource>https://joss.theoj.org</resource>
        </doi_data>
      </journal_metadata>
      <journal_issue>
        <publication_date media_type="online">
          <month>08</month>
          <year>2020</year>
        </publication_date>
        <journal_volume>
          <volume>5</volume>
        </journal_volume>
        <issue>52</issue>
      </journal_issue>
      <journal_article publication_type="full_text">
        <titles>
          <title>swiftsimio: A Python library for reading SWIFT data</title>
        </titles>
        <contributors>
          <person_name sequence="first" contributor_role="author">
            <given_name>Josh</given_name>
            <surname>Borrow</surname>
            <ORCID>http://orcid.org/0000-0002-1327-1921</ORCID>
          </person_name>
          <person_name sequence="additional" contributor_role="author">
            <given_name>Alexei</given_name>
            <surname>Borrisov</surname>
            <ORCID>http://orcid.org/0000-0001-6247-471X</ORCID>
          </person_name>
        </contributors>
        <publication_date>
          <month>08</month>
          <day>01</day>
          <year>2020</year>
        </publication_date>
        <pages>
          <first_page>2430</first_page>
        </pages>
        <publisher_item>
          <identifier id_type="doi">10.21105/joss.02430</identifier>
        </publisher_item>
        <ai:program name="AccessIndicators">
          <ai:license_ref applies_to="vor">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="am">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="tdm">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
        </ai:program>
        <rel:program>
          <rel:related_item>
            <rel:description>Software archive</rel:description>
            <rel:inter_work_relation relationship-type="references" identifier-type="doi">“https://doi.org/10.5281/zenodo.3969353”</rel:inter_work_relation>
          </rel:related_item>
          <rel:related_item>
            <rel:description>GitHub review issue</rel:description>
            <rel:inter_work_relation relationship-type="hasReview" identifier-type="uri">https://github.com/openjournals/joss-reviews/issues/2430</rel:inter_work_relation>
          </rel:related_item>
        </rel:program>
        <doi_data>
          <doi>10.21105/joss.02430</doi>
          <resource>https://joss.theoj.org/papers/10.21105/joss.02430</resource>
          <collection property="text-mining">
            <item>
              <resource mime_type="application/pdf">https://joss.theoj.org/papers/10.21105/joss.02430.pdf</resource>
            </item>
          </collection>
        </doi_data>
        <citation_list>
          <citation key="ref1">
            <doi>10.1088/0067-0049/192/1/9</doi>
          </citation>
          <citation key="ref2">
            <doi>10.1111/j.1365-2966.2005.09655.x</doi>
          </citation>
          <citation key="ref3">
            <unstructured_citation>Pontzen, Andrew and Roškar, Rok and Stinson, Greg and Woods, Rory, pynbody: N-Body/SPH analysis for python, Software, 2013, may, ascl:1305.002, ascl:1305.002, ascl, 1305.002, https://ui.adsabs.harvard.edu/abs/2013ascl.soft05002P, Provided by the SAO/NASA Astrophysics Data System, ://ascl.net/1305.002, 5</unstructured_citation>
          </citation>
          <citation key="ref4">
            <unstructured_citation>Revaz, Yves, pNbody: A python parallelized N-body reduction toolbox, Software, 2013, feb, ascl:1302.004, ascl:1302.004, ascl, 1302.004, https://ui.adsabs.harvard.edu/abs/2013ascl.soft02004R, Provided by the SAO/NASA Astrophysics Data System, ://ascl.net/1302.004, 2</unstructured_citation>
          </citation>
          <citation key="ref5">
            <doi>10.21105/joss.00809</doi>
          </citation>
          <citation key="ref6">
            <doi>10.1145/2929908.2929916</doi>
          </citation>
          <citation key="ref7">
            <unstructured_citation>SWIFT: Maintaining weak-scalability with a dynamic range of 10^4 in time-step size to harness extreme adaptivity, SWIFT, https://ui.adsabs.harvard.edu/abs/2018arXiv180701341B/abstract, Cosmological simulations require the use of a multiple time-stepping scheme. Without such a scheme, cosmological simulations would be impossible due to their high level of dynamic range; over eleven orders of magnitude in density. Such a large dynamic range leads to a range of over four orders of magnitude in time-step, which presents a significant load-balancing challenge. In this work, the extreme adaptivity that cosmological simulations present is tackled in three main ways through the use of the code SWIFT. First, an adaptive mesh is used to ensure that only the relevant particles are interacted in a given time-step. Second, task-based parallelism is used to ensure efficient load-balancing within a single node, using pthreads and SIMD vectorisation. Finally, a domain decomposition strategy is presented, using the graph domain decomposition library METIS, that bisects the work that must be performed by the simulation between nodes using MPI. These three strategies are shown to give SWIFT near-perfect weak-scaling characteristics, only losing 25% performance when scaling from 1 to 4096 cores on a representative problem, whilst being more than 30x faster than the de-facto standard Gadget-2 code., en, 2019-06-11, Proceedings of the 13th SPHERIC International Workshop, Galway, Ireland, June 26-28 2018, Borrow, Josh and Bower, Richard G. and Draper, Peter W. and Gonnet, Pedro and Schaller, Matthieu, jul, 2018, 44–51, Full Text PDF:/Users/mphf18/Zotero/storage/9TBA5JA7/Borrow et al. - 2018 - SWIFT Maintaining weak-scalability with a dynamic.pdf:application/pdf;Snapshot:/Users/mphf18/Zotero/storage/5FBLF5WH/abstract.html:text/html, 7</unstructured_citation>
          </citation>
          <citation key="ref8">
            <doi>10.1093/mnras/stu2058</doi>
          </citation>
          <citation key="ref9">
            <unstructured_citation>The HDF Group, Hierarchical Data Format, version 5, 1997, http://www.hdfgroup.org/HDF5/</unstructured_citation>
          </citation>
        </citation_list>
      </journal_article>
    </journal>
  </body>
</doi_batch>
