<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5901</article-id>
<article-id pub-id-type="doi">10.21105/joss.05901</article-id>
<title-group>
<article-title>OpenSkill: A faster asymmetric multi-team, multiplayer
rating system</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2443-8827</contrib-id>
<name>
<surname>Joshy</surname>
<given-names>Vivek</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Independent Researcher, India</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-07-21">
<day>21</day>
<month>7</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>93</issue>
<fpage>5901</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Ranking</kwd>
<kwd>Rating System</kwd>
<kwd>Bayesian Ranking</kwd>
<kwd>Online Ranking</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>In the realm of online gaming, player performance is often measured
  and compared through a system called online ranking. This system
  assigns a “rank” to players based on their performance and outcomes in
  games. A rank is a distinct level or position within a hierarchy that
  ostensibly represents a player’s skill relative to others. One common
  criticism of this system is the phenomenon known as “Elo Hell”, a
  situation where players find themselves trapped at a certain rank,
  unable to progress due to perceived flaws in how the ranking is
  calculated or due to the influence of team dynamics
  (<xref alt="Aeschbach et al., 2023" rid="ref-Elo" ref-type="bibr">Aeschbach
  et al., 2023</xref>).</p>
  <p>In the context of player ranking systems, several well-established
  models such as Elo and Glicko 2 have set the standard for performance
  measurement. However, a limitation becomes evident when these commonly
  used systems are considered for games that extend beyond two-player
  matchups. The Elo rating system
  (<xref alt="Elo, 1978" rid="ref-elo_rating_1978" ref-type="bibr">Elo,
  1978</xref>), for one, was originally formulated for chess, a
  head-to-head game, and it struggles to adapt to the complex dynamics
  of multiplayer scenarios. Similarly, Glicko 2
  (<xref alt="Glickman, 2001" rid="ref-Glicko2" ref-type="bibr">Glickman,
  2001</xref>), while offering improvements in rating accuracy and
  accounting for player rating volatility still falls short when tasked
  with accurately representing the individual contributions within a
  team-oriented game setting.</p>
  <p>This library represents a concrete implementation of an improved
  ranking system, specifically engineered to address the distinctive
  challenges of multiplayer gaming environments. It systematically
  corrects for the deficiencies of traditional ranking systems,
  providing a robust solution that ensures a fair and dynamic evaluation
  of each player’s skill level. In addition to delivering accuracy on
  par with implementations of proprietary models like TrueSkill
  (<xref alt="Herbrich &amp; Graepel, 2006" rid="ref-herbrich2006trueskill" ref-type="bibr">Herbrich
  &amp; Graepel, 2006</xref>), this system distinguishes itself through
  its enhanced speed in computing the ranks, facilitating a more
  responsive and gratifying player experience.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Bayesian inference of skill ratings from game outcomes is a crucial
  aspect of online video game development and research. This is usually
  challenging because the players’ performance changes over time and
  also varies based on who they are competing against. Our project
  primarily targets game developers and researchers interested in
  ranking players fairly and accurately. Nevertheless, the problem that
  the software solves applies to any context where you have multiple
  players or entities and you need to track their skills over time while
  they compete against each other.</p>
  <p>The OpenSkill library furnishes a versatile suite of models and
  algorithms designed to support a broad spectrum of applications. While
  popular use cases include assisting video game developers and
  researchers dealing with multi-agent scripting environments like
  Neural MMO
  (<xref alt="Suarez et al., 2019" rid="ref-suarez2019neural" ref-type="bibr">Suarez
  et al., 2019</xref>), its practical use extends far beyond this
  particular domain. For instance, it finds substantial utilization in
  recommendation systems, where it efficiently gauges unique user
  behaviours and preferences to suggest personalized recommendations.
  The matchmaking mechanisms in ranking of sports players as seen by
  Opta Analyst
  (<xref alt="Rico, 2022" rid="ref-Rico_2022" ref-type="bibr">Rico,
  2022</xref>) and dating apps are another area where OpenSkill proves
  crucial, ensuring an optimal pairing based on the comparative ranking
  of user profiles’ competencies.</p>
  <p>Derived from the research paper by Weng and Lin
  (<xref alt="Weng &amp; Lin, 2011" rid="ref-JMLRU003Av12U003Aweng11a" ref-type="bibr">Weng
  &amp; Lin, 2011</xref>), OpenSkill offers a pure Python implementation
  of their Bayesian approximation method for probabilistic models of
  ranked data. OpenSkill attempts to solve the same problems TrueSkill
  does. TrueSkill however employs factor graphs to model the probability
  distributions of players’ skills, updating their ranks through
  Bayesian inference after each game by evaluating the likelihood of
  observed outcomes.</p>
  <p>Similar to TrueSkill this library is specifically designed for
  asymmetric multi-faction multiplayer games. In the games it’s intended
  for, the term “asymmetric” means that teams might have varying numbers
  of players. For example, one team could have three players while
  another has just one. This creates an uneven playing field where the
  challenge is to balance these differences. The term “multi-faction”
  means that there are several distinct teams or groups within a single
  game. Unlike simple one-on-one contests, these games feature multiple
  teams, each potentially with a different number of players, all
  competing in the same match. This library aims to assess and balance
  player skill in such dynamic and complex game environments.</p>
  <p>OpenSkill boasts several advantages over implementations of
  proprietary models like TrueSkill. Notably, it delivers faster rating
  updates, with 3 times the performance of the popular Python
  open-source implementation of TrueSkill as seen in Lee
  (<xref alt="2018" rid="ref-Lee_2018" ref-type="bibr">2018</xref>).
  OpenSkill also includes five distinct models, each with its unique
  characteristics and tradeoffs. While all the models are general
  purpose, the recommended model for most use cases is Plackett-Luce.
  This model extends the regular Plackett-Luce as described in Guiver
  &amp; Snelson
  (<xref alt="2009" rid="ref-Plackett_Luce" ref-type="bibr">2009</xref>)
  by incorporating variance parameters to account for the probability
  that a certain team is the winner among a set of competing teams.</p>
  <p>The Plackett-Luce model can be thought of as a generalized
  extension of the Braldey-Terry model originally introduced in Bradley
  &amp; Terry
  (<xref alt="1952" rid="ref-Bradley_Terry" ref-type="bibr">1952</xref>).
  Both models follow logistic distribution, while in contrast, the
  Thurstone-Mosteller model follows the Gaussian distribution. Both
  models can be also used with partial pairing and full pairing
  approaches for rating updates. Partial pairing models engage only a
  subset of players who are paired with each other during rating
  updates. This strategy considerably improves computational efficiency
  while sacrificing a certain level of accuracy. On the other hand, full
  pairing models leverage all available information within the paired
  data to make precise rating updates at the cost of increased
  computational requirements.</p>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p>To install the library simply
  <monospace>pip install openskill</monospace> and import the library. A
  conventional example of usage is given below:</p>
  <code language="python">
&gt;&gt;&gt; from openskill.models import PlackettLuce
&gt;&gt;&gt; model = PlackettLuce()
&gt;&gt;&gt; model.rating()
PlackettLuceRating(mu=25.0, sigma=8.333333333333334)
&gt;&gt;&gt; r = model.rating
&gt;&gt;&gt; [[a, b], [x, y]] = [[r(), r()], [r(), r()]]
&gt;&gt;&gt; [[a, b], [x, y]] = model.rate([[a, b], [x, y]])
&gt;&gt;&gt; a
PlackettLuceRating(mu=26.964294621803063, sigma=8.177962604389991)
&gt;&gt;&gt; x
PlackettLuceRating(mu=23.035705378196937, sigma=8.177962604389991)
&gt;&gt;&gt; (a == b) and (x == y)
True</code>
  <p>Each player has a <monospace>mu</monospace> and a
  <monospace>sigma</monospace> value corresponding to their skill
  (<inline-formula><alternatives>
  <tex-math><![CDATA[\mu]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>μ</mml:mi></mml:math></alternatives></inline-formula>)
  and uncertainty (<inline-formula><alternatives>
  <tex-math><![CDATA[\sigma]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>σ</mml:mi></mml:math></alternatives></inline-formula>)
  in skill. Comparisons between two players can be done by calling the
  <monospace>ordinal()</monospace> method. In this case it would be on
  the instances of <monospace>PlackettLuceRating</monospace>.</p>
</sec>
<sec id="benchmarks">
  <title>Benchmarks</title>
  <p>A reproducible set of benchmarks is available in the
  <monospace>benchmark/</monospace> folder at the root of the
  openskill.py repository. Simply run the appropriate Jupyter Notebook
  file to run the relevant benchmark.</p>
  <p>Using a dataset of Overwatch
  (<xref alt="Joshy, 2023" rid="ref-joshy_2023_overwatch" ref-type="bibr">Joshy,
  2023</xref>) matches and player info, OpenSkill predicts the winners
  competitively with TrueSkill.</p>
  <p>For games restricted to at least 2 matches per player:</p>
  <table-wrap>
    <table>
      <thead>
        <tr>
          <th align="center"></th>
          <th align="center">OpenSkill - PlackettLuce</th>
          <th align="center">TrueSkill</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="center">Correct Matches</td>
          <td align="center">556</td>
          <td align="center">587</td>
        </tr>
        <tr>
          <td align="center">Incorrect Matches</td>
          <td align="center">79</td>
          <td align="center">48</td>
        </tr>
        <tr>
          <td align="center">Accuracy</td>
          <td align="center"><bold>87.56%</bold></td>
          <td align="center"><bold>92.44%</bold></td>
        </tr>
        <tr>
          <td align="center">Runtime Duration</td>
          <td align="center"><bold>0.97s</bold></td>
          <td align="center">3.41s</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p>When restricted to 1 match per player:</p>
  <table-wrap>
    <table>
      <thead>
        <tr>
          <th align="center"></th>
          <th align="center">OpenSkill - PlackettLuce</th>
          <th align="center">TrueSkill</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="center">Correct Matches</td>
          <td align="center">799</td>
          <td align="center">830</td>
        </tr>
        <tr>
          <td align="center">Incorrect Matches</td>
          <td align="center">334</td>
          <td align="center">303</td>
        </tr>
        <tr>
          <td align="center">Accuracy</td>
          <td align="center"><bold>70.52%</bold></td>
          <td align="center"><bold>73.26%</bold></td>
        </tr>
        <tr>
          <td align="center">Runtime Duration</td>
          <td align="center"><bold>17.64s</bold></td>
          <td align="center">58.35</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p>Using a dataset of chess matches, we also see a similar trend,
  where OpenSkill gives a similar predictive performance to TrueSkill,
  but in less time.</p>
  <p>It should be noted that the difference in speed may be partially
  due to the the efficiency of the TrueSkill implementation in question.
  For instance, switching to Scipy backend in the TrueSkill
  implementation slows the inference to around 8 seconds even though we
  should be expecting a speedup since Scipy drops into faster C
  code.</p>
  <p>Finally, running the project against a large dataset of PUBG online
  matches results in a Rank-Biased Overlap
  (<xref alt="Webber et al., 2010" rid="ref-10.1145U002F1852102.1852106" ref-type="bibr">Webber
  et al., 2010</xref>) of <bold>64.11</bold> and an accuracy of
  <bold>92.03%</bold>.</p>
</sec>
<sec id="discussion">
  <title>Discussion</title>
  <p>Our OpenSkill library has demonstrated significant improvements
  over proprietary models in terms of both speed and efficiency.
  However, we recognize that there are still areas that warrant further
  exploration and improvement.</p>
  <p>One such area is partial play. Ideally, a comprehensive skill
  ranking system should take into account both the winning and losing
  side of a game and adjust their ratings accordingly. Partial play,
  where only a subset of players are engaged during a match, presents a
  unique challenge in this regard. While it is theoretically easy to
  implement this feature, the lack of relevant data makes it difficult
  for us to verify its efficacy. Consequently, any modifications we make
  to such models run the risk of overfitting the available data. The
  absence of a clearly defined metric for partial play further
  complicates matters, as different groups interpret it in various ways.
  Our interpretation of partial play pertains to the duration a player
  participates in a game, but significant work is required to
  operationalize this concept in a tangible way within our library.</p>
  <p>More substantially, as of now, OpenSkill does not support weight
  integration, where weights represent a player’s contributions to an
  overall victory. The ability to assign different significance to
  different players based on their contributions could greatly improve
  the accuracy of a player’s resulting skill rating. We realize the
  value of this feature, and it is a primary area of focus in our
  ongoing improvements to the library.</p>
  <p>On a positive note, OpenSkill does indeed support time decay, an
  important aspect of maintaining an accurate skill rating system. Over
  time, a player’s skill can decrease due to inactivity; our library
  allows users to adjust the sigma value accordingly. This feature
  ensures that our library maintains its adaptability and relevance even
  when faced with variable player engagement levels.</p>
  <p>Despite these limitations, our OpenSkill library remains a powerful
  tool for video game developers and researchers tasked with competently
  evaluating player skills. It addresses several long-standing issues
  encountered in multiplayer video game ranking systems. By continuously
  seeking out improvements and refining our approach, we hope to make
  OpenSkill an ever more effective and flexible resource in the world of
  online gaming.</p>
</sec>
<sec id="related-packages">
  <title>Related Packages</title>
  <p>This project was originally a direct port of the openskill.js
  project
  (<xref alt="Busby, 2023" rid="ref-Busby_2023" ref-type="bibr">Busby,
  2023</xref>) from Javascript to Python. However, we have deviated
  slightly from their implementation in that we focus more on
  Python-specific features, and thorough documentation of every object.
  All documented objects have the mathematical formulas from their
  respective papers included for easier inspection of code. We also
  provide an easy way to customize all the constants used in any model
  very easily. There are also published ports of OpenSkill in Elixir
  (<xref alt="Busby, 2020" rid="ref-PhilihpOpenSkillElixir" ref-type="bibr">Busby,
  2020</xref>), Kotlin
  (<xref alt="Brezina, 2022" rid="ref-BrezinaOpenSkillKotlin" ref-type="bibr">Brezina,
  2022</xref>) and Lua
  (<xref alt="GitHub - Bstummer/Openskill.lua — Github.com, 2022" rid="ref-BstummerOpenSkillLua" ref-type="bibr"><italic>GitHub
  - Bstummer/Openskill.lua — Github.com</italic>, 2022</xref>) on
  GitHub.</p>
  <p>When comparing our OpenSkill to similar packages like that of Lee’s
  TrueSkill implementation, we also provide support for PyPy 3, which
  uses a Just-In-Time compiler as opposed to the standard CPython
  implementation. We also support strict typing of objects, to enable
  auto-completion in your Integrated Development Environments (IDEs).
  Our development workflow also requires a test coverage of 100% for any
  code to be merged. This serves as a starting point to prevent
  erroneous math from making it into the library.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We extend our sincere gratitude to Philihp Busby and the
  openskill.js project for their valuable contributions without which
  this project would not have been possible. Additionally, their inputs
  and contributions to the prediction methods, have significantly
  enhanced its speed and efficiency. Special acknowledgment also goes to
  Jas Laferriere for their critical contribution of the additive
  dynamics factor. Your collective efforts have been instrumental in
  improving our work.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-JMLRU003Av12U003Aweng11a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Weng</surname><given-names>Ruby C.</given-names></name>
        <name><surname>Lin</surname><given-names>Chih-Jen</given-names></name>
      </person-group>
      <article-title>A Bayesian approximation method for online ranking</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2011">2011</year>
      <volume>12</volume>
      <issue>9</issue>
      <uri>http://jmlr.org/papers/v12/weng11a.html</uri>
      <fpage>267</fpage>
      <lpage>300</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Elo">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Aeschbach</surname><given-names>Lena Fanya</given-names></name>
        <name><surname>Kayser</surname><given-names>Dominik</given-names></name>
        <name><surname>Berbert De Castro Hüsler</surname><given-names>Antony</given-names></name>
        <name><surname>Opwis</surname><given-names>Klaus</given-names></name>
        <name><surname>Brühlmann</surname><given-names>Florian</given-names></name>
      </person-group>
      <article-title>The psychology of esports players’ ELO hell: Motivated bias in league of legends and its impact on players’ overestimation of skill</article-title>
      <source>Computers in Human Behavior</source>
      <year iso-8601-date="2023">2023</year>
      <volume>147</volume>
      <issn>0747-5632</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0747563223001796</uri>
      <pub-id pub-id-type="doi">10.1016/j.chb.2023.107828</pub-id>
      <fpage>107828</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-herbrich2006trueskill">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Herbrich</surname><given-names>Ralf</given-names></name>
        <name><surname>Graepel</surname><given-names>Thore</given-names></name>
      </person-group>
      <article-title>TrueSkill(TM): A Bayesian skill rating system</article-title>
      <year iso-8601-date="2006">2006</year>
      <uri>https://www.microsoft.com/en-us/research/publication/trueskilltm-a-bayesian-skill-rating-system-2/</uri>
    </element-citation>
  </ref>
  <ref id="ref-suarez2019neural">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Suarez</surname><given-names>Joseph</given-names></name>
        <name><surname>Du</surname><given-names>Yilun</given-names></name>
        <name><surname>Isola</surname><given-names>Phillip</given-names></name>
        <name><surname>Mordatch</surname><given-names>Igor</given-names></name>
      </person-group>
      <article-title>Neural MMO: A massively multiagent game environment for training and evaluating intelligent agents</article-title>
      <year iso-8601-date="2019">2019</year>
      <uri>https://arxiv.org/abs/1903.00784</uri>
    </element-citation>
  </ref>
  <ref id="ref-Rico_2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Rico</surname><given-names>Ysabel González</given-names></name>
      </person-group>
      <article-title>Her ranking is a 10 but her skill rating says...</article-title>
      <source>The Analyst</source>
      <publisher-name>Opta Analyst</publisher-name>
      <year iso-8601-date="2022-08">2022</year><month>08</month>
      <uri>https://theanalyst.com/eu/2022/08/true-tennis-skill-ratings/</uri>
    </element-citation>
  </ref>
  <ref id="ref-10.1145U002F1852102.1852106">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Webber</surname><given-names>William</given-names></name>
        <name><surname>Moffat</surname><given-names>Alistair</given-names></name>
        <name><surname>Zobel</surname><given-names>Justin</given-names></name>
      </person-group>
      <article-title>A similarity measure for indefinite rankings</article-title>
      <source>ACM Trans. Inf. Syst.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2010-11">2010</year><month>11</month>
      <volume>28</volume>
      <issue>4</issue>
      <issn>1046-8188</issn>
      <uri>https://doi.org/10.1145/1852102.1852106</uri>
      <pub-id pub-id-type="doi">10.1145/1852102.1852106</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Busby_2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Busby</surname><given-names>Philihp</given-names></name>
      </person-group>
      <article-title>A faster, open-license alternative to microsoft TrueSkill</article-title>
      <source>GitHub</source>
      <year iso-8601-date="2023-04">2023</year><month>04</month>
      <uri>https://github.com/philihp/openskill.js</uri>
    </element-citation>
  </ref>
  <ref id="ref-Glicko2">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Glickman</surname><given-names>Mark E.</given-names></name>
      </person-group>
      <article-title>Dynamic paired comparison models with stochastic variances</article-title>
      <source>Journal of Applied Statistics</source>
      <publisher-name>Taylor &amp; Francis</publisher-name>
      <year iso-8601-date="2001">2001</year>
      <volume>28</volume>
      <issue>6</issue>
      <uri>
          https://doi.org/10.1080/02664760120059219
      </uri>
      <pub-id pub-id-type="doi">10.1080/02664760120059219</pub-id>
      <fpage>673</fpage>
      <lpage>689</lpage>
    </element-citation>
  </ref>
  <ref id="ref-elo_rating_1978">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Elo</surname><given-names>Arpad E.</given-names></name>
      </person-group>
      <source>The rating of chessplayers, past and present</source>
      <publisher-name>Arco Pub</publisher-name>
      <publisher-loc>New York</publisher-loc>
      <year iso-8601-date="1978">1978</year>
      <isbn>9780668047210</isbn>
    </element-citation>
  </ref>
  <ref id="ref-Lee_2018">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lee</surname><given-names>Heungsub</given-names></name>
      </person-group>
      <article-title>An implementation of the TrueSkill rating system for python</article-title>
      <source>sublee/trueskill: An implementation of the TrueSkill rating system for Python</source>
      <year iso-8601-date="2018-09">2018</year><month>09</month>
      <uri>https://github.com/sublee/trueskill</uri>
    </element-citation>
  </ref>
  <ref id="ref-joshy_2023_overwatch">
    <element-citation publication-type="dataset">
      <person-group person-group-type="author">
        <name><surname>Joshy</surname><given-names>Vivek</given-names></name>
      </person-group>
      <article-title>OverWatch match data</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2023-12">2023</year><month>12</month>
      <uri>https://doi.org/10.5281/zenodo.10359600</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.10359600</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Plackett_Luce">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Guiver</surname><given-names>John</given-names></name>
        <name><surname>Snelson</surname><given-names>Edward</given-names></name>
      </person-group>
      <article-title>Bayesian inference for plackett-luce ranking models</article-title>
      <source>Proceedings of the 26th annual international conference on machine learning</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2009">2009</year>
      <isbn>9781605585161</isbn>
      <uri>https://doi.org/10.1145/1553374.1553423</uri>
      <pub-id pub-id-type="doi">10.1145/1553374.1553423</pub-id>
      <fpage>377</fpage>
      <lpage>384</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Bradley_Terry">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bradley</surname><given-names>Ralph Allan</given-names></name>
        <name><surname>Terry</surname><given-names>Milton E.</given-names></name>
      </person-group>
      <article-title>Rank Analysis of incomplete block designs: The method of paired comparisons</article-title>
      <source>Biometrika</source>
      <year iso-8601-date="1952-12">1952</year><month>12</month>
      <volume>39</volume>
      <issue>3-4</issue>
      <issn>0006-3444</issn>
      <uri>https://doi.org/10.1093/biomet/39.3-4.324</uri>
      <pub-id pub-id-type="doi">10.1093/biomet/39.3-4.324</pub-id>
      <fpage>324</fpage>
      <lpage>345</lpage>
    </element-citation>
  </ref>
  <ref id="ref-PhilihpOpenSkillElixir">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Busby</surname><given-names>Philihp</given-names></name>
      </person-group>
      <article-title>GitHub - philihp/openskill.ex: Elixir implementation of Weng-Lin Bayesian ranking, a better, license-free alternative to TrueSkill — github.com</article-title>
      <publisher-name>https://github.com/philihp/openskill.ex</publisher-name>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
  <ref id="ref-BrezinaOpenSkillKotlin">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Brezina</surname><given-names>Jan</given-names></name>
      </person-group>
      <article-title>GitHub - brezinajn/openskill.kt — github.com</article-title>
      <publisher-name>https://github.com/brezinajn/openskill.kt</publisher-name>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
  <ref id="ref-BstummerOpenSkillLua">
    <element-citation>
      <article-title>GitHub - bstummer/openskill.lua — github.com</article-title>
      <publisher-name>https://github.com/bstummer/openskill.lua</publisher-name>
      <year iso-8601-date="2022">2022</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
