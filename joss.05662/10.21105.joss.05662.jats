<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5662</article-id>
<article-id pub-id-type="doi">10.21105/joss.05662</article-id>
<title-group>
<article-title>PYDAQ: Data Acquisition and Experimental Analysis with
Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1702-8504</contrib-id>
<name>
<surname>Martins</surname>
<given-names>Samir Angelo Milani</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Electrical Engineering at Federal University
of São João del-Rei, Brazil.</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>GCoM - Modeling and Control Group at Federal University of
São João del-Rei, Brazil.</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-03-09">
<day>9</day>
<month>3</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>92</issue>
<fpage>5662</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Data Acquisition</kwd>
<kwd>Arduino</kwd>
<kwd>NIDAQ</kwd>
<kwd>System Identification</kwd>
<kwd>Mathematical Modeling</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>System identification is a relevant research topic that aims to
  find mathematical models using acquired data. One of the main
  contributions is the work of Ljung
  (<xref alt="1999" rid="ref-Lju1987" ref-type="bibr">1999</xref>),
  which was substantially developed over the years
  (<xref alt="Lacerda Junior et al., 2019" rid="ref-WMNL2019" ref-type="bibr">Lacerda
  Junior et al., 2019</xref>;
  <xref alt="Martins &amp; Aguirre, 2016" rid="ref-MA2016" ref-type="bibr">Martins
  &amp; Aguirre, 2016</xref>). Among system identification tools,
  SysIdentPy
  (<xref alt="Junior et al., 2020" rid="ref-Lacerda2020" ref-type="bibr">Junior
  et al., 2020</xref>) uses Python in a very straightforward way for
  system modeling through empirical data, while Narmax
  (<xref alt="Ayala et al., 2020" rid="ref-ayala2020r" ref-type="bibr">Ayala
  et al., 2020</xref>) promises to obtain models using R language.</p>
  <p>As pointed out by Ljung
  (<xref alt="1999" rid="ref-Lju1987" ref-type="bibr">1999</xref>),
  experimental data are necessary for obtaining black-box models, and
  this is exactly where PYDAQ find its place. PYDAQ is a Python tool
  which was primarily developed for experiments with empirical data,
  either sending and/or acquiring data using simple Graphical User
  Interfaces or command line, with few (or no) lines of code required,
  using different solutions provided by the market (NIDAQ and Arduino).
  Even a reseacher with no programming skills is able to use PYDAQ
  easily and quickly for data acquisition.</p>
  <p>In what follows it will be shown how PYDAQ can be use by any
  scientist, its advantages and features for quickly and effective data
  acquisition experiments, even if the scientist has no programming
  skills.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Any scientist or student who needs to acquire data in an easy and
  quick way, in three line of code (LOC), are the target audience of
  this manuscript/package. PYDAQ is a solution that aims to allow the
  user to perform experiments from data acquisition to signals
  generation using a Graphical User Interface.</p>
  <p>Despite this, for advanced users, it is also possible to use PYDAQ
  through command line, as shown in the
  <ext-link ext-link-type="uri" xlink:href="https://samirmartins.github.io/pydaq/">documentation</ext-link>,
  allowing PYDAQ to be integrated in real time with well-known modeling
  tools.</p>
  <p>To contextualize the importance of PYDAQ, there are full papers
  dealing only with data acquisition
  (<xref alt="Koerner et al., 2020" rid="ref-Koerner2020" ref-type="bibr">Koerner
  et al., 2020</xref>;
  <xref alt="Yang, 2019" rid="ref-Yang2019" ref-type="bibr">Yang,
  2019</xref>). It should be clear at this point that data acquisition
  is commonly only the first step in an empirical scientific procedure,
  such as in the work of Ostrovskii et al.
  (<xref alt="2020" rid="ref-Ostrovskii2020" ref-type="bibr">2020</xref>).
  Therefore, this step should not take too much energy of a researcher,
  since he/she needs to be full of energy to continue the research
  project.</p>
  <p>Further, PYDAQ deals from different type of data acquisition cards,
  from simple and cheaper Arduino boards up to NIDAQ devices, allowing
  the execution from simple to complex experiments. Also, since PYDAQ
  can be also used as a command line tool, it can be easily incorporated
  to be used in production along with any available mathematical tool,
  such as SysIdentPy
  (<xref alt="Junior et al., 2020" rid="ref-Lacerda2020" ref-type="bibr">Junior
  et al., 2020</xref>) or SciKitLearn
  (<xref alt="Pedregosa et al., 2011" rid="ref-scikit-learn" ref-type="bibr">Pedregosa
  et al., 2011</xref>).</p>
  <p>In literature there are packages that deals with NIDAQ devices,
  such as the NSLS-II tools
  (<xref alt="Koerner et al., 2020" rid="ref-Koerner2020" ref-type="bibr">Koerner
  et al., 2020</xref>). However, they need several lines of codes in
  order to make a single data acquisition, and works only with expensive
  and proprietary boards. Besides, as far as I know, there is no
  Graphical User Interface open software that allows instantly and
  easily data acquisition with Python, this being another feature of
  PYDAQ.</p>
  <p>Because of the above-mentioned facts, PYDAQ can be used also to
  introduce new scientist in the System Identification research area.
  Also, PYDAQ can be used in teaching, during engineering courses and in
  low-cost laboratories’ implementation, once Arduino boards are quite
  cheap and easy to find. Graphical User Interfaces also allows the user
  to be directly connected with the subject, as explicitly said by Silva
  et al.
  (<xref alt="2018" rid="ref-Silva_2018" ref-type="bibr">2018</xref>).</p>
  <p>In what follows examples of how to use PYDAQ will be presented, as
  well as future research topics. Further details can also be found in
  the
  <ext-link ext-link-type="uri" xlink:href="https://samirmartins.github.io/pydaq/">documentation</ext-link>.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>The fastest way to install PYDAQ is using pip:</p>
  <preformat>pip install pydaq</preformat>
  <p><xref alt="[fig:nidaq_get_gui]" rid="figU003Anidaq_get_gui">[fig:nidaq_get_gui]</xref>
  and
  <xref alt="[fig:arduino_get_gui]" rid="figU003Aarduino_get_gui">[fig:arduino_get_gui]</xref>
  depict the Graphical User Interface developed for Data Acquisition
  using Arduino or any NIDAQ board.</p>
  <fig>
    <caption><p>Data Acquisition through
    NIDAQ.<styled-content id="figU003Anidaq_get_gui"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/ef303b27f3570a47a30fa04842fcd9320acb86fd.png" />
  </fig>
  <fig>
    <caption><p>Data Acquisition through
    Arduino.<styled-content id="figU003Aarduino_get_gui"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/7f14d2e569388ad8877730df6a6e6e638b5b4fc5.png" />
  </fig>
  <p>To start them, only three line of codes (LOC) are necessary,
  including one for importing PYDAQ:</p>
  <code language="python">from pydaq.get_data import Get_data
# Class Get_data
g = Get_data()

# Arduino or NIDAQ - Use ONE of the following lines 
g.get_data_nidaq_gui() # For NIDAQ devices 
g.get_data_arduino_gui() # For arduino boards</code>
  <p>Similarly, to send data, only three LOC are required, as showed up
  in what follow:</p>
  <code language="python">from pydaq.send_data import Send_data

# Class Send_data
s = Send_data()

# Arduino or NIDAQ - Use ONE of the following lines 
s.send_data_nidaq_gui()
s.send_data_arduino_gui()</code>
  <p>If the user decides to save data, it will be saved in
  <monospace>.dat</monospace> format, located at the path defined in the
  GUI (Desktop is the default path).
  <xref alt="[fig:data]" rid="figU003Adata">[fig:data]</xref> shows an
  example of how data will be saved: i) one file
  (<monospace>time.dat</monospace>) with the timestamp, in seconds, when
  each sample was acquired; ii) file <monospace>data.dat</monospace>
  contains acquired values.</p>
  <fig>
    <caption><p>Example of acquired
    data.<styled-content id="figU003Adata"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/b487e4ded550a2e53c54bde1330adb90e14296be.png" />
  </fig>
  <fig>
    <caption><p>GUI for sending data -
    Arduino.<styled-content id="figU003Aarduino_send_gui"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/283b6a6e7ec58e1fc72271b94a9723780b3c161a.png" />
  </fig>
  <fig>
    <caption><p>GUI for sending data -
    NIDAQ.<styled-content id="figU003Anidaq_send_gui"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/2c7234ff73bb215abd0903521dc404609e555c5f.png" />
  </fig>
  <p>It should be emphasized that once this code is executed, a
  Graphical User Interface will manifest on the screen, according to the
  board selected by the user, as shown in
  <xref alt="[fig:arduino_send_gui]" rid="figU003Aarduino_send_gui">[fig:arduino_send_gui]</xref>
  and
  <xref alt="[fig:nidaq_send_gui]" rid="figU003Anidaq_send_gui">[fig:nidaq_send_gui]</xref>.</p>
  <p>Options are straight-forward and ease to understand. For further
  details and to check how to use the same functionality using a command
  line the reader are invited to check the
  <ext-link ext-link-type="uri" xlink:href="https://samirmartins.github.io/pydaq/">documentation</ext-link>.</p>
  <p>It is noteworthy that any signal can be generated and applied to a
  physical system using the presented GUI, being the used board the main
  constraint. Data can be either generated manually or using a library
  (e.g., NumPy) to create signals as sine waves, PRBS (Pseudo-Random
  Binary Signal) or other signal required to be a persistently exciting
  input, as necessary for system identification
  (<xref alt="Billings, 2013" rid="ref-Bil2013" ref-type="bibr">Billings,
  2013</xref>;
  <xref alt="Ljung, 1999" rid="ref-Lju1987" ref-type="bibr">Ljung,
  1999</xref>).</p>
  <p>Step-response is a common way to test a system and acquire data, in
  order to find a model, as well as system time constant and gain. To
  facilitate this procedure, a step-response GUI was also created and
  can be seen in
  <xref alt="[fig:step_nidaq]" rid="figU003Astep_nidaq">[fig:step_nidaq]</xref>
  and
  <xref alt="[fig:step_arduino]" rid="figU003Astep_arduino">[fig:step_arduino]</xref>.
  To use them, user should type the command:</p>
  <code language="python">from pydaq.step_response import Step_response

# Class Step_Response
s = Step_response()

# Arduino or NIDAQ - Use ONE of the following lines 
s.step_response_nidaq_gui()
s.step_response_arduino_gui()</code>
  <fig>
    <caption><p>Step Response GUI -
    NIDAQ.<styled-content id="figU003Astep_nidaq"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/1433667568bc0f59ea5f280d6c43ce6ba2200e59.png" />
  </fig>
  <fig>
    <caption><p>Step Response GUI -
    Arduino.<styled-content id="figU003Astep_arduino"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/5738bc3ed044cfed80e6ffc09fd6ec7f45d2f9f1.png" />
  </fig>
  <p>Here the user can define when the step will be applied, as well as
  where data will be saved.
  <xref alt="[fig:data_sent]" rid="figU003Adata_sent">[fig:data_sent]</xref>
  and
  <xref alt="[fig:step_data]" rid="figU003Astep_data">[fig:step_data]</xref>
  show data that were empirically-acquired with PYDAQ. In the figures
  the user will find labels, functionality (Sending Data/Data
  Acquisition/Step Response), device/channel (for NIDAQ boards) or COM
  port used (for Arduino devices).</p>
  <fig>
    <caption><p>Data acquired using a NIDAQ
    board.<styled-content id="figU003Adata_sent"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/885ae9e84f66f5fedd1c657f9164314060507ee6.png" />
  </fig>
  <fig>
    <caption><p>Data generated by a step-response
    experiment.<styled-content id="figU003Astep_data"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/4090842f9eecb6c20a6f3e23fa8ab5a251bb969f.png" />
  </fig>
  <p>Examples showed above shed light in some functionalities of PYDAQ.
  For further details and for command line use, the reader is welcome to
  consult the full
  <ext-link ext-link-type="uri" xlink:href="https://samirmartins.github.io/pydaq/">documentation</ext-link>.</p>
</sec>
<sec id="future-work">
  <title>Future Work</title>
  <p>Future releases will include real-time and data-driven system
  identification using linear and nonlinear approaches. Also, real-time
  model based controllers will be implemented through PYDAQ. Saving data
  in an SQL server is a future feature, as well.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Lacerda2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Junior</surname><given-names>Wilson Rocha Lacerda</given-names></name>
        <name><surname>Andrade</surname><given-names>Luan Pascoal Costa da</given-names></name>
        <name><surname>Oliveira</surname><given-names>Samuel Carlos Pessoa</given-names></name>
        <name><surname>Martins</surname><given-names>Samir Angelo Milani</given-names></name>
      </person-group>
      <article-title>SysIdentPy: A Python package for system identification using NARMAX models</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>54</issue>
      <uri>https://doi.org/10.21105/joss.02384</uri>
      <pub-id pub-id-type="doi">10.21105/joss.02384</pub-id>
      <fpage>2384</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Lju1987">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Ljung</surname><given-names>Lennart</given-names></name>
      </person-group>
      <source>System identification: Theory for the user</source>
      <publisher-name>Prentice-Hall</publisher-name>
      <publisher-loc>Englewood Cliffs, NJ</publisher-loc>
      <year iso-8601-date="1999">1999</year>
      <edition>2nd</edition>
      <isbn>0-13-656695-2</isbn>
    </element-citation>
  </ref>
  <ref id="ref-Bil2013">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Billings</surname><given-names>S. A.</given-names></name>
      </person-group>
      <source>Nonlinear system identification: NARMAX methods in the time, frequency, and spatio-temporal domains</source>
      <publisher-name>John Wiley &amp; Sons</publisher-name>
      <publisher-loc>Chichester</publisher-loc>
      <year iso-8601-date="2013">2013</year>
      <pub-id pub-id-type="doi">10.1002/9781118535561</pub-id>
      <fpage>574</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Silva_2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Silva</surname><given-names>Pedro Henrique Oliveira</given-names></name>
        <name><surname>Nardo</surname><given-names>Lucas Giovani</given-names></name>
        <name><surname>Martins</surname><given-names>Samir Angelo Milani</given-names></name>
        <name><surname>Nepomuceno</surname><given-names>Erivelton Geraldo</given-names></name>
        <name><surname>Perc</surname><given-names>Matjaž</given-names></name>
      </person-group>
      <article-title>Graphical interface as a teaching aid for nonlinear dynamical systems</article-title>
      <source>European Journal of Physics</source>
      <publisher-name>IOP Publishing</publisher-name>
      <year iso-8601-date="2018-10">2018</year><month>10</month>
      <volume>39</volume>
      <issue>6</issue>
      <pub-id pub-id-type="doi">10.1088/1361-6404/aae35c</pub-id>
      <fpage>065105</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Ostrovskii2020">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ostrovskii</surname><given-names>Valerii Y.</given-names></name>
        <name><surname>Nazare</surname><given-names>Thalita E.</given-names></name>
        <name><surname>Martins</surname><given-names>Samir A. M.</given-names></name>
        <name><surname>Nepomuceno</surname><given-names>Erivelton G.</given-names></name>
      </person-group>
      <article-title>Temperature as a chaotic circuit bifurcation parameter</article-title>
      <source>2020 IEEE conference of russian young researchers in electrical and electronic engineering (EIConRus)</source>
      <year iso-8601-date="2020">2020</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/EIConRus49466.2020.9038964</pub-id>
      <fpage>154</fpage>
      <lpage>157</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ayala2020r">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ayala</surname><given-names>Helon Vicente Hultmann</given-names></name>
        <name><surname>Gritti</surname><given-names>Marcos Cesar</given-names></name>
        <name><surname>Santos Coelho</surname><given-names>Leandro dos</given-names></name>
      </person-group>
      <article-title>An R library for nonlinear black-box system identification</article-title>
      <source>SoftwareX</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>11</volume>
      <pub-id pub-id-type="doi">10.1016/j.softx.2020.100495</pub-id>
      <fpage>100495</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-WMNL2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lacerda Junior</surname><given-names>Wilson R.</given-names></name>
        <name><surname>Martins</surname><given-names>Samir A. M.</given-names></name>
        <name><surname>Nepomuceno</surname><given-names>Erivelton G.</given-names></name>
        <name><surname>Lacerda</surname><given-names>Márcio J.</given-names></name>
      </person-group>
      <article-title>Control of hysteretic systems through an analytical inverse compensation based on a NARX model</article-title>
      <source>IEEE Access</source>
      <publisher-name>IEEE</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <volume>7</volume>
      <pub-id pub-id-type="doi">10.1109/access.2019.2926057</pub-id>
      <fpage>98228</fpage>
      <lpage>98237</lpage>
    </element-citation>
  </ref>
  <ref id="ref-MA2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Martins</surname><given-names>S. A. M.</given-names></name>
        <name><surname>Aguirre</surname><given-names>L. A.</given-names></name>
      </person-group>
      <article-title>Sufficient conditions for rate-independent hysteresis in autoregressive identified models</article-title>
      <source>Mechanical Systems and Signal Processing</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>75</volume>
      <pub-id pub-id-type="doi">10.1016/j.ymssp.2015.12.031</pub-id>
      <fpage>607</fpage>
      <lpage>617</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Yang2019">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Yang</surname><given-names>Hongxia</given-names></name>
      </person-group>
      <article-title>Design and implementation of data acquisition system based on Scrapy technology</article-title>
      <source>2019 2nd international conference on safety produce informatization (IICSPI)</source>
      <year iso-8601-date="2019">2019</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/IICSPI48186.2019.9096044</pub-id>
      <fpage>417</fpage>
      <lpage>420</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Koerner2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Koerner</surname><given-names>Lucas J.</given-names></name>
        <name><surname>Caswell</surname><given-names>Thomas A.</given-names></name>
        <name><surname>Allan</surname><given-names>Daniel B.</given-names></name>
        <name><surname>Campbell</surname><given-names>Stuart I.</given-names></name>
      </person-group>
      <article-title>A Python instrument control and data acquisition suite for reproducible research</article-title>
      <source>IEEE Transactions on Instrumentation and Measurement</source>
      <year iso-8601-date="2020">2020</year>
      <volume>69</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/TIM.2019.2914711</pub-id>
      <fpage>1698</fpage>
      <lpage>1707</lpage>
    </element-citation>
  </ref>
  <ref id="ref-scikit-learn">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pedregosa</surname><given-names>F.</given-names></name>
        <name><surname>Varoquaux</surname><given-names>G.</given-names></name>
        <name><surname>Gramfort</surname><given-names>A.</given-names></name>
        <name><surname>Michel</surname><given-names>V.</given-names></name>
        <name><surname>Thirion</surname><given-names>B.</given-names></name>
        <name><surname>Grisel</surname><given-names>O.</given-names></name>
        <name><surname>Blondel</surname><given-names>M.</given-names></name>
        <name><surname>Prettenhofer</surname><given-names>P.</given-names></name>
        <name><surname>Weiss</surname><given-names>R.</given-names></name>
        <name><surname>Dubourg</surname><given-names>V.</given-names></name>
        <name><surname>Vanderplas</surname><given-names>J.</given-names></name>
        <name><surname>Passos</surname><given-names>A.</given-names></name>
        <name><surname>Cournapeau</surname><given-names>D.</given-names></name>
        <name><surname>Brucher</surname><given-names>M.</given-names></name>
        <name><surname>Perrot</surname><given-names>M.</given-names></name>
        <name><surname>Duchesnay</surname><given-names>E.</given-names></name>
      </person-group>
      <article-title>Scikit-learn: Machine learning in Python</article-title>
      <source>Journal of Machine Learning Research</source>
      <year iso-8601-date="2011">2011</year>
      <volume>12</volume>
      <pub-id pub-id-type="doi">10.48550/arXiv.1201.0490</pub-id>
      <fpage>2825</fpage>
      <lpage>2830</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
