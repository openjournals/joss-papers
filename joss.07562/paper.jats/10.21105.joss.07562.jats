<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7562</article-id>
<article-id pub-id-type="doi">10.21105/joss.07562</article-id>
<title-group>
<article-title>PyOrthanc: A Python Interface for Orthanc DICOM
Servers</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1832-6036</contrib-id>
<name>
<surname>Couture</surname>
<given-names>Gabriel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2494-2831</contrib-id>
<name>
<surname>Lemaréchal</surname>
<given-names>Yannick</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4163-7353</contrib-id>
<name>
<surname>Després</surname>
<given-names>Philippe</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Centre de recherche de l’Institut universitaire de
cardiologie et de pneumologie de Québec-Université Laval, 2725 Ch
Ste-Foy, G1V 4G5, Québec, Canada</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Département de physique, de génie physique et d’optique,
Université Laval, 1045, avenue de la Médecine, G1V 0A6, Québec,
Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-09-09">
<day>9</day>
<month>9</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>106</issue>
<fpage>7562</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Orthanc</kwd>
<kwd>Medical physics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>PyOrthanc is an open-source Python library that provides a
  comprehensive interface for interacting with Orthanc
  (<xref alt="Jodogne, 2018" rid="ref-jodogne2018orthanc" ref-type="bibr">Jodogne,
  2018</xref>), a lightweight, versatile, open-source DICOM server for
  medical imaging in healthcare and research environments.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Digital Imaging and Communications in Medicine (DICOM)
  (<xref alt="Committee, 2020" rid="ref-dicom2020" ref-type="bibr">Committee,
  2020</xref>) is the standard for managing and transmitting medical
  images. Orthanc has gained popularity for its lightweight nature and
  versatility. However, programmatically interacting with Orthanc
  servers from its REST API can be complex, especially for those
  unfamiliar with RESTful APIs. PyOrthanc addresses this challenge by
  providing a client-side, Pythonic interface to Orthanc servers,
  abstracting away the complexities of HTTP requests and DICOM data
  handling. This is in contrast to the Orthanc Python plugin, which
  offers a powerful means to extend Orthanc’s functionality directly
  within the server environment.</p>
</sec>
<sec id="features-and-functionalities">
  <title>Features and Functionalities</title>
  <p>PyOrthanc offers a wide range of features that facilitate data
  manipulation with Orthanc servers:</p>
  <list list-type="order">
    <list-item>
      <p>Orthanc’s REST API: PyOrthanc implements Python bindings for
      all Orthanc REST API routes. All the functionalities exposed in
      Orthanc are therefore easily accessible from a Pythonic
      interface.</p>
    </list-item>
    <list-item>
      <p>Patient, Study, Series, and Instance: The library provides
      Python classes that ease data management by following DICOM-level
      concepts.</p>
    </list-item>
    <list-item>
      <p>Querying: PyOrthanc provides utility functions to perform
      complex queries.</p>
    </list-item>
    <list-item>
      <p>Anonymization: PyOrthanc exposes Orthanc’s anonymization
      functionalities, which are useful for research and data
      sharing.</p>
    </list-item>
    <list-item>
      <p>Modalities: Users can easily command Orthanc servers to invoke
      DICOM Message Service Element (DIMSE) services with other
      connected modalities, such as Computerized Tomography (CT) scan
      and hospital Picture Archiving and Communication Systems (PACS),
      which allows querying, storing, and retrieving DICOM data.</p>
    </list-item>
    <list-item>
      <p>Jobs: PyOrthanc allows to monitoring of long-running tasks on
      the Orthanc server.</p>
    </list-item>
    <list-item>
      <p>Orthanc SDK: PyOrthanc provides a mock of the Orthanc SDK,
      which brings type hints and autocomplete (intelliSense) when
      working with the Python Plugin.</p>
    </list-item>
  </list>
</sec>
<sec id="architecture-and-design">
  <title>Architecture and Design</title>
  <p>The core of PyOrthanc is the Orthanc class, which handles the
  connection to the Orthanc server and serves as the entry point for all
  operations. This class manages authentication, request formatting, and
  response parsing, presenting a clean API to the user. It uses Python’s
  httpx
  (<xref alt="Coles, 2024" rid="ref-coles2024httpx" ref-type="bibr">Coles,
  2024</xref>) library for HTTP communications. The Orthanc class is
  used by all the utility functions and classes in PyOrthanc. Note that
  the class is programmatically generated with simple-openapi-client
  (<xref alt="Couture, 2024" rid="ref-couture2024simple" ref-type="bibr">Couture,
  2024</xref>) for each new version of the Orthanc REST API.</p>
  <p>The library is structured around key DICOM concepts, with main
  classes representing DICOM-level entities such as patients, studies,
  series, and instances. These classes provide intuitive methods for
  common operations, such as querying level-specific information,
  launching anonymization jobs, and downloading data. PyOrthanc also
  provides utility classes and functions, useful to monitor long-running
  tasks within Orthanc or perform complex queries.</p>
</sec>
<sec id="use-cases-and-applications">
  <title>Use Cases and Applications</title>
  <p>PyOrthanc finds applications in various medical imaging
  scenarios:</p>
  <list list-type="order">
    <list-item>
      <p>Research Data Management: Researchers can use PyOrthanc to
      automate the process of collecting, anonymizing, and organizing
      DICOM data.</p>
    </list-item>
    <list-item>
      <p>Quality Assurance: The library can be used to develop scripts
      for checking DICOM data and metadata consistency across large
      datasets.</p>
    </list-item>
    <list-item>
      <p>Clinical Workflow Integration: PyOrthanc can be integrated into
      clinical workflows, automating tasks such as routing studies to
      appropriate specialists or triggering analysis pipelines.</p>
    </list-item>
  </list>
</sec>
<sec id="performance-and-scalability">
  <title>Performance and Scalability</title>
  <p>PyOrthanc is designed to handle large-scale DICOM operations
  efficiently. The library implements connection pooling and supports
  asynchronous operations for improved performance when dealing with
  multiple concurrent requests.</p>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>PyOrthanc provides a powerful and user-friendly interface to
  Orthanc DICOM servers, enabling Python developers to easily integrate
  DICOM functionality into their applications. By abstracting the
  complexities of the Orthanc REST API, PyOrthanc accelerates the
  development of medical imaging applications and workflows. As the
  field of medical imaging informatics continues to evolve, tools like
  PyOrthanc play an important role in advancing research and improving
  clinical practice by making the complex task of data management
  easier.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-jodogne2018orthanc">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jodogne</surname><given-names>Sébastien</given-names></name>
      </person-group>
      <article-title>The orthanc ecosystem for medical imaging</article-title>
      <source>Journal of Digital Imaging</source>
      <publisher-name>Springer</publisher-name>
      <year iso-8601-date="2018">2018</year>
      <volume>31</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1007/s10278-018-0082-y</pub-id>
      <fpage>341</fpage>
      <lpage>352</lpage>
    </element-citation>
  </ref>
  <ref id="ref-dicom2020">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Committee</surname><given-names>DICOM Standards</given-names></name>
      </person-group>
      <article-title>Digital imaging and communications in medicine (DICOM) standard</article-title>
      <publisher-name>NEMA</publisher-name>
      <publisher-loc>Rosslyn, VA</publisher-loc>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
  <ref id="ref-coles2024httpx">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Coles</surname><given-names>Tom</given-names></name>
      </person-group>
      <article-title>HTTPX: A next-generation HTTP client for python</article-title>
      <publisher-name>https://github.com/encode/httpx</publisher-name>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-couture2024simple">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Couture</surname><given-names>Gabriel</given-names></name>
      </person-group>
      <article-title>Simple-openapi-client: OpenAPI python client generator that follows the KISS principle</article-title>
      <publisher-name>https://github.com/gacou54/openapi-client</publisher-name>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
