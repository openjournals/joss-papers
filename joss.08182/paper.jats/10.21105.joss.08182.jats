<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8182</article-id>
<article-id pub-id-type="doi">10.21105/joss.08182</article-id>
<title-group>
<article-title>Ecos: An accessible and intuitive co-simulation
framework</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6436-7213</contrib-id>
<name>
<surname>Hatledal</surname>
<given-names>Lars Ivar</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Norwegian University of Science and Technology (NTNU),
Department of ICT and Natural Sciences, Norway</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-06-05">
<day>5</day>
<month>6</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>110</issue>
<fpage>8182</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Functional Mockup Interface</kwd>
<kwd>Co-simulation</kwd>
<kwd>Simulation and Modelling</kwd>
<kwd>C/C++</kwd>
<kwd>Python</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Ecos is a cross-platform framework for running co-simulations
  adhering to the Functional Mock-up Interface (FMI) standard
  (<xref alt="Blochwitz et al., 2012" rid="ref-blochwitz2012functional" ref-type="bibr">Blochwitz
  et al., 2012</xref>); an open standard for model exchange and
  co-simulation of dynamic systems. The FMI Standard provides three
  interface types for difference aspects of models, namely: FMI for
  Model Exchange (ME), FMI for Co-simulation (CS), and FMI for Scheduled
  execution (Since FMI 3.0). Ecos supports the co-simulation mode, which
  is the most widely used interface type. An FMU (Functional Mock-up
  Unit) is a self-contained component that implements the FMI standard.
  It is packaged as a zip archive containing:</p>
  <list list-type="bullet">
    <list-item>
      <p>A shared library for each supported platform, which implements
      a standardized C interface.</p>
    </list-item>
    <list-item>
      <p>A <italic>modelDescription.xml</italic> file, describing the
      FMU’s capabilities and available variables.</p>
    </list-item>
    <list-item>
      <p>Optionally, component-specific resources embedded within the
      archive.</p>
    </list-item>
  </list>
  <p>The intention of Ecos is to provide a streamlined way of working
  with such FMUs, and supports version 1.0, 2.0 and 3.0 of the standard
  with respect to co-simulation. In particular, support for FMI 3.0
  (<xref alt="Junghanns et al., 2021" rid="ref-junghanns2021functional" ref-type="bibr">Junghanns
  et al., 2021</xref>) is still missing in many tools, and Ecos aims to
  help bridge this gap by providing partial support for this version. In
  collaboration with interested users, Ecos aims to gradually expand its
  support for FMI 3.0, working toward a more complete and practical
  implementation of the standard over time. Ecos also supports the
  System Structure &amp; Parameterization (SSP) standard
  (<xref alt="Köhler et al., 2016" rid="ref-kohler2016modelica" ref-type="bibr">Köhler
  et al., 2016</xref>), which can be used to import systems of FMUs in a
  structured and tool-agnostic way. Ecos consists of a Command Line
  Interface (CLI), as well as a C++ library, <italic>libecos</italic>,
  with interfaces provided in C and Python. The Python package is
  available through the PyPI package index as <italic>ecospy</italic>.
  The project is structured as a mono-repo with a major goal of being
  straightforward to build. This also implies few and light-weight
  dependencies.</p>
  <p>Some features available with Ecos:</p>
  <list list-type="bullet">
    <list-item>
      <p>Support for SSP 1.0.</p>
    </list-item>
    <list-item>
      <p>Support for FMI 1.0, 2.0 &amp; 3.0 for Co-simulation.</p>
    </list-item>
    <list-item>
      <p>Built-in plotting capabilities with inline and XML
      configuration options.</p>
    </list-item>
    <list-item>
      <p>CSV writer with inline and XML configuration options.</p>
    </list-item>
    <list-item>
      <p>Scenarios - actions to run at specific events.</p>
    </list-item>
    <list-item>
      <p>Remoting - allowing models to interact across
      processes/computers.</p>
    </list-item>
  </list>
  <p>In particular, remoting is a key feature of Ecos, allowing model
  instances to be automatically distributed across processes on a local
  machine. Instances may also be distributed across computers by
  manually booting a server application and passing their IP address to
  Ecos.</p>
  <fig>
    <caption><p>Ecos provides post-simulation plotting
    facilities.<styled-content id="figU003Aplot"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="mass_spring_damper.png" />
  </fig>
  <p><xref alt="[fig:plot]" rid="figU003Aplot">[fig:plot]</xref>
  demonstrates a simulation of a simple
  <italic>mass-spring-damper</italic> system with Ecos. The models are
  packaged following the SSP standard and subsequently simulated and
  plotted with <italic>libecos</italic>.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>While similar tooling exists like FMPy
  (<xref alt="CATIA Systems, 2017" rid="ref-FMPy" ref-type="bibr">CATIA
  Systems, 2017</xref>), Vico
  (<xref alt="Hatledal et al., 2021" rid="ref-hatledal2021vico" ref-type="bibr">Hatledal
  et al., 2021</xref>), Open Simulation Platform (OSP)
  (<xref alt="Smogeli et al., 2020" rid="ref-smogeli2020open" ref-type="bibr">Smogeli
  et al., 2020</xref>) and OMSimulator
  (<xref alt="Ochel et al., 2019" rid="ref-ochel2019omsimulator" ref-type="bibr">Ochel
  et al., 2019</xref>), Ecos aims to deliver a higher level of
  flexibility, extensibility and accessibility through an easy-to-build
  and consume package. In particular, Ecos acts as a successor to the
  JVM based Vico framework, improving on accessibility, usability and
  performance.</p>
  <p>Table 1 compares Ecos with some of the other available tools. While
  seemingly similar, Ecos niche is to provide an intuitive high-level
  C++ API, simple yet powerful Python, C and CLI interfaces, as well as
  support for all three versions of FMI for Co-simulation and built-in
  means of distributing simulation components across processes, while
  also keeping build dependencies to a minimum.</p>
  <sec id="table-1-comparison-of-tools.">
    <title>Table 1: Comparison of tools.</title>
    <table-wrap>
      <table>
        <colgroup>
          <col width="15%" />
          <col width="26%" />
          <col width="22%" />
          <col width="16%" />
          <col width="21%" />
        </colgroup>
        <thead>
          <tr>
            <th>Feature</th>
            <th>FMPy</th>
            <th>OMSimulator</th>
            <th>OSP</th>
            <th>Ecos</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Language</td>
            <td>Python</td>
            <td>C, Lua, Python</td>
            <td>C++, C, Python</td>
            <td>C++, C, Python</td>
          </tr>
          <tr>
            <td>FMI Support</td>
            <td>FMI 1.0, 2.0, 3.0 (ME, CS)</td>
            <td>FMI 2.0, 3.0 (ME, CS)</td>
            <td>FMI 1.0, 2.0 CS</td>
            <td>FMI 1.0, 2.0, 3.0 CS</td>
          </tr>
          <tr>
            <td>Co-simulation</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>Model Exchange</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>No</td>
            <td>No</td>
          </tr>
          <tr>
            <td>GUI</td>
            <td>Basic (Individual models)</td>
            <td>Yes (OMEdit)</td>
            <td>No</td>
            <td>No</td>
          </tr>
          <tr>
            <td>CLI</td>
            <td>Yes</td>
            <td>No</td>
            <td>Yes</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>Remoting</td>
            <td>Yes</td>
            <td>No</td>
            <td>Yes</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>License</td>
            <td>BSD</td>
            <td>OSMC-PL</td>
            <td>MPL</td>
            <td>MIT</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p>The software is currently being used to support the EU project
    TWINVEST, where NTNU is a partner.</p>
  </sec>
</sec>
<sec id="future-of-ecos">
  <title>Future of Ecos</title>
  <p>Ecos currently ships with a capable, but simple Jacobi-type
  <italic>fixed_step</italic> orchestration algorithm. The algorithm can
  run models in parallel, and individual model may run at different
  rates. The API is designed to be extensible, and the goal is to
  include more advanced orchestration algorithms. However, pursuing this
  should be driven by a clear user need. In this respect, users are
  encouraged to provide use-cases and sample simulations systems where
  more advanced orchestration algorithms are needed.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-blochwitz2012functional">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Blochwitz</surname><given-names>Torsten</given-names></name>
        <name><surname>Otter</surname><given-names>Martin</given-names></name>
        <name><surname>Åkesson</surname><given-names>Johan</given-names></name>
        <name><surname>Arnold</surname><given-names>Martin</given-names></name>
        <name><surname>Clauss</surname><given-names>Christoph</given-names></name>
        <name><surname>Elmqvist</surname><given-names>Hilding</given-names></name>
        <name><surname>Friedrich</surname><given-names>Markus</given-names></name>
        <name><surname>Junghanns</surname><given-names>Andreas</given-names></name>
        <name><surname>Mauss</surname><given-names>Jakob</given-names></name>
        <name><surname>Neumerkel</surname><given-names>Dietmar</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Functional mockup interface 2.0: The standard for tool independent exchange of simulation models</article-title>
      <source>9th international modelica conference</source>
      <publisher-name>The Modelica Association</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <pub-id pub-id-type="doi">10.3384/ecp12076173</pub-id>
      <fpage>173</fpage>
      <lpage>184</lpage>
    </element-citation>
  </ref>
  <ref id="ref-junghanns2021functional">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Junghanns</surname><given-names>Andreas</given-names></name>
        <name><surname>Gomes</surname><given-names>Cláudio</given-names></name>
        <name><surname>Schulze</surname><given-names>Christian</given-names></name>
        <name><surname>Schuch</surname><given-names>Klaus</given-names></name>
        <name><surname>Pierre</surname><given-names>R</given-names></name>
        <name><surname>Blaesken</surname><given-names>Matthias</given-names></name>
        <name><surname>Zacharias</surname><given-names>Irina</given-names></name>
        <name><surname>Pillekeit</surname><given-names>Andreas</given-names></name>
        <name><surname>Wernersson</surname><given-names>Karl</given-names></name>
        <name><surname>Sommer</surname><given-names>Torsten</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>The functional mock-up interface 3.0-new features enabling new applications</article-title>
      <source>Modelica conferences</source>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.3384/ecp2118117</pub-id>
      <fpage>17</fpage>
      <lpage>26</lpage>
    </element-citation>
  </ref>
  <ref id="ref-FMPy">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>CATIA Systems</string-name>
      </person-group>
      <article-title>FMPy - a Python library to simulate functional mock-up units (FMUs)</article-title>
      <source>GitHub repository</source>
      <publisher-name>https://github.com/CATIA-Systems/FMPy; GitHub</publisher-name>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-kohler2016modelica">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Köhler</surname><given-names>Jochen</given-names></name>
        <name><surname>Heinkel</surname><given-names>Hans-Martin</given-names></name>
        <name><surname>Mai</surname><given-names>Pierre</given-names></name>
        <name><surname>Krasser</surname><given-names>Jürgen</given-names></name>
        <name><surname>Deppe</surname><given-names>Markus</given-names></name>
        <name><surname>Nagasawa</surname><given-names>Mikio</given-names></name>
      </person-group>
      <article-title>Modelica-association-project “system structure and parameterization”–early insights</article-title>
      <year iso-8601-date="2016">2016</year>
      <pub-id pub-id-type="doi">10.3384/ecp1612435</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hatledal2021vico">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hatledal</surname><given-names>Lars I</given-names></name>
        <name><surname>Chu</surname><given-names>Yingguang</given-names></name>
        <name><surname>Styve</surname><given-names>Arne</given-names></name>
        <name><surname>Zhang</surname><given-names>Houxiang</given-names></name>
      </person-group>
      <article-title>Vico: An entity-component-system based co-simulation framework</article-title>
      <source>Simulation Modelling Practice and Theory</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>108</volume>
      <pub-id pub-id-type="doi">10.1016/j.simpat.2020.102243</pub-id>
      <fpage>102243</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ochel2019omsimulator">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ochel</surname><given-names>Lennart A</given-names></name>
        <name><surname>Braun</surname><given-names>Robert</given-names></name>
        <name><surname>Thiele</surname><given-names>Bernhard</given-names></name>
        <name><surname>Asghar</surname><given-names>Adeel</given-names></name>
        <name><surname>Buffoni</surname><given-names>Lena</given-names></name>
        <name><surname>Eek</surname><given-names>Magnus</given-names></name>
        <name><surname>Fritzson</surname><given-names>Peter</given-names></name>
        <name><surname>Fritzson</surname><given-names>Dag</given-names></name>
        <name><surname>Horkeby</surname><given-names>Sune</given-names></name>
        <name><surname>Hällquist</surname><given-names>Robert</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>OMSimulator-integrated FMI and TLM-based co-simulation with composite model editing and SSP.</article-title>
      <source>Modelica</source>
      <year iso-8601-date="2019">2019</year>
      <pub-id pub-id-type="doi">10.3384/ecp1915769</pub-id>
      <fpage>157</fpage>
      <lpage>007</lpage>
    </element-citation>
  </ref>
  <ref id="ref-smogeli2020open">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Smogeli</surname><given-names>Øyvind Rasmussen</given-names></name>
        <name><surname>Ludvigsen</surname><given-names>Kristine Bruun</given-names></name>
        <name><surname>Jamt</surname><given-names>Levi</given-names></name>
        <name><surname>Vik</surname><given-names>Bjørnar</given-names></name>
        <name><surname>Nordahl</surname><given-names>Håvard</given-names></name>
        <name><surname>Kyllingstad</surname><given-names>Lars Tandle</given-names></name>
        <name><surname>Yum</surname><given-names>Kevin Koosup</given-names></name>
        <name><surname>Zhang</surname><given-names>Houxiang</given-names></name>
      </person-group>
      <article-title>Open simulation platform–an open-source project for maritime system co-simulation</article-title>
      <source>19th international conference on computer and IT applications in the maritime industries</source>
      <publisher-name>Technische Universität Hamburg-Harburg</publisher-name>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
