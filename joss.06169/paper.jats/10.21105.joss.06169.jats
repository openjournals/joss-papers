<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6169</article-id>
<article-id pub-id-type="doi">10.21105/joss.06169</article-id>
<title-group>
<article-title>proteusPy: A Python Package for Protein Structure and
Disulfide Bond Modeling and Analysis</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0009-0891-1507</contrib-id>
<name>
<surname>Suchanek</surname>
<given-names>Eric G</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Flux-Frontiers, Cincinnati OH, United States of
America</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>9</volume>
<issue>100</issue>
<fpage>6169</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Disulfide Bonds</kwd>
<kwd>Protein Structure</kwd>
<kwd>RCSB Protein Databank</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><bold>proteusPy</bold> is a Python package specializing in the
  modeling and analysis of proteins of known structure with an initial
  focus on Disulfide bonds. This package significantly extends the
  capabilities of the molecular modeling program <bold>proteus</bold>,
  (<xref alt="Pabo &amp; Suchanek, 1986" rid="ref-Pabo_1986" ref-type="bibr">Pabo
  &amp; Suchanek, 1986</xref>), and utilizes a new implementation of the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</ext-link>
  class for disulfide and protein modeling. This initial implementation
  focuses on the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</ext-link>
  class, which implements methods to analyze the protein structure
  stabilizing element known as a <bold>Disulfide Bond</bold>,
  <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.13241499">DOI</ext-link>.</p>
  <p>The work has resulted in a freely-accessible database of over
  120,494 disulfide bonds contained within 35,818 proteins in the
  <ext-link ext-link-type="uri" xlink:href="https:/www.rcsb.org">RCSB
  Protein Databank.</ext-link> The routines within the library are
  capable of extracting, comparing, and visualizing the disulfides
  contained within the database, facilitating analysis and
  understanding. In addition, the package can readily model disulfide
  bonds of arbitrary conformation, facilitating predictive analysis.</p>
</sec>
<sec id="general-capabilities">
  <title>General Capabilities</title>
  <list list-type="bullet">
    <list-item>
      <p>Interactively display disulfides contained in the RCSB in a
      variety of display styles</p>
    </list-item>
    <list-item>
      <p>Calculate geometric and energetic properties about these
      disulfides</p>
    </list-item>
    <list-item>
      <p>Create binary and sextant structural classes by characterizing
      the disulfide torsional angles into <italic>n</italic> classes</p>
    </list-item>
    <list-item>
      <p>Build idealized disulfide bonds from disulfide dihedral angle
      input</p>
    </list-item>
    <list-item>
      <p>Find disulfide neighbors based on dihedral angles</p>
    </list-item>
    <list-item>
      <p>Overlap disulfides onto a common frame of reference for
      display</p>
    </list-item>
    <list-item>
      <p>Build protein backbones from backbone phi, psi dihedral angle
      templates</p>
    </list-item>
    <list-item>
      <p>More in development</p>
    </list-item>
  </list>
  <p><italic>See https://suchanek.github.io/proteusPy/proteusPy.html for
  the API documentation with examples</italic></p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Disulfide bonds, formed when two Cysteine residues are oxidized
  resulting in a sulfur-sulfur covalent bond, play pivotal roles in
  structural stabilization within and between protein subunits.
  Moreover, they participate in enzymatic catalysis, regulate protein
  activities, and offer protection against oxidative stress.
  Establishing an accessible structural database of these disulfides
  would serve as an invaluable resource for exploring these critical
  structural elements. While the capability to visualize protein
  structures is well established with excellent protein visualization
  tools like Pymol, Chimera and the RCSB itself, the tools for disulfide
  bond analysis are more limited.
  (<xref alt="Wong &amp; Hogg, 2010" rid="ref-Wong_2010" ref-type="bibr">Wong
  &amp; Hogg, 2010</xref>) describe a web-based disulfide visualization
  tool; this is currently unavailable.</p>
  <p>Accordingly, I have developed the <bold>proteusPy</bold> package to
  delve into the RCSB Protein Data Bank, furnishing tools for
  visualizing and analyzing the disulfide bonds contained therein. This
  endeavor necessitated the creation of a python-based package
  containing data structures and algorithms capable loading,
  manipulating and analyzing these entities. Consequently, an
  object-oriented database has been crafted, facilitating introspection,
  analysis, and display. The package’s API is accessible online at:
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy.html">proteusPy
  API</ext-link>, offering comprehensive details and numerous
  illustrative examples.</p>
</sec>
<sec id="usage">
  <title>Usage</title>
  <p>Once the package is installed it’s possible to load, visualize and
  analyze the Disulfide bonds in the RCSB Disulfide database. The
  general approach is:</p>
  <list list-type="bullet">
    <list-item>
      <p>Load the database</p>
    </list-item>
    <list-item>
      <p>Access disulfide(s)</p>
    </list-item>
    <list-item>
      <p>Analyze</p>
    </list-item>
    <list-item>
      <p>Visualize</p>
    </list-item>
  </list>
  <p>A simple example is shown below:</p>
  <code language="python">import proteusPy
from proteusPy import Load_PDB_SS, Disulfide

PDB_SS = Load_PDB_SS(verbose=True)

best_ss = PDB_SS[&quot;2q7q_75D_140D&quot;]
best_ss.display(style=&quot;sb&quot;, light=True)</code>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/">notebooks</ext-link>
  directory contains my Jupyter notebooks and is a good place to
  start:</p>
  <list list-type="bullet">
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/Analysis_2q7q.ipynb">Analysis_2q7q.ipynb</ext-link>
      provides an example of visualizing the lowest energy Disulfide
      contained in the database and searching for nearest neighbors on
      the basis of conformational similarity.</p>
    </list-item>
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/Anearest_relatives.ipynb">Anearest_relatives.ipynb</ext-link>
      gives an example of searching for disulfides based on sequence
      similarity.</p>
    </list-item>
  </list>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/tree/master/programs">programs</ext-link>
  subdirectory contains the primary programs for downloading the RCSB
  disulfide-containing structure files, extracting the disulfides and
  creating the disulfide database:</p>
  <list list-type="bullet">
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideDownloader.py">DisulfideDownloader.py</ext-link>:
      Downloads the raw RCSB structure files.</p>
    </list-item>
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideExtractor.py">DisulfideExtractor.py</ext-link>:
      Extracts the disulfides and creating the database loaders</p>
    </list-item>
    <list-item>
      <p><ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/programs/DisulfideClass_Analysis.py">DisulfideClass_Analysis.py</ext-link>:
      Performs binary or sextant analysis on the disulfide database.</p>
    </list-item>
  </list>
  <p>The first time one loads the database via
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#Load_PDB_SS">Load_PDB_SS()</ext-link>
  the system will attempt to download the full and subset database from
  Google Drive. If this fails it’s possible to rebuild the database from
  the repo’s <bold>data</bold> subdirectory (not the package’s) by:
  <monospace>pip install -e .</monospace> at the repository top-level.
  If you’ve downloaded from github this will work correctly. If you’ve
  installed from pyPi via <bold>pip</bold> it will fail.</p>
  <sec id="quickstart">
    <title>Quickstart</title>
    <p>After installation is complete, launch jupyter lab:</p>
    <preformat>$ jupyter notebook</preformat>
    <p>and open
    <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/Analysis_2q7q.ipynb">Analysis_2q7q</ext-link>.
    This notebook analyzes the disulfide bond with the lowest energy in
    the entire database and performs some searches in dihedral angle
    space to find similar conformations. There are several other
    notebooks in this directory that illustrate using the program. Some
    of these reflect active development work so may not be ‘fully
    baked’.</p>
  </sec>
</sec>
<sec id="class-details">
  <title>Class Details</title>
  <p>The primary classes developed for <bold>proteusPy</bold> are
  described briefly below. Please see the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy.html">API</ext-link>
  for details.</p>
</sec>
<sec id="disulfide">
  <title><ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/Disulfide.html">Disulfide</ext-link></title>
  <p>This class provides a Python object and methods representing a
  physical disulfide bond either extracted from the RCSB protein
  databank or a virtual one built using the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">Turtle3D</ext-link>
  class. The disulfide bond is an important intramolecular stabilizing
  structural element and is characterized by:</p>
  <list list-type="bullet">
    <list-item>
      <p>Atomic coordinates for the atoms <inline-formula><alternatives>
      <tex-math><![CDATA[N, C_{\alpha}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>N</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[C_{\beta}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>C</mml:mi><mml:mi>β</mml:mi></mml:msub></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[C']]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>C</mml:mi><mml:mi>′</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[S_\gamma]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>S</mml:mi><mml:mi>γ</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
      for both amino acid residues. These are stored as both raw atomic
      coordinates as read from the RCSB file and internal local
      coordinates.</p>
    </list-item>
    <list-item>
      <p>The dihedral angles <inline-formula><alternatives>
      <tex-math><![CDATA[\chi_{1} - \chi_{5}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>χ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>5</mml:mn></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
      for the disulfide bond</p>
    </list-item>
    <list-item>
      <p>A name, by default:
      {pdb_id}{prox_resnumb}{prox_chain}_{distal_resnum}{distal_chain}</p>
    </list-item>
    <list-item>
      <p>Proximal residue number</p>
    </list-item>
    <list-item>
      <p>Distal residue number</p>
    </list-item>
    <list-item>
      <p>Approximate bond torsional energy (kcal/mol):
      <disp-formula><alternatives>
      <tex-math><![CDATA[
        E_{kcal/mol} \approx 2.0 * cos(3.0 * \chi_{1}) + cos(3.0 * \chi_{5}) + cos(3.0 * \chi_{2}) +
      ]]></tex-math>
      <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:mi>k</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>/</mml:mi><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>≈</mml:mo><mml:mn>2.0</mml:mn><mml:mo>*</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>5</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:math></alternatives></disp-formula>
      <disp-formula><alternatives>
      <tex-math><![CDATA[
        cos(3.0 * \chi_{4}) + 3.5 * cos(2.0 * \chi_{3}) + 0.6 * cos(3.0 * \chi_{3}) + 10.1
      ]]></tex-math>
      <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>4</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn>3.5</mml:mn><mml:mo>*</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>2.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn>0.6</mml:mn><mml:mo>*</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3.0</mml:mn><mml:mo>*</mml:mo><mml:msub><mml:mi>χ</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn>10.1</mml:mn></mml:mrow></mml:math></alternatives></disp-formula></p>
    </list-item>
    <list-item>
      <p>Euclidean length of the dihedral angles (degrees) defined as:
      <disp-formula><alternatives>
      <tex-math><![CDATA[\sqrt(\chi_{1}^{2} + \chi_{2}^{2} + \chi_{3}^{2} + \chi_{4}^{2} + \chi_{5}^{2})]]></tex-math>
      <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msqrt><mml:mi>(</mml:mi></mml:msqrt><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>1</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>2</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>3</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>4</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>χ</mml:mi><mml:mn>5</mml:mn><mml:mn>2</mml:mn></mml:msubsup><mml:mo stretchy="false" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></p>
    </list-item>
    <list-item>
      <p><inline-formula><alternatives>
      <tex-math><![CDATA[C_{\alpha} - C_{\alpha}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>α</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
      distance
      (<inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>)</p>
    </list-item>
    <list-item>
      <p><inline-formula><alternatives>
      <tex-math><![CDATA[C_{\beta} - C_{\beta}]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>C</mml:mi><mml:mi>β</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>C</mml:mi><mml:mi>β</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
      distance
      (<inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>)</p>
    </list-item>
    <list-item>
      <p>The previous C’ and next N coordinates for both the proximal
      and distal residues. These are needed to calculate the backbone
      dihedral angles <inline-formula><alternatives>
      <tex-math><![CDATA[\phi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>,
      <inline-formula><alternatives>
      <tex-math><![CDATA[\psi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ψ</mml:mi></mml:math></alternatives></inline-formula>.</p>
    </list-item>
    <list-item>
      <p>Backbone dihedral angles <inline-formula><alternatives>
      <tex-math><![CDATA[\phi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>
      and <inline-formula><alternatives>
      <tex-math><![CDATA[\psi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ψ</mml:mi></mml:math></alternatives></inline-formula>,
      when possible. Not all structures are complete and in those cases
      the atoms needed may be undefined. In this case the
      <inline-formula><alternatives>
      <tex-math><![CDATA[\phi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>
      and <inline-formula><alternatives>
      <tex-math><![CDATA[\psi]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ψ</mml:mi></mml:math></alternatives></inline-formula>
      angles are set to -180°.</p>
    </list-item>
  </list>
  <p>The class also provides 3D rendering capabilities using the
  excellent
  <ext-link ext-link-type="uri" xlink:href="https://pyvista.org">PyVista</ext-link>
  library, and can display disulfides interactively in a variety of
  display styles:</p>
  <list list-type="bullet">
    <list-item>
      <p>‘sb’ - Split Bonds style - bonds colored by their atom type</p>
    </list-item>
    <list-item>
      <p>‘bs’ - Ball and Stick style - split bond coloring with small
      atoms</p>
    </list-item>
    <list-item>
      <p>‘pd’ - Proximal/Distal style - bonds colored
      <italic>Red</italic> for proximal residue and
      <italic>Green</italic> for the distal residue.</p>
    </list-item>
    <list-item>
      <p>‘cpk’ - CPK style rendering, colored by atom type:</p>
      <list list-type="bullet">
        <list-item>
          <p>Carbon - Grey</p>
        </list-item>
        <list-item>
          <p>Nitrogen - Blue</p>
        </list-item>
        <list-item>
          <p>Sulfur - Yellow</p>
        </list-item>
        <list-item>
          <p>Oxygen - Red</p>
        </list-item>
        <list-item>
          <p>Hydrogen - White</p>
        </list-item>
      </list>
    </list-item>
  </list>
  <p>Individual renderings can be saved to a file and animations can be
  created. The <italic>cpk</italic> and <italic>bs</italic> styles are
  illustrated below:</p>
  <fig>
    <caption><p>CPK &amp; BS Disulfide Rendering</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="bs_cpk.png" />
  </fig>
</sec>
<sec id="disulfideloader">
  <title><ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html">DisulfideLoader</ext-link></title>
  <p>This class encapsulates the disulfide database itself and is its
  primary means of accession. Instantiation takes 2 parameters:
  <bold>subset</bold> and <bold>verbose</bold>. Given the size of the
  database, one can use the <bold>subset</bold> parameter to load the
  first 1000 disulfides into memory. This facilitates quicker
  development and testing new functions. I recommend using a machine
  with 16GB or more to work with the full dataset.</p>
  <p>The entirety of the RCSB disulfide database is stored within the
  class via a
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/DisulfideList.html%22">DisulfideList</ext-link>,
  a <bold>Pandas</bold> .csv file, and a <bold>dict</bold> of indices
  mapping the RCSB IDs into their respective list of disulfide bond
  objects. The datastructures allow simple, direct and flexible access
  to the disulfide structures contained within. This makes it possible
  to access the disulfides by array index, RCSB structure ID or
  disulfide name.</p>
  <p>Example:</p>
  <preformat>  import proteusPy
  from proteusPy import Disulfide, DisulfideLoader, DisulfideList

  SS1 = DisulfideList([],'tmp1')
  SS2 = DisulfideList([],'tmp2')

  PDB_SS = DisulfideLoader(verbose=False, subset=True)

  # Accessing by index value:
  SS1 = PDB_SS[0]
  SS1
  &lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 Å&gt;

  # Accessing by PDB_ID returns a list of Disulfides:
  SS2 = PDB_SS['4yys']
  SS2
  [&lt;Disulfide 4yys_22A_65A, Source: 4yys, Resolution: 1.35 Å&gt;, 
  &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;, 
  &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 Å&gt;]

  # Accessing individual disulfides by their name:
  SS3 = PDB_SS['4yys_56A_98A']
  SS3
  &lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;

  # Finally, we can access disulfides by regular slicing:
  SSlist = SS2[:2]
  [&lt;Disulfide 4yys_56A_98A, Source: 4yys, Resolution: 1.35 Å&gt;, 
  &lt;Disulfide 4yys_156A_207A, Source: 4yys, Resolution: 1.35 Å&gt;]</preformat>
  <p>The class can also render Disulfides overlaid on a common
  coordinate system to a pyVista window using the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideLoader.html#DisulfideLoader.display_overlay">DisulfideLoader.display_overlay()</ext-link>
  method.</p>
  <p><bold>NB:</bold> For typical usage one accesses the database via
  the <bold>Load_PDB_SS()</bold> function. This function loads the
  compressed database from its single source. Initializing a
  <bold>DisulfideLoader</bold> object will load the individual torsions
  and disulfide <bold>.pkl</bold> files, builds the classlist
  structures, and writes the completely built object to a single
  <bold>.pkl</bold> file. This requires the raw <bold>.pkl</bold> files
  created by the download process. These files are contained in the
  <italic>repository</italic> <bold>data</bold> directory, not in the
  <bold>pyPi</bold> distribution.</p>
</sec>
<sec id="turtle3d">
  <title><ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html">turtle3D</ext-link></title>
  <p>The <bold>turtle3D</bold> class represents an object that maintains
  a <italic>local coordinate system</italic> in three dimensional space.
  This coordinate system consists of:</p>
  <list list-type="bullet">
    <list-item>
      <p>A Position in 3D space</p>
    </list-item>
    <list-item>
      <p>A Heading Vector</p>
    </list-item>
    <list-item>
      <p>A Left Vector</p>
    </list-item>
    <list-item>
      <p>An Up Vector</p>
    </list-item>
  </list>
  <p>The <italic>Heading</italic>, <italic>Left</italic> and
  <italic>Up</italic> vectors are unit vectors that define the object’s
  orientation in a <italic>local</italic> coordinate frame. The turtle
  developed in <bold>proteusPy</bold> is based on the excellent book by
  Abelson:
  (<xref alt="Abelson &amp; DiSessa, 1986" rid="ref-Abelson_DiSessa_1986" ref-type="bibr">Abelson
  &amp; DiSessa, 1986</xref>). The
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.to_local%22">to_local</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.to_global%22">to_global</ext-link>
  methods convert between these two coordinate systems. These methods
  make it possible to readily compare different disulfides by:</p>
  <list list-type="order">
    <list-item>
      <p>Orienting the turtle at the disulfide’s proximal residue in a
      standard orientation.</p>
    </list-item>
    <list-item>
      <p>Converting the global coordinates of the disulfide as read from
      the RCSB into local coordinates.</p>
    </list-item>
    <list-item>
      <p>Saving all of the local coordinates with the raw
      coordinates</p>
    </list-item>
    <list-item>
      <p>Performing distance and angle calculations</p>
    </list-item>
  </list>
  <p>By implementing the functions <bold>Move</bold>, <bold>Roll</bold>,
  <bold>Yaw</bold>, <bold>Pitch</bold> and <bold>Turn</bold> the turtle
  is capable of movement in a three-dimensional space. See
  (<xref alt="Pabo &amp; Suchanek, 1986" rid="ref-Pabo_1986" ref-type="bibr">Pabo
  &amp; Suchanek, 1986</xref>) for more details.</p>
  <p>The turtle has several molecule-specific functions including
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.orient_at_residue%22">orient_at_residue</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="%22https://suchanek.github.io/proteusPy/proteusPy/turtle3D.html#Turtle3D.orient_from_backbone%22">orient_from_backbone</ext-link>.
  These routines make it possible to build protein backbones of
  arbitrary conformation and to readily add sidechains to modeled
  structures. These functions are currently used to build model
  disulfides from dihedral angle input.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>I illustrate a few use cases for the package below. Use the
  <bold>jupyter notebook</bold> command from your shell to launch
  jupyter. The examples illustrate the ease with which one can analyze
  and visualize some disulfides.</p>
  <sec id="find-the-lowest-and-highest-energy-disulfides-present-in-the-database">
    <title>Find the lowest and highest energy disulfides present in the
    database</title>
    <code language="python">from proteusPy import Load_PDB_SS, DisulfideList, Disulfide

# load the database
PDB_SS = Load_PDB_SS(verbose=True, subset=False)

# retrieve the minimum and maximum energy structures
ssMin, ssMax = PDB_SS.SSList.minmax_energy

# make a list to hold them
minmaxlist = DisulfideList([ssMin, ssMax], &quot;minmax&quot;)

# display them as ball and stick style
minmaxlist.display(style=&quot;bs&quot;, light=True)</code>
    <fig>
      <caption><p>minmax</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="minmax.png" />
    </fig>
  </sec>
  <sec id="find-disulfides-within-10-textnormalfontaa-rms-in-torsional-space-of-the-lowest-energy-structure">
    <title>Find disulfides within 10
    <inline-formula><tex-math><![CDATA[\text{\normalfont\AA}]]></tex-math></inline-formula>
    RMS in torsional space of the lowest energy structure</title>
    <p>In this example we load the disulfide database, find the
    disulfides with the lowest and highest energies, and then find the
    nearest conformational neighbors. Finally, we display the neighbors
    overlaid against a common reference frame. Note that the window
    title gives statistics about the list of disulfides being displayed,
    including list name, resolution, number, average energy, and average
    atom positional error.</p>
    <code language="python">import proteusPy
from proteusPy Load_PDB_SS, DisulfideList, Disulfide

PDB_SS = None
PDB_SS = Load_PDB_SS(verbose=False, subset=False)
ss_list = DisulfideList([], &quot;tmp&quot;)

# Return the minimum and maximum energy structures. We ignore the maximum in this case.
ssmin_enrg, _ = PDB_SS.SSList.minmax_energy

# Make an empty list and find the nearest neighbors within 10 degrees avg RMS in
# sidechain dihedral angle space.

low_energy_neighbors = DisulfideList([], &quot;Neighbors&quot;)
low_energy_neighbors = ssmin_enrg.Torsion_neighbors(sslist, 10)

# Display the number found, and then display them overlaid onto their common reference frame.

tot = low_energy_neighbors.length
low_energy_neighbors.display_overlay()</code>
    <p>18</p>
    <fig>
      <caption><p>Low energy neighbors</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="min_overlay.png" />
    </fig>
  </sec>
</sec>
<sec id="analyzing-disulfide-structural-class-distributions">
  <title>Analyzing Disulfide Structural Class Distributions</title>
  <p>The package includes the
  <ext-link ext-link-type="uri" xlink:href="https://suchanek.github.io/proteusPy/proteusPy/DisulfideClass_Constructor.html">DisulfideClassConstructer</ext-link>
  class, which is used to create and manage Disulfide binary and sextant
  classes. A note about these structural classes is in order.
  (<xref alt="Schmidt, 2006" rid="ref-Schmidt_2006" ref-type="bibr">Schmidt,
  2006</xref>) described a method of characterizing disulfide structures
  by describing each individual dihedral angle as either + or - based on
  its sign. This yields <inline-formula><alternatives>
  <tex-math><![CDATA[2^{5}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>2</mml:mn><mml:mn>5</mml:mn></mml:msup></mml:math></alternatives></inline-formula>
  or 32 possible classes. The author was then able to classify protein
  functional families into one of 20 remaining structural classes. Since
  the binary approach is very coarse and computers are much more capable
  than in 2006 I extended this formalism to a <italic>Sextant</italic>
  approach. In other words, I created <italic>six</italic> possible
  classes for each dihedral angle by dividing it into 60 degree
  segments. This yields a possible <inline-formula><alternatives>
  <tex-math><![CDATA[6^5]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>6</mml:mn><mml:mn>5</mml:mn></mml:msup></mml:math></alternatives></inline-formula>
  or 7,776 possible classes. The notebook
  <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/blob/master/notebooks/DisulfideClassesPlayground.ipynb">DisulfideClassesPlayground.ipynb</ext-link>
  contains some initial results. This work is ongoing.</p>
</sec>
<sec id="summary-1">
  <title>Summary</title>
  <p><bold>proteusPy</bold> is a python-based package capable of
  visualization and analysis of over 120,000 Disulfide bonds contained
  in the RCSB structural database. This work provides a strong
  foundation to not only analyze these important structural elements but
  also provides flexible tools for modeling proteins from dihedral angle
  input.</p>
  <sec id="contributingreporting">
    <title>Contributing/Reporting</title>
    <p>I welcome anyone interested in collaborating on proteusPy! Feel
    free to contact me at suchanek@mac.com, fork the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/suchanek/proteusPy/">repo</ext-link>
    and get coding. Issues can be reported to
    https://github.com/suchanek/proteusPy/issues.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <title>Bibliography</title>
  <ref id="ref-Pabo_1986">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Pabo</surname><given-names>C. O.</given-names></name>
        <name><surname>Suchanek</surname><given-names>E. G.</given-names></name>
      </person-group>
      <article-title>Computer-aided model-building strategies for protein design</article-title>
      <source>Biochemistry</source>
      <publisher-name>American Chemical Society (ACS)</publisher-name>
      <year iso-8601-date="1986-10">1986</year><month>10</month>
      <volume>25</volume>
      <issue>20</issue>
      <uri>https://doi.org/10.1021%2Fbi00368a023</uri>
      <pub-id pub-id-type="doi">10.1021/bi00368a023</pub-id>
      <fpage>5987</fpage>
      <lpage>5991</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Schmidt_2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schmidt</surname><given-names>Brian</given-names></name>
      </person-group>
      <article-title>Multiple disulfide-bonded states of native proteins: Estimate of number using probabilities of disulfide bond formation</article-title>
      <source>Biochemistry</source>
      <publisher-name>American Chemical Society (ACS)</publisher-name>
      <year iso-8601-date="2006-06">2006</year><month>06</month>
      <volume>45</volume>
      <issue>24</issue>
      <uri>https://doi.org/10.1021/bi0603064</uri>
      <pub-id pub-id-type="doi">10.1021/bi0603064</pub-id>
      <fpage>7429</fpage>
      <lpage>74334</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Wong_2010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wong</surname><given-names>J. H.</given-names></name>
        <name><surname>Hogg</surname><given-names>P. J.</given-names></name>
      </person-group>
      <article-title>Analysis of disulfide bonds in protein structures</article-title>
      <source>Journal of Thrombosis and Haemostasis</source>
      <publisher-name>Journal of Thrombosis; Haemostasis</publisher-name>
      <year iso-8601-date="2010-10">2010</year><month>10</month>
      <volume>8</volume>
      <issue>10</issue>
      <uri>http://dx.doi.org/10.1111/j.1538-7836.2010.03894.x</uri>
      <pub-id pub-id-type="doi">10.1111/j.1538-7836.2010.03894.x</pub-id>
      <fpage>2345</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Abelson_DiSessa_1986">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Abelson</surname><given-names>Harold</given-names></name>
        <name><surname>DiSessa</surname><given-names>Andrea A.</given-names></name>
      </person-group>
      <source>Turtle geometry: The computer as a medium for exploring mathematics</source>
      <publisher-name>MIT Press</publisher-name>
      <year iso-8601-date="1986">1986</year>
      <uri>https://doi.org/10.7551/mitpress/6933.001.0001</uri>
      <pub-id pub-id-type="doi">10.7551/mitpress/6933.001.0001</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
