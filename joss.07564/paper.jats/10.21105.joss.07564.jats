<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7564</article-id>
<article-id pub-id-type="doi">10.21105/joss.07564</article-id>
<title-group>
<article-title>SegregatedVMSSolver.jl: Linearized and Segregated
Stabilized Solver for Large Eddy Simulation in Julia</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2873-6293</contrib-id>
<name>
<surname>Brunelli</surname>
<given-names>Carlo</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Mechanical Engineering Department, Royal Military Academy,
Belgium</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-02-20">
<day>20</day>
<month>2</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>109</issue>
<fpage>7564</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Julia</kwd>
<kwd>Turbulence</kwd>
<kwd>Large Eddy Simulation</kwd>
<kwd>Variational MultiScale Method</kwd>
<kwd>VMS</kwd>
<kwd>Streamline-Upwind/Petrov-Galerkin</kwd>
<kwd>SUPG</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Large-Eddy Simulation (LES) is a family of mathematical techniques
  that perform high-fidelity simulations in Computational Fluid Dynamics
  (CFD). They can simulate turbulent flows by numerically solving the
  Navier-Stokes equations. Using a filtering operation, LES focuses on
  the larger length scale, while the effects of small scales (subgrid
  scales) are modeled. The Variational MultiScale (VMS) and
  Streamline-Upwind/Petrov-Galerkin (SUPG) methods belong to the family
  of stabilized methods. The mathematical problem is solved using the
  Finite Element Method (FEM) framework. They allow the simulation of
  complex flows. The package has been developed with the primary aim of
  studying the Laminar Separation Bubble (LSB) at low-Reynolds regime on
  the suction side of the airfoils.</p>
  <p><monospace>SegregatedVMSSolver.jl</monospace> is designed to be
  user-friendly for both novice and advanced users. Novice users can run
  simulations with minimal input, while advanced users have the
  flexibility to customize parameters for detailed control. This dual
  approach ensures that the package is accessible and versatile.</p>
  <p>However, for more advanced users who may desire greater control
  over the simulation process, it is possible to provide custom options
  for customizing almost all aspects of the method: solver, model,
  exports and HPC options. Balancing simplicity for novice users and
  flexibility for advanced users, the package ensures usability without
  compromising on the depth and sophistication of the simulation
  capabilities. This approach makes the package versatile and adaptable
  to a wide range of users, from researchers seeking quick insights to
  seasoned practitioners, using HPC, aiming for comprehensive analysis
  in fluid dynamics applications.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>SegregatedVMSSolver.jl</monospace> is a comprehensive
  Julia package designed for conducting high-fidelity simulations of
  complex flow phenomena within the incompressible regime, leveraging
  the VMS and SUPG method. VMS has been originally introduced in
  (<xref alt="Hughes et al., 2000" rid="ref-HughesU003A2000" ref-type="bibr">Hughes
  et al., 2000</xref>). The linearization adopted has been proposed in
  the SUPG method in
  (<xref alt="Banyai, 2016" rid="ref-BanyaiU003A2016" ref-type="bibr">Banyai,
  2016</xref>). The package relies on
  <monospace>Gridap.jl</monospace>(<xref alt="Verdugo &amp; Badia, 2022" rid="ref-VerdugoU003A2022" ref-type="bibr">Verdugo
  &amp; Badia,
  2022</xref>),(<xref alt="Badia &amp; Verdugo, 2020" rid="ref-BadiaU003A2020" ref-type="bibr">Badia
  &amp; Verdugo, 2020</xref>) package to implement the mathematical
  model of FEM. Complementing this core functionality,
  <monospace>GridapDistributed.jl</monospace>(<xref alt="Badia et al., 2022" rid="ref-BadiaDU003A2022" ref-type="bibr">Badia
  et al., 2022</xref>) and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/fverdugo/PartitionedArrays.jl"><monospace>PartitionedArrays.jl</monospace></ext-link>
  allow the use of multi-core CPUs desktop computers to HPC clusters.
  The
  <ext-link ext-link-type="uri" xlink:href="https://github.com/gridap/GridapPETSc.jl"><monospace>GridapPETSc.jl</monospace></ext-link>
  package is used to solve the final linear system. It solves a
  Linearized and Segregated version of VMS (LS-VMS) and SUPG. It is
  based on an iterative predictor-corrector scheme and it avoids the
  resolution of a non-linear problem. It uses the
  <inline-formula><alternatives>
  <tex-math><![CDATA[\theta]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>Î¸</mml:mi></mml:math></alternatives></inline-formula>
  method to solve the time-marching problem.</p>
  <p>This package focuses on solving fluid dynamics problems, with a
  particular emphasis on the study of 2D and 3D airfoil aerodynamics at
  low Reynolds numbers (tested up to 500,000). The primary objective is
  to provide researchers and engineers with a versatile tool for
  analyzing aerodynamic features in this regime. A suite of benchmark
  cases is implemented to ensure reliability and applicability across a
  range of scenarios. These include: - <bold>Taylor-Green
  vortices</bold>: Simulated in both 2D and 3D. - <bold>Lid-driven
  cavity</bold>: Solvable in 2D; the 3D version is not currently
  supported. - <bold>Vortex shedding over a cylinder</bold>: Available
  in both 2D and 3D. - <bold>Airfoil aerodynamics</bold>: Extensive
  support for both 2D and 3D simulations.</p>
  <p>It also has a suite of tools for post-processing the results like
  performing time and spanwise averaging. It is possible to control the
  simulation in real-time, enabling/disabling the creation of output
  files at each time-step. The user can load their own airfoil meshes
  also using the package
  <ext-link ext-link-type="uri" xlink:href="https://github.com/carlodev/AirfoilGmsh.jl"><monospace>AirfoilGmsh.jl</monospace></ext-link>.
  Additionally, the package provides tools for initializing boundary
  layers in 2D simulations, enhancing its versatility and utility for
  researchers and practitioners in the field of fluid dynamics.</p>
  <p>The field of fluid dynamics in Julia has seen significant growth,
  with several software packages emerging to address various
  computational challenges. This reflects the growing interest and
  engagement of the Julia community in this domain. A comprehensive list
  of packages can be found on
  <ext-link ext-link-type="uri" xlink:href="https://juliapackages.com/c/fluid-dynamics">Julia
  Packages - Fluid Dynamics</ext-link>. Among the most notable and well
  documented are:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold><ext-link ext-link-type="uri" xlink:href="https://github.com/trixi-framework/Trixi.jl">Trixi.jl</ext-link></bold>:
      A framework for numerical simulation of hyperbolic PDEs,
      particularly suited for high-order methods and adaptive mesh
      refinement.</p>
    </list-item>
    <list-item>
      <p><bold><ext-link ext-link-type="uri" xlink:href="https://github.com/WaterLily-jl/WaterLily.jl/tree/master">WaterLily.jl</ext-link></bold>:
      A CPU/GPU finite-volume solver that uses an immersed-boundary
      method</p>
    </list-item>
    <list-item>
      <p><bold><ext-link ext-link-type="uri" xlink:href="https://github.com/CliMA/Oceananigans.jl">Oceananigans.jl</ext-link></bold>:
      A GPU-accelerated model for simulating incompressible fluid
      dynamics, widely used in geophysical and oceanographic
      studies.</p>
    </list-item>
  </list>
  <p>While these packages vary in scope and functionality, they
  collectively highlight the flexibility and performance benefits of
  Julia in computational fluid dynamics. However, the ecosystem is still
  maturing compared to more established environments like Python or
  MATLAB. This paper contributes to this evolving field by introducing a
  new package tailored for Large Eddy Simulations.</p>
</sec>
<sec id="package-features">
  <title>Package Features</title>
  <list list-type="bullet">
    <list-item>
      <p>It supports 2-dimensional and 3-dimensional geometries</p>
    </list-item>
    <list-item>
      <p>It solved a time-dependent problem</p>
    </list-item>
    <list-item>
      <p>It can run in parallel using MPI</p>
    </list-item>
    <list-item>
      <p>Velocity ramping</p>
    </list-item>
    <list-item>
      <p>It can capture the laminar-to-turbulent transition</p>
    </list-item>
    <list-item>
      <p>Utilities for time and space averaging</p>
    </list-item>
    <list-item>
      <p>It supports advanced boundary layer initialization</p>
    </list-item>
    <list-item>
      <p>The solution can be visualized in ParaView</p>
    </list-item>
    <list-item>
      <p>Restart the simulation from a specific saved time-step</p>
    </list-item>
  </list>
</sec>
<sec id="results">
  <title>Results</title>
  <sec id="taylor-green-2d">
    <title>Taylor Green 2D</title>
    <p>2D Taylor-Green vortex case is used as benchmark case to assess
    the error analysis of the code. The domain is a square of size:
    [-0.5,0.5]x[-0.5,0.5], at Reynolds number 1600. The CFL is constant
    for each simulation, CFL=0.32. The time-step is computed as
    <inline-formula><alternatives>
    <tex-math><![CDATA[dt = \dfrac{CFL}{ order \cdot N}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mfrac displaystyle="true"><mml:mrow><mml:mi>C</mml:mi><mml:mi>F</mml:mi><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>o</mml:mi><mml:mi>r</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mo>â</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:math></alternatives></inline-formula>.</p>
    <p><inline-graphic mimetype="image" mime-subtype="png" xlink:href="verr.png">
      <alt-text>TGV2D-verr</alt-text>
    </inline-graphic>
    <inline-graphic mimetype="image" mime-subtype="png" xlink:href="perr.png">
      <alt-text>TGV2D-perr</alt-text>
    </inline-graphic></p>
  </sec>
  <sec id="lid-driven-cavity-flow-2d">
    <title>Lid-Driven Cavity Flow 2D</title>
    <p>The 2D lid-driven cavity flow is another well-known test case.
    The domain is a square of size: [-0.5,0.5]x[-0.5,0.5], at Reynolds
    number 1000. The time-step <monospace>dt=0.02</monospace>, number of
    elements for each side <monospace>N=50</monospace>,
    <monospace>order=2</monospace>. The reference values are from
    (<xref alt="Botella &amp; Peyret, 1998" rid="ref-botella_peyretU003A1998" ref-type="bibr">Botella
    &amp; Peyret, 1998</xref>). The plot reports the velocity in
    <monospace>x</monospace> direction along the vertical plane
    <monospace>x=0.0</monospace>.</p>
    <fig>
      <caption><p>Lid Driven Cavity Flow Reynolds 1000</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="LS-VMS-LD-1000.png" />
    </fig>
  </sec>
  <sec id="taylor-green-3d">
    <title>Taylor Green 3D</title>
    <p>The flow is initialized in a cubic domain with periodic boundary
    conditions imposed on all sides. The domain extends from
    <inline-formula><alternatives>
    <tex-math><![CDATA[-\pi]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>â</mml:mi><mml:mi>Ï</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
    to <inline-formula><alternatives>
    <tex-math><![CDATA[\pi]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>Ï</mml:mi></mml:math></alternatives></inline-formula>
    in each spatial direction (<monospace>x</monospace>,
    <monospace>y</monospace>, <monospace>z</monospace>). The reference
    is the DNS solution.</p>
    <p><inline-graphic mimetype="image" mime-subtype="png" xlink:href="TGV_64_Q1.png">
      <alt-text>TGV3D</alt-text>
    </inline-graphic>
    <inline-graphic mimetype="image" mime-subtype="png" xlink:href="TGV_32_Q2.png">
      <alt-text>TGV3D</alt-text>
    </inline-graphic>
    <inline-graphic mimetype="image" mime-subtype="png" xlink:href="TGV_64_Q2.png">
      <alt-text>TGV3D</alt-text>
    </inline-graphic></p>
  </sec>
  <sec id="parallelization">
    <title>Parallelization</title>
    <p>In this section is possible to appreciate the weak and strong
    scalability of the implementation of the code. The benchmark case is
    the 2D Taylor-Green, the time reported here is intended for each
    time-step. The order of the elements for this simulation is always
    2, and the CFL constant at 0.32</p>
    <table-wrap>
      <table>
        <thead>
          <tr>
            <th></th>
            <th>Preconditioner</th>
            <th>Linear Solver</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Velocity</td>
            <td><monospace>gamg</monospace></td>
            <td><monospace>gmres</monospace></td>
          </tr>
          <tr>
            <td>Pressure</td>
            <td><monospace>gamg</monospace></td>
            <td><monospace>cg</monospace></td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p><monospace>MPI</monospace> is used for parallelization, and to
    solve the sparse and distribute numerical systems we use
    <monospace>PETSc</monospace>.</p>
    <sec id="strong-scalability">
      <title>Strong Scalability</title>
      <p>Strong scalability evaluates how efficiently a parallel code
      reduces execution time when the problem size remains fixed, but
      the number of processing units increases. There is a total of
      <monospace>400</monospace> elements on each side, leading to
      <monospace>160K</monospace> elements and
      <monospace>1.92M</monospace> dofs in total.</p>
      <fig>
        <caption><p>Strong Scalability</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="STRONG_TGV.png" />
      </fig>
    </sec>
    <sec id="weak-scalability">
      <title>Weak Scalability</title>
      <p>Weak scalability measures how well a parallel code maintains
      performance when the problem size is kept constant per processor,
      and the number of processors increases. On each processor there
      are <monospace>50x50</monospace> elements, the number of dofs is
      kept constant at <monospace>30K dofs/procs</monospace>.</p>
      <fig>
        <caption><p>Weak Scalability</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="WEAK_TGV.png" />
      </fig>
    </sec>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors would like to acknowledge the Royal Higher Institute
  for Defense for funding this research through the project MSP21/02
  Numerical and Experimental Low Speed High Altitude Wing (NELSHAW).
  Many thanks professor to Bart Janssens for his invaluable support,
  patience and feedback.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-BadiaU003A2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Badia</surname><given-names>Santiago</given-names></name>
        <name><surname>Verdugo</surname><given-names>Francesc</given-names></name>
      </person-group>
      <article-title>Gridap: An extensible finite element toolbox in julia</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>52</issue>
      <uri>https://doi.org/10.21105/joss.02520</uri>
      <pub-id pub-id-type="doi">10.21105/joss.02520</pub-id>
      <fpage>2520</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-VerdugoU003A2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Verdugo</surname><given-names>Francesc</given-names></name>
        <name><surname>Badia</surname><given-names>Santiago</given-names></name>
      </person-group>
      <article-title>The software design of gridap: A finite element package based on the julia JIT compiler</article-title>
      <source>Computer Physics Communications</source>
      <publisher-name>Elsevier BV</publisher-name>
      <year iso-8601-date="2022-07">2022</year><month>07</month>
      <volume>276</volume>
      <uri>https://doi.org/10.1016/j.cpc.2022.108341</uri>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2022.108341</pub-id>
      <fpage>108341</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-BadiaDU003A2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Badia</surname><given-names>Santiago</given-names></name>
        <name><surname>MartÃ­n</surname><given-names>Alberto F.</given-names></name>
        <name><surname>Verdugo</surname><given-names>Francesc</given-names></name>
      </person-group>
      <article-title>GridapDistributed: A massively parallel finite element toolbox in julia</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <volume>7</volume>
      <issue>74</issue>
      <uri>https://doi.org/10.21105/joss.04157</uri>
      <pub-id pub-id-type="doi">10.21105/joss.04157</pub-id>
      <fpage>4157</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-HughesU003A2000">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hughes</surname><given-names>Thomas J. R.</given-names></name>
        <name><surname>Mazzei</surname><given-names>Luca</given-names></name>
        <name><surname>Jansen</surname><given-names>Kenneth E.</given-names></name>
      </person-group>
      <article-title>Large Eddy Simulation and the variational multiscale method</article-title>
      <source>Computing and Visualization in Science</source>
      <year iso-8601-date="2000-05">2000</year><month>05</month>
      <volume>3</volume>
      <issue>1-2</issue>
      <issn>1432-9360</issn>
      <pub-id pub-id-type="doi">10.1007/s007910050051</pub-id>
      <fpage>47</fpage>
      <lpage>59</lpage>
    </element-citation>
  </ref>
  <ref id="ref-BanyaiU003A2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Banyai</surname><given-names>Tamas</given-names></name>
      </person-group>
      <article-title>Development of stabilized finite element method for numerical simulation of turbulent incompressible single and eulerian-eulerian two-phase flows</article-title>
      <publisher-name>UniversitÃ© Libre de Bruxelles</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <isbn>9782875161093</isbn>
    </element-citation>
  </ref>
  <ref id="ref-botella_peyretU003A1998">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Botella</surname><given-names>O.</given-names></name>
        <name><surname>Peyret</surname><given-names>R.</given-names></name>
      </person-group>
      <article-title>Benchmark spectral results on the lid-driven cavity flow</article-title>
      <source>Computers and Fluids</source>
      <year iso-8601-date="1998">1998</year>
      <volume>27</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1016/s0045-7930(98)00002-4</pub-id>
      <fpage>421</fpage>
      <lpage>433</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
