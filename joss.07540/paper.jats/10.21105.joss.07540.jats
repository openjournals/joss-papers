<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7540</article-id>
<article-id pub-id-type="doi">10.21105/joss.07540</article-id>
<title-group>
<article-title>rdata: A Python library for R datasets</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2566-7058</contrib-id>
<name>
<surname>Ramos-Carreño</surname>
<given-names>Carlos</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8713-4559</contrib-id>
<name>
<surname>Rossi</surname>
<given-names>Tuomas</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Universidad Autónoma de Madrid, Spain</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>CSC – IT Center for Science Ltd., Finland</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-09-04">
<day>4</day>
<month>9</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>104</issue>
<fpage>7540</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2024</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>R</kwd>
<kwd>datasets</kwd>
<kwd>rda</kwd>
<kwd>rds</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Research work usually requires the analysis and processing of data
  from different sources. Traditionally in statistical computing, the R
  language has been widely used for this task, and a huge amount of
  datasets have been compiled in the Rda and Rds formats, native to this
  programming language. As these formats contain internally the
  representation of R objects, they cannot be directly used from Python,
  another widely used language for data analysis and processing. The
  library <monospace>rdata</monospace> allows to load and convert these
  datasets to Python objects, without the need of exporting them to
  other intermediate formats which may not keep all the original
  information. This library has minimal dependencies, ensuring that it
  can be used in contexts where an R installation is not available. The
  capability to write data in Rda and Rds formats is also under
  development. Thus, the library <monospace>rdata</monospace>
  facilitates data interchange, enabling the usage of the same datasets
  in both languages (e.g. for reproducibility, comparisons of results
  against methods in both languages, or the creation of complex
  processing pipelines that involve steps in both R and Python).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The datasets of the R programming language, such as those from the
  CRAN repository, are often stored in the R specific formats Rda and
  Rds. In Python, there were a few packages that could parse these file
  formats, albeit all of them presented some limitations.</p>
  <p>The package <monospace>rpy2</monospace>
  (<xref alt="Gautier, 2024" rid="ref-gautier_2024_rpy2" ref-type="bibr">Gautier,
  2024</xref>) can be used to interact with R from Python. This includes
  the ability to load data in the Rda and Rds formats, and to convert
  these data to equivalent Python objects. Although this is arguably the
  best package to achieve interaction between both languages, it has
  many disadvantages if one wants to use it just to load R datasets. In
  the first place, the package requires an R installation, as it relies
  in launching an R interpreter and communicating with it. Secondly,
  launching R just to load data is inefficient, both in time and memory.
  Finally, this package inherits the GPL license from the R language,
  which is not compatible with most Python packages, typically released
  under more permissive licenses.</p>
  <p>The package <monospace>pyreadr</monospace>
  (<xref alt="Fajardo, 2024" rid="ref-fajardo_2024_pyreadr" ref-type="bibr">Fajardo,
  2024</xref>) also provides functionality to read and write some R
  datasets. It relies in the C library <monospace>librdata</monospace>
  in order to perform the parsing of the R data files. This adds an
  additional dependency from C building tools, and requires that the
  package is compiled for all the desired operating systems. Moreover,
  this package is limited by the functionalities available in
  <monospace>librdata</monospace>, which at the moment of writing does
  not include the parsing of common objects such as R lists and S4
  objects. The license can also be a problem, as it is part of the GPL
  family and does not allow commercial use.</p>
  <p>As existing solutions were unsuitable for our needs, the package
  <monospace>rdata</monospace> was developed to parse data in the Rda
  and Rds formats. This is a small, extensible, efficient, and very
  complete implementation in pure Python of an R data parser, that is
  able to read and convert most datasets in the CRAN repository to
  equivalent Python objects, such as the built-in types of the Python
  standard library, NumPy arrays
  (<xref alt="Harris et al., 2020" rid="ref-harrisU002B_2020_numpy" ref-type="bibr">Harris
  et al., 2020</xref>), or Pandas dataframes
  (<xref alt="McKinney, 2010" rid="ref-mckinney_2010_pandas" ref-type="bibr">McKinney,
  2010</xref>;
  <xref alt="The Pandas Development Team, 2024" rid="ref-pandasdevelopmentteam_2024_pandasdev" ref-type="bibr">The
  Pandas Development Team, 2024</xref>). It has a permissive license and
  can be extended to support additional conversions from custom R
  classes.</p>
  <p>The package <monospace>rdata</monospace> has been designed as a
  pure Python package with minimal dependencies, so that it can be
  easily integrated inside other libraries and applications. It
  currently powers the functionality offered in the
  <monospace>scikit-datasets</monospace> package
  (<xref alt="Díaz-Vico &amp; Ramos-Carreño, 2023" rid="ref-diaz-vicoU002Bramos-carreno_2023_scikitdatasets" ref-type="bibr">Díaz-Vico
  &amp; Ramos-Carreño, 2023</xref>) for loading datasets from the CRAN
  repository of R packages. This functionality is used for fetching the
  functional datasets provided in the <monospace>scikit-fda</monospace>
  library
  (<xref alt="Ramos-Carreño et al., 2024" rid="ref-ramos-carrenoU002B_2024_scikitfda" ref-type="bibr">Ramos-Carreño
  et al., 2024</xref>), whose development was the main reason for the
  creation of the <monospace>rdata</monospace> package itself.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p>The package <monospace>rdata</monospace> is intended to be both
  flexible and easy to use. In order to be flexible, the parsing of the
  R data file formats and the conversion of the parsed structures to
  appropriate Python objects have been splitted in two steps. This
  allows advanced users to perform custom conversions without losing
  information. Most users, however, will want to use the default
  conversion routine, which attempts to convert data to a standard
  Python representation which preserves most part of the information.
  Converting an Rda dataset to Python objects using the package
  <monospace>rdata</monospace> can be easily done as follows:</p>
  <code language="python">import rdata

converted = rdata.read_rda(&quot;dataset.rda&quot;)</code>
  <p>This is equivalent to the following code, in which the two steps
  are performed separately:</p>
  <code language="python">import rdata

parsed = rdata.parser.parse_file(&quot;dataset.rda&quot;)
converted = rdata.conversion.convert(parsed)</code>
  <p>The function <monospace>parse_file()</monospace> of the parser
  module is used to parse Rda and Rds files, returning a tree-like
  structure of Python objects that contains a representation of the
  basic R objects conforming the dataset. The function
  <monospace>convert()</monospace> of the conversion module transforms
  that representation to the final Python objects, such as lists,
  dictionaries or dataframes, that users can manipulate.</p>
  <p>Advanced users will probably require loading datasets which contain
  non standard S3 or S4 classes, translating each of them to a custom
  Python class. This can be achieved using <monospace>rdata</monospace>
  by creating a constructor function that receives the converted object
  representation and its attributes, and returns a Python object of the
  desired type. As an example, consider the following short code that
  constructs a <monospace>Pandas</monospace>
  (<xref alt="The Pandas Development Team, 2024" rid="ref-pandasdevelopmentteam_2024_pandasdev" ref-type="bibr">The
  Pandas Development Team, 2024</xref>)
  <monospace>Categorical</monospace> object from the internal
  representation of an R <monospace>factor</monospace>.</p>
  <code language="python">import pandas

def factor_constructor(obj, attrs):
    values = [attrs['levels'][i - 1] if i &gt;= 0 else None for i in obj]
    return pandas.Categorical(values, attrs['levels'], ordered=False)</code>
  <p>Then, a dictionary containing as keys the original class names to
  convert and as values the constructor functions can be passed as the
  constructor_dict parameter of the <monospace>read_rda()</monospace>
  (or <monospace>convert()</monospace> if we do it in two steps)
  function. In the previous example, this could be done using the
  following code:</p>
  <code language="python">converted = rdata.read_rda(
    &quot;dataset.rda&quot;,
    constructor_dict={&quot;factor&quot;: factor_constructor},
)</code>
  <p>When the default conversion routine is being executed, if an object
  belonging to an S3 or S4 class is found, the appropriate constructor
  will be called passing to it the partially constructed object. If no
  constructor is available for that class, a warning will be emitted and
  the constructor of the most immediate parent class available will be
  called. If there are no constructors for any of the parent classes,
  the basic underlying Python object will be left without
  transformation.</p>
  <p>By default, a dictionary named
  <monospace>DEFAULT_CLASS_MAP</monospace> is passed to
  <monospace>convert()</monospace> including constructors for commonly
  used classes, such as <monospace>data.frame</monospace>,
  <monospace>ordered</monospace> or the aforementioned
  <monospace>factor</monospace>. In case the user desires different
  conversions for basic R objects, it would be enough to create a
  subclass of the <monospace>Converter</monospace> class. Several
  utility functions, such as the routines
  <monospace>convert_char()</monospace> and
  <monospace>convert_list()</monospace>, are exposed by the conversion
  module in order for users to be able to reuse them for that
  purpose.</p>
</sec>
<sec id="ongoing-work">
  <title>Ongoing work</title>
  <p>To broaden the utility of the <monospace>rdata</monospace> library
  for data processing pipelines with steps in both R and Python, we are
  currently extending the library with the capability to write
  compatible Python objects to Rda and Rds files. As an example, such a
  pipeline is present in the Hmsc-HPC code
  (<xref alt="Rahman et al., 2024" rid="ref-rahmanU002B_2024_hmschpc" ref-type="bibr">Rahman
  et al., 2024</xref>). The continuous development of this code has also
  been driving the ongoing work on the writing functionality of the
  <monospace>rdata</monospace> library. The writing of Rda and Rds files
  is implemented as a two-step process similar to reading: first, the
  Python object is converted to the tree-like intermediate
  representation used in parsing, and then this intermediate
  representation is written to a file of the chosen format. Currently,
  the writing functionality supporting common types is available in the
  development branch of the <monospace>rdata</monospace> library.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work has received funding from the Spanish Ministry of
  Education and Innovation, projects PID2019-106827GB-I00 / AEI /
  10.13039/501100011033 and PID2019-109387GB-I00, from an FPU grant
  (Formación de Profesorado Universitario) from the Spanish Ministry of
  Science, Innovation and Universities(MICIU) with reference
  FPU18/00047, and from the European Union’s Horizon Europe research and
  innovation programme under grant agreement No 101057437 (BioDT
  project,
  <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.3030/101057437">https://doi.org/10.3030/101057437</ext-link>).
  Views and opinions expressed are those of the author(s) only and do
  not necessarily reflect those of the European Union or the European
  Commission. Neither the European Union nor the European Commission can
  be held responsible for them. The authors gratefully acknowledge the
  use of the computational facilities provided by Centro de Computación
  Científica (CCC) at Universidad Autónoma de Madrid and by CSC – IT
  Center for Science, Finland.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-diaz-vicoU002Bramos-carreno_2023_scikitdatasets">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Díaz-Vico</surname><given-names>David</given-names></name>
        <name><surname>Ramos-Carreño</surname><given-names>Carlos</given-names></name>
      </person-group>
      <article-title>scikit-datasets: Scikit-learn-compatible datasets</article-title>
      <year iso-8601-date="2023-08">2023</year><month>08</month>
      <uri>https://github.com/daviddiazvico/scikit-datasets</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.6383047</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-fajardo_2024_pyreadr">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Fajardo</surname><given-names>Otto</given-names></name>
      </person-group>
      <article-title>Pyreadr</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2024-07">2024</year><month>07</month>
      <uri>https://github.com/ofajardo/pyreadr</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.7110169</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-gautier_2024_rpy2">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gautier</surname><given-names>Laurent</given-names></name>
      </person-group>
      <article-title>Rpy2: R in Python</article-title>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/rpy2/rpy2</uri>
    </element-citation>
  </ref>
  <ref id="ref-harrisU002B_2020_numpy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mckinney_2010_pandas">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>McKinney</surname></name>
      </person-group>
      <article-title>Data Structures for Statistical Computing in Python</article-title>
      <source>Proceedings of the 9th Python in Science Conference</source>
      <person-group person-group-type="editor">
        <name><surname>Walt</surname></name>
        <name><surname>Millman</surname></name>
      </person-group>
      <year iso-8601-date="2010">2010</year>
      <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id>
      <fpage>56 </fpage>
      <lpage> 61</lpage>
    </element-citation>
  </ref>
  <ref id="ref-pandasdevelopmentteam_2024_pandasdev">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>The Pandas Development Team</string-name>
      </person-group>
      <article-title>pandas-dev/pandas: pandas</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2024-04">2024</year><month>04</month>
      <uri>https://doi.org/10.5281/zenodo.3509134</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3509134</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ramos-carrenoU002B_2024_scikitfda">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ramos-Carreño</surname><given-names>Carlos</given-names></name>
        <name><surname>Torrecilla</surname><given-names>José Luis</given-names></name>
        <name><surname>Carbajo-Berrocal</surname><given-names>Miguel</given-names></name>
        <name><surname>Marcos</surname><given-names>Pablo</given-names></name>
        <name><surname>Suárez</surname><given-names>Alberto</given-names></name>
      </person-group>
      <article-title>Scikit-fda: A Python Package for Functional Data Analysis</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2024-05">2024</year><month>05</month>
      <volume>109</volume>
      <issn>1548-7660</issn>
      <pub-id pub-id-type="doi">10.18637/jss.v109.i02</pub-id>
      <fpage>1</fpage>
      <lpage>37</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rahmanU002B_2024_hmschpc">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rahman</surname><given-names>Anis Ur</given-names></name>
        <name><surname>Tikhonov</surname><given-names>Gleb</given-names></name>
        <name><surname>Oksanen</surname><given-names>Jari</given-names></name>
        <name><surname>Rossi</surname><given-names>Tuomas</given-names></name>
        <name><surname>Ovaskainen</surname><given-names>Otso</given-names></name>
      </person-group>
      <article-title>Accelerating joint species distribution modelling with Hmsc-HPC by GPU porting</article-title>
      <source>PLOS Computational Biology</source>
      <year iso-8601-date="2024-09">2024</year><month>09</month>
      <volume>20</volume>
      <issue>9</issue>
      <pub-id pub-id-type="doi">10.1371/journal.pcbi.1011914</pub-id>
      <fpage>e1011914</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
