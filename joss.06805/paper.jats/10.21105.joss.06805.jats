<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6805</article-id>
<article-id pub-id-type="doi">10.21105/joss.06805</article-id>
<title-group>
<article-title>Singularity-EOS: Performance Portable Equations of State
and Mixed Cell Closures</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6432-7860</contrib-id>
<name>
<surname>Miller</surname>
<given-names>Jonah M.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0673-9741</contrib-id>
<name>
<surname>Holladay</surname>
<given-names>Daniel A.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9425-4674</contrib-id>
<name>
<surname>Peterson</surname>
<given-names>Jeffrey H.</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7827-2247</contrib-id>
<name>
<surname>Mauney</surname>
<given-names>Christopher M.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-3044-8266</contrib-id>
<name>
<surname>Berger</surname>
<given-names>Richard</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Graham</surname>
<given-names>Anna Pietarila</given-names>
</name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-2848-832X</contrib-id>
<name>
<surname>Tsai</surname>
<given-names>Karen C.</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8825-0893</contrib-id>
<name>
<surname>Barker</surname>
<given-names>Brandon</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-6"/>
<xref ref-type="aff" rid="aff-7"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5184-6928</contrib-id>
<name>
<surname>Holas</surname>
<given-names>Alexander</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-8"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0677-7537</contrib-id>
<name>
<surname>Mattsson</surname>
<given-names>Ann E.</given-names>
</name>
<xref ref-type="aff" rid="aff-9"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6944-8052</contrib-id>
<name>
<surname>Gogilashvili</surname>
<given-names>Mariam</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-7"/>
<xref ref-type="aff" rid="aff-10"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4353-8751</contrib-id>
<name>
<surname>Dolence</surname>
<given-names>Joshua C.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7530-6173</contrib-id>
<name>
<surname>Meyer</surname>
<given-names>Chad D.</given-names>
</name>
<xref ref-type="aff" rid="aff-11"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1809-5231</contrib-id>
<name>
<surname>Swaminarayan</surname>
<given-names>Sriram</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0925-1458</contrib-id>
<name>
<surname>Junghans</surname>
<given-names>Christoph</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>CCS-2, Computational Physics and Methods, Los Alamos
National Laboratory, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Center for Theoretical Astrophysics, Los Alamos National
Laboratory, Los Alamos, NM</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>CCS-7, Applied Computer Science, Los Alamos National
Laboratory, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>XCP-2, Eulerian Codes, Los Alamos National Laboratory,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>HPC-ENV, HPC Environments, Los Alamos National Laboratory,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>Department of Physics and Astronomy, Michigan State
University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Center for Nonlinear Studies, Los Alamos National
Laboratory, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-8">
<institution-wrap>
<institution>Heidelberg Institute for Theoretical Studies,
Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-9">
<institution-wrap>
<institution>XCP-5, Materials and Physical Data, Los Alamos National
Laboratory, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-10">
<institution-wrap>
<institution>Department of Physics, Florida State University,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-11">
<institution-wrap>
<institution>XCP-4, Continuum Models and Numerical Methods, Los Alamos
National Laboratory, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-04-13">
<day>13</day>
<month>4</month>
<year>2024</year>
</pub-date>
<volume>9</volume>
<issue>103</issue>
<fpage>6805</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2024</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>C++</kwd>
<kwd>Fortran</kwd>
<kwd>Python</kwd>
<kwd>equations of state</kwd>
<kwd>thermodynamics</kwd>
<kwd>performance portability</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>We present Singularity-EOS, a new performance-portable library for
  equations of state and related capabilities. Singularity-EOS provides
  a large set of analytic equations of state, such as the Gruneisen
  equation of state, and tabulated equation of state data under a
  unified interface. It also provides support capabilities around these
  equations of state, such as Python wrappers, solvers for finding
  pressure-temperature equilibrium between multiple equations of state,
  and a unique <italic>modifier</italic> framework, allowing the user to
  transform a base equation of state, for example by shifting or scaling
  the specific internal energy. All capabilities are performance
  portable, meaning they compile and run on both CPU and GPU for a wide
  variety of architectures.</p>
</sec>
<sec id="statement-of-need-and-state-of-the-field">
  <title>Statement of need and State of the Field</title>
  <p>When expressed mathematically for continuous materials, the laws of
  conservation of mass, energy, and momentum form the Navier-Stokes
  equations of fluid dynamics. In the limit of zero molecular viscosity,
  they become the Euler equations. These laws have been used to describe
  phenomena as disparate as flow of air over an airplane wing, bacterial
  motion in fluids, and the cataclysmic deaths of stars. However, the
  fluid equations are not complete, and the system must be
  <italic>closed</italic> by a description of the material at a
  sub-continuum (e.g., molecular or atomic) scale. This closure is
  commonly called the <italic>equation of state</italic> (EOS).</p>
  <p>Equations of state vary from the simple ideal gas law, to
  sophisticated multi-phase descriptions of the lattice structure of ice
  or wood, to models of quark-gluon plasma and nuclear pasta at ultra
  high densities. A common form to write an equation of state is as a
  pair of relations:</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[P = P(\rho, T, \vec{\lambda}) \text{ and } \varepsilon = \varepsilon(\rho, T, \vec{\lambda}),]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:mi>P</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ρ</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mover><mml:mi>λ</mml:mi><mml:mo accent="true">→</mml:mo></mml:mover><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mrow><mml:mspace width="0.333em"></mml:mspace><mml:mtext mathvariant="normal"> and </mml:mtext><mml:mspace width="0.333em"></mml:mspace></mml:mrow><mml:mi>ε</mml:mi><mml:mo>=</mml:mo><mml:mi>ε</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ρ</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mover><mml:mi>λ</mml:mi><mml:mo accent="true">→</mml:mo></mml:mover><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>which relate the pressure <inline-formula><alternatives>
  <tex-math><![CDATA[P]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>P</mml:mi></mml:math></alternatives></inline-formula>
  and specific internal energy <inline-formula><alternatives>
  <tex-math><![CDATA[\varepsilon]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ε</mml:mi></mml:math></alternatives></inline-formula>
  to density <inline-formula><alternatives>
  <tex-math><![CDATA[\rho]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ρ</mml:mi></mml:math></alternatives></inline-formula>,
  temperature <inline-formula><alternatives>
  <tex-math><![CDATA[T]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>T</mml:mi></mml:math></alternatives></inline-formula>,
  and potentially some unknown set of additional quantities
  <inline-formula><alternatives>
  <tex-math><![CDATA[\vec{\lambda}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mover><mml:mi>λ</mml:mi><mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula>.
  However, other representations are possible, and in common parlance an
  EOS is the collection of knowledge needed to reconstruct some
  intrinsic thermodynamic quantities from others. For example, the speed
  of sound through a material or the specific heat capacity, which are
  thermodynamic derivatives of the pressure and the specific internal
  energy respectively, can both be determined by the EOS.</p>
  <p>In multi-material fluid dynamics simulations, one often will end up
  with a so-called <italic>mixed cell</italic>, where two materials
  exist within the same simulation zone. This can be an artifact of the
  numerical representation; for example a steel bar and the surrounding
  air may end up sharing a finite volume cell if the boundaries of the
  cell do not align exactly with the surface of the steel bar, or, it
  may represent physical reality; for example, air is a mixture of
  nitrogen and oxygen gases, as well as water vapor. Regardless of the
  nature of the mixed cell, one must somehow provide, to the fluid code,
  what the material properties of the cell are as a whole. This is
  called a <italic>mixed cell closure.</italic> One such closure is
  <italic>pressure-temperature equilibrium</italic> (PTE), where all
  materials in the cell are assumed to be at the same pressure and
  temperature.</p>
  <p>Typically fluid dynamics codes each develop an EOS package
  individually to meet a given problem’s needs. Databases of tabulated
  equations of state, such as the Sesame
  (<xref alt="Lyon &amp; Johnson, 1992" rid="ref-sesame" ref-type="bibr">Lyon
  &amp; Johnson, 1992</xref>) and Stellar Collapse
  (<xref alt="O’Connor &amp; Ott, 2010b" rid="ref-stellarcollapseweb" ref-type="bibr">O’Connor
  &amp; Ott, 2010b</xref>) databases often come with tabulated data
  readers, for example, the EOSPAC library
  (<xref alt="Pimentel, 2021" rid="ref-PimentelDavidA2021EUMV" ref-type="bibr">Pimentel,
  2021</xref>) and Stellar Collapse library
  (<xref alt="O’Connor &amp; Ott, 2010a" rid="ref-stellarcollapsetables" ref-type="bibr">O’Connor
  &amp; Ott, 2010a</xref>). However, these libraries typically do not
  include analytic equations of state or provide a unified API. They
  also don’t provide extra equation-of-state capabilities, such as
  equilibrium solvers or production hardening. With a few exceptions,
  these libraries are also typically not GPU-capable.</p>
  <p>We present Singularity-EOS, which aims to be a “one stop shop” for
  EOS models for fluid and continuum dynamics codes. It provides a
  unified interface for both analytic and tabulated equations of state.
  It also provides useful surrounding capabilities, such as Python
  wrappers, <italic>modifiers</italic>, which allow the user to
  transform a given EOS, and solvers which can find the state in which
  multiple EOS’s are in PTE. To support usability, the library is
  extensively documented and tested and supports builds through both
  <monospace>cmake</monospace> and <monospace>Spack</monospace>
  (<xref alt="Gamblin et al., 2015" rid="ref-spack" ref-type="bibr">Gamblin
  et al., 2015</xref>).</p>
  <p>Singularity-EOS leverages the <monospace>Kokkos</monospace>
  (<xref alt="Trott et al., 2022" rid="ref-Kokkos" ref-type="bibr">Trott
  et al., 2022</xref>) library for performance portability, meaning the
  code can run on both CPUs and GPUs, as well as other accelerators.
  This fills an important need, as modern super computing capabilities
  increasingly rely on GPUs for performance. Singularity-EOS is now used
  in the ongoing open-source
  <ext-link ext-link-type="uri" xlink:href="https://github.com/lanl/phoebus">Phoebus</ext-link>
  project which has a separate code paper in-preparation.</p>
</sec>
<sec id="design-principles-and-feature-highlights">
  <title>Design Principles and Feature Highlights</title>
  <p>Here we enumerate several design principles underlying
  Singularity-EOS, and highlight a few feature of the library.</p>
  <sec id="flexibility-in-loop-patterns">
    <title>Flexibility in loop patterns</title>
    <p>Singularity-EOS provides both scalar and vector APIs, allowing
    the user to make EOS calls on both single points in thermodynamic
    space, and on collections of points. The vector calls may be more
    performant (as they may vectorize), however care is made to ensure
    both APIs operate at acceptable performance, to accommodate
    different code structures downstream.</p>
  </sec>
  <sec id="flexibility-in-memory-layout">
    <title>Flexibility in memory layout</title>
    <p>The vector calls in Singularity-EOS use an
    <italic>accessor</italic> API and (with a few exceptions) accept any
    C++ object that has a <monospace>operator[]</monospace> function
    defined. This allows users to lay out their memory as they see fit
    and use Singularity-EOS even on strided or sparsely allocated
    memory.</p>
  </sec>
  <sec id="expose-apis-to-aid-performance">
    <title>Expose APIs to aid performance</title>
    <p>Many equations of state are most naturally represented as
    functions of density and temperature. However, fluid codes require
    pressure as a function of density and internal energy. Extracting
    this often requires computing a root to invert the relation</p>
    <p><disp-formula><alternatives>
    <tex-math><![CDATA[\varepsilon = \varepsilon(\rho, T).]]></tex-math>
    <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ε</mml:mi><mml:mo>=</mml:mo><mml:mi>ε</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>ρ</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>.</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></p>
    <p>In these cases, we expose an initial guess for temperature, which
    helps the solution rapidly converge. Similarly, the performance of a
    sequence of EOS calls may depend on the ordering of the calls. For
    example, if both temperature and pressure are required from an
    equation of state that requires inversion, requesting pressure first
    will be less performant than requesting temperature first, as the
    former requires two root finds, and the latter requires only one. To
    enable this, we expose a function <monospace>FillEos</monospace>, in
    which the user may request multiple quantities at once, and the code
    uses ordering knowledge to compute them as performantly as
    possible.</p>
  </sec>
  <sec id="performance-portable-polymorphism">
    <title>Performance-portable polymorphism</title>
    <p>Accelerators present new challenges to standard object-oriented
    programming. In particular, not all compiler stacks (such as Sycl
    (<xref alt="Reyes et al., 2020" rid="ref-SYCL" ref-type="bibr">Reyes
    et al., 2020</xref>) or OpenMP
    (<xref alt="Chandra et al., 2001" rid="ref-chandra2001parallel" ref-type="bibr">Chandra
    et al., 2001</xref>) Target Offload
    (<xref alt="OpenMP Architecture Review Board, 2013" rid="ref-openmp4" ref-type="bibr">OpenMP
    Architecture Review Board, 2013</xref>)) support relocatable device
    code, which is required for standard C++ polymorphism. Even in
    programming models, such as CUDA
    (<xref alt="NVIDIA et al., 2020" rid="ref-cuda" ref-type="bibr">NVIDIA
    et al., 2020</xref>), which do support relocatable device code,
    polymorphism can be slower than naively expected, and the user-level
    API can be cumbersome, requiring operations such as
    <monospace>placement new</monospace>. To sidestep these issues, we
    use the C++ language feature <monospace>std::variant</monospace> to
    implement a polymorphism mechanism that works on device.</p>
  </sec>
  <sec id="modifiers">
    <title>Modifiers</title>
    <p>A given code may need to modify an EOS model to make it suitable
    for a given application. For example, the zero-point of the energy
    may need to be shifted, a porosity model may need to be added, or
    the unit system may need to be changed. We implement this with a
    system of <italic>modifiers</italic>, which can be applied on top of
    an EOS in a generic way. Modifiers may also be chained.</p>
  </sec>
  <sec id="fast-log-lookups">
    <title>Fast log-lookups</title>
    <p>To span the required orders of magnitude, equations of state are
    often tabulated on log-spaced grids. Logarithms and exponentials
    are, however, expensive operations and the performance of lookups
    can suffer. We instead use the not-quite-transcendental lookups
    described in
    (<xref alt="Miller et al., 2022" rid="ref-NQT" ref-type="bibr">Miller
    et al., 2022</xref>) to significantly enhance performance of
    log-like lookups.</p>
  </sec>
  <sec id="extensibility-via-modular-parts-and-plugins">
    <title>Extensibility via modular parts and plugins</title>
    <p>Singularity-EOS is designed to be extensible. The
    <monospace>std::variant</monospace>-based polymorphism, combined
    with modifiers, as described above, already provides significant
    flexibility. However, downstream codes may wish to add functionality
    to the library. This may be implemented in several ways.
    <bold>First</bold>, as Singularity-EOS is open source, contributions
    from downstream developers are welcome. <bold>Second</bold>, a C++
    code that depends on Singularity-EOS may implement their own models
    and include them in a local variant object. Singularity-EOS provides
    tooling to build variants up iteratively. <bold>Finally</bold>,
    Singularity-EOS provides a flexible plugin infrastructure that
    allows downstream users to add capability to the core library
    locally by telling the build system to include a locally downloaded
    plugin. This final capability allows downstream users to share code
    with each other, even when committing that code to Singularity-EOS
    proper is not possible due to, e.g., licensing issues.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work was supported through the Laboratory Directed Research
  and Development program, the Center for Space and Earth Sciences, and
  the Center for Nonlinear Studies under project numbers 20240477CR-SES
  and 20220564ECR at Los Alamos National Laboratory (LANL). LANL is
  operated by Triad National Security, LLC, for the National Nuclear
  Security Administration of U.S. Department of Energy (Contract
  No. 89233218CNA000001). This research used resources provided by the
  Darwin testbed at LANL which is funded by the Computational Systems
  and Software Environments subprogram of LANL’s Advanced Simulation and
  Computing program (NNSA/DOE). This work is approved for unlimited
  release with report number LA-UR-24-23364.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-sesame">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Lyon</surname><given-names>Stanford P.</given-names></name>
        <name><surname>Johnson</surname><given-names>James D.</given-names></name>
      </person-group>
      <article-title>Sesame: The los alamos national laboratory equation of state database</article-title>
      <publisher-name>Los Alamos National Laboratory</publisher-name>
      <year iso-8601-date="1992">1992</year>
    </element-citation>
  </ref>
  <ref id="ref-stellarcollapsetables">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>O’Connor</surname><given-names>Evan</given-names></name>
        <name><surname>Ott</surname><given-names>Christian D</given-names></name>
      </person-group>
      <article-title>A new open-source code for spherically symmetric stellar collapse to neutron stars and black holes</article-title>
      <source>Classical and Quantum Gravity</source>
      <year iso-8601-date="2010">2010</year>
      <volume>27</volume>
      <issue>11</issue>
      <pub-id pub-id-type="doi">10.1088/0264-9381/27/11/114103</pub-id>
      <fpage>114103</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-stellarcollapseweb">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>O’Connor</surname><given-names>Evan</given-names></name>
        <name><surname>Ott</surname><given-names>Christian D</given-names></name>
      </person-group>
      <article-title>Stellar collapse: microphysics</article-title>
      <year iso-8601-date="2010">2010</year>
      <uri>https://stellarcollapse.org/equationofstate</uri>
    </element-citation>
  </ref>
  <ref id="ref-PimentelDavidA2021EUMV">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Pimentel</surname><given-names>David A</given-names></name>
      </person-group>
      <source>EOSPAC user’s manual: v.6.5</source>
      <publisher-name>Los Alamos National Lab. (LANL), Los Alamos, NM (United States)</publisher-name>
      <publisher-loc>United States</publisher-loc>
      <year iso-8601-date="2021">2021</year>
      <pub-id pub-id-type="doi">10.2172/1765849</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Kokkos">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Trott</surname><given-names>Christian R.</given-names></name>
        <name><surname>Lebrun-Grandié</surname><given-names>Damien</given-names></name>
        <name><surname>Arndt</surname><given-names>Daniel</given-names></name>
        <name><surname>Ciesko</surname><given-names>Jan</given-names></name>
        <name><surname>Dang</surname><given-names>Vinh</given-names></name>
        <name><surname>Ellingwood</surname><given-names>Nathan</given-names></name>
        <name><surname>Gayatri</surname><given-names>Rahulkumar</given-names></name>
        <name><surname>Harvey</surname><given-names>Evan</given-names></name>
        <name><surname>Hollman</surname><given-names>Daisy S.</given-names></name>
        <name><surname>Ibanez</surname><given-names>Dan</given-names></name>
        <name><surname>Liber</surname><given-names>Nevin</given-names></name>
        <name><surname>Madsen</surname><given-names>Jonathan</given-names></name>
        <name><surname>Miles</surname><given-names>Jeff</given-names></name>
        <name><surname>Poliakoff</surname><given-names>David</given-names></name>
        <name><surname>Powell</surname><given-names>Amy</given-names></name>
        <name><surname>Rajamanickam</surname><given-names>Sivasankaran</given-names></name>
        <name><surname>Simberg</surname><given-names>Mikael</given-names></name>
        <name><surname>Sunderland</surname><given-names>Dan</given-names></name>
        <name><surname>Turcksin</surname><given-names>Bruno</given-names></name>
        <name><surname>Wilke</surname><given-names>Jeremiah</given-names></name>
      </person-group>
      <article-title>Kokkos 3: Programming model extensions for the exascale era</article-title>
      <source>IEEE Transactions on Parallel and Distributed Systems</source>
      <year iso-8601-date="2022">2022</year>
      <volume>33</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1109/TPDS.2021.3097283</pub-id>
      <fpage>805</fpage>
      <lpage>817</lpage>
    </element-citation>
  </ref>
  <ref id="ref-cuda">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>NVIDIA</surname></name>
        <name><surname>Vingelmann</surname><given-names>Péter</given-names></name>
        <name><surname>Fitzek</surname><given-names>Frank H. P.</given-names></name>
      </person-group>
      <article-title>CUDA, release: 10.2.89</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://developer.nvidia.com/cuda-toolkit</uri>
    </element-citation>
  </ref>
  <ref id="ref-chandra2001parallel">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Chandra</surname><given-names>Rohit</given-names></name>
        <name><surname>Dagum</surname><given-names>Leo</given-names></name>
        <name><surname>Kohr</surname><given-names>David</given-names></name>
        <name><surname>Menon</surname><given-names>Ramesh</given-names></name>
        <name><surname>Maydan</surname><given-names>Dror</given-names></name>
        <name><surname>McDonald</surname><given-names>Jeff</given-names></name>
      </person-group>
      <source>Parallel programming in OpenMP</source>
      <publisher-name>Morgan kaufmann</publisher-name>
      <year iso-8601-date="2001">2001</year>
    </element-citation>
  </ref>
  <ref id="ref-openmp4">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>OpenMP Architecture Review Board</string-name>
      </person-group>
      <article-title>OpenMP application program interface version 4.0</article-title>
      <year iso-8601-date="2013">2013</year>
      <uri>https://www.openmp.org/wp-content/uploads/OpenMP4.0.0.pdf</uri>
    </element-citation>
  </ref>
  <ref id="ref-SYCL">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Reyes</surname><given-names>Ruyman</given-names></name>
        <name><surname>Brown</surname><given-names>Gordon</given-names></name>
        <name><surname>Burns</surname><given-names>Rod</given-names></name>
        <name><surname>Wong</surname><given-names>Michael</given-names></name>
      </person-group>
      <article-title>SYCL 2020: More than meets the eye</article-title>
      <source>Proceedings of the international workshop on OpenCL</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2020">2020</year>
      <isbn>9781450375313</isbn>
      <uri>https://doi.org/10.1145/3388333.3388649</uri>
      <pub-id pub-id-type="doi">10.1145/3388333.3388649</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-NQT">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Miller</surname><given-names>Jonah M.</given-names></name>
        <name><surname>Dolence</surname><given-names>Joshua C.</given-names></name>
        <name><surname>Holladay</surname><given-names>Daniel</given-names></name>
      </person-group>
      <article-title>Not-Quite Transcendental Functions and their Applications</article-title>
      <source>arXiv e-prints</source>
      <year iso-8601-date="2022-06">2022</year><month>06</month>
      <uri>https://arxiv.org/abs/2206.08957</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2206.08957</pub-id>
      <fpage>arXiv:2206.08957</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-spack">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Gamblin</surname><given-names>Todd</given-names></name>
        <name><surname>LeGendre</surname><given-names>Matthew</given-names></name>
        <name><surname>Collette</surname><given-names>Michael R.</given-names></name>
        <name><surname>Lee</surname><given-names>Gregory L.</given-names></name>
        <name><surname>Moody</surname><given-names>Adam</given-names></name>
        <name><surname>Supinski</surname><given-names>Bronis R. de</given-names></name>
        <name><surname>Futral</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>The spack package manager: Bringing order to HPC software chaos</article-title>
      <source>Proceedings of the international conference for high performance computing, networking, storage and analysis</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <isbn>9781450337236</isbn>
      <uri>https://doi.org/10.1145/2807591.2807623</uri>
      <pub-id pub-id-type="doi">10.1145/2807591.2807623</pub-id>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
