<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3950</article-id>
<article-id pub-id-type="doi">10.21105/joss.03950</article-id>
<title-group>
<article-title>pyscreener: A Python Wrapper for Computational Docking
Software</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1250-3329</contrib-id>
<name>
<surname>Graff</surname>
<given-names>David E.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8271-8723</contrib-id>
<name>
<surname>Coley</surname>
<given-names>Connor W.</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Chemistry and Chemical Biology, Harvard
University</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Chemical Engineering, Massachusetts Institute
of Technology</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Department of Electrical Engineering and Computer Science,
Massachusetts Institute of Technology</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<volume>7</volume>
<issue>71</issue>
<fpage>3950</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>drug discovery</kwd>
<kwd>distributed computing</kwd>
<kwd>molecular docking</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>pyscreener</monospace> is a Python library that seeks to
  alleviate the challenges of large-scale structure-based design using
  computational docking. It provides a simple and uniform interface that
  is agnostic to the backend docking engine with which to calculate the
  docking score of a given molecule in a specified active site.
  Additionally, <monospace>pyscreener</monospace> features first-class
  support for task distribution, allowing users to seamlessly scale
  their code from a local, multi-core setup to a large, heterogeneous
  resource allocation.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Computational docking is an important technique in structure-based
  drug design that enables the rapid approximation of binding affinity
  for a candidate ligand in a matter of CPU seconds. With the growing
  popularity of ultra-large ligand libraries, docking is increasingly
  used to sift through hundreds of millions of compounds to try to
  identify novel and potent binders for a variety of protein targets
  (<xref alt="Gorgulla et al., 2020" rid="ref-gorgulla_open-source_2020" ref-type="bibr">Gorgulla
  et al., 2020</xref>;
  <xref alt="Lyu et al., 2019" rid="ref-lyu_ultra-large_2019" ref-type="bibr">Lyu
  et al., 2019</xref>). There are many choices of docking software, and
  certain software are better suited towards specific protein-ligand
  contexts (e.g., flexible protein side chains or sugar-like ligand
  molecules). Switching between these software is often not trivial as
  the input preparation, simulation, and output parsing pipelines differ
  between each software.</p>
  <p>In addition, many of these programs exist only as command-line
  applications and lack Python bindings. This presents an additional
  challenge for their integration into molecular optimization workflows,
  such as reinforcement learning or genetic algorithms. Molecular
  optimization objectives have largely been limited to benchmark tasks,
  such as penalized logP, QED, JNK3 or
  GSK3<inline-formula><alternatives>
  <tex-math><![CDATA[\beta]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>Î²</mml:mi></mml:math></alternatives></inline-formula>
  inhibitor classification
  (<xref alt="Li et al., 2018" rid="ref-li_multi-objective_2018" ref-type="bibr">Li
  et al., 2018</xref>), and others contained in the GuacaMol library
  (<xref alt="Brown et al., 2019" rid="ref-brown_guacamol_2019" ref-type="bibr">Brown
  et al., 2019</xref>). These benchmarks are useful for comparing
  molecular design techniques, but they are not representative of true
  drug discovery tasks in terms of complexity; computational docking is
  at least one step in the right direction.</p>
  <p>While many molecular optimization techniques propose new molecules
  in the form of SMILES strings
  (<xref alt="Elton et al., 2019" rid="ref-elton_deep_2019" ref-type="bibr">Elton
  et al., 2019</xref>), most docking programs accept input in the form
  of molecular supply files with predefined 3D geometry (e.g., Mol2 or
  PDBQT format). Using the docking score of a molecule as a design
  objective thus requires an ad hoc implementation for which no
  standardized approach exists. The <monospace>vina</monospace> library
  (<xref alt="Eberhardt et al., 2021" rid="ref-eberhardt_autodock_2021" ref-type="bibr">Eberhardt
  et al., 2021</xref>) is currently the only library capable of
  performing molecular docking within Python code, but it is limited to
  docking molecules using solely AutoDock Vina as the backend docking
  engine. Moreover, the object model of the <monospace>vina</monospace>
  library accepts input ligands only as PDBQT files or strings and still
  does not address the need to quickly calculate the docking score of a
  molecule from its SMILES string.</p>
  <p>In our work on the MolPAL software
  (<xref alt="Graff et al., 2021" rid="ref-graff_accelerating_2021" ref-type="bibr">Graff
  et al., 2021</xref>), we required a library that is able to accept
  molecular inputs as SMILES strings and output their corresponding
  docking scores for a given receptor and docking box. Our use-case also
  called for docking large batches of molecules across large and
  distributed hardware setups. Lastly, we desired that our library be
  flexible with respect to the underlying docking engine, allowing us to
  use a variety of backend docking software (e.g., Vina
  (<xref alt="Trott &amp; Olson, 2010" rid="ref-trott_autodock_2010" ref-type="bibr">Trott
  &amp; Olson, 2010</xref>), Smina
  (<xref alt="Koes et al., 2013" rid="ref-koes_lessons_2013" ref-type="bibr">Koes
  et al., 2013</xref>), QVina
  (<xref alt="Alhossary et al., 2015" rid="ref-alhossary_fast_2015" ref-type="bibr">Alhossary
  et al., 2015</xref>), or DOCK6
  (<xref alt="Allen et al., 2015" rid="ref-allen_dock_2015" ref-type="bibr">Allen
  et al., 2015</xref>)) with minimal changes to client code. To that
  end, we developed <monospace>pyscreener</monospace>, a Python library
  that is flexible with respect to both molecular input format and
  docking engine that transparently handles the distribution of docking
  simulations across large resource allocations.</p>
</sec>
<sec id="implementation-and-performance">
  <title>Implementation and Performance</title>
  <p>The primary design goals with <monospace>pyscreener</monospace>
  were to (1) provide a simple interface with which to calculate the
  docking score of an input small molecule and (2) transparently
  distribute the corresponding docking simulations across a large
  resource allocation. The object model of
  <monospace>pyscreener</monospace> relies on four classes:
  <monospace>CalculationData</monospace>,
  <monospace>CalculationMetadata</monospace>,
  <monospace>DockingRunner</monospace>, and
  <monospace>DockingVirtualScreen</monospace>. A docking simulation in
  <monospace>pyscreener</monospace> is fully described by a
  <monospace>CalculationData</monospace> and an associated
  <monospace>CalculationMetadata</monospace>. High-level information
  about the simulation that is common to all docking software (e.g.,
  target protein, docking box, name of the ligand, the paths under which
  inputs and outputs will be stored) is stored in the
  <monospace>CalculationData</monospace> object. A
  <monospace>CalculationMetadata</monospace> contains the set of
  software-specific arguments for the simulation, such as
  <monospace>exhaustiveness</monospace> for the AutoDock Vina family of
  software or parameters for SPH file preparation for DOCK6.</p>
  <p>The <monospace>pyscreener</monospace> object model separates data
  from behavior by placing the responsibility of actually preparing,
  running, and parsing simulations inside the
  <monospace>DockingRunner</monospace> class. This stateless class
  defines methods to prepare simulation inputs, perform the simulation
  of the corresponding inputs, and parse the resulting output for a
  given <monospace>CalculationData</monospace> and
  <monospace>CalculationMetadata</monospace> pair. By placing this logic
  inside static methods rather than attaching them to the
  <monospace>CalculationData</monospace> object,
  <monospace>pyscreener</monospace> limits network data transfer
  overhead during task distribution. The separation also allows for the
  straightforward addition of new backend docking engines to
  <monospace>pyscreener</monospace>, as this entails only the
  specification of the corresponding
  <monospace>CalculationMetadata</monospace> and
  <monospace>DockingRunner</monospace> subclasses.</p>
  <p><monospace>pyscreener</monospace> also contains the
  <monospace>DockingVirtualScreen</monospace> class, which contains a
  template <monospace>CalculationData</monospace> and
  <monospace>CalculationMetadata</monospace> with which to dock each
  input molecule, i.e., a virtual screening protocol. The class defines
  a <monospace>__call__()</monospace> method which takes SMILES strings
  or chemical files in any format supported by OpenBabel
  (<xref alt="OâBoyle et al., 2011" rid="ref-oboyle_open_2011" ref-type="bibr">OâBoyle
  et al., 2011</xref>) as input and distributes the corresponding
  docking simulations across the resources in the given hardware
  allocation, returning a docking score for each input molecule.</p>
  <fig>
    <caption><p>Wall-time of the computational docking of all 1,615
    FDA-approved drugs against 5WIU using QVina2 over six CPU cores for
    a single-node setup with the specified number of CPU cores. (Left)
    calculated speedup. (Right) wall time in minutes. Bars reflect mean
    <inline-formula><alternatives>
    <tex-math><![CDATA[\pm]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mo>Â±</mml:mo></mml:math></alternatives></inline-formula>
    standard deviation over three
    runs.<styled-content id="figU003Alocal"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figures/timing-local.png" xlink:title="" />
  </fig>
  <p>To handle task distribution, <monospace>pyscreener</monospace>
  relies on the <monospace>ray</monospace> library
  (<xref alt="Moritz et al., 2018" rid="ref-moritz_ray_2018" ref-type="bibr">Moritz
  et al., 2018</xref>) for distributed computation. For multithreaded
  docking software, <monospace>pyscreener</monospace> allows a user to
  specify how many CPU cores to run each individual docking simulation
  over, running as many docking simulations in parallel as possible for
  a given number of total CPU cores in the <monospace>ray</monospace>
  cluster. To examine the scaling behavior of
  <monospace>pyscreener</monospace>, we docked all 1,615 FDA-approved
  drugs into the active site of the D4 dopamine receptor (PDB ID 5WIU
  (<xref alt="Wang et al., 2017" rid="ref-wang_d4_2017" ref-type="bibr">Wang
  et al., 2017</xref>)) with QVina2 running over 6 CPU cores. We tested
  both single node hardware setups, scaling the total number of CPU
  cores on one machine, and multi-node setups, scaling the total number
  of machines. In the single-node case,
  <monospace>pyscreener</monospace> exhibited essentially perfect
  scaling <xref alt="FigureÂ 1" rid="figU003Alocal">FigureÂ 1</xref> as we
  scaled the size of the <monospace>ray</monospace> cluster from 6 to 48
  CPU cores running QVina over 6 CPU cores.</p>
  <fig>
    <caption><p>Wall-time of the computational docking of all 1,615
    FDA-approved drugs against 5WIU using QVina2 over six CPU cores for
    setups using multiple 48-core nodes with the total number of
    specified CPU cores. (Left) calculated speedup. (Right) wall time in
    minutes. Bars reflect mean <inline-formula><alternatives>
    <tex-math><![CDATA[\pm]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mo>Â±</mml:mo></mml:math></alternatives></inline-formula>
    standard deviation over three
    runs.<styled-content id="figU003Adist"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figures/timing-dist.png" xlink:title="" />
  </fig>
  <p>In contrast, the multi-node setup exhibits less ideal scaling
  <xref alt="FigureÂ 2" rid="figU003Adist">FigureÂ 2</xref> with a
  measured speedup approximately 55% that of perfect scaling. We
  attribute this scaling behavior to hardware-dependent network
  communication overhead. Distributing a <monospace>sleep(5)</monospace>
  function allocated 6 CPU cores per task (to mimic a fairly quick
  docking simulation) in parallel over differing hardware setups led to
  an approximate 2.5% increase in wall-time relative to the single-node
  setup each time the number of nodes in the setup was doubled while
  keeping the total number of CPU cores the same. Such a trend is
  consistent with network communication being detrimental to scaling
  behavior. This test also communicated the absolute minimum amount of
  data over the network, as there were no function arguments or return
  values. When communicating <monospace>CalculationData</monospace>
  objects (approximately 600 bytes in serialized form) over the network,
  as in <monospace>pyscreener</monospace>, the drop increased to 6% for
  each doubling of the total number of nodes. Minimizing the total size
  of <monospace>CalculationData</monospace> objects was therefore an
  explicit implementation goal. Future development will seek to further
  reduce network communication overhead costs to bring
  <monospace>pyscreener</monospace> scaling closer to ideal scaling.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>To illustrate <monospace>pyscreener</monospace>, we consider
  docking benezene (SMILES string
  <monospace>&quot;c1ccccc1&quot;</monospace>) against 5WIU with a
  docking box centered at (-18.2, 14.4, -16.1) with x-, y-, and z-radii
  (15.4, 13.9, 14.5). We may perform this docking using AutoDock Vina
  over 6 CPU cores via <monospace>pyscreener</monospace> like so:</p>
  <code language="python">import pyscreener as ps

metadata = ps.build_metadata(&quot;vina&quot;)
virtual_screen = ps.virtual_screen(
    &quot;vina&quot;,
    receptors=[&quot;5WIU.pdb&quot;],
    center=(-18.2, 14.4, -16.1),
    size=(15.4, 13.9, 14.5),
    metadata_template=metadata,
    ncpu=6
)
scores = virtual_screen(&quot;c1ccccc1&quot;)
print(scores)
# [-4.4]</code>
  <p>Alternatively, we may dock many molecules by passing a
  <monospace>List</monospace> of SMILES strings to the
  <monospace>DockingVirtualScreen</monospace>:</p>
  <code language="python">smis = [
    &quot;c1ccccc1&quot;,
    &quot;O=C(Cc1ccccc1)NC1C(=O)N2C1SC(C2C(=O)O)(C)C&quot;,
    &quot;C=CCN1CCC23C4C(=O)CCC2(C1CC5=C3C(=C(C=C5)O)O4)O&quot;
]
scores = virtual_screen(smis)
print(scores.shape)
# (3,)</code>
  <p>By default, AutoDock Vina docks molecules using an
  <monospace>--exhaustiveness</monospace> value of 8, but we may specify
  a higher number in the <monospace>metadata</monospace>:</p>
  <code language="python">metadata = ps.build_metadata(&quot;vina&quot;, dict(exhaustivness=32))</code>
  <p>We may also utilize other docking engines in the AutoDock Vina
  family by specifying the <monospace>software</monospace> for Vina-type
  metadata. Here, we use the accelerated optimization routine of QVina
  for faster docking. Note that we also support
  <monospace>software</monospace> values of
  <monospace>&quot;smina&quot;</monospace>
  (<xref alt="Koes et al., 2013" rid="ref-koes_lessons_2013" ref-type="bibr">Koes
  et al., 2013</xref>) and <monospace>&quot;psovina&quot;</monospace>
  (<xref alt="Ng et al., 2015" rid="ref-ng_psovina_2015" ref-type="bibr">Ng
  et al., 2015</xref>) in addition to
  <monospace>&quot;vina&quot;</monospace>
  (<xref alt="Trott &amp; Olson, 2010" rid="ref-trott_autodock_2010" ref-type="bibr">Trott
  &amp; Olson, 2010</xref>) and <monospace>&quot;qvina&quot;</monospace>
  (<xref alt="Alhossary et al., 2015" rid="ref-alhossary_fast_2015" ref-type="bibr">Alhossary
  et al., 2015</xref>).</p>
  <code language="python">metadata = ps.build_metadata(&quot;vina&quot;, dict(software=&quot;qvina&quot;))</code>
  <p>It is also possible to dock molecules using DOCK6
  (<xref alt="Allen et al., 2015" rid="ref-allen_dock_2015" ref-type="bibr">Allen
  et al., 2015</xref>) in <monospace>pyscreener</monospace>. To do this,
  we must first construct DOCK6 metadata and specify that we are
  creating a DOCK6 virtual screen (note that DOCK6 is not multithreaded
  and thus does not benefit from being assigned multiple CPU cores per
  task):</p>
  <code language="python">metadata = ps.build_metadata(&quot;dock&quot;)
virtual_screen = ps.virtual_screen(
    &quot;dock&quot;,
    receptors=[&quot;5WIU.pdb&quot;],
    center=(-18.2, 14.4, -16.1),
    size=(15.4, 13.9, 14.5),
    metadata_template=metadata
)
scores = virtual_screen(&quot;c1ccccc1&quot;)
print(scores)
# [-12.35]</code>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors thank Keir Adams and Wenhao Gao for providing feedback
  on the preparation of this paper and the
  <monospace>pyscreener</monospace> code. The computations in this paper
  were run on the FASRC Cannon cluster supported by the FAS Division of
  Science Research Computing Group at Harvard University. The authors
  also acknowledge the MIT SuperCloud and Lincoln Laboratory
  Supercomputing Center for providing HPC and consultation resources
  that have contributed to the research results reported within this
  paper. This work was funded by the MIT-IBM Watson AI Lab.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-eberhardt_autodock_2021">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Eberhardt</surname><given-names>Jerome</given-names></name>
          <name><surname>Santos-Martins</surname><given-names>Diogo</given-names></name>
          <name><surname>Tillack</surname><given-names>Andreas F.</given-names></name>
          <name><surname>Forli</surname><given-names>Stefano</given-names></name>
        </person-group>
        <article-title>AutoDock Vina 1.2.0: New Docking Methods, Expanded Force Field, and Python Bindings</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2021-08">2021</year><month>08</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-10">2021</year><month>11</month><day>10</day></date-in-citation>
        <volume>61</volume>
        <issue>8</issue>
        <issn>1549-9596</issn>
        <uri>https://doi.org/10.1021/acs.jcim.1c00203</uri>
        <pub-id pub-id-type="doi">10.1021/acs.jcim.1c00203</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-koes_lessons_2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Koes</surname><given-names>David Ryan</given-names></name>
          <name><surname>Baumgartner</surname><given-names>Matthew P.</given-names></name>
          <name><surname>Camacho</surname><given-names>Carlos J.</given-names></name>
        </person-group>
        <article-title>Lessons Learned in Empirical Scoring with smina from the CSAR 2011 Benchmarking Exercise</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2013-08">2013</year><month>08</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-09">2021</year><month>11</month><day>09</day></date-in-citation>
        <volume>53</volume>
        <issue>8</issue>
        <issn>1549-9596</issn>
        <uri>https://doi.org/10.1021/ci300604z</uri>
        <pub-id pub-id-type="doi">10.1021/ci300604z</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ng_psovina_2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ng</surname><given-names>Marcus C. K.</given-names></name>
          <name><surname>Fong</surname><given-names>Simon</given-names></name>
          <name><surname>Siu</surname><given-names>Shirley W. I.</given-names></name>
        </person-group>
        <article-title>PSOVina: The hybrid particle swarm optimization algorithm for proteinâligand docking</article-title>
        <source>Journal of Bioinformatics and Computational Biology</source>
        <year iso-8601-date="2015-06">2015</year><month>06</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-09">2021</year><month>11</month><day>09</day></date-in-citation>
        <volume>13</volume>
        <issue>03</issue>
        <issn>0219-7200</issn>
        <uri>https://www.worldscientific.com/doi/abs/10.1142/S0219720015410073</uri>
        <pub-id pub-id-type="doi">10.1142/S0219720015410073</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-elton_deep_2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Elton</surname><given-names>Daniel C.</given-names></name>
          <name><surname>Boukouvalas</surname><given-names>Zois</given-names></name>
          <name><surname>Fuge</surname><given-names>Mark D.</given-names></name>
          <name><surname>Chung</surname><given-names>Peter W.</given-names></name>
        </person-group>
        <article-title>Deep learning for molecular designâa review of the state of the art</article-title>
        <source>Molecular Systems Design &amp; Engineering</source>
        <year iso-8601-date="2019-08">2019</year><month>08</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-08">2021</year><month>11</month><day>08</day></date-in-citation>
        <volume>4</volume>
        <issue>4</issue>
        <issn>2058-9689</issn>
        <uri>http://pubs.rsc.org/en/content/articlelanding/2019/me/c9me00039a</uri>
        <pub-id pub-id-type="doi">10.1039/C9ME00039A</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-li_multi-objective_2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Li</surname><given-names>Yibo</given-names></name>
          <name><surname>Zhang</surname><given-names>Liangren</given-names></name>
          <name><surname>Liu</surname><given-names>Zhenming</given-names></name>
        </person-group>
        <article-title>Multi-objective de novo drug design with conditional graph generative model</article-title>
        <source>Journal of Cheminformatics</source>
        <year iso-8601-date="2018-07">2018</year><month>07</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-08">2021</year><month>11</month><day>08</day></date-in-citation>
        <volume>10</volume>
        <issue>1</issue>
        <issn>1758-2946</issn>
        <uri>https://doi.org/10.1186/s13321-018-0287-6</uri>
        <pub-id pub-id-type="doi">10.1186/s13321-018-0287-6</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-brown_guacamol_2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Brown</surname><given-names>Nathan</given-names></name>
          <name><surname>Fiscato</surname><given-names>Marco</given-names></name>
          <name><surname>Segler</surname><given-names>Marwin H. S.</given-names></name>
          <name><surname>Vaucher</surname><given-names>Alain C.</given-names></name>
        </person-group>
        <article-title>GuacaMol: Benchmarking Models for de Novo Molecular Design</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2019-03">2019</year><month>03</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-08">2021</year><month>11</month><day>08</day></date-in-citation>
        <volume>59</volume>
        <issue>3</issue>
        <issn>1549-9596</issn>
        <uri>https://doi.org/10.1021/acs.jcim.8b00839</uri>
        <pub-id pub-id-type="doi">10.1021/acs.jcim.8b00839</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-gorgulla_open-source_2020">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gorgulla</surname><given-names>Christoph</given-names></name>
          <name><surname>Boeszoermenyi</surname><given-names>Andras</given-names></name>
          <name><surname>Wang</surname><given-names>Zi-Fu</given-names></name>
          <name><surname>Fischer</surname><given-names>Patrick D.</given-names></name>
          <name><surname>Coote</surname><given-names>Paul W.</given-names></name>
          <name><surname>Padmanabha Das</surname><given-names>Krishna M.</given-names></name>
          <name><surname>Malets</surname><given-names>Yehor S.</given-names></name>
          <name><surname>Radchenko</surname><given-names>Dmytro S.</given-names></name>
          <name><surname>Moroz</surname><given-names>Yurii S.</given-names></name>
          <name><surname>Scott</surname><given-names>David A.</given-names></name>
          <name><surname>Fackeldey</surname><given-names>Konstantin</given-names></name>
          <name><surname>Hoffmann</surname><given-names>Moritz</given-names></name>
          <name><surname>Iavniuk</surname><given-names>Iryna</given-names></name>
          <name><surname>Wagner</surname><given-names>Gerhard</given-names></name>
          <name><surname>Arthanari</surname><given-names>Haribabu</given-names></name>
        </person-group>
        <article-title>An open-source drug discovery platform enables ultra-large virtual screens</article-title>
        <source>Nature</source>
        <year iso-8601-date="2020-04">2020</year><month>04</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2020-09-11">2020</year><month>09</month><day>11</day></date-in-citation>
        <volume>580</volume>
        <issue>7805</issue>
        <issn>1476-4687</issn>
        <uri>https://www.nature.com/articles/s41586-020-2117-z</uri>
        <pub-id pub-id-type="doi">10.1038/s41586-020-2117-z</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-lyu_ultra-large_2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lyu</surname><given-names>Jiankun</given-names></name>
          <name><surname>Wang</surname><given-names>Sheng</given-names></name>
          <name><surname>Balius</surname><given-names>Trent E.</given-names></name>
          <name><surname>Singh</surname><given-names>Isha</given-names></name>
          <name><surname>Levit</surname><given-names>Anat</given-names></name>
          <name><surname>Moroz</surname><given-names>Yurii S.</given-names></name>
          <name><surname>OâMeara</surname><given-names>Matthew J.</given-names></name>
          <name><surname>Che</surname><given-names>Tao</given-names></name>
          <name><surname>Algaa</surname><given-names>Enkhjargal</given-names></name>
          <name><surname>Tolmachova</surname><given-names>Kateryna</given-names></name>
          <name><surname>Tolmachev</surname><given-names>Andrey A.</given-names></name>
          <name><surname>Shoichet</surname><given-names>Brian K.</given-names></name>
          <name><surname>Roth</surname><given-names>Bryan L.</given-names></name>
          <name><surname>Irwin</surname><given-names>John J.</given-names></name>
        </person-group>
        <article-title>Ultra-large library docking for discovering new chemotypes</article-title>
        <source>Nature</source>
        <year iso-8601-date="2019-02">2019</year><month>02</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2020-09-11">2020</year><month>09</month><day>11</day></date-in-citation>
        <volume>566</volume>
        <issue>7743</issue>
        <issn>1476-4687</issn>
        <uri>http://www.nature.com/articles/s41586-019-0917-9</uri>
        <pub-id pub-id-type="doi">10.1038/s41586-019-0917-9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-allen_dock_2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Allen</surname><given-names>William J.</given-names></name>
          <name><surname>Balius</surname><given-names>Trent E.</given-names></name>
          <name><surname>Mukherjee</surname><given-names>Sudipto</given-names></name>
          <name><surname>Brozell</surname><given-names>Scott R.</given-names></name>
          <name><surname>Moustakas</surname><given-names>Demetri T.</given-names></name>
          <name><surname>Lang</surname><given-names>P. Therese</given-names></name>
          <name><surname>Case</surname><given-names>David A.</given-names></name>
          <name><surname>Kuntz</surname><given-names>Irwin D.</given-names></name>
          <name><surname>Rizzo</surname><given-names>Robert C.</given-names></name>
        </person-group>
        <article-title>DOCK 6: Impact of new features and current docking performance</article-title>
        <source>Journal of Computational Chemistry</source>
        <year iso-8601-date="2015">2015</year>
        <date-in-citation content-type="access-date"><year iso-8601-date="2020-09-14">2020</year><month>09</month><day>14</day></date-in-citation>
        <volume>36</volume>
        <issue>15</issue>
        <issn>1096-987X</issn>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.23905</uri>
        <pub-id pub-id-type="doi">10.1002/jcc.23905</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-trott_autodock_2010">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Trott</surname><given-names>Oleg</given-names></name>
          <name><surname>Olson</surname><given-names>Arthur J.</given-names></name>
        </person-group>
        <article-title>AutoDock Vina: Improving the speed and accuracy of docking with a new scoring function, efficient optimization, and multithreading</article-title>
        <source>Journal of Computational Chemistry</source>
        <year iso-8601-date="2010">2010</year>
        <date-in-citation content-type="access-date"><year iso-8601-date="2020-09-14">2020</year><month>09</month><day>14</day></date-in-citation>
        <volume>31</volume>
        <issue>2</issue>
        <issn>1096-987X</issn>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.21334</uri>
        <pub-id pub-id-type="doi">10.1002/jcc.21334</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-moritz_ray_2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Moritz</surname><given-names>Philipp</given-names></name>
          <name><surname>Nishihara</surname><given-names>Robert</given-names></name>
          <name><surname>Wang</surname><given-names>Stephanie</given-names></name>
          <name><surname>Tumanov</surname><given-names>Alexey</given-names></name>
          <name><surname>Liaw</surname><given-names>Richard</given-names></name>
          <name><surname>Liang</surname><given-names>Eric</given-names></name>
          <name><surname>Elibol</surname><given-names>Melih</given-names></name>
          <name><surname>Yang</surname><given-names>Zongheng</given-names></name>
          <name><surname>Paul</surname><given-names>William</given-names></name>
          <name><surname>Jordan</surname><given-names>Michael I.</given-names></name>
          <name><surname>Stoica</surname><given-names>Ion</given-names></name>
        </person-group>
        <article-title>Ray: A Distributed Framework for Emerging AI Applications</article-title>
        <source>arXiv:1712.05889 [cs, stat]</source>
        <year iso-8601-date="2018-09">2018</year><month>09</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-03-24">2021</year><month>03</month><day>24</day></date-in-citation>
        <uri>http://arxiv.org/abs/1712.05889</uri>
      </element-citation>
    </ref>
    <ref id="ref-graff_accelerating_2021">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Graff</surname><given-names>David E.</given-names></name>
          <name><surname>Shakhnovich</surname><given-names>Eugene I.</given-names></name>
          <name><surname>Coley</surname><given-names>Connor W.</given-names></name>
        </person-group>
        <article-title>Accelerating high-throughput virtual screening through molecular pool-based active learning</article-title>
        <source>Chemical Science</source>
        <year iso-8601-date="2021-06">2021</year><month>06</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-06-16">2021</year><month>06</month><day>16</day></date-in-citation>
        <volume>12</volume>
        <issue>22</issue>
        <issn>2041-6539</issn>
        <uri>http://pubs.rsc.org/en/content/articlelanding/2021/sc/d0sc06805e</uri>
        <pub-id pub-id-type="doi">10.1039/D0SC06805E</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-alhossary_fast_2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Alhossary</surname><given-names>Amr</given-names></name>
          <name><surname>Handoko</surname><given-names>Stephanus Daniel</given-names></name>
          <name><surname>Mu</surname><given-names>Yuguang</given-names></name>
          <name><surname>Kwoh</surname><given-names>Chee-Keong</given-names></name>
        </person-group>
        <article-title>Fast, accurate, and reliable molecular docking with QuickVina 2</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2015-07">2015</year><month>07</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-08">2021</year><month>11</month><day>08</day></date-in-citation>
        <volume>31</volume>
        <issue>13</issue>
        <issn>1367-4803</issn>
        <uri>https://doi.org/10.1093/bioinformatics/btv082</uri>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv082</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-oboyle_open_2011">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>OâBoyle</surname><given-names>Noel M.</given-names></name>
          <name><surname>Banck</surname><given-names>Michael</given-names></name>
          <name><surname>James</surname><given-names>Craig A.</given-names></name>
          <name><surname>Morley</surname><given-names>Chris</given-names></name>
          <name><surname>Vandermeersch</surname><given-names>Tim</given-names></name>
          <name><surname>Hutchison</surname><given-names>Geoffrey R.</given-names></name>
        </person-group>
        <article-title>Open Babel: An open chemical toolbox</article-title>
        <source>Journal of Cheminformatics</source>
        <year iso-8601-date="2011-10">2011</year><month>10</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-08">2021</year><month>11</month><day>08</day></date-in-citation>
        <volume>3</volume>
        <issue>1</issue>
        <issn>1758-2946</issn>
        <uri>https://doi.org/10.1186/1758-2946-3-33</uri>
        <pub-id pub-id-type="doi">10.1186/1758-2946-3-33</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wang_d4_2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wang</surname><given-names>Sheng</given-names></name>
          <name><surname>Wacker</surname><given-names>Daniel</given-names></name>
          <name><surname>Levit</surname><given-names>Anat</given-names></name>
          <name><surname>Che</surname><given-names>Tao</given-names></name>
          <name><surname>Betz</surname><given-names>Robin M.</given-names></name>
          <name><surname>McCorvy</surname><given-names>John D.</given-names></name>
          <name><surname>Venkatakrishnan</surname><given-names>A. J.</given-names></name>
          <name><surname>Huang</surname><given-names>Xi-Ping</given-names></name>
          <name><surname>Dror</surname><given-names>Ron O.</given-names></name>
          <name><surname>Shoichet</surname><given-names>Brian K.</given-names></name>
          <name><surname>Roth</surname><given-names>Bryan L.</given-names></name>
        </person-group>
        <article-title>D4 dopamine receptor high-resolution structures enable the discovery of selective agonists</article-title>
        <source>Science</source>
        <year iso-8601-date="2017-10">2017</year><month>10</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-08">2021</year><month>11</month><day>08</day></date-in-citation>
        <volume>358</volume>
        <issue>6361</issue>
        <uri>http://www.science.org/doi/10.1126/science.aan5468</uri>
        <pub-id pub-id-type="doi">10.1126/science.aan5468</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>
