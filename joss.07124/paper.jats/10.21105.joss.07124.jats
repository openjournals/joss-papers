<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7124</article-id>
<article-id pub-id-type="doi">10.21105/joss.07124</article-id>
<title-group>
<article-title>kifmm-rs: A Kernel-Independent Fast Multipole Framework
in Rust</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9734-8318</contrib-id>
<name>
<surname>Kailasa</surname>
<given-names>Srinath</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Mathematics, University College London,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Engineering, University of Cambridge,
UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-01-22">
<day>22</day>
<month>1</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>110</issue>
<fpage>7124</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Rust</kwd>
<kwd>FMM</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>kifmm-rs</monospace> is an open-source framework for
  implementing Fast Multipole Methods (FMMs) in shared and distributed
  memory in three dimensions. FMMs accelerate the calculation of
  <inline-formula><alternatives>
  <tex-math><![CDATA[N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>N</mml:mi></mml:math></alternatives></inline-formula>-body
  potential evaluation problems that arise in computational science and
  engineering of the form,</p>
  <p><named-content id="eqU003AsecU003AsummaryU003Apotential" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[\phi(x_i) = \sum_{j=1}^N K(x_i, y_j) q(y_j)
      ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:munderover><mml:mo>∑</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:munderover><mml:mi>K</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>q</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></named-content></p>
  <p>where the potential <inline-formula><alternatives>
  <tex-math><![CDATA[\phi]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>ϕ</mml:mi></mml:math></alternatives></inline-formula>
  is evaluated at a set of target particles,
  <inline-formula><alternatives>
  <tex-math><![CDATA[\{x_i\}_{i=1}^M]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msubsup><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>M</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>,
  due to a set of densities, <inline-formula><alternatives>
  <tex-math><![CDATA[\{ q_j \}_{j=1}^N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>q</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:msubsup><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>
  collocated at a set of source particles <inline-formula><alternatives>
  <tex-math><![CDATA[\{y_j\}_{j=1}^N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:msubsup><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>N</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>.
  This evaluation can be interpreted as a matrix-vector
  multiplication,</p>
  <p><named-content id="eqU003AsecU003AsummaryU003Amatvec" content-type="equation"><disp-formula><tex-math><![CDATA[\symbfup{\phi} = \mathbf{K} \mathbf{q}
      ]]></tex-math></disp-formula></named-content></p>
  <p>where
  <inline-formula><tex-math><![CDATA[\symbfup{\phi}]]></tex-math></inline-formula>
  is an <inline-formula><alternatives>
  <tex-math><![CDATA[M]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>M</mml:mi></mml:math></alternatives></inline-formula>
  dimensional vector, <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{K}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>𝐊</mml:mi></mml:math></alternatives></inline-formula>
  is a dense <inline-formula><alternatives>
  <tex-math><![CDATA[M \times N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>M</mml:mi><mml:mo>×</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  matrix and <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{q}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>𝐪</mml:mi></mml:math></alternatives></inline-formula>
  is an <inline-formula><alternatives>
  <tex-math><![CDATA[N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>N</mml:mi></mml:math></alternatives></inline-formula>
  dimensional vector. As <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{K}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>𝐊</mml:mi></mml:math></alternatives></inline-formula>
  is dense, the naive evaluation of
  <xref alt="2" rid="eqU003AsecU003AsummaryU003Amatvec">2</xref> is of
  <inline-formula><alternatives>
  <tex-math><![CDATA[O(M \cdot N)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>M</mml:mi><mml:mo>⋅</mml:mo><mml:mi>N</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  complexity. FMMs provide a way of evaluating
  <xref alt="2" rid="eqU003AsecU003AsummaryU003Amatvec">2</xref> in
  <inline-formula><alternatives>
  <tex-math><![CDATA[O(P(M+N))]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>P</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>M</mml:mi><mml:mo>+</mml:mo><mml:mi>N</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[P]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>P</mml:mi></mml:math></alternatives></inline-formula>
  is a user defined parameter <inline-formula><alternatives>
  <tex-math><![CDATA[P \ll M, N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>P</mml:mi><mml:mo>≪</mml:mo><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  called the <italic>expansion order</italic>, for a range of
  interaction kernels <inline-formula><alternatives>
  <tex-math><![CDATA[K(\cdot)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>K</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>⋅</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  that commonly arise from elliptic partial differential equations
  (PDEs). The prototypical example for which the FMM was first presented
  is the Laplace kernel
  (<xref alt="Greengard &amp; Rokhlin, 1987" rid="ref-Greengard1987" ref-type="bibr">Greengard
  &amp; Rokhlin, 1987</xref>), which describes particles interacting
  electrostatically or gravitationally,</p>
  <p><named-content id="eqU003AsecU003AsummaryU003Alaplace_kernel" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[K(x, y) = \begin{cases}
      \frac{1}{2 \pi} \log(\frac{1}{\|x-y\|}),  \> \> \text{, 2D} \\
      \frac{1}{4 \pi \|x-y\|}, \> \> \text{, 3D}
      \end{cases}
  å    ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>K</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">{</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="left" style="text-align: left"><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>2</mml:mn><mml:mi>π</mml:mi></mml:mrow></mml:mfrac><mml:mo>log</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mo stretchy="false" form="postfix">∥</mml:mo><mml:mi>x</mml:mi><mml:mo>−</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false" form="postfix">∥</mml:mo></mml:mrow></mml:mfrac><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mspace width="0.222em"></mml:mspace><mml:mspace width="0.222em"></mml:mspace><mml:mtext mathvariant="normal">, 2D</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left" style="text-align: left"><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>4</mml:mn><mml:mi>π</mml:mi><mml:mo stretchy="false" form="postfix">∥</mml:mo><mml:mi>x</mml:mi><mml:mo>−</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false" form="postfix">∥</mml:mo></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mspace width="0.222em"></mml:mspace><mml:mspace width="0.222em"></mml:mspace><mml:mtext mathvariant="normal">, 3D</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mi>å</mml:mi></mml:mrow></mml:math></alternatives></disp-formula></named-content></p>
  <p>Since their initial introduction, FMMs have been developed for a
  wide variety of kernel functions such as the Helmholtz kernel that
  arises from the time-independent wave equation
  (<xref alt="Rokhlin, 1993" rid="ref-rokhlin1993diagonal" ref-type="bibr">Rokhlin,
  1993</xref>),</p>
  <p><named-content id="eqU003AsecU003AsummaryU003Ahelmholtz_kernel" content-type="equation"><disp-formula><alternatives>
  <tex-math><![CDATA[K(x, y) = \begin{cases}
        \frac{i}{4} H_0^{(1)}(k |\mathbf{x-y}|)  \text{, 2D}\\
          \frac{e^{ik |\mathbf{x-y}|}}{4\pi |\mathbf{x-y}|}  \text{, 3D}
    \end{cases}
    ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>K</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">{</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="left" style="text-align: left"><mml:mfrac><mml:mi>i</mml:mi><mml:mn>4</mml:mn></mml:mfrac><mml:msubsup><mml:mi>H</mml:mi><mml:mn>0</mml:mn><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:msubsup><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>k</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mrow><mml:mi>𝐱</mml:mi><mml:mo mathvariant="bold">−</mml:mo><mml:mi>𝐲</mml:mi></mml:mrow><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mtext mathvariant="normal">, 2D</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left" style="text-align: left"><mml:mfrac><mml:msup><mml:mi>e</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mrow><mml:mi>𝐱</mml:mi><mml:mo mathvariant="bold">−</mml:mo><mml:mi>𝐲</mml:mi></mml:mrow><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow></mml:msup><mml:mrow><mml:mn>4</mml:mn><mml:mi>π</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mrow><mml:mi>𝐱</mml:mi><mml:mo mathvariant="bold">−</mml:mo><mml:mi>𝐲</mml:mi></mml:mrow><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mtext mathvariant="normal">, 3D</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></named-content></p>
  <p>as well as the Stokes kernel describing fluid flow
  (<xref alt="Tornberg &amp; Greengard, 2008" rid="ref-tornberg2008fast" ref-type="bibr">Tornberg
  &amp; Greengard, 2008</xref>), and the Navier kernel used in
  elastostatics
  (<xref alt="Fu et al., 1998" rid="ref-fu1998fast" ref-type="bibr">Fu
  et al., 1998</xref>), among others. The major application of FMMs is
  found in the accelerated application of dense operator matrices that
  arise from the integral formulation of partial differential equations,
  and as a result FMM algorithms are a crucial component across
  simulations in many domains, from medical imaging to geophysics.</p>
  <p>FMMs accelerate the evaluation of
  <xref alt="2" rid="eqU003AsecU003AsummaryU003Amatvec">2</xref> by
  decomposing the problem domain using a hierarchical tree, a quadtree
  in 2D, and an octree in 3D, the algorithm consisting of a series of
  operations collectively referred to as <italic>field
  translations</italic>. Evaluations of the off-diagonal blocks of the
  matrix <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{K}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>𝐊</mml:mi></mml:math></alternatives></inline-formula>
  in <xref alt="2" rid="eqU003AsecU003AsummaryU003Amatvec">2</xref>
  correspond to the `multipole to local’ or M2L field translation that
  summarise the long-range interactions of a local cluster of target
  points, and the evaluation of the diagonal blocks correspond to
  unavoidable direct evaluations of the kernel function for evaluating
  near-range interactions. M2L is the most challenging optimisation
  bottleneck in FMMs due to its memory-bound nature.</p>
  <p>Many parts of an implementation are common across FMM algorithms,
  such as the tree setup and the kernel function implementation. As a
  result, our framework is presented as a set of modular, re-usable,
  sub-components of each of the key algorithmic sub-components: (i) the
  tree in shared and distributed memory, (ii) the field translation
  operations, and (iii) the kernel evaluation. We use our framework to
  develop an implementation of the so-called kernel independent Fast
  Multiple Method (kiFMM)
  (<xref alt="Ying et al., 2004" rid="ref-Ying2004" ref-type="bibr">Ying
  et al., 2004</xref>), compatible with a wide variety of elliptic PDE
  kernels with an implementation for the Laplace and Helmholtz kernels
  provided currently. The kiFMM has favourable implementation properties
  due to its formulation in terms of high operational-intensity BLAS
  operations.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Other notable software efforts for the FMM include PVFMM
  (<xref alt="Malhotra &amp; Biros, 2015" rid="ref-Malhotra2015" ref-type="bibr">Malhotra
  &amp; Biros, 2015</xref>), ExaFMM
  (<xref alt="Wang et al., 2021" rid="ref-wang2021exafmm" ref-type="bibr">Wang
  et al., 2021</xref>), ScalFMM
  (<xref alt="Blanchard et al., 2015" rid="ref-blanchard2015scalfmm" ref-type="bibr">Blanchard
  et al., 2015</xref>), and TBFMM
  (<xref alt="Bramas, 2020" rid="ref-bramas2020tbfmm" ref-type="bibr">Bramas,
  2020</xref>). PVFMM, ScalFMM, and TBFMM are fully distributed
  implementations of the black box FMM
  (<xref alt="Fong &amp; Darve, 2009" rid="ref-fong2009black" ref-type="bibr">Fong
  &amp; Darve, 2009</xref>) and kiFMM respectively. The latter two are
  notable for being distributed using a task-based runtime, with the
  former using a more traditional MPI-based approach. ExaFMM offers a
  shared-memory implementation of the kiFMM, with Python interfaces and
  a simple template-based design. A commonality of previous
  implementations is the coupling of algorithmic optimisation with
  implementation optimisation. For example, ExaFMM and PVFMM both offer
  field translations that are highly optimised for x86 architectures and
  lack ARM support, with ScalFMM and TBFMM being tailored to the runtime
  systems they are designed for.</p>
  <p>Our design is data oriented, with complex behaviour composed over
  simple linear data structures using Rust’s trait system. Traits offer
  a way of specifying behaviour defining contracts between types that
  are enforced by Rust’s compiler. This enables the exposure of
  performance critical sections in a manner that is easy to optimise in
  isolation. In contrast to previous software efforts, our design
  enables a decoupling of the underlying algorithmic implementation and
  the software optimisation. This has enabled the comparative analysis
  of the implementation of the critical M2L field translation
  (<xref alt="Kailasa et al., 2024" rid="ref-Kailasa2024" ref-type="bibr">Kailasa
  et al., 2024</xref>), and the future iterative refinement of field
  translations in response to algorithmic and hardware advances.</p>
  <p>Our principle contributions with <monospace>kifmm-rs</monospace>
  can therefore be summarised as:</p>
  <list list-type="bullet">
    <list-item>
      <p><italic>A modular data-oriented design</italic> that enables
      field translations to be implemented over simple linear data
      structures, allowing us to easily examine the impact of different
      algorithmic approaches and computational backends, such as BLAS
      libraries, for critical algorithmic sub-components.</p>
    </list-item>
    <list-item>
      <p><italic>Optimisations for ARM and x86 targets</italic>. ARM
      targets are increasingly common in high-performance computing
      systems, with portability enabled by Rust’s LLVM-based
      compiler.</p>
    </list-item>
    <list-item>
      <p><italic>Competitive shared and distributed memory
      performance</italic>. With state of the art M2L performance
      (<xref alt="Kailasa et al., 2024" rid="ref-Kailasa2024" ref-type="bibr">Kailasa
      et al., 2024</xref>), as well as a communication-optimal
      distributed memory implementation inspired by
      (<xref alt="Ibeid et al., 2016" rid="ref-Ibeid2016" ref-type="bibr">Ibeid
      et al., 2016</xref>).</p>
    </list-item>
    <list-item>
      <p><italic>A C API</italic>, using Rust’s C ABI compatibility
      allowing for the construction of bindings into other languages,
      with full Python bindings for non-specialist users.</p>
    </list-item>
    <list-item>
      <p><italic>A moderate frequency Helmholtz FMM</italic>. Helmholtz
      FMMs are often presented for the low-frequency case Malhotra &amp;
      Biros
      (<xref alt="2015" rid="ref-Malhotra2015" ref-type="bibr">2015</xref>),
      due to the challenging data sizes involved. We present an
      extension of the kiFMM to the Helmholtz problem which has proven
      so far to be effective in single precision for relatively high
      wave numbers of up to <inline-formula><alternatives>
      <tex-math><![CDATA[kD \sim 100]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>k</mml:mi><mml:mi>D</mml:mi><mml:mo>∼</mml:mo><mml:mn>100</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
      where <inline-formula><alternatives>
      <tex-math><![CDATA[k]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>k</mml:mi></mml:math></alternatives></inline-formula>
      is the wave number and <inline-formula><alternatives>
      <tex-math><![CDATA[D]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>D</mml:mi></mml:math></alternatives></inline-formula>
      is the diameter of the problem domain.</p>
    </list-item>
  </list>
  <p><monospace>kifmm-rs</monospace> is currently a core library used as
  a part of the Bempp boundary element project
  (<xref alt="Betcke &amp; Scroggs, 2024" rid="ref-bempp_rs" ref-type="bibr">Betcke
  &amp; Scroggs, 2024</xref>). A full API description is available as a
  part of published
  <ext-link ext-link-type="uri" xlink:href="https://bempp.github.io/kifmm/kifmm/index.html">documentation</ext-link>.
  <ext-link ext-link-type="uri" xlink:href="https://github.com/bempp/kifmm/tree/main/kifmm/python/examples">Python</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/bempp/kifmm/tree/main/kifmm/examples">Rust</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/bempp/kifmm/tree/main/kifmm/c">C</ext-link>
  examples can be found in the repository.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Srinath Kailasa is supported by EPSRC Studentship 2417009</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-Ying2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ying</surname><given-names>Lexing</given-names></name>
        <name><surname>Biros</surname><given-names>George</given-names></name>
        <name><surname>Zorin</surname><given-names>Denis</given-names></name>
      </person-group>
      <article-title>A kernel-independent adaptive fast multipole algorithm in two and three dimensions</article-title>
      <source>Journal of Computational Physics</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2004">2004</year>
      <volume>196</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1016/j.jcp.2003.11.021</pub-id>
      <fpage>591</fpage>
      <lpage>626</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Malhotra2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Malhotra</surname><given-names>Dhairya</given-names></name>
        <name><surname>Biros</surname><given-names>George</given-names></name>
      </person-group>
      <article-title>PVFMM: A parallel kernel independent FMM for particle and volume potentials</article-title>
      <source>Communications in Computational Physics</source>
      <publisher-name>Cambridge University Press</publisher-name>
      <year iso-8601-date="2015">2015</year>
      <volume>18</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.4208/cicp.020215.150515sw</pub-id>
      <fpage>808</fpage>
      <lpage>830</lpage>
    </element-citation>
  </ref>
  <ref id="ref-wang2021exafmm">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wang</surname><given-names>Tingyu</given-names></name>
        <name><surname>Yokota</surname><given-names>Rio</given-names></name>
        <name><surname>Barba</surname><given-names>Lorena A</given-names></name>
      </person-group>
      <article-title>ExaFMM: A high-performance fast multipole method library with C++ and Python interfaces</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2021">2021</year>
      <volume>6</volume>
      <issue>61</issue>
      <pub-id pub-id-type="doi">10.21105/joss.03145</pub-id>
      <fpage>3145</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-fong2009black">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fong</surname><given-names>William</given-names></name>
        <name><surname>Darve</surname><given-names>Eric</given-names></name>
      </person-group>
      <article-title>The black-box fast multipole method</article-title>
      <source>Journal of Computational Physics</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2009">2009</year>
      <volume>228</volume>
      <issue>23</issue>
      <pub-id pub-id-type="doi">10.1016/j.jcp.2009.08.031</pub-id>
      <fpage>8712</fpage>
      <lpage>8725</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bramas2020tbfmm">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bramas</surname><given-names>Bérenger</given-names></name>
      </person-group>
      <article-title>TBFMM: A C++ generic and parallel fast multipole method library</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>56</issue>
      <pub-id pub-id-type="doi">10.21105/joss.02444</pub-id>
      <fpage>2444</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-blanchard2015scalfmm">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Blanchard</surname><given-names>Pierre</given-names></name>
        <name><surname>Bramas</surname><given-names>Bérenger</given-names></name>
        <name><surname>Coulaud</surname><given-names>Olivier</given-names></name>
        <name><surname>Darve</surname><given-names>Eric</given-names></name>
        <name><surname>Dupuy</surname><given-names>Laurent</given-names></name>
        <name><surname>Etcheverry</surname><given-names>Arnaud</given-names></name>
        <name><surname>Sylvand</surname><given-names>Guillaume</given-names></name>
      </person-group>
      <article-title>ScalFMM: A generic parallel fast multipole library</article-title>
      <source>SIAM conference on computational science and engineering (SIAM CSE 2015)</source>
      <year iso-8601-date="2015">2015</year>
    </element-citation>
  </ref>
  <ref id="ref-Ibeid2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ibeid</surname><given-names>Huda</given-names></name>
        <name><surname>Yokota</surname><given-names>Rio</given-names></name>
        <name><surname>Keyes</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>A performance model for the communication in fast multipole methods on high-performance computing platforms</article-title>
      <source>International Journal of High Performance Computing Applications</source>
      <year iso-8601-date="2016">2016</year>
      <volume>30</volume>
      <issue>4</issue>
      <uri>https://arxiv.org/abs/arXiv:1405.6362v1</uri>
      <pub-id pub-id-type="doi">10.1177/1094342016634819</pub-id>
      <fpage>423</fpage>
      <lpage>437</lpage>
    </element-citation>
  </ref>
  <ref id="ref-tornberg2008fast">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Tornberg</surname><given-names>Anna-Karin</given-names></name>
        <name><surname>Greengard</surname><given-names>Leslie</given-names></name>
      </person-group>
      <article-title>A fast multipole method for the three-dimensional Stokes equations</article-title>
      <source>Journal of Computational Physics</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2008">2008</year>
      <volume>227</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1016/j.jcp.2007.06.029</pub-id>
      <fpage>1613</fpage>
      <lpage>1619</lpage>
    </element-citation>
  </ref>
  <ref id="ref-fu1998fast">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Fu</surname><given-names>Yuhong</given-names></name>
        <name><surname>Klimkowski</surname><given-names>Kenneth J</given-names></name>
        <name><surname>Rodin</surname><given-names>Gregory J</given-names></name>
        <name><surname>Berger</surname><given-names>Emery</given-names></name>
        <name><surname>Browne</surname><given-names>James C</given-names></name>
        <name><surname>Singer</surname><given-names>Jürgen K</given-names></name>
        <name><surname>Van De Geijn</surname><given-names>Robert A</given-names></name>
        <name><surname>Vemaganti</surname><given-names>Kumar S</given-names></name>
      </person-group>
      <article-title>A fast solution method for three-dimensional many-particle problems of linear elasticity</article-title>
      <source>International Journal for Numerical Methods in Engineering</source>
      <publisher-name>Wiley Online Library</publisher-name>
      <year iso-8601-date="1998">1998</year>
      <volume>42</volume>
      <issue>7</issue>
      <pub-id pub-id-type="doi">10.1002/(SICI)1097-0207(19980815)42:7%3C1215::AID-NME406%3E3.0.CO;2-5</pub-id>
      <fpage>1215</fpage>
      <lpage>1229</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rokhlin1993diagonal">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rokhlin</surname><given-names>Vladimir</given-names></name>
      </person-group>
      <article-title>Diagonal forms of translation operators for the Helmholtz equation in three dimensions</article-title>
      <source>Applied and computational harmonic analysis</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="1993">1993</year>
      <volume>1</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.1006/acha.1993.1006</pub-id>
      <fpage>82</fpage>
      <lpage>93</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Greengard1987">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Greengard</surname><given-names>Leslie</given-names></name>
        <name><surname>Rokhlin</surname><given-names>Vladimir</given-names></name>
      </person-group>
      <article-title>A fast algorithm for particle simulations</article-title>
      <source>Journal of computational physics</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="1987">1987</year>
      <volume>73</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.1016/0021-9991(87)90140-9</pub-id>
      <fpage>325</fpage>
      <lpage>348</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kailasa2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kailasa</surname><given-names>Srinath</given-names></name>
        <name><surname>Betcke</surname><given-names>Timo</given-names></name>
        <name><surname>Kazdadi</surname><given-names>Sarah El</given-names></name>
      </person-group>
      <article-title>M2L translation operators for kernel independent fast multipole methods on modern architectures</article-title>
      <source>arXiv preprint arXiv:2408.07436</source>
      <year iso-8601-date="2024">2024</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.2408.07436</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-bempp_rs">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Betcke</surname><given-names>T.</given-names></name>
        <name><surname>Scroggs</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>Bempp-rs: Boundary element methods in Rust</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/bempp/bempp-rs</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
