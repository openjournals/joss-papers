<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4719</article-id>
<article-id pub-id-type="doi">10.21105/joss.04719</article-id>
<title-group>
<article-title>strucscan: A lightweight Python-based framework for
high-throughput material simulation</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Pietka</surname>
<given-names>Isabel</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Drautz</surname>
<given-names>Ralf</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Hammerschmidt</surname>
<given-names>Thomas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Interdisciplinary Centre for Advanced Materials Simulation
(ICAMS), Ruhr University Bochum, Bochum, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>7</volume>
<issue>79</issue>
<fpage>4719</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>material simulation</kwd>
<kwd>high-throughput</kwd>
<kwd>ab initio</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The development of new materials by computational materials science
  relies to a large degree on the prediction of material properties by
  simulation at different time and length scales. A common challenge at
  the atomic scale is the need for large numbers of calculations in
  order to sample, e.g., different chemical compositions, different
  crystal structures or different simulation settings. Typical examples
  of the required high-throughput calculations are (i) the sampling of
  the combinatorial space of structure and composition for determining
  the most stable structure of a mixture of chemical elements, (ii) the
  generation of a data set for constructing an interatomic interaction
  model or (iii) the generation of a data set for inferring properties
  by machine learning. Depending on the problem at hand, the number of
  required calculations may range from hundreds to millions.</p>
  <p>The Python-based framework strucscan provides a robust solution to
  handle such high-throughput calculations in an efficient way on
  compute clusters with a queueing system or on the local host. The
  simple and transparent workflow of strucscan loops over a specified
  list of crystal structures and chemical compositions and computes a
  specified list of properties for each combination. The property
  calculations are represented as a pipeline of successive,
  interdependent steps which can easily be adapted and extended. The
  data is stored in a human-readable data-tree with flat hierarchy.
  strucscan performs a series of scalable and easily extendable
  pre-processing and post-processing steps and compiles the results in
  Python dictionaries for further evaluation. Data provenance for
  research-data management and analytics is realized in terms of the
  data-tree structure that includes all input files.</p>
  <p>The present version of strucscan is tailored to the calculation of
  frequently needed material properties with widely used atomistic
  simulation codes on common scheduling systems. The implemented
  interfaces particularly support the VASP software package
  (<xref alt="Kresse &amp; Furthmüller, 1996a" rid="ref-Kresse-96" ref-type="bibr">Kresse
  &amp; Furthmüller, 1996a</xref>),
  (<xref alt="Kresse &amp; Furthmüller, 1996b" rid="ref-Kresse-96b" ref-type="bibr">Kresse
  &amp; Furthmüller, 1996b</xref>),
  (<xref alt="Kresse &amp; Joubert, 1999" rid="ref-Kresse-99" ref-type="bibr">Kresse
  &amp; Joubert, 1999</xref>) for density-functional theory (DFT)
  calculations on SunGridEngine
  (<xref alt="Gentzsch, 2001" rid="ref-sge" ref-type="bibr">Gentzsch,
  2001</xref>) and slurm
  (<xref alt="Jette et al., 2002" rid="ref-slurm" ref-type="bibr">Jette
  et al., 2002</xref>) scheduler systems. With the well-defined and
  documented interfaces, strucscan can be extended, with basic
  programming skills, with additional scheduling systems, simulation
  codes and material properties at the atomic scale as well as other
  simulation scales.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The need for high-throughput calculations in computational
  materials science have lead to the development of several workflow
  managers and high-throughput frameworks
  ((<xref alt="Ong et al., 2013" rid="ref-pymatgen" ref-type="bibr">Ong
  et al., 2013</xref>),
  (<xref alt="Hammerschmidt et al., 2013" rid="ref-strucscan" ref-type="bibr">Hammerschmidt
  et al., 2013</xref>),
  (<xref alt="Mathew et al., 2017" rid="ref-atomate" ref-type="bibr">Mathew
  et al., 2017</xref>),
  (<xref alt="Janssen et al., 2019" rid="ref-pyiron" ref-type="bibr">Janssen
  et al., 2019</xref>),
  (<xref alt="Huber et al., 2020" rid="ref-aiida" ref-type="bibr">Huber
  et al., 2020</xref>),
  (<xref alt="Gjerding et al., 2021" rid="ref-asr" ref-type="bibr">Gjerding
  et al., 2021</xref>)). These software packages offer numerous features
  but often require a rather complex infrastructure with, e.g., external
  workflow managers
  (<xref alt="Jain et al., 2015" rid="ref-FireWorks" ref-type="bibr">Jain
  et al., 2015</xref>) for interaction with compute clusters or SQL
  databases for storing results. Moreover, it is often not
  straightforward to extend these large software packages and to tailor
  them for particular needs. In many practical cases, the repetitive
  execution of the tasks does not benefit from a large toolbox of
  features, or from a predefined database concept, but rather needs a
  concise and transparent driver that can be customized to the
  particular high-throughput task and the specific data management
  solution. strucscan is a lightweight driver with focus on atomistic
  simulations and offers the following features:</p>
  <list list-type="bullet">
    <list-item>
      <p>Transparency: lean and lightweight Python code with transparent
      and robust handling of tasks and infrastructure</p>
    </list-item>
    <list-item>
      <p>Dependencies: no external workflow managers or database systems
      required, only NumPy and ASE
      (<xref alt="Larsen et al., 2017" rid="ref-ase" ref-type="bibr">Larsen
      et al., 2017</xref>)</p>
    </list-item>
    <list-item>
      <p>Customization: straight-forward extension to further tasks and
      interfaces (simulation codes, schedulers) with only low-level
      programming experience</p>
    </list-item>
    <list-item>
      <p>Pipelining: simple and transparent realization of task
      sequences and task dependencies</p>
    </list-item>
    <list-item>
      <p>Restarts: seamless restart capabilities due to coherent
      interlinking of workflow organisation and data-tree</p>
    </list-item>
    <list-item>
      <p>Post-processing: customizable post-processing within workflow
      with results stored in Python dictionaries for further
      post-processing</p>
    </list-item>
    <list-item>
      <p>Data provenance: human-readable data-tree with flat hierarchy
      and storage of all input files for metadata generation</p>
    </list-item>
  </list>
</sec>
<sec id="strucscan">
  <title>strucscan</title>
  <p>The strucscan framework is based on Python 3.6+ and requires the
  Atomic Simulation Environment
  (<xref alt="Larsen et al., 2017" rid="ref-ase" ref-type="bibr">Larsen
  et al., 2017</xref>) and NumPy. It is available from a git repository
  and can be installed from there or with pip. Detailed documentation
  and usage examples of strucscan are available on readthedocs.
  High-throughput calculations with strucscan can be started from the
  command line, from a Python shell or from a Juypter notebook as shown
  in the examples in the strucscan git repository. The present version
  is focused on high-throughput DFT calculations on computer clusters
  with SunGridEngine
  (<xref alt="Gentzsch, 2001" rid="ref-sge" ref-type="bibr">Gentzsch,
  2001</xref>) and slurm
  (<xref alt="Jette et al., 2002" rid="ref-slurm" ref-type="bibr">Jette
  et al., 2002</xref>) scheduler systems. Future extension to further
  simulation codes are planned.</p>
  <p>The basic workflow of strucscan is visualized in
  <xref alt="Figure 1" rid="figU003Aworkflow">Figure 1</xref> and
  includes the following steps:</p>
  <fig>
    <caption><p>Workflow of the strucscan framework: the process starts
    with creating a list of jobs by looping over structures and
    pipelining the properties. Any required dependencies will be
    resolved and inserted into the list of jobs. Depending on the status
    of the job, the job is monitored if running (or queued), files will
    be created if necessary, and errors will be handled automatically.
    If the job is finished successfully, data is collected and a simple
    post-processing is conducted.
    <styled-content id="figU003Aworkflow"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="media/workflow.pdf" xlink:title="" />
  </fig>
  <list list-type="order">
    <list-item>
      <p><italic>Input from user</italic></p>
    </list-item>
  </list>
  <p>The user specifies the materials simulation software and the usage
  of the scheduler system or localhost. The input information includes
  the chemical elements with the required parameter files, the structure
  files and the tasks to be performed. The currently implemented tasks
  are related to materials properties and include, e.g., the relaxation
  of the structure or the computation of the equilibrium lattice
  constant. The input can be organized in a YAML file format for
  starting strucscan from the command line or in a Python dictionary for
  starting strucscan from a python shell or a Jupyter Notebook.</p>
  <list list-type="order">
    <list-item>
      <label>2.</label>
      <p><italic>Initialization of workflow</italic></p>
    </list-item>
  </list>
  <p>Based on the input from the user, strucscan generates a list of all
  necessary calculations by looping over the list of given structures
  and the list of tasks. In the context of materials properties, a
  common task is the full relaxation of a crystal structure from an
  initial guess of the atomic positions and simulation cell to a
  configuration that takes a minimum total energy in a DFT calculation.
  This task is often followed by a second task where the total energy is
  computed with DFT for a series of volumes of the simulation cell
  around the equilibrium volume and a subsequent fit of this
  energy-volume data to obtain the minimum with high accuracy. For such
  interdependent tasks, strucscan uses a pipelining concept that
  converts the final structure of one task to the initial structure of a
  subsequent task. I.e. each structure is pipelined through the list of
  properties. The pipelines are also treated as tasks and can easily be
  modified by the user. In this way the user can operate with
  higher-level pipeline names and strucscan will automatically insert
  all required tasks along a pipeline. Continuing with the above
  example, strucscan provides a pipeline ‘EOS’ that collects the values
  of the equilibrium volume after fitting the energy-volume data after
  computing the energy-volume data after performing a full relaxation.
  The result of the workflow initialization is a list of all necessary
  calculations, ‘<italic>jobs</italic>’, that is directly reflected in
  the structure of the data-tree. A restart of strucscan with the same
  user input will find the existing data-tree and continue seamlessly
  after the last finished calculation.</p>
  <list list-type="order">
    <list-item>
      <label>3.</label>
      <p><italic>Execution of tasks</italic></p>
    </list-item>
  </list>
  <p>After the initialization, strucscan identifies the status of each
  job by checking if the expected folders exist in the data-tree, if it
  is waiting or running in the scheduler, if it is finished or if an
  error occurred. Depending on the status, strucscan will create the
  necessary input files, start the calculation or handle an error. This
  stage is repeated until the list of jobs is complete. In order to
  avoid uncontrolled restarts, a job is declared as finished if error
  handling has been attempted unsuccessfully for three times.</p>
  <list list-type="order">
    <list-item>
      <label>4.</label>
      <p><italic>Post-processing of results</italic></p>
    </list-item>
  </list>
  <p>At the end of each workflow cycle, strucscan starts post-processing
  of the calculation results.
  It will collect the central results from the data-tree and compile
  them in Python dictionaries in JSON format for further post-processing
  or for database upload. In the context of materials properties the
  post-processing by strucscan includes, e.g., the fitting of
  energy-volume data to an equation of state and the compilation of the
  resulting equilibrium volume, binding energy and bulk modulus in one
  JSON file for all given structures of a given chemical element or
  compound.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors acknowledge funding by the Deutsche
  Forschungsgemeinschaft (DFG) through project C1 of the collaborative
  research center SFB/TR 103 (DFG project number 190389738).</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Kresse-96">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kresse</surname><given-names>G.</given-names></name>
        <name><surname>Furthmüller</surname><given-names>J.</given-names></name>
      </person-group>
      <article-title>Efficiency of ab-initio total energy calculations for metals and semiconductors using a plane-wave basis set</article-title>
      <source>Computational Materials Science</source>
      <year iso-8601-date="1996">1996</year>
      <volume>6</volume>
      <pub-id pub-id-type="doi">10.1016/0927-0256(96)00008-0</pub-id>
      <fpage>15 </fpage>
      <lpage> 50</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kresse-99">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kresse</surname><given-names>G.</given-names></name>
        <name><surname>Joubert</surname><given-names>D.</given-names></name>
      </person-group>
      <article-title>From ultrasoft pseudopotentials to the projector augmented-wave method</article-title>
      <source>Physical Review B</source>
      <year iso-8601-date="1999">1999</year>
      <volume>59</volume>
      <pub-id pub-id-type="doi">10.1103/PhysRevB.59.1758</pub-id>
      <fpage>1758</fpage>
      <lpage>1775</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Kresse-96b">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kresse</surname><given-names>G.</given-names></name>
        <name><surname>Furthmüller</surname><given-names>J.</given-names></name>
      </person-group>
      <article-title>Efficient iterative schemes for ab initio total-energy calculations using a plane-wave basis set</article-title>
      <source>Physical Review B</source>
      <year iso-8601-date="1996">1996</year>
      <volume>54</volume>
      <pub-id pub-id-type="doi">10.1103/physrevb.54.11169</pub-id>
      <fpage>11169</fpage>
      <lpage>11186</lpage>
    </element-citation>
  </ref>
  <ref id="ref-asr">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gjerding</surname><given-names>Morten</given-names></name>
        <name><surname>Skovhus</surname><given-names>Thorbjørn</given-names></name>
        <name><surname>Rasmussen</surname><given-names>Asbjørn</given-names></name>
        <name><surname>Bertoldo</surname><given-names>Fabian</given-names></name>
        <name><surname>Larsen</surname><given-names>Ask Hjorth</given-names></name>
        <name><surname>Mortensen</surname><given-names>Jens Jørgen</given-names></name>
        <name><surname>Thygesen</surname><given-names>Kristian Sommer</given-names></name>
      </person-group>
      <article-title>Atomic simulation recipes: A python framework and library for automated workflows</article-title>
      <source>Computational Materials Science</source>
      <year iso-8601-date="2021">2021</year>
      <volume>199</volume>
      <pub-id pub-id-type="doi">10.1016/j.commatsci.2021.110731</pub-id>
      <fpage>110731</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pyiron">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Janssen</surname><given-names>Jan</given-names></name>
        <name><surname>Surendralal</surname><given-names>Sudarsan</given-names></name>
        <name><surname>Lysogorskiy</surname><given-names>Yury</given-names></name>
        <name><surname>Todorova</surname><given-names>Mira</given-names></name>
        <name><surname>Hickel</surname><given-names>Tilmann</given-names></name>
        <name><surname>Drautz</surname><given-names>Ralf</given-names></name>
        <name><surname>Neugebauer</surname><given-names>Jörg</given-names></name>
      </person-group>
      <article-title>Pyiron: An integrated development environment for computational materials science</article-title>
      <source>Computational Materials Science</source>
      <year iso-8601-date="2019">2019</year>
      <volume>163</volume>
      <pub-id pub-id-type="doi">10.1016/j.commatsci.2018.07.043</pub-id>
      <fpage>24</fpage>
      <lpage>36</lpage>
    </element-citation>
  </ref>
  <ref id="ref-atomate">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mathew</surname><given-names>Kiran</given-names></name>
        <name><surname>Montoya</surname><given-names>Joseph H.</given-names></name>
        <name><surname>Faghaninia</surname><given-names>Alireza</given-names></name>
        <name><surname>Dwarakanath</surname><given-names>Shyam</given-names></name>
        <name><surname>Aykol</surname><given-names>Muratahan</given-names></name>
        <name><surname>Tang</surname><given-names>Hanmei</given-names></name>
        <name><surname>Chu</surname><given-names>Iek-heng</given-names></name>
        <name><surname>Smidt</surname><given-names>Tess</given-names></name>
        <name><surname>Bocklund</surname><given-names>Brandon</given-names></name>
        <name><surname>Horton</surname><given-names>Matthew</given-names></name>
        <name><surname>Dagdelen</surname><given-names>John</given-names></name>
        <name><surname>Wood</surname><given-names>Brandon</given-names></name>
        <name><surname>Liu</surname><given-names>Zi-Kui</given-names></name>
        <name><surname>Neaton</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Ong</surname><given-names>Shyue Ping</given-names></name>
        <name><surname>Persson</surname><given-names>Kristin</given-names></name>
        <name><surname>Jain</surname><given-names>Anubhav</given-names></name>
      </person-group>
      <article-title>Atomate: A high-level interface to generate, execute, and analyze computational materials science workflows</article-title>
      <source>Computational Materials Science</source>
      <year iso-8601-date="2017">2017</year>
      <volume>139</volume>
      <pub-id pub-id-type="doi">10.1016/j.commatsci.2017.07.030</pub-id>
      <fpage>140</fpage>
      <lpage>152</lpage>
    </element-citation>
  </ref>
  <ref id="ref-FireWorks">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jain</surname><given-names>Anubhav</given-names></name>
        <name><surname>Ong</surname><given-names>Shyue Ping</given-names></name>
        <name><surname>Chen</surname><given-names>Wei</given-names></name>
        <name><surname>Medasani</surname><given-names>Bharat</given-names></name>
        <name><surname>Qu</surname><given-names>Xiaohui</given-names></name>
        <name><surname>Kocher</surname><given-names>Michael</given-names></name>
        <name><surname>Brafman</surname><given-names>Miriam</given-names></name>
        <name><surname>Petretto</surname><given-names>Guido</given-names></name>
        <name><surname>Rignanese</surname><given-names>Gian-Marco</given-names></name>
        <name><surname>Hautier</surname><given-names>Geoffroy</given-names></name>
        <name><surname>Gunter</surname><given-names>Daniel</given-names></name>
        <name><surname>Persson</surname><given-names>Kristin A.</given-names></name>
      </person-group>
      <article-title>FireWorks: A dynamic workflow system designed for high-throughput applications</article-title>
      <source>Concurrency and Computation: Practice and Experience</source>
      <year iso-8601-date="2015">2015</year>
      <volume>27</volume>
      <pub-id pub-id-type="doi">10.1002/cpe.3505</pub-id>
      <fpage>5037</fpage>
      <lpage>5059</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sge">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gentzsch</surname><given-names>W.</given-names></name>
      </person-group>
      <article-title>Sun grid engine: Towards creating a compute power grid</article-title>
      <publisher-name>IEEE Computer Society</publisher-name>
      <publisher-loc>Los Alamitos, CA, USA</publisher-loc>
      <year iso-8601-date="2001-05">2001</year><month>05</month>
      <volume></volume>
      <uri>https://doi.ieeecomputersociety.org/10.1109/CCGRID.2001.923173</uri>
      <pub-id pub-id-type="doi">10.1109/CCGRID.2001.923173</pub-id>
      <fpage>35</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-slurm">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jette</surname><given-names>Morris A.</given-names></name>
        <name><surname>Yoo</surname><given-names>Andy B.</given-names></name>
        <name><surname>Grondona</surname><given-names>Mark</given-names></name>
      </person-group>
      <article-title>SLURM: Simple linux utility for resource management</article-title>
      <publisher-name>Springer-Verlag</publisher-name>
      <year iso-8601-date="2002">2002</year>
      <pub-id pub-id-type="doi">10.1007/10968987_3</pub-id>
      <fpage>44</fpage>
      <lpage>60</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ase">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Larsen</surname><given-names>Ask Hjorth</given-names></name>
        <name><surname>Mortensen</surname><given-names>Jens Jørgen</given-names></name>
        <name><surname>Blomqvist</surname><given-names>Jakob</given-names></name>
        <name><surname>Castelli</surname><given-names>Ivano E</given-names></name>
        <name><surname>Christensen</surname><given-names>Rune</given-names></name>
        <name><surname>Dułak</surname><given-names>Marcin</given-names></name>
        <name><surname>Friis</surname><given-names>Jesper</given-names></name>
        <name><surname>Groves</surname><given-names>Michael N</given-names></name>
        <name><surname>Hammer</surname><given-names>Bjørk</given-names></name>
        <name><surname>Hargus</surname><given-names>Cory</given-names></name>
        <name><surname>Hermes</surname><given-names>Eric D</given-names></name>
        <name><surname>Jennings</surname><given-names>Paul C</given-names></name>
        <name><surname>Jensen</surname><given-names>Peter Bjerre</given-names></name>
        <name><surname>Kermode</surname><given-names>James</given-names></name>
        <name><surname>Kitchin</surname><given-names>John R</given-names></name>
        <name><surname>Kolsbjerg</surname><given-names>Esben Leonhard</given-names></name>
        <name><surname>Kubal</surname><given-names>Joseph</given-names></name>
        <name><surname>Kaasbjerg</surname><given-names>Kristen</given-names></name>
        <name><surname>Lysgaard</surname><given-names>Steen</given-names></name>
        <name><surname>Maronsson</surname><given-names>Jón Bergmann</given-names></name>
        <name><surname>Maxson</surname><given-names>Tristan</given-names></name>
        <name><surname>Olsen</surname><given-names>Thomas</given-names></name>
        <name><surname>Pastewka</surname><given-names>Lars</given-names></name>
        <name><surname>Peterson</surname><given-names>Andrew</given-names></name>
        <name><surname>Rostgaard</surname><given-names>Carsten</given-names></name>
        <name><surname>Schiøtz</surname><given-names>Jakob</given-names></name>
        <name><surname>Schütt</surname><given-names>Ole</given-names></name>
        <name><surname>Strange</surname><given-names>Mikkel</given-names></name>
        <name><surname>Thygesen</surname><given-names>Kristian S</given-names></name>
        <name><surname>Vegge</surname><given-names>Tejs</given-names></name>
        <name><surname>Vilhelmsen</surname><given-names>Lasse</given-names></name>
        <name><surname>Walter</surname><given-names>Michael</given-names></name>
        <name><surname>Zeng</surname><given-names>Zhenhua</given-names></name>
        <name><surname>Jacobsen</surname><given-names>Karsten W</given-names></name>
      </person-group>
      <article-title>The atomic simulation environmenta python library for working with atoms</article-title>
      <source>Journal of Physics: Condensed Matter</source>
      <year iso-8601-date="2017">2017</year>
      <volume>29</volume>
      <pub-id pub-id-type="doi">10.1088/1361-648x/aa680e</pub-id>
      <fpage>273002</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-strucscan">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hammerschmidt</surname><given-names>T</given-names></name>
        <name><surname>Bialon</surname><given-names>A F</given-names></name>
        <name><surname>Pettifor</surname><given-names>D G</given-names></name>
        <name><surname>Drautz</surname><given-names>R</given-names></name>
      </person-group>
      <article-title>Topologically close-packed phases in binary transition-metal compounds: Matching high-throughput ab initio calculations to an empirical structure map</article-title>
      <source>New Journal of Physics</source>
      <year iso-8601-date="2013">2013</year>
      <volume>15</volume>
      <pub-id pub-id-type="doi">10.1088/1367-2630/15/11/115016</pub-id>
      <fpage>115016</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-aiida">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Huber</surname><given-names>S P</given-names></name>
        <name><surname>Zoupanos</surname><given-names>S</given-names></name>
        <name><surname>al</surname><given-names>M Uhrin et</given-names></name>
      </person-group>
      <article-title>AiiDA 1.0, a scalable computational infrastructure for automated reproducible workflows and data provenance</article-title>
      <source>Scientific Data</source>
      <year iso-8601-date="2020">2020</year>
      <volume>7</volume>
      <issue>300</issue>
      <pub-id pub-id-type="doi">10.1038/s41597-020-00638-4</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pymatgen">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ong</surname><given-names>Shyue Ping</given-names></name>
        <name><surname>Richards</surname><given-names>William Davidson</given-names></name>
        <name><surname>Jain</surname><given-names>Anubhav</given-names></name>
        <name><surname>Hautier</surname><given-names>Geoffroy</given-names></name>
        <name><surname>Kocher</surname><given-names>Michael</given-names></name>
        <name><surname>Cholia</surname><given-names>Shreyas</given-names></name>
        <name><surname>Gunter</surname><given-names>Dan</given-names></name>
        <name><surname>Chevrier</surname><given-names>Vincent L.</given-names></name>
        <name><surname>Persson</surname><given-names>Kristin A.</given-names></name>
        <name><surname>Ceder</surname><given-names>Gerbrand</given-names></name>
      </person-group>
      <article-title>Python materials genomics (pymatgen): A robust, open-source python library for materials analysis</article-title>
      <source>Computational Materials Science</source>
      <year iso-8601-date="2013">2013</year>
      <volume>68</volume>
      <pub-id pub-id-type="doi">10.1016/j.commatsci.2012.10.028</pub-id>
      <fpage>314</fpage>
      <lpage>319</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
