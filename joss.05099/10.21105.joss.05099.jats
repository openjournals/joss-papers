<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5099</article-id>
<article-id pub-id-type="doi">10.21105/joss.05099</article-id>
<title-group>
<article-title>ProgPy: Python Packages for Prognostics and Health
Management of Engineering Systems</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6788-4507</contrib-id>
<name>
<surname>Teubert</surname>
<given-names>Christopher</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Jarvis</surname>
<given-names>Katelyn</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7169-1051</contrib-id>
<name>
<surname>Corbetta</surname>
<given-names>Matteo</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Kulkarni</surname>
<given-names>Chetan</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Daigle</surname>
<given-names>Matthew</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>NASA Ames Research Center, United States</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>KBR, Inc.</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-12-12">
<day>12</day>
<month>12</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>87</issue>
<fpage>5099</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>Prognostics</kwd>
<kwd>Health Management</kwd>
<kwd>Degradation Simulation</kwd>
<kwd>Diagnostics</kwd>
<kwd>State Estimation</kwd>
<kwd>Prediction</kwd>
<kwd>CBM+</kwd>
<kwd>IVHM</kwd>
<kwd>PHM</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Prognostics of engineering systems or systems of systems is the
  prediction of future performance and/or the time at which one or more
  events of interest occur. Prognostics can be applied in a variety of
  applications, from spacecraft and aircraft to wind turbines, oil and
  gas infrastructure, and assembly lines. Prognostic results are used to
  inform action to extend life or prevent failures through changes in
  use or predictive maintenance.</p>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://nasa.github.io/progpy/">NASA
  Prognostics Python Packages (ProgPy)</ext-link>
  (<xref alt="Teubert et al., 2022" rid="ref-2022_nasa_progpy" ref-type="bibr">Teubert
  et al., 2022</xref>) are a set of open-sourced Python packages
  supporting research and development of prognostics and health
  management for engineering systems, as described in
  (<xref alt="Goebel et al., 2017" rid="ref-goebel2017prognostics" ref-type="bibr">Goebel
  et al., 2017</xref>). ProgPy builds upon the architecture of the
  Matlab Prognostics Libraries
  (<xref alt="Daigle, 2016c" rid="ref-2016_nasa_prog_model_library" ref-type="bibr">Daigle,
  2016c</xref>,
  <xref alt="2016a" rid="ref-2016_nasa_prog_algs_library" ref-type="bibr">2016a</xref>,
  <xref alt="2016b" rid="ref-2016_nasa_prog_metrics_library" ref-type="bibr">2016b</xref>),
  Generic Software Architecture for Prognostics
  (<xref alt="Teubert et al., 2017" rid="ref-teubert2017generic" ref-type="bibr">Teubert
  et al., 2017</xref>), and Prognostics As-A-Service
  (<xref alt="Watkins et al., 2019" rid="ref-watkins2019prognostics" ref-type="bibr">Watkins
  et al., 2019</xref>). ProgPy implements architectures and common
  functionalities of prognostics, supporting both researchers and
  practitioners.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Prognostics and Health Management (PHM) is a fast-growing field.
  Successful PHM application can reduce operational costs and prevent
  failure, making systems safer. There has been limited application of
  prognostics in practice. This is partially because prognostics is a
  multi-faceted and complex problem, including data availability, sensor
  design and placement, and, of interest to us, software.</p>
  <p>Often, software is written for an ad-hoc single prognostic
  application and cannot be transferred to others, or is limited in
  scope. A few related packages are described here. Simantha is a
  discrete manufacturing system simulation package that simulates
  degradation, but it is limited to a Discrete-Time Markov Chain and
  doesn’t include prognostic capabilities
  (<xref alt="Dadfarnia &amp; Drozdov, 2013" rid="ref-Simantha" ref-type="bibr">Dadfarnia
  &amp; Drozdov, 2013</xref>). Lifelines is a survival analysis tool
  that can be used for reliability analysis to establish fixed-interval
  maintenance schedules, a different problem than that solved by ProgPy
  (<xref alt="Davidson-Pilon, 2022" rid="ref-davidson_pilon_cameron_2022_7329096" ref-type="bibr">Davidson-Pilon,
  2022</xref>). Pomegranate is a Python probabilistic modeling package
  effective for data science applications
  (<xref alt="Schreiber, 2017" rid="ref-schreiber2017pomegranate" ref-type="bibr">Schreiber,
  2017</xref>). However, Pomegranate does not include explicit state
  estimation capabilities, prognostics tools, or physics-based
  degradation modeling features. Finally, there are a number of general
  machine-learning packages such as TensorFlow, scikit learn, and
  PyTorch. These are general tools that can be used for diagnostics and
  prognostics, but are not designed specifically for that
  application.</p>
  <p>There is a need for a foundational set of efficient tools to enable
  new PHM technologies.</p>
  <p>ProgPy provides a set of support packages for individuals
  researching and developing prognostic technologies. ProgPy consists of
  three packages: <monospace>prog_models</monospace>,
  <monospace>prog_algs</monospace>, and
  <monospace>prog_server</monospace>. <monospace>prog_models</monospace>
  provides tools aiding the development, evaluation, simulation, and
  tuning of prognostic models, whether physics-based or data-driven.
  <monospace>prog_models</monospace> also supports downloading select
  relevant datasets
  (<xref alt="Bole et al., 2014" rid="ref-Dataset_RWBattery" ref-type="bibr">Bole
  et al., 2014</xref>;
  <xref alt="Saxena &amp; Goebel, 2008" rid="ref-Dataset_CMAPPS" ref-type="bibr">Saxena
  &amp; Goebel, 2008</xref>). <monospace>prog_algs</monospace> supports
  uncertainty representation, state estimation, prognostics, the
  evaluation and visualization of prognostic results, and the creation
  of new prognostic algorithms. <monospace>prog_server</monospace> is a
  Service-Oriented Architecture for prognostics and state estimation.
  prog_server is also distributed with a Python client,
  <monospace>prog_client</monospace>.</p>
  <p>The following sections describe some ways ProgPy could be used.
  There are many features and use cases beyond those illustrated here.
  See the
  <ext-link ext-link-type="uri" xlink:href="https://nasa.github.io/progpy/">ProgPy
  documentation</ext-link> for more information.</p>
</sec>
<sec id="selected-use-case-building-and-simulating-models">
  <title>Selected use case: building and simulating models</title>
  <p>One of the primary use-cases of ProgPy is building new models.
  Prognostic models are created by subclassing the
  <monospace>PrognosticsModel</monospace> class. Users can copy the
  model template as a starting point, replacing the representative
  member functions with model logic.</p>
  <p>Prognostic models have inputs (load/control applied to a system),
  internal states, outputs (measurable quantities), and events of
  interest (what we’re predicting). Logic of a prognostic model is
  defined using the state transition (<monospace>dx</monospace> or
  <monospace>next_state</monospace>), <monospace>output</monospace>,
  <monospace>event_state</monospace>, and
  <monospace>threshold_met</monospace> functions.</p>
  <p>In the below example, a user creates a physics-based model of a
  Lithium-ion battery. In this model (see
  <ext-link ext-link-type="uri" xlink:href="https://github.com/nasa/prog_models/blob/ac7cf016996ac707a6588f41ac54ff747816552a/src/prog_models/models/battery_electrochem.py#L161">here</ext-link>),
  state transition equations (i.e., internal states) relate the voltage
  discharge from the battery (i.e., the output) given an applied current
  (i.e., the input).</p>
  <code language="python">class Battery(PrognosticsModel):
    inputs = [
    ‘i’ # current applied to battery 
    ] 
    states = [ 
        # internal battery model states, e.g., temperature, surface potentials
        # nasa.github.io/progpy/api_ref/prog_models/IncludedModels.html
        ‘x_1’, # State 1
        ‘x_2’,  # State 2 
              …  
        ]
    outputs = [
        ‘t’, # Battery temperature
        ‘v’  # Voltage supplied by battery
    ]
    events = [
       'EOD' # battery end-of-discharge 
    ]

    # Default parameters. Overwritten by passing parameters into constructor
    default_parameters = {
       'x0':{  # Initial State
        },
       'param1':p_1, 
        …. 
        # Include parameters to define battery model
        # nasa.github.io/progpy/api_ref/prog_models/IncludedModels.html
    }
    
    def dx(self, x, u):
        # calculate derivative of the battery state
        return self.StateContainer({})  # Return state container with derivative 

    def output(self, x):
        # From the state, calculate temperature and voltage 
        return self.OutputContainer({'t': x['t'], 'v': x['v']})

    def event_state(self, x): 
        # From current state, calculate progress towards EOD
        return {
         'EOD': v_now – v_threshold 
         # EOD occurs when voltage drops below threshold 
        }</code>
  <p>The resulting model can then be used in simulation:</p>
  <code language="python">m = Battery()
def future_load(t, x=None):  # system loading
    return m.InputContainer({‘i’:1})  # Constant 1 amp applied

simulated_results = m.simulate_to_threshold(future_load, dt=0.005)

print(f'EOD was reached in {round(simulated_results.times[-1],2)}seconds') </code>
  <p>ProgPy also includes data-driven models such as the LSTM State
  Transition and Dynamic Mode Decomposition models. These are trained
  using data and then used for simulation or prognostics, as above.</p>
</sec>
<sec id="selected-use-case-prognostics-of-battery-discharge-cycle">
  <title>Selected use case: prognostics of battery discharge
  cycle</title>
  <p>Models can be used for prognostics with
  <monospace>prog_algs</monospace>. Prognostics is often split into two
  steps: state estimation and prediction. In state estimation, the
  system state is estimated, with uncertainty, using the prior state
  estimate and sensor data. In prediction, the state estimate is
  predicted forward.</p>
  <p>This example illustrates predicting the battery discharge. Here
  data is retrieved from some unspecified source
  (<monospace>data_source</monospace>). This can be a data stream,
  playback file, or any other source. This is similar to the
  <monospace>sim_battery_eol</monospace> example (see
  <ext-link ext-link-type="uri" xlink:href="https://github.com/nasa/prog_models/blob/master/examples/">here</ext-link>).</p>
  <code language="python">batt = Battery()
x0 = batt.initialize()
# Create Particle Filter State Estimator
state_estimator = state_estimators.ParticleFilter(batt, x0)
# Create Monte Carlo Predictor
predictor = predictors.MonteCarlo(batt)

# Future loading as function of time (t) and state (x)
# In this case- constant load
def future_loading(t, x=None):
    return batt.InputContainer({'i':2.35})

while RUNNING:
    u, z = data_source.get_data()
    # Estimate state using loading (u) and output measurements (z)
    state_estimator.estimate(t, u, z)  
    eod = batt.event_state(filt.x.mean)['EOD']
    print(f&quot;  - State of charge (mean): {eod}&quot;)
    # Only predict every PREDICTION_UPDATE_FREQ steps
    if (step%PREDICTION_UPDATE_FREQ==0):
        mc_results = mc.predict(filt.x, future_loading, t0 = t, dt=TIME_STEP)
        metrics = mc_results.time_of_event.metrics()
        eod_mean = metrics['EOD']['mean']
        eod_std = metrics['EOD']['std']))
        print(f'  - Predicted end of discharge: {eod_mean} (sigma: {eod_std})')</code>
</sec>
<sec id="nasa-use-cases">
  <title>NASA use cases</title>
  <p>ProgPy has been used in various NASA projects. Two are described
  below.</p>
  <sec id="data-and-reasoning-fabric">
    <title>Data and Reasoning Fabric</title>
    <p>ProgPy functionality predicting battery degradation was
    implemented to assess the Li-ion batteries state of charge during
    unmanned aerial vehicle (UAV) flight. Based on planned trajectories,
    ProgPy provided UAV operators with statistics on expected battery
    health during flight and helped to ensure safety in the national
    airspace
    (<xref alt="Jarvis et al., 2022" rid="ref-jarvis2022enabling" ref-type="bibr">Jarvis
    et al., 2022</xref>).</p>
  </sec>
  <sec id="autonomous-spacecraft-operations">
    <title>Autonomous Spacecraft Operations</title>
    <p>ProgPy was used to create models predicting the ISS life support
    system degradation informing maintenance. Researchers evaluated the
    performance of multiple potential models with data from the system
    and ProgPy metrics and visualization. Researchers updated models
    based on performance results. The selected model will be integrated
    with ProgPy state estimation and prediction into a prognostic
    application for crew or ground support.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>ProgPy is supported by NASA’s Autonomous Spacecraft Operations,
  Data and Reasoning Fabric, System-Wide Safety, and Transformative
  Tools and Technologies projects. Additionally, development is
  supported by Northrop Grumman Corporation, Vanderbilt University, the
  German Aerospace Center (DLR), Research Institutes of Sweden and
  others.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-2022_nasa_progpy">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Teubert</surname><given-names>Christopher</given-names></name>
        <name><surname>Jarvis</surname><given-names>Katelyn</given-names></name>
        <name><surname>Corbetta</surname><given-names>Matteo</given-names></name>
        <name><surname>Kulkarni</surname><given-names>Chetan</given-names></name>
        <name><surname>Daigle</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>ProgPy packages</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://nasa.github.io/progpy</uri>
    </element-citation>
  </ref>
  <ref id="ref-goebel2017prognostics">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Goebel</surname><given-names>Kai</given-names></name>
        <name><surname>Daigle</surname><given-names>Matthew John</given-names></name>
        <name><surname>Saxena</surname><given-names>Abhinav</given-names></name>
        <name><surname>Roychoudhury</surname><given-names>Indranil</given-names></name>
        <name><surname>Sankararaman</surname><given-names>Shankar</given-names></name>
        <name><surname>Celaya</surname><given-names>Jose</given-names></name>
      </person-group>
      <source>Prognostics: The science of making predictions</source>
      <publisher-name>Createspace Independent Pub</publisher-name>
      <year iso-8601-date="2017">2017</year>
    </element-citation>
  </ref>
  <ref id="ref-teubert2017generic">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Teubert</surname><given-names>Christopher</given-names></name>
        <name><surname>Daigle</surname><given-names>Matthew J</given-names></name>
        <name><surname>Sankararaman</surname><given-names>Shankar</given-names></name>
        <name><surname>Goebel</surname><given-names>Kai</given-names></name>
        <name><surname>Watkins</surname><given-names>Jason</given-names></name>
      </person-group>
      <article-title>A generic software architecture for prognostics (GSAP)</article-title>
      <source>International Journal of Prognostics and Health Management</source>
      <year iso-8601-date="2017">2017</year>
      <volume>8</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.36001/ijphm.2017.v8i2.2618</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-2016_nasa_prog_model_library">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Daigle</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>Prognostics models matlab library</article-title>
      <year iso-8601-date="2016">2016</year>
      <uri>https://github.com/nasa/PrognosticsModelLibrary</uri>
    </element-citation>
  </ref>
  <ref id="ref-2016_nasa_prog_algs_library">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Daigle</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>Prognostics algorithm matlab library</article-title>
      <year iso-8601-date="2016">2016</year>
      <uri>https://github.com/nasa/PrognosticsAlgorithmLibrary</uri>
    </element-citation>
  </ref>
  <ref id="ref-2016_nasa_prog_metrics_library">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Daigle</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>Prognostics metrics matlab library</article-title>
      <year iso-8601-date="2016">2016</year>
      <uri>https://github.com/nasa/PrognosticsMetricsLibrary</uri>
    </element-citation>
  </ref>
  <ref id="ref-watkins2019prognostics">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Watkins</surname><given-names>Jason</given-names></name>
        <name><surname>Teubert</surname><given-names>Christopher</given-names></name>
        <name><surname>Ossenfort</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>Prognostics as-a-service: A scalable cloud architecture for prognostics: A scalable cloud architecture for prognostics</article-title>
      <source>Annual conference of the PHM society</source>
      <year iso-8601-date="2019">2019</year>
      <volume>11</volume>
    </element-citation>
  </ref>
  <ref id="ref-jarvis2022enabling">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Jarvis</surname><given-names>Katelyn</given-names></name>
        <name><surname>Corbetta</surname><given-names>Matteo</given-names></name>
        <name><surname>Teubert</surname><given-names>Christopher</given-names></name>
        <name><surname>Schuet</surname><given-names>Stefan</given-names></name>
      </person-group>
      <article-title>Enabling in-time prognostics with surrogate modeling through physics-enhanced dynamic mode decomposition method</article-title>
      <source>Annual conference of the PHM society</source>
      <year iso-8601-date="2022">2022</year>
      <volume>14</volume>
      <pub-id pub-id-type="doi">10.36001/phmconf.2022.v14i1.3238</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Dataset_RWBattery">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bole</surname><given-names>B.</given-names></name>
        <name><surname>Kulkarni</surname><given-names>C.</given-names></name>
        <name><surname>Daigle</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>Randomized battery usage data set</article-title>
      <source>NASA Ames Research Center, Moffett Field, CA</source>
      <publisher-name>NASA Prognostics Data Repository</publisher-name>
      <year iso-8601-date="2014">2014</year>
      <uri>https://www.nasa.gov/content/prognostics-center-of-excellence-data-set-repository</uri>
    </element-citation>
  </ref>
  <ref id="ref-Dataset_CMAPPS">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Saxena</surname><given-names>A.</given-names></name>
        <name><surname>Goebel</surname><given-names>K.</given-names></name>
      </person-group>
      <article-title>Turbofan engine degradation simulation</article-title>
      <source>NASA Ames Research Center, Moffett Field, CA</source>
      <publisher-name>NASA Prognostics Data Repository</publisher-name>
      <year iso-8601-date="2008">2008</year>
      <uri>https://www.nasa.gov/content/prognostics-center-of-excellence-data-set-repository</uri>
    </element-citation>
  </ref>
  <ref id="ref-Simantha">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Dadfarnia</surname><given-names>Mehdi</given-names></name>
        <name><surname>Drozdov</surname><given-names>Serghei</given-names></name>
      </person-group>
      <article-title>Simantha</article-title>
      <source>NIST</source>
      <publisher-name>National Institute of Standards; Technology [Software]</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <uri>https://github.com/usnistgov/simantha</uri>
    </element-citation>
  </ref>
  <ref id="ref-davidson_pilon_cameron_2022_7329096">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Davidson-Pilon</surname><given-names>Cameron</given-names></name>
      </person-group>
      <article-title>Lifelines, survival analysis in python</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2022-11">2022</year><month>11</month>
      <uri>https://doi.org/10.5281/zenodo.7329096</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.7329096</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-schreiber2017pomegranate">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Schreiber</surname><given-names>Jacob</given-names></name>
      </person-group>
      <article-title>Pomegranate: Fast and flexible probabilistic modeling in python</article-title>
      <source>The Journal of Machine Learning Research</source>
      <publisher-name>JMLR. org</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <volume>18</volume>
      <issue>1</issue>
      <fpage>5992</fpage>
      <lpage>5997</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
