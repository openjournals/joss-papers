<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7474</article-id>
<article-id pub-id-type="doi">10.21105/joss.07474</article-id>
<title-group>
<article-title>PyProBE: Python Processing for Battery
Experiments</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Holland</surname>
<given-names>Thomas</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Cummins</surname>
<given-names>Daniel</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Marinescu</surname>
<given-names>Monica</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Mechanical Engineering, Imperial College
London, United Kingdom</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>The Faraday Institution, United Kingdom</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Research Computing Service, ICT, Imperial College London,
United Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>10</volume>
<issue>106</issue>
<fpage>7474</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>battery</kwd>
<kwd>electrochemistry</kwd>
<kwd>battery cycling</kwd>
<kwd>battery testing</kwd>
<kwd>battery degradation</kwd>
<kwd>data processing</kwd>
<kwd>data analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>PyProBE</monospace> (Python Processing for Battery
  Experiments) is a Python package to process experimental data in a
  standardised and reproducible way. Recognising that battery
  experiments are often derivatives of standard procedures,
  <monospace>PyProBE</monospace> simplifies data processing to improve
  performance and transparency. It was written with the following
  objectives:</p>
  <list list-type="order">
    <list-item>
      <p>Ease of use for those with little Python experience, with a
      natural language interface.</p>
    </list-item>
    <list-item>
      <p>Accelerate battery data exploration with quick plotting and
      data visualisation, using <monospace>Polars</monospace>
      under-the-hood for rapid DataFrame manipulation and a graphical
      user interface (GUI).</p>
    </list-item>
    <list-item>
      <p>Encourage transparent storage of battery data, with human and
      computer-readable README-files and a readable API syntax.</p>
    </list-item>
    <list-item>
      <p>Host a library of post-processing methods, so techniques can be
      easily added and compared within a standardised code
      structure.</p>
    </list-item>
  </list>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Multiple researchers have published the tools that they have
  developed to perform analysis of experimental data.
  <monospace>cellpy</monospace>
  (<xref alt="Wind et al., 2024" rid="ref-wind_cellpy_2024" ref-type="bibr">Wind
  et al., 2024</xref>) reads data from multiple battery cyclers and
  includes built-in methods for techniques like Incremental Capacity
  Analysis (ICA) and summarisation. It filters data by passing specific
  cycle and step numbers as arguments to methods, but other filtering
  must be done manually using <monospace>Pandas</monospace>
  (<xref alt="The pandas development team, 2020" rid="ref-reback2020pandas" ref-type="bibr">The
  pandas development team, 2020</xref>).</p>
  <p><monospace>BEEP</monospace>
  (<xref alt="Herring et al., 2020" rid="ref-herring_beep_2020" ref-type="bibr">Herring
  et al., 2020</xref>) enables efficient filtering of experimental data
  with their “structuring” approach to assemble summary statistics for
  machine learning. It does not include methods for more detailed
  analysis, such as plotting ICA curves or performing degradation mode
  analysis. <monospace>DATTES</monospace>
  (<xref alt="Redondo-Iglesias et al., 2023" rid="ref-redondo-iglesias_dattes_2023" ref-type="bibr">Redondo-Iglesias
  et al., 2023</xref>), in <monospace>MatLab</monospace>, is able to
  read from multiple cyclers and includes analysis functions such as ICA
  and anomaly detection. The user interface of
  <monospace>DATTES</monospace> is a single function that takes
  character codes such as <monospace>'GC'</monospace> (for graphing
  capacity) to access functionality.</p>
  <p>In the Python community for battery research,
  <monospace>PyBaMM</monospace>
  (<xref alt="Sulzer et al., 2021" rid="ref-sulzer_python_2021" ref-type="bibr">Sulzer
  et al., 2021</xref>) has gained large developer support as an
  open-source environment for physics-based battery modelling. While
  Python packages for battery experimental data processing clearly
  exist, none have yet gained similar support.
  <monospace>PyBaMM</monospace> was written from the ground up to
  provide an open, modular framework to battery researchers, whereas
  <monospace>cellpy</monospace> and <monospace>BEEP</monospace> were
  written as tools for specific projects. <monospace>DATTES</monospace>
  being written in MatLab (a proprietary development ecosystem)
  inevitably limits its attractiveness to the open source community.</p>
  <p>Filtering a dataset to the section of interest is the first step of
  all data processing tasks, but can be time-consuming and cumbersome.
  Researchers often write new scripts for each experiment, in tools like
  MatLab, Python <monospace>Pandas</monospace> or Excel. These scripts
  are often not intended for sharing, so they may be difficult to read
  by others, which slows down the exchange of data and methods between
  researchers. Like <monospace>PyBaMM</monospace>,
  <monospace>PyProBE</monospace> has been written to be more
  user-friendly than existing tools, making it usable for those with
  little Python experience.</p>
  <p><monospace>PyBaMM</monospace> includes a library of interchangeable
  models, that allows users to test different approaches. There is no
  equivalent for interchanging methods for battery data processing,
  causing duplication of effort among researchers. A need therefore
  exists for an open-source data processing package where researchers
  can develop new analysis tools within a single framework.
  <monospace>PyProBE</monospace>’s <bold>analysis</bold> module is
  written to be modular and intuitive, with a consistent data structure
  and built-in data validation with <monospace>Pydantic</monospace>
  (<xref alt="Colvin et al., 2024" rid="ref-pydantic" ref-type="bibr">Colvin
  et al., 2024</xref>). As new methods are developed, they can be added
  and instantly compared to existing approaches.</p>
</sec>
<sec id="pyprobe-operating-principles">
  <title>PyProBE Operating Principles</title>
  <sec id="importing-and-filtering-data">
    <title>Importing and Filtering Data</title>
    <fig>
      <caption><p>The definition of <italic>procedure</italic> and
      <italic>experiment</italic> in
      <monospace>PyProBE</monospace>.<styled-content id="figU003AproceduresU0020andU0020experiments"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="jpeg" xlink:href="Procedures_and_experiments.jpg" />
    </fig>
    <p><monospace>PyProBE</monospace> has a hierarchy of objects
    containing experimental data. A <bold>Cell</bold> object contains
    all the data associated with a physical battery that has undergone
    electrochemical testing. A <bold>Procedure</bold> contains data
    associated with a particular programme run on a battery cycler. It
    usually represents data from a single results file produced by the
    battery cycler. The details of the procedure are included in a
    README.yaml file stored alongside the experimental data.</p>
    <p>Including a README file alongside experimental data is good
    research practice in accordance with the FAIR principles
    (<xref alt="Wilkinson et al., 2016" rid="ref-wilkinson_fair_2016" ref-type="bibr">Wilkinson
    et al., 2016</xref>). The <monospace>PyProBE</monospace> README
    includes descriptions of cycler processes in
    <monospace>PyBaMM</monospace> Experiment format
    (<xref alt="Sulzer et al., 2021" rid="ref-sulzer_python_2021" ref-type="bibr">Sulzer
    et al., 2021</xref>). This means it is human-readable and enables
    integration with <monospace>PyBaMM</monospace> for running
    simulations that correspond with the experimental data. The
    procedure can be split up into <bold>Experiment</bold> objects which
    can then be referenced in <monospace>PyProBE</monospace>’s
    hierarchical filter structure. An example README file is shown in
    <xref alt="[fig:readme]" rid="figU003Areadme">[fig:readme]</xref>.</p>
    <fig>
      <caption><p>An example README.yaml file for the procedure in
      <xref alt="[fig:procedures and experiments]" rid="figU003AproceduresU0020andU0020experiments">[fig:procedures and experiments]</xref>.<styled-content id="figU003Areadme"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="jpeg" xlink:href="Readme.jpg" />
    </fig>
    <p>Once imported into a <monospace>PyProBE</monospace>
    <bold>Procedure</bold>, individual cycles and steps can be indexed,
    with separate methods for accessing charge, discharge, rest etc.
    processes. All filtering methods produce a <bold>RawData</bold>
    object type which can be used for further analysis. The complete
    structure of <monospace>PyProBE</monospace> can be seen in
    <xref alt="[fig:filtering flowchart]" rid="figU003AfilteringU0020flowchart">[fig:filtering flowchart]</xref>.</p>
    <fig>
      <caption><p>The structure of PyProBE, showing the imported data
      and setup files (red), PyProBE objects (blue and yellow) and
      example filtering
      queries.<styled-content id="figU003AfilteringU0020flowchart"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="jpeg" xlink:href="Filtering_flowchart.jpg" />
    </fig>
  </sec>
  <sec id="post-processing-tools">
    <title>Post-processing tools</title>
    <fig>
      <caption><p>Some of the methods that can be called on
      <bold>Result</bold> objects, and the objects that they
      return.<styled-content id="figU003AresultU0020flowchart"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="jpeg" xlink:href="Result_flowchart.jpg" />
    </fig>
    <p><xref alt="[fig:result flowchart]" rid="figU003AresultU0020flowchart">[fig:result flowchart]</xref>
    shows how <monospace>PyProBE</monospace> <bold>RawData</bold> and
    <bold>Result</bold> objects can be used. <bold>RawData</bold>
    DataFrames contain only the columns of the
    <monospace>PyProBE</monospace> standardised format, while
    <bold>Result</bold> DataFrames contain any data columns produced
    from further analysis.The data stored in
    <monospace>PyProBE</monospace> <bold>Result</bold> object can be
    returned as a <monospace>NumPy</monospace>
    (<xref alt="Harris et al., 2020" rid="ref-harris2020array" ref-type="bibr">Harris
    et al., 2020</xref>) array or <monospace>Polars</monospace>
    dataframe for further manipulation. They can also be immediately
    visualised with built-in plotting methods for
    <monospace>matplotlib</monospace>
    (<xref alt="Hunter, 2007" rid="ref-HunterU003A2007" ref-type="bibr">Hunter,
    2007</xref>) and <monospace>hvplot</monospace>
    (<xref alt="Rudiger, 2024" rid="ref-hvplot2024" ref-type="bibr">Rudiger,
    2024</xref>), or passed to an included wrapper for
    <monospace>seaborn</monospace>
    (<xref alt="Waskom, 2021" rid="ref-Waskom2021" ref-type="bibr">Waskom,
    2021</xref>).</p>
    <p>The analysis module contains classes and functions which, when
    passed a <bold>Result</bold> object, enable additional
    functionality. The steps to smooth voltage data before
    differentiation are described in
    <xref alt="[fig:analysis flowchart]" rid="figU003AanalysisU0020flowchart">[fig:analysis flowchart]</xref>.</p>
    <fig>
      <caption><p>The workflow for smoothing and differentiating voltage
      data in <monospace>PyProBE</monospace>. The complete code can be
      seen in the “Differentiating voltage data”
      example.<styled-content id="figU003AanalysisU0020flowchart"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="jpeg" xlink:href="Analysis_flowchart.jpg" />
    </fig>
  </sec>
  <sec id="performance">
    <title>Performance</title>
    <p><monospace>PyProBE</monospace> is faster than manual filtering
    with <monospace>Pandas</monospace>. <monospace>PyProBE</monospace>
    uses <monospace>Polars</monospace>
    (<xref alt="Vink et al., 2024" rid="ref-vink_pola-rspolars_2024" ref-type="bibr">Vink
    et al., 2024</xref>) for DataFrame manipulation and
    <monospace>.parquet</monospace> files for data storage.
    <monospace>Polars</monospace> allows for Lazy computation, which
    optimises execution of DataFrame manipulation by delaying until a
    subset of data is requested by the user.
    <xref alt="[fig:performance]" rid="figU003Aperformance">[fig:performance]</xref>
    shows how for a week of data <monospace>PyProBE</monospace> is 2.7x
    faster than <monospace>Pandas v2.2.2</monospace> at filtering to a
    particular discharge in a sample dataset, but for a year of data
    this increases to 52.7x. This was averaged over 100 runs on a 14
    inch MacBook Pro with M2 Pro and 16Gb RAM. The code for this
    benchmark can be found in the “Comparing PyProBE Performance”
    example.</p>
    <fig>
      <caption><p>Comparison between <monospace>PyProBE</monospace> and
      <monospace>Pandas</monospace> for importing, filtering and
      returning a DataFrame when reading from a
      <monospace>.parquet</monospace> file with an average sampling rate
      of 1
      Hz.<styled-content id="figU003Aperformance"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="execution_time.png" />
    </fig>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work was generously supported via an EPSRC CASE (EP/W524323/1)
  award by Rimac Technology, as well as the Faraday Institution
  Multiscale Modelling project (EP/S003053/1, grant number FIRG025).</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-sulzer_python_2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sulzer</surname><given-names>Valentin</given-names></name>
        <name><surname>Marquis</surname><given-names>Scott G.</given-names></name>
        <name><surname>Timms</surname><given-names>Robert</given-names></name>
        <name><surname>Robinson</surname><given-names>Martin</given-names></name>
        <name><surname>Chapman</surname><given-names>S. Jon</given-names></name>
      </person-group>
      <article-title>Python Battery Mathematical Modelling (PyBaMM)</article-title>
      <source>Journal of Open Research Software</source>
      <year iso-8601-date="2021-06">2021</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-04-08">2024</year><month>04</month><day>08</day></date-in-citation>
      <volume>9</volume>
      <issue>1</issue>
      <issn>2049-9647</issn>
      <uri>https://openresearchsoftware.metajnl.com/articles/10.5334/jors.309</uri>
      <pub-id pub-id-type="doi">10.5334/jors.309</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-herring_beep_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Herring</surname><given-names>Patrick</given-names></name>
        <name><surname>Balaji Gopal</surname><given-names>Chirranjeevi</given-names></name>
        <name><surname>Aykol</surname><given-names>Muratahan</given-names></name>
        <name><surname>Montoya</surname><given-names>Joseph H.</given-names></name>
        <name><surname>Anapolsky</surname><given-names>Abraham</given-names></name>
        <name><surname>Attia</surname><given-names>Peter M.</given-names></name>
        <name><surname>Gent</surname><given-names>William</given-names></name>
        <name><surname>Hummelshøj</surname><given-names>Jens S.</given-names></name>
        <name><surname>Hung</surname><given-names>Linda</given-names></name>
        <name><surname>Kwon</surname><given-names>Ha-Kyung</given-names></name>
        <name><surname>Moore</surname><given-names>Patrick</given-names></name>
        <name><surname>Schweigert</surname><given-names>Daniel</given-names></name>
        <name><surname>Severson</surname><given-names>Kristen A.</given-names></name>
        <name><surname>Suram</surname><given-names>Santosh</given-names></name>
        <name><surname>Yang</surname><given-names>Zi</given-names></name>
        <name><surname>Braatz</surname><given-names>Richard D.</given-names></name>
        <name><surname>Storey</surname><given-names>Brian D.</given-names></name>
      </person-group>
      <article-title>BEEP: A Python library for Battery Evaluation and Early Prediction</article-title>
      <source>SoftwareX</source>
      <year iso-8601-date="2020-01">2020</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-05-03">2024</year><month>05</month><day>03</day></date-in-citation>
      <volume>11</volume>
      <issn>2352-7110</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S2352711020300492</uri>
      <pub-id pub-id-type="doi">10.1016/j.softx.2020.100506</pub-id>
      <fpage>100506</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-redondo-iglesias_dattes_2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Redondo-Iglesias</surname><given-names>Eduardo</given-names></name>
        <name><surname>Hassini</surname><given-names>Marwan</given-names></name>
        <name><surname>Venet</surname><given-names>Pascal</given-names></name>
        <name><surname>Pelissier</surname><given-names>Serge</given-names></name>
      </person-group>
      <article-title>DATTES: Data analysis tools for tests on energy storage</article-title>
      <source>SoftwareX</source>
      <year iso-8601-date="2023-12">2023</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-05-03">2024</year><month>05</month><day>03</day></date-in-citation>
      <volume>24</volume>
      <issn>2352-7110</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S2352711023002807</uri>
      <pub-id pub-id-type="doi">10.1016/j.softx.2023.101584</pub-id>
      <fpage>101584</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-wind_cellpy_2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wind</surname><given-names>Julia</given-names></name>
        <name><surname>Ulvestad</surname><given-names>Asbjørn</given-names></name>
        <name><surname>Abdelhamid</surname><given-names>Muhammad</given-names></name>
        <name><surname>Mæhlen</surname><given-names>Jan Petter</given-names></name>
      </person-group>
      <article-title>Cellpy – an open-source library for processing and analysis of battery testing data</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2024-05">2024</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-08-05">2024</year><month>08</month><day>05</day></date-in-citation>
      <volume>9</volume>
      <issue>97</issue>
      <issn>2475-9066</issn>
      <uri>https://joss.theoj.org/papers/10.21105/joss.06236</uri>
      <pub-id pub-id-type="doi">10.21105/joss.06236</pub-id>
      <fpage>6236</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-vink_pola-rspolars_2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Vink</surname><given-names>Ritchie</given-names></name>
        <name><surname>Gooijer</surname><given-names>Stijn de</given-names></name>
        <name><surname>Beedie</surname><given-names>Alexander</given-names></name>
        <name><surname>Gorelli</surname><given-names>Marco Edward</given-names></name>
        <name><surname>Guo</surname><given-names>Weijie</given-names></name>
        <name><surname>Zundert</surname><given-names>J. van</given-names></name>
        <name><surname>Peters</surname><given-names>Orson</given-names></name>
        <name><surname>Hulselmans</surname><given-names>Gert</given-names></name>
        <string-name>nameexhaustion</string-name>
        <name><surname>Grinstead</surname><given-names>Cory</given-names></name>
        <string-name>Marshall</string-name>
        <name><surname>Burghoorn</surname><given-names>Gijs</given-names></name>
        <string-name>chielP</string-name>
        <name><surname>Turner-Trauring</surname><given-names>Itamar</given-names></name>
        <name><surname>Santamaria</surname><given-names>Matteo</given-names></name>
        <name><surname>Heres</surname><given-names>Daniël</given-names></name>
        <name><surname>Mitchell</surname><given-names>Lawrence</given-names></name>
        <name><surname>Magarick</surname><given-names>Josh</given-names></name>
        <string-name>ibENPC</string-name>
        <name><surname>Genockey</surname><given-names>Karl</given-names></name>
        <name><surname>Wilksch</surname><given-names>Moritz</given-names></name>
        <name><surname>Leitao</surname><given-names>Jorge</given-names></name>
        <name><surname>Gelderen</surname><given-names>Mick van</given-names></name>
        <name><surname>Barbagiannis</surname><given-names>Petros</given-names></name>
        <name><surname>Borchert</surname><given-names>Oliver</given-names></name>
        <string-name>deanm0000</string-name>
        <name><surname>Haag</surname><given-names>Jonas</given-names></name>
        <name><surname>Harbeck</surname><given-names>Henry</given-names></name>
        <name><surname>Brannigan</surname><given-names>Liam</given-names></name>
      </person-group>
      <article-title>Pola-rs/polars: Python Polars 1.4.1</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2024-08">2024</year><month>08</month>
      <uri>https://doi.org/10.5281/zenodo.13208786</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.13208786</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-reback2020pandas">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>The pandas development team</string-name>
      </person-group>
      <article-title>Pandas-dev/pandas: pandas</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2020-02">2020</year><month>02</month>
      <uri>https://doi.org/10.5281/zenodo.3509134</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3509134</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-wilkinson_fair_2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wilkinson</surname><given-names>Mark D.</given-names></name>
        <name><surname>Dumontier</surname><given-names>Michel</given-names></name>
        <name><surname>Aalbersberg</surname><given-names>IJsbrand Jan</given-names></name>
        <name><surname>Appleton</surname><given-names>Gabrielle</given-names></name>
        <name><surname>Axton</surname><given-names>Myles</given-names></name>
        <name><surname>Baak</surname><given-names>Arie</given-names></name>
        <name><surname>Blomberg</surname><given-names>Niklas</given-names></name>
        <name><surname>Boiten</surname><given-names>Jan-Willem</given-names></name>
        <name><surname>Silva Santos</surname><given-names>Luiz Bonino da</given-names></name>
        <name><surname>Bourne</surname><given-names>Philip E.</given-names></name>
        <name><surname>Bouwman</surname><given-names>Jildau</given-names></name>
        <name><surname>Brookes</surname><given-names>Anthony J.</given-names></name>
        <name><surname>Clark</surname><given-names>Tim</given-names></name>
        <name><surname>Crosas</surname><given-names>Mercè</given-names></name>
        <name><surname>Dillo</surname><given-names>Ingrid</given-names></name>
        <name><surname>Dumon</surname><given-names>Olivier</given-names></name>
        <name><surname>Edmunds</surname><given-names>Scott</given-names></name>
        <name><surname>Evelo</surname><given-names>Chris T.</given-names></name>
        <name><surname>Finkers</surname><given-names>Richard</given-names></name>
        <name><surname>Gonzalez-Beltran</surname><given-names>Alejandra</given-names></name>
        <name><surname>Gray</surname><given-names>Alasdair J. G.</given-names></name>
        <name><surname>Groth</surname><given-names>Paul</given-names></name>
        <name><surname>Goble</surname><given-names>Carole</given-names></name>
        <name><surname>Grethe</surname><given-names>Jeffrey S.</given-names></name>
        <name><surname>Heringa</surname><given-names>Jaap</given-names></name>
        <name><surname>Hoen</surname><given-names>Peter A. C. ’t</given-names></name>
        <name><surname>Hooft</surname><given-names>Rob</given-names></name>
        <name><surname>Kuhn</surname><given-names>Tobias</given-names></name>
        <name><surname>Kok</surname><given-names>Ruben</given-names></name>
        <name><surname>Kok</surname><given-names>Joost</given-names></name>
        <name><surname>Lusher</surname><given-names>Scott J.</given-names></name>
        <name><surname>Martone</surname><given-names>Maryann E.</given-names></name>
        <name><surname>Mons</surname><given-names>Albert</given-names></name>
        <name><surname>Packer</surname><given-names>Abel L.</given-names></name>
        <name><surname>Persson</surname><given-names>Bengt</given-names></name>
        <name><surname>Rocca-Serra</surname><given-names>Philippe</given-names></name>
        <name><surname>Roos</surname><given-names>Marco</given-names></name>
        <name><surname>Schaik</surname><given-names>Rene van</given-names></name>
        <name><surname>Sansone</surname><given-names>Susanna-Assunta</given-names></name>
        <name><surname>Schultes</surname><given-names>Erik</given-names></name>
        <name><surname>Sengstag</surname><given-names>Thierry</given-names></name>
        <name><surname>Slater</surname><given-names>Ted</given-names></name>
        <name><surname>Strawn</surname><given-names>George</given-names></name>
        <name><surname>Swertz</surname><given-names>Morris A.</given-names></name>
        <name><surname>Thompson</surname><given-names>Mark</given-names></name>
        <name><surname>Lei</surname><given-names>Johan van der</given-names></name>
        <name><surname>Mulligen</surname><given-names>Erik van</given-names></name>
        <name><surname>Velterop</surname><given-names>Jan</given-names></name>
        <name><surname>Waagmeester</surname><given-names>Andra</given-names></name>
        <name><surname>Wittenburg</surname><given-names>Peter</given-names></name>
        <name><surname>Wolstencroft</surname><given-names>Katherine</given-names></name>
        <name><surname>Zhao</surname><given-names>Jun</given-names></name>
        <name><surname>Mons</surname><given-names>Barend</given-names></name>
      </person-group>
      <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>
      <source>Scientific Data</source>
      <year iso-8601-date="2016-03">2016</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-08-06">2024</year><month>08</month><day>06</day></date-in-citation>
      <volume>3</volume>
      <issue>1</issue>
      <issn>2052-4463</issn>
      <uri>https://www.nature.com/articles/sdata201618</uri>
      <pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id>
      <fpage>160018</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-harris2020array">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <publisher-name>Springer Science; Business Media LLC</publisher-name>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <volume>585</volume>
      <issue>7825</issue>
      <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-HunterU003A2007">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D graphics environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <publisher-name>IEEE COMPUTER SOC</publisher-name>
      <year iso-8601-date="2007">2007</year>
      <volume>9</volume>
      <issue>3</issue>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hvplot2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Rudiger</surname><given-names>Philipp</given-names></name>
      </person-group>
      <article-title>Holoviz/hvplot</article-title>
      <publisher-name>HoloViz</publisher-name>
      <year iso-8601-date="2024-12">2024</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-02">2025</year><month>01</month><day>02</day></date-in-citation>
      <uri>https://github.com/holoviz/hvplot</uri>
    </element-citation>
  </ref>
  <ref id="ref-Waskom2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Waskom</surname><given-names>Michael L.</given-names></name>
      </person-group>
      <article-title>Seaborn: Statistical data visualization</article-title>
      <source>Journal of Open Source Software</source>
      <publisher-name>The Open Journal</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <volume>6</volume>
      <issue>60</issue>
      <uri>https://doi.org/10.21105/joss.03021</uri>
      <pub-id pub-id-type="doi">10.21105/joss.03021</pub-id>
      <fpage>3021</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pydantic">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Colvin</surname><given-names>Samuel</given-names></name>
        <name><surname>Jolibois</surname><given-names>Eric</given-names></name>
        <name><surname>Ramezani</surname><given-names>Hasan</given-names></name>
        <name><surname>Badaracco</surname><given-names>Adrian Garcia</given-names></name>
        <name><surname>Dorsey</surname><given-names>Terrence</given-names></name>
        <name><surname>Montague</surname><given-names>David</given-names></name>
        <name><surname>Matveenko</surname><given-names>Serge</given-names></name>
        <name><surname>Trylesinski</surname><given-names>Marcelo</given-names></name>
        <name><surname>Runkle</surname><given-names>Sydney</given-names></name>
        <name><surname>Hewitt</surname><given-names>David</given-names></name>
        <name><surname>Hall</surname><given-names>Alex</given-names></name>
        <name><surname>Plot</surname><given-names>Victorien</given-names></name>
      </person-group>
      <article-title>Pydantic</article-title>
      <year iso-8601-date="2024-12-18">2024</year><month>12</month><day>18</day>
      <uri>https://docs.pydantic.dev/latest/</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
