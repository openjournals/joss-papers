<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">8178</article-id>
<article-id pub-id-type="doi">10.21105/joss.08178</article-id>
<title-group>
<article-title>omock: A R package for Mock Data Generation for the
Observational Medical Outcomes Partnership common data
model</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9517-8834</contrib-id>
<name>
<surname>Du</surname>
<given-names>Mike</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0006-7948-3747</contrib-id>
<name>
<surname>Mercadé-Besora</surname>
<given-names>Núria</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0002-4405-1814</contrib-id>
<name>
<surname>Alcalde-Herraiz</surname>
<given-names>Marta</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0001-8112-8959</contrib-id>
<name>
<surname>Chen</surname>
<given-names>Xihang</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0847-4855</contrib-id>
<name>
<surname>Guo</surname>
<given-names>Yuchen</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8462-8668</contrib-id>
<name>
<surname>López-Güell</surname>
<given-names>Kim</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9286-1128</contrib-id>
<name>
<surname>Burn</surname>
<given-names>Edward</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3308-9905</contrib-id>
<name>
<surname>Català</surname>
<given-names>Martí</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Health Data Sciences Group, Nuffield Department of
Orthopaedics, Rheumatology and Musculoskeletal Sciences, University of
Oxford, United Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-01-06">
<day>6</day>
<month>1</month>
<year>2025</year>
</pub-date>
<volume>10</volume>
<issue>113</issue>
<fpage>8178</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>R</kwd>
<kwd>Epidemiology</kwd>
<kwd>OMOP</kwd>
<kwd>CDM</kwd>
<kwd>synthetic</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>omock</monospace> is an R package that allows users to
  create mock patient level data formatted in the Observational Medical
  Outcomes Partnership (OMOP) Common Data Model (CDM)
  (<xref alt="Overhage et al., 2011" rid="ref-omop" ref-type="bibr">Overhage
  et al., 2011</xref>). This package provides a flexible and efficient
  way to create synthetic datasets in OMOP CDM format, facilitating the
  testing and validation of packages and analytic codes.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Reliable testing is essential in R package development
  (<xref alt="Vidoni, 2021" rid="ref-inproceedings" ref-type="bibr">Vidoni,
  2021</xref>), especially for packages that run across different server
  infrastructures. This need is particularly critical for software
  developed for Common Data Models (CDM)
  (<xref alt="Yan et al., 2023" rid="ref-10172586" ref-type="bibr">Yan
  et al., 2023</xref>).</p>
  <p>A CDM is a standardised and structured framework that helps define
  how data is organised and formatted across different databases
  (<xref alt="Makadia &amp; Ryan, 2014" rid="ref-Makadia2014-pq" ref-type="bibr">Makadia
  &amp; Ryan, 2014</xref>). CDMs provide a standardised vocabulary and
  schema, making combining, comparing, and analysing data from multiple
  sources easier. In healthcare settings, CDMs help standardise
  different datasets such as electronic health records (EHRs), claims
  data and hospital data, enabling the use of the same analytical code
  across different data sources. A popular CDM used for medical research
  is the OMOP CDM
  (<xref alt="“OMOP Common Data Model,” n.d." rid="ref-omopweb" ref-type="bibr">“OMOP
  Common Data Model,” n.d.</xref>), with over 200 peer-reviewed
  publications leveraging its standardised data format. More than 800
  million patients’ health-related data have been mapped to OMOP CDM by
  over 2,000 collaborators from more than 70 countries, enabling
  cross-institutional studies and scalable healthcare analytics
  (<xref alt="Overhage et al., 2011" rid="ref-omop" ref-type="bibr">Overhage
  et al., 2011</xref>). A diagram of OMOP CDM table structure is shown
  in figure 1.</p>
  <p>Creating robust tests for packages designed for the OMOP CDM is
  challenging because these packages must be compatible across various
  database types. Yet, fit-for-purpose datasets for testing are often
  unavailable due to privacy and ethical constraints. Having to write
  OMOP CDM datasets to test the different edge cases of the different
  packages is time consuming and not efficient.</p>
  <p>The <monospace>omock</monospace> R package was developed to address
  this gap, providing an easy-to-use pipeline for generating mock data
  tables for the OMOP CDM. <monospace>omock</monospace> facilitates
  reliable testing of functions and workflows, enabling developers to
  validate their packages’ compatibility with OMOP CDM standards while
  preserving data privacy and ethical considerations.</p>
  <fig>
    <caption><p>Figure 1: Overview of OMOP CDM standard
    table.(<xref alt="OHDSI, 2019" rid="ref-ohdsi2019book" ref-type="bibr">OHDSI,
    2019</xref>)</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="cdm54.png" />
  </fig>
</sec>
<sec id="design-principles">
  <title>Design principles</title>
  <p>The <monospace>omock</monospace> R package is built to align with
  tidyverse design principles
  (<xref alt="Wickham et al., 2019" rid="ref-tidyverse" ref-type="bibr">Wickham
  et al., 2019</xref>), ensuring a consistent approach for testing
  functions within the package. It also relies heavily on tidyverse
  packages such as <monospace>dplyr</monospace>,
  <monospace>rlang</monospace>, and <monospace>purrr</monospace> for
  common data operations, maintaining compatibility with widely used
  tools in the R ecosystem.</p>
  <p>In addition to its alignment with the tidyverse principles, the
  core dependency of <monospace>omock</monospace> is the omopgenerics
  package
  (<xref alt="Catala &amp; Burn, 2024" rid="ref-omopgenerics" ref-type="bibr">Catala
  &amp; Burn, 2024</xref>), which provides essential methods, classes,
  and basic operations for working with data in the OMOP CDM format. It
  ensures that the mock data generated by <monospace>omock</monospace>
  meets the structure and format requirements of the OMOP CDM.</p>
</sec>
<sec id="overview-of-the-omock-r-package">
  <title>Overview of the omock R package</title>
  <p>The output of <monospace>omock</monospace> is a local CDM object,
  which contains all the OMOP CDM tables with mock data in a
  <monospace>cdm_reference</monospace> object. The
  <monospace>cdm_reference</monospace> object is defined by the
  <monospace>omopgenerics</monospace> package and is a named list of
  tables with classes depending the table name. This allows for dplyr
  style data analysis pipelines for data exploration.
  <monospace>omock</monospace> offers two approaches for creating a mock
  CDM object.</p>
  <p>The first approach allows users to specify population settings,
  such as the number of patients and the gender composition, to generate
  a mock CDM object tailored to their specifications.</p>
  <p>The second approach enables users to provide bespoke data tables in
  OMOP CDM format, which are used as a foundation to build a customised
  mock CDM with them.</p>
  <p>These flexible options ensure that <monospace>omock</monospace> can
  accommodate various testing scenarios and requirements for developers
  and researchers working with OMOP CDM. Both approaches are not
  mutually exclusive and can be combined.</p>
  <p>The <monospace>omock</monospace> package is available in CRAN
  version 0.3.2
  (<xref alt="Du et al., 2024" rid="ref-omock" ref-type="bibr">Du et
  al., 2024</xref>), and currently there are six packages that depend on
  it for testing purposes.</p>
  <sec id="building-mock-omop-cdm-with-population-settings">
    <title>Building mock OMOP CDM with population settings</title>
    <p>An empty mock CDM can be created using the
    <monospace>mockCdmReference</monospace> function, which includes two
    key arguments: <monospace>cdmName</monospace> and
    <monospace>vocabularySet</monospace>. The
    <monospace>cdmName</monospace> argument allows users to specify the
    name of the mock OMOP CDM, while the
    <monospace>vocabularySet</monospace> argument lets users define the
    vocabulary tables to be included. The package contains a mock
    vocabulary sets. Once the mock CDM is initialised, mock patients and
    corresponding observation periods can be added using the
    <monospace>mockPerson</monospace> and
    <monospace>mockObservation</monospace> functions.</p>
    <p>To expand the mock CDM with additional clinical tables, we can
    pipe the corresponding functions onto the previously created CDM
    object. For example, to add a condition occurrence and a drug
    exposure table to the OMOP CDM we can use
    <monospace>mockConditionOccurrence</monospace> and
    <monospace>mockDrugExposure</monospace> functions, respectively.
    There is a function for most of the commonly used clinical tables in
    OMOP CDM.</p>
    <p>This modular design, where each table is added via a separate
    function, provides flexibility in testing and development workflows.
    Since users can simulate the specific OMOP CDM tables as needed,
    depending on the scenario being tested, such as testing
    functionality that only requires drug exposures or condition
    occurrences. Generating only the necessary tables can be less
    computationally intensive, which is especially useful when
    simulating CDM with a large number of patients or when running
    automated test suites repeatedly. Additionally, table-level control
    also makes it easier to simulate edge cases and specify population
    settings, such as the number of patients, gender and number of
    records within each tables.</p>
    <p>Below is an example code snippet demonstrating how to generate a
    mock CDM with 1,000 patients, valid observation periods, and
    additional drug exposure and condition occurrence tables:</p>
    <preformat>library(omock)

cdm &lt;- mockCdmReference(cdmName = &quot;mock database&quot;,
                             vocabularySet = &quot;mock&quot;) |&gt;
       mockPerson(nPerson = 1000) |&gt;
       mockObservationPeriod() |&gt;
       mockConditionOccurrence()

print(cdm)</preformat>
    <preformat>##

## ── # OMOP CDM reference (local) of mock database ───────────────────────────────

## • omop tables: person, observation_period, cdm_source, concept, vocabulary,
## concept_relationship, concept_synonym, concept_ancestor, drug_strength,
## condition_occurrence

## • cohort tables: -

## • achilles tables: -

## • other tables: -</preformat>
    <p>Similarly, the <monospace>mockCohort</monospace> function can add
    a mock cohort table to the mock CDM object. The function contains
    arguments for the user to customise the mock table, such as its name
    and size. See the example below.</p>
    <preformat>cdm &lt;- cdm |&gt;
  mockCohort(
    name = &quot;omock_example&quot;,
    numberCohorts = 1,
    cohortName = c(&quot;omock_cohort_1&quot;)
  )

print(cdm)</preformat>
    <preformat>##

## ── # OMOP CDM reference (local) of mock database ───────────────────────────────

## • omop tables: person, observation_period, cdm_source, concept, vocabulary,
## concept_relationship, concept_synonym, concept_ancestor, drug_strength

## • cohort tables: omock_example

## • achilles tables: -

## • other tables: -</preformat>
  </sec>
  <sec id="building-mock-cdm-object-with-bespoke-cdm-table">
    <title>Building mock CDM object with bespoke CDM table</title>
    <p>To create a mock CDM object from a bespoke OMOP table, we can use
    the <monospace>mockCdmFromTables</monospace> function.
    <monospace>mockCdmFromTables</monospace> takes the OMOP table in
    <monospace>tibble</monospace> format and create a CDM object with
    valid person and observation period information for those tables.
    This function is helpful for quickly generating a valid CDM object
    when one or more clinical tables are already defined, for example,
    when writing unit tests that require known values in a particular
    clinical table. For example, if a
    <monospace>condition_occurrence</monospace> table is provided,
    mockCdmFromTables will extract the person_id from the
    condition_occurrence table and generate a consistent
    <monospace>person</monospace> and
    <monospace>observation_period</monospace> table to match the records
    within the condition_occurrence table.</p>
    <p>By default, if no base CDM object is passed into
    <monospace>mockCdmFromTables()</monospace> explicitly,
    <monospace>mockCdmFromTables()</monospace> internally calls
    <monospace>mockCdmReference()</monospace> to initialise an empty CDM
    object. This ensures that all required vocabulary tables are present
    for creation of a valid CDM object that matches the OMOP CDM
    standards. This behaviour is particularly useful when users only
    need to validate code against their bespoke clinical tables, while
    <monospace>mockCdmFromTables</monospace> ensures that the resulting
    CDM object has all the required tables and relationships in place to
    form a valid CDM object.</p>
    <p>By contrast, if an existing CDM object is passed in and contains
    tables that overlap with the provided ones (e.g., a
    <monospace>person</monospace> table), those will be overwritten to
    add all the extra individuals from the new tables added. A warning
    will then be issued to notify users that the tables within the CDM
    object have been overwritten. This design allows for customising an
    existing CDM object with bespoke tables, while ensuring the CDM
    object is valid.</p>
    <p>Below is an example code snippet on using
    <monospace>mockCdmFromTables</monospace> to create a mock CDM object
    from the <monospace>condition_occurrence</monospace> table.</p>
    <preformat>library(dplyr)
library(omock)

condition_occurrence = tibble(
  person_id = 1:3,
  condition_start_date = as.Date(&quot;2020-01-01&quot;) + 1:3,
  condition_end_date  = as.Date(&quot;2020-01-01&quot;) + 4:6,
  condition_concept_id = 1,
  condition_type_concept_id = 1,
  condition_occurrence_id = 1:3
)


cdm2 &lt;- mockCdmFromTables(
  tables = list(condition_occurrence = condition_occurrence)
)

print(cdm2)</preformat>
    <preformat>##

## ── # OMOP CDM reference (local) of mock database ───────────────────────────────

## • omop tables: condition_occurrence, person, observation_period, cdm_source,
## concept, vocabulary, concept_relationship, concept_synonym, concept_ancestor,
## drug_strength

## • cohort tables: -

## • achilles tables: -

## • other tables: -</preformat>
  </sec>
  <sec id="testing-code-with-omock">
    <title>Testing code with omock</title>
    <p>The main motivation for developing omock is to support reliable
    testing of analytic packages that depend on the OMOP CDM. This
    section provided two examples on how omock can be use for
    testing.</p>
    <sec id="example-1">
      <title>Example 1:</title>
      <p>Suppose we want to validate a function that counts the number
      of individuals who have both a person record and an associated
      observation period. We can generate such testing data as
      follows:</p>
      <preformat>library(dplyr)
library(omock)

# Create a mock CDM with 10 persons and corresponding observation periods

cdm_test &lt;- mockCdmReference() |&gt;
  mockPerson(nPerson = 10) |&gt;
  mockObservationPeriod()

# Simple test function
count_observed_people &lt;- function(cdm) {
  cdm$observation_period |&gt; 
    distinct(person_id) |&gt; 
    inner_join(cdm$person, by = &quot;person_id&quot;) |&gt; 
    summarise(n = n()) |&gt; 
    pull(n)
}

## Apply the function to validate if the function will provide the correct answer
count_observed_people(cdm_test)

# &gt; [1] 10</preformat>
    </sec>
    <sec id="example-2">
      <title>Example 2:</title>
      <p>Suppose we want to validate a function that check if all
      records within a cohort table have cohort start date within a data
      range. We can generate such testing data as follows:</p>
      <preformat>library(dplyr)
library(omock)

## Create a mock CDM with 10 persons and corresponding observation periods

cohort_table &lt;- tibble(
    cohort_definition_id = c(1, 1, 1),
    subject_id = c(1, 2,3),
    cohort_start_date = as.Date(c(
        &quot;2020-04-01&quot;,
        &quot;2021-06-01&quot;,
        &quot;2022-05-22&quot;)),
        cohort_end_date = as.Date(c(
        &quot;2020-04-01&quot;,
        &quot;2021-06-01&quot;,
        &quot;2022-05-22&quot;)))

cdm_test2 &lt;- omock::mockCdmFromTables(tables = list(cohort = cohort_table))

# Function to check if all cohort_start_dates fall within a given date range
check_cohort_date_range &lt;- function(cohort_table, start_date, end_date) {
  all(cohort_table$cohort_start_date &gt;= start_date &amp; 
      cohort_table$cohort_start_date &lt;= end_date)
}

## Run the check
check_cohort_date_range(cdm_test2$cohort,
                        start_date = as.Date(&quot;2020-01-01&quot;),
                        end_date = as.Date(&quot;2023-01-01&quot;))
#&gt; [1] TRUE

check_cohort_date_range(cdm_test2$cohort,
                        start_date = as.Date(&quot;2020-01-01&quot;),
                        end_date = as.Date(&quot;2022-01-01&quot;))
                        
#&gt; [1] FALSE</preformat>
    </sec>
  </sec>
  <sec id="comparison-with-existing-tools">
    <title>Comparison with existing tools</title>
    <p>A commonly used resource for testing OMOP-based tools is the
    <monospace>Eunomia</monospace> package
    (<xref alt="DeFalco et al., 2024" rid="ref-eunomia" ref-type="bibr">DeFalco
    et al., 2024</xref>), which provides a fixed, small synthetic CDM
    dataset. <monospace>Eunomia</monospace> is a valuable tool for
    exploring the OMOP CDM data structure and for demonstration
    purposes. It is less suited for testing code that requires custom
    scenarios, such as examples 1 and 2 shown above. Since the data
    within the <monospace>Eunomia</monospace> package is static and
    cannot be easily modified, this made it challenging to generate
    custom mock data for unit testing. Whereas
    <monospace>omock</monospace> is designed to give users the
    flexibility for generating mock OMOP CDM data tailored to their
    testing needs.</p>
  </sec>
</sec>
<sec id="conclusions">
  <title>Conclusions</title>
  <p>Overall, the <monospace>omock</monospace> R package allows users to
  generate mock OMOP CDM datasets tailored to their needs, addressing
  the need to develop and validate R packages for OMOP CDM data. Hence,
  the developers can test their tools while adhering to privacy and
  ethical considerations. Future directions for
  <monospace>omock</monospace> will enhance the realism of the mock data
  generated.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-omock">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>Du</string-name>
        <string-name>Mike</string-name>
        <string-name>Catala</string-name>
        <string-name>Marti</string-name>
        <string-name>Burn</string-name>
        <string-name>Edward</string-name>
        <string-name>Mercade-Besora</string-name>
        <string-name>Nuria</string-name>
        <string-name>Chen</string-name>
        <string-name>Xihang</string-name>
      </person-group>
      <source>Omock: Creation of mock observational medical outcomes partnership common data model</source>
      <year iso-8601-date="2024">2024</year>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.omock</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-omop">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Overhage</surname><given-names>J Marc</given-names></name>
        <name><surname>Ryan</surname><given-names>Patrick B</given-names></name>
        <name><surname>Reich</surname><given-names>Christian G</given-names></name>
        <name><surname>Hartzema</surname><given-names>Abraham G</given-names></name>
        <name><surname>Stang</surname><given-names>Paul E</given-names></name>
      </person-group>
      <article-title>Validation of a common data model for active safety surveillance research</article-title>
      <source>Journal of the American Medical Informatics Association</source>
      <year iso-8601-date="2011-10">2011</year><month>10</month>
      <volume>19</volume>
      <issue>1</issue>
      <issn>1067-5027</issn>
      <uri>https://doi.org/10.1136/amiajnl-2011-000376</uri>
      <pub-id pub-id-type="doi">10.1136/amiajnl-2011-000376</pub-id>
      <fpage>54</fpage>
      <lpage>60</lpage>
    </element-citation>
  </ref>
  <ref id="ref-tidyverse">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Averick</surname><given-names>Mara</given-names></name>
        <name><surname>Bryan</surname><given-names>Jennifer</given-names></name>
        <name><surname>Chang</surname><given-names>Winston</given-names></name>
        <name><surname>McGowan</surname><given-names>Lucy D’Agostino</given-names></name>
        <name><surname>François</surname><given-names>Romain</given-names></name>
        <name><surname>Grolemund</surname><given-names>Garrett</given-names></name>
        <name><surname>Hayes</surname><given-names>Alex</given-names></name>
        <name><surname>Henry</surname><given-names>Lionel</given-names></name>
        <name><surname>Hester</surname><given-names>Jim</given-names></name>
        <name><surname>Kuhn</surname><given-names>Max</given-names></name>
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
        <name><surname>Miller</surname><given-names>Evan</given-names></name>
        <name><surname>Bache</surname><given-names>Stephan Milton</given-names></name>
        <name><surname>Müller</surname><given-names>Kirill</given-names></name>
        <name><surname>Ooms</surname><given-names>Jeroen</given-names></name>
        <name><surname>Robinson</surname><given-names>David</given-names></name>
        <name><surname>Seidel</surname><given-names>Dana Paige</given-names></name>
        <name><surname>Spinu</surname><given-names>Vitalie</given-names></name>
        <name><surname>Takahashi</surname><given-names>Kohske</given-names></name>
        <name><surname>Vaughan</surname><given-names>Davis</given-names></name>
        <name><surname>Wilke</surname><given-names>Claus</given-names></name>
        <name><surname>Woo</surname><given-names>Kara</given-names></name>
        <name><surname>Yutani</surname><given-names>Hiroaki</given-names></name>
      </person-group>
      <article-title>Welcome to the tidyverse</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2019">2019</year>
      <volume>4</volume>
      <issue>43</issue>
      <pub-id pub-id-type="doi">10.21105/joss.01686</pub-id>
      <fpage>1686</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-omopgenerics">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Catala</surname><given-names>Marti</given-names></name>
        <name><surname>Burn</surname><given-names>Edward</given-names></name>
      </person-group>
      <source>Omopgenerics: Methods and classes for the OMOP common data model</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://darwin-eu-dev.github.io/omopgenerics/</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.omopgenerics</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-inproceedings">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Vidoni</surname><given-names>Melina</given-names></name>
      </person-group>
      <article-title>Evaluating unit testing practices in r packages</article-title>
      <year iso-8601-date="2021-05">2021</year><month>05</month>
      <pub-id pub-id-type="doi">10.1109/ICSE43902.2021.00136</pub-id>
      <fpage>1523</fpage>
      <lpage>1534</lpage>
    </element-citation>
  </ref>
  <ref id="ref-10172586">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Yan</surname><given-names>Cong</given-names></name>
        <name><surname>Nath</surname><given-names>Suman</given-names></name>
        <name><surname>Lu</surname><given-names>Shan</given-names></name>
      </person-group>
      <article-title>Generating test databases for database-backed applications</article-title>
      <source>2023 IEEE/ACM 45th international conference on software engineering (ICSE)</source>
      <year iso-8601-date="2023">2023</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ICSE48619.2023.00173</pub-id>
      <fpage>2048</fpage>
      <lpage>2059</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Makadia2014-pq">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Makadia</surname><given-names>Rupa</given-names></name>
        <name><surname>Ryan</surname><given-names>Patrick B</given-names></name>
      </person-group>
      <article-title>Transforming the premier perspective hospital database into the observational medical outcomes partnership (OMOP) common data model</article-title>
      <source>EGEMS (Wash., DC)</source>
      <publisher-name>Ubiquity Press, Ltd.</publisher-name>
      <year iso-8601-date="2014-11">2014</year><month>11</month>
      <volume>2</volume>
      <issue>1</issue>
      <fpage>1110</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-ohdsi2019book">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>OHDSI</surname></name>
      </person-group>
      <source>The book of OHDSI: Observational health data sciences and informatics</source>
      <publisher-name>OHDSI</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <isbn>9781088855195</isbn>
      <uri>https://books.google.co.uk/books?id=JxpnzQEACAAJ</uri>
    </element-citation>
  </ref>
  <ref id="ref-eunomia">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>DeFalco</surname><given-names>Frank</given-names></name>
        <name><surname>Schuemie</surname><given-names>Martijn</given-names></name>
        <name><surname>Sena</surname><given-names>Anthony</given-names></name>
        <name><surname>Adulyanukosol</surname><given-names>Natthawut</given-names></name>
        <name><surname>Liu</surname><given-names>Star</given-names></name>
        <name><surname>Black</surname><given-names>Adam</given-names></name>
      </person-group>
      <source>Eunomia: Standard dataset manager for observational medical outcomes partnership common data model sample datasets</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/OHDSI/Eunomia/</uri>
      <pub-id pub-id-type="doi">10.32614/CRAN.package.Eunomia</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-omopweb">
    <element-citation>
      <article-title>OMOP common data model</article-title>
      <source>OMOP Common Data Model</source>
      <uri>https://ohdsi.github.io/CommonDataModel/</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
