<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">5701</article-id>
<article-id pub-id-type="doi">10.21105/joss.05701</article-id>
<title-group>
<article-title>lavaanExtra: Convenience Functions for Package
<italic>lavaan</italic></article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4315-6788</contrib-id>
<name>
<surname>Thériault</surname>
<given-names>Rémi</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Psychology, Université du Québec à Montréal,
Québec, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-10-11">
<day>11</day>
<month>10</month>
<year>2023</year>
</pub-date>
<volume>8</volume>
<issue>90</issue>
<fpage>5701</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>R</kwd>
<kwd>psychology</kwd>
<kwd>statistics</kwd>
<kwd>visualization</kwd>
<kwd>structural equation modeling</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>lavaanExtra</monospace> is an R package that offers an
  alternative and vector-based syntax to the package
  <monospace>lavaan</monospace>, as well as other convenience functions
  such as naming paths and defining indirect effects automatically. It
  also offers convenience formatting optimized for publication and
  script sharing workflows.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>lavaan</monospace>
  (<xref alt="Rosseel, 2012" rid="ref-lavaanPackage" ref-type="bibr">Rosseel,
  2012</xref>) is a very popular R package for structural equation
  modeling (SEM). The package relies on specific operators to define
  latent variables, regressions, covariances, indirect effects, and so
  on. However, some individuals (e.g., beginners to R and
  <monospace>lavaan</monospace>)—or in some cases power users—may prefer
  not having to specify the operators themselves, or would like to see
  some steps automatized, such as generating the
  <monospace>lavaan</monospace> model layout or defining indirect
  effects. Furthermore, for researchers, it can be relatively difficult
  to extract relevant statistical outputs in the form of tables and
  figures that are suitable for scientific publication.</p>
  <p><monospace>lavaanExtra</monospace> does mainly two things to
  address these issues. First, it offers an alternative, code-efficient
  flexible modular syntax that allows automatizing certain steps, such
  as defining indirect effects in certain scenarios or the desired
  structure of a SEM model to be plotted (however, note that
  <monospace>lavaan</monospace> is also compatible with a modular
  approach). Second, it facilitates the analysis-to-publication workflow
  by providing publication-ready tables and figures following the style
  requirements of the American Psychological Association (APA).</p>
  <sec id="usage">
    <title>Usage</title>
    <p>There is a single function at the center of the proposed
    alternative syntax, <monospace>write_lavaan()</monospace>. The idea
    behind <monospace>write_lavaan()</monospace> is to define individual
    components (regressions, covariances, latent variables, etc.),
    provide them to the function, and have it write the
    <monospace>lavaan</monospace> model, so the user does not have to
    worry about making typos in the specific symbols required for each
    aspect of the model.</p>
    <p>There are several benefits to this approach. Some
    <monospace>lavaan</monospace> models can become very large. By
    defining the entire model every time, such as is typical with
    <monospace>lavaan</monospace> users, not only do we break the DRY
    (Don’t Repeat Yourself) principle, but our scripts can also become
    long and unwieldy. This problem gets worse in the scenario where we
    want to compare several variations of the same general model.
    <monospace>write_lavaan()</monospace> allows the user to reuse code
    components, say, only the latent variables, for future models.</p>
    <p>This aspect also allows better control over the user’s code. If
    the user makes a mistake in one of, say, five SEM models definition,
    the user will have to change it at all five places within the
    script. With <monospace>write_lavaan()</monospace>, users only need
    to define the reusable component the first time, or until they need
    to change that component again.</p>
    <p>The vector-based approach also allows the use of functions to
    define components. For example, if all scale items are named
    consistently, say <monospace>x1</monospace> to
    <monospace>x50</monospace>, one can use
    <monospace>paste0(&quot;x&quot;, 1:50)</monospace> instead of typing
    all the items by hand and risk making mistakes. However, note that
    reusable components through functions is also compatible with
    <monospace>lavaan</monospace>.</p>
    <p>Another issue with <monospace>lavaan</monospace> models is the
    readability of the code defining the model. One can go to lengths to
    make it pretty, but not everyone does, and many people do not use
    the same strategies to organize the information of the model
    definition. With <monospace>write_lavaan()</monospace>, not only is
    the model information standardized, but it is also neatly divided
    into clear and useful categories.</p>
    <p>Finally, for beginners, it can be difficult to remember the
    correct <monospace>lavaan</monospace> symbols for each specific
    operation. <monospace>write_lavaan()</monospace> uses familiar names
    to convert the information to the correct symbols. Even for people
    familiar with <monospace>lavaan</monospace> syntax, this approach
    can save time. The function also offers the possibility to define
    the named paths automatically with clear and intuitive names.</p>
    <p>I provide a simple Confirmatory Factor Analysis (CFA) example
    below using the <monospace>HolzingerSwineford1939</monospace>
    dataset
    (<xref alt="Holzinger &amp; Swineford, 1939" rid="ref-holzinger1939study" ref-type="bibr">Holzinger
    &amp; Swineford, 1939</xref>). The dataset contains the mental
    ability test scores of children. In this example, we want to define
    the latent variables <monospace>visual</monospace> (visual
    perception ability), <monospace>textual</monospace> (reading and
    writing ability), and <monospace>speed</monospace> (processing speed
    ability), which are defined by items 1 to 9, respectively. We can
    then use the <monospace>cat()</monospace> function on the resulting
    object (of type character) to read it in the traditional way and
    make sure we have not made any mistake.</p>
    <code language="r script">library(lavaanExtra)

x &lt;- paste0(&quot;x&quot;, 1:9)
latent &lt;- list(
  visual = x[1:3],
  textual = x[4:6],
  speed = x[7:9]
)

model.cfa &lt;- write_lavaan(latent = latent)
cat(model.cfa)</code>
    <preformat>## ##################################################
## # [-----Latent variables (measurement model)-----]
## 
## visual =~ x1 + x2 + x3
## textual =~ x4 + x5 + x6
## speed =~ x7 + x8 + x9</preformat>
    <p>Should we want to use these latent variables in a full SEM model,
    we do not need to define the latent variables again, only the new
    components. In the example below, I add regressions, covariances,
    and indirect effects to the model. Two of our latent variables
    (<monospace>textual</monospace> and <monospace>speed</monospace>)
    are now predicted by our mediating variable,
    <monospace>visual</monospace>. In turn,
    <monospace>visual</monospace> is now predicted by our independent
    variables, <monospace>grade</monospace> (the students’ grade) and
    <monospace>ageyr</monospace> (the students’ age, in years).</p>
    <p>With the <monospace>lavaanExtra</monospace> syntax, when defining
    our lists of components, we can think of the
    <monospace>=</monospace> sign as “predicted by”, a bit like
    <monospace>~</monospace> for regression. There is an exception to
    this for the <monospace>indirect</monospace> object, which also
    allows specifying our variables directly instead. When such is the
    case, <monospace>write_lavaan()</monospace> will define all indirect
    paths automatically.</p>
    <code language="r script">DV &lt;- c(&quot;textual&quot;, &quot;speed&quot;)
M &lt;- &quot;visual&quot;
IV &lt;- c(&quot;grade&quot;, &quot;ageyr&quot;)

mediation &lt;- list(speed = M, textual = M, visual = IV)
regression &lt;- list(speed = IV, textual = IV)
covariance &lt;- list(speed = &quot;textual&quot;, ageyr = &quot;grade&quot;, x4 = x[5:6])
indirect &lt;- list(IV = IV, M = M, DV = DV)

model.sem &lt;- write_lavaan(mediation = mediation, 
                          regression = regression, 
                          covariance = covariance, 
                          indirect = indirect, 
                          latent = latent, 
                          label = TRUE)
cat(model.sem)</code>
    <preformat>## ##################################################
## # [-----Latent variables (measurement model)-----]
## 
## visual =~ x1 + x2 + x3
## textual =~ x4 + x5 + x6
## speed =~ x7 + x8 + x9
## 
## ##################################################
## # [-----------Mediations (named paths)-----------]
## 
## speed ~ visual_speed*visual
## textual ~ visual_textual*visual
## visual ~ grade_visual*grade + ageyr_visual*ageyr
## 
## ##################################################
## # [---------Regressions (Direct effects)---------]
## 
## speed ~ grade + ageyr
## textual ~ grade + ageyr
## 
## ##################################################
## # [------------------Covariances-----------------]
## 
## speed ~~ textual
## ageyr ~~ grade
## x4 ~~ x5 + x6
## 
## ##################################################
## # [--------Mediations (indirect effects)---------]
## 
## grade_visual_textual := grade_visual * visual_textual
## grade_visual_speed := grade_visual * visual_speed
## ageyr_visual_textual := ageyr_visual * visual_textual
## ageyr_visual_speed := ageyr_visual * visual_speed</preformat>
  </sec>
  <sec id="tables">
    <title>Tables</title>
    <p>The <monospace>nice_fit()</monospace> function extracts only some
    of the most popular fit indices and organize them such that it is
    easy to compare models. There is an option to format the table as an
    APA <monospace>flextable</monospace>
    (<xref alt="Gohel &amp; Skintzos, 2023" rid="ref-flextablePackage" ref-type="bibr">Gohel
    &amp; Skintzos, 2023</xref>), through the
    <monospace>rempsyc</monospace> package
    (<xref alt="Thériault, 2023" rid="ref-rempsycPackage" ref-type="bibr">Thériault,
    2023</xref>), using option <monospace>nice_table = TRUE</monospace>.
    This <monospace>flextable</monospace> object can then be easily
    exported to Microsoft Word. Below we fit our two earlier models and
    feed them to <monospace>nice_fit()</monospace> as a named list:</p>
    <code language="r script">library(lavaan)
fit.cfa &lt;- cfa(model.cfa, data = HolzingerSwineford1939)
fit.sem &lt;- sem(model.sem, data = HolzingerSwineford1939)

list.mods &lt;- list(`CFA model` = fit.cfa, `SEM model` = fit.sem)
fit_table &lt;- nice_fit(list.mods, nice_table = TRUE)</code>
    <code language="r script">fit_table</code>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/fit_table.png" />
    <p>The table can then be saved to word simply using
    <monospace>flextable::save_as_docx()</monospace> on the resulting
    <monospace>flextable</monospace> object.</p>
    <code language="r script">flextable::save_as_docx(fit_table, path = &quot;fit_table.docx&quot;)</code>
    <p>It will also render to PDF in an <monospace>rmarkdown</monospace>
    document with <monospace>output: pdf_document</monospace>, but using
    <monospace>latex_engine: xelatex</monospace> is necessary when
    including Unicode symbols in tables like with the
    <monospace>nice_fit()</monospace> function.</p>
    <p>It is similarly possible to prepare APA tables in Word or other
    formats with the regression coefficients
    (<monospace>lavaan_reg()</monospace>), covariances
    (<monospace>lavaan_cov()</monospace>), correlations
    (<monospace>lavaan_cor()</monospace>), variances
    (<monospace>lavaan_var()</monospace>), or user-defined parameters
    like for indirect effects (<monospace>lavaan_defined()</monospace>).
    For example, for indirect effects:</p>
    <code language="r script">lavaan_defined(fit.sem, lhs_name = &quot;Indirect Effect&quot;, nice_table = TRUE)</code>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/ind.png" />
  </sec>
  <sec id="figures">
    <title>Figures</title>
    <p>There are several packages designed to plot SEM models, but few
    that people consider satisfying or sufficiently good for publication
    by default. There are two packages that stand out however,
    <monospace>lavaanPlot</monospace>
    (<xref alt="Lishinski, 2021" rid="ref-lavaanPlotPackage" ref-type="bibr">Lishinski,
    2021</xref>) and <monospace>tidySEM</monospace>
    (<xref alt="van Lissa, 2023b" rid="ref-tidySEMPackage" ref-type="bibr">van
    Lissa, 2023b</xref>). Yet, even for those excellent packages, most
    people do not view them as publication-ready or at least optimized
    in the best possible way.</p>
    <p>This is what <monospace>nice_lavaanPlot</monospace> and
    <monospace>nice_tidySEM</monospace> aim to correct. Let’s compare
    the default <monospace>lavaanPlot()</monospace> and
    <monospace>nice_lavaanPlot()</monospace> outputs side-by-side for
    demonstration purposes.</p>
    <code language="r script">lavaanPlot::lavaanPlot(model = fit.sem)</code>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="media/paper_files/figure-latex/nice_lavaanPlot-1.pdf" /></p>
    <code language="r script">nice_lavaanPlot(fit.sem)</code>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="media/paper_files/figure-latex/nice_lavaanPlot-2.pdf" /></p>
    <p>For reference, <monospace>nice_lavaaPlot()</monospace> is a
    simple wrapper around
    <monospace>lavaanPlot::lavaanPlot()</monospace> and an identical
    figure can be obtained using only <monospace>lavaanPlot</monospace>
    with the following code:</p>
    <code language="r script">lavaanPlot::lavaanPlot(
    model = fit.sem,
    node_options = list(shape = &quot;box&quot;, fontname = &quot;Helvetica&quot;),
    coefs = TRUE, 
    stand = TRUE,
    stars = c(&quot;regress&quot;, &quot;latent&quot;, &quot;covs&quot;), 
    graph_options = c(rankdir = &quot;LR&quot;),
    sig = .05
  )</code>
    <p>As these figures demonstrate,
    <monospace>nice_lavaanPlot()</monospace> has several elements
    frequently requested by researchers (especially in psychology): (a)
    a horizontal, rather than vertical, layout; (b) the coefficients
    appear by default (but only significant ones); (c) significance
    stars; and (d) the use of a sans serif font (as required by APA
    style for figures).</p>
    <p>Even so, <monospace>nice_lavaanPlot</monospace> is not perfectly
    optimal for publication, for example for the use of curved lines,
    which many researchers dislike. Nonetheless, it will still yield
    excellent and satisfying results for a quick and easy check.</p>
    <p>The best option for publication then is
    <monospace>nice_tidySEM</monospace>. Let’s first look at the default
    output of the base <monospace>tidySEM::graph_sem()</monospace> for
    reference.</p>
    <code language="r script">tidySEM::graph_sem(fit.sem)</code>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="media/paper_files/figure-latex/graph_sem-1.pdf" /></p>
    <p>The author of the <monospace>tidySEM</monospace> package notes
    that</p>
    <disp-quote>
      <p>This uses a default layout, provided by the
      <monospace>igraph</monospace> package. However, the node placement
      is not very aesthetically pleasing. One of the areas where tidySEM
      really excels is customization.
      (<xref alt="van Lissa, 2023a" rid="ref-tidySEMWebsite" ref-type="bibr">van
      Lissa, 2023a</xref>)</p>
    </disp-quote>
    <p>In this sense, most of the time, both
    <monospace>tidySEM</monospace> and
    <monospace>nice_tidySEM</monospace> will need a layout in order to
    yield the best result. One of the benefits of
    <monospace>nice_tidySEM</monospace> is that when our model is simply
    made of three “levels”: independent variables, mediators, and
    dependent variables (e.g., for a path analysis, or if we do not want
    to draw the items for a full SEM), it is possible to automatically
    specify a proper layout by simply feeding it the
    <monospace>indirect</monospace> object that we created earlier.</p>
    <code language="r script">nice_tidySEM(fit.sem, layout = indirect)</code>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="media/paper_files/figure-latex/nice_tidySEM-1.pdf" /></p>
    <p>For reference, below I provide the code necessary to reproduce
    this figure using the <monospace>tidySEM</monospace> package
    only.</p>
    <code language="r script">library(tidySEM)

mylayout &lt;- data.frame(
  IV = c(&quot;grade&quot;, &quot;ageyr&quot;),
  M = c(&quot;&quot;, &quot;visual&quot;),
  DV = c(&quot;textual&quot;, &quot;speed&quot;)
)
p &lt;- prepare_graph(fit.sem, layout = mylayout)
p &lt;- hide_var(p)
x &lt;- p$edges$est_sig_std
x &lt;- sub(&quot;^0&quot;, &quot;&quot;, x)
x &lt;- sub(&quot;^-0&quot;, &quot;-&quot;, x)
p$edges$label &lt;- x
p$edges$linetype &lt;- 1
p$edges$arrow &lt;- ifelse(p$edges$arrow == &quot;none&quot;, &quot;both&quot;, p$edges$arrow)
plot(p)</code>
    <p>For the time being, <monospace>nice_tidySEM</monospace> only
    supports this three-level automatic layout, but designs with more
    levels are in the works. In the meantime, when the model is more
    complex (or that we want to include items), it is necessary to
    specify the layout manually using a matrix or data frame, which
    allows fine-grained control over the generated figure.</p>
    <code language="r script">mylayout &lt;- data.frame(
  IV = c(&quot;x1&quot;, &quot;grade&quot;, &quot;&quot;, &quot;ageyr&quot;, &quot;&quot;),
  M = c(&quot;x2&quot;, &quot;&quot;, &quot;visual&quot;, &quot;&quot;, &quot;&quot;),
  DV = c(&quot;x3&quot;, &quot;textual&quot;, &quot;&quot;, &quot;speed&quot;, &quot;x9&quot;),
  DV.items = c(paste0(&quot;x&quot;, 4:8)))
as.matrix(mylayout)</code>
    <preformat>##      IV      M        DV        DV.items
## [1,] &quot;x1&quot;    &quot;x2&quot;     &quot;x3&quot;      &quot;x4&quot;    
## [2,] &quot;grade&quot; &quot;&quot;       &quot;textual&quot; &quot;x5&quot;    
## [3,] &quot;&quot;      &quot;visual&quot; &quot;&quot;        &quot;x6&quot;    
## [4,] &quot;ageyr&quot; &quot;&quot;       &quot;speed&quot;   &quot;x7&quot;    
## [5,] &quot;&quot;      &quot;&quot;       &quot;x9&quot;      &quot;x8&quot;</preformat>
    <code language="r script">nice_tidySEM(fit.sem, layout = mylayout, label_location = 0.70)</code>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="media/paper_files/figure-latex/nice_tidySEM2-1.pdf" /></p>
    <p>If the figure is still not sufficiently satisfying, it is
    possible to store the output as a <monospace>tidy_sem</monospace>
    object (by using <monospace>plot = FALSE</monospace>), which can
    then be modified according to regular <monospace>tidySEM</monospace>
    syntax. This can be useful to fine-tune and finalize the figure.</p>
    <code language="r script">x &lt;- nice_tidySEM(fit.sem, layout = mylayout, label_location = 0.65, 
                  reduce_items = c(x = 0.4, y = 0.2), plot = FALSE)
from &lt;- x$edges$from
to &lt;- x$edges$to
x$edges[from == &quot;grade&quot; &amp; to == &quot;speed&quot;, &quot;curvature&quot;] &lt;- 40
x$edges[from == &quot;ageyr&quot; &amp; to == &quot;textual&quot;, &quot;curvature&quot;] &lt;- -40
plot(x)</code>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="media/paper_files/figure-latex/nice_tidySEM3-1.pdf" /></p>
    <p>The resulting figure can be saved using
    <monospace>ggplot2::ggsave()</monospace>
    (<xref alt="Wickham, 2016" rid="ref-ggplot2Package" ref-type="bibr">Wickham,
    2016</xref>):</p>
    <code language="r script">ggplot2::ggsave(&quot;my_semPlot.pdf&quot;, width = 8, height = 6)</code>
    <p>For reference, below I provide the code necessary to reproduce
    this figure using the <monospace>tidySEM</monospace> package
    only.</p>
    <code language="r script">library(tidySEM)

p &lt;- prepare_graph(fit.sem, layout = mylayout)
p &lt;- edit_graph(p, { label_location &lt;- 0.65 })
p &lt;- hide_var(p)
x &lt;- p$edges$est_sig_std
x &lt;- sub(&quot;^0&quot;, &quot;&quot;, x)
x &lt;- sub(&quot;^-0&quot;, &quot;-&quot;, x)
p$edges$label &lt;- x
items &lt;- p$edges[p$edges$op == &quot;=~&quot;, &quot;rhs&quot;]
i &lt;- p$nodes$name %in% items
p$nodes[i, ]$node_xmin &lt;- p$nodes[i, ]$node_xmin + 0.4
p$nodes[i, ]$node_xmax &lt;- p$nodes[i, ]$node_xmax - 0.4
p$nodes[i, ]$node_ymin &lt;- p$nodes[i, ]$node_ymin + 0.2
p$nodes[i, ]$node_ymax &lt;- p$nodes[i, ]$node_ymax - 0.2
p$edges$linetype &lt;- 1
p$edges$arrow &lt;- ifelse(p$edges$arrow == &quot;none&quot;, &quot;both&quot;, p$edges$arrow)
from &lt;- p$edges$from
to &lt;- p$edges$to
p$edges[from == &quot;grade&quot; &amp; to == &quot;speed&quot;, &quot;curvature&quot;] &lt;- 40
p$edges[from == &quot;ageyr&quot; &amp; to == &quot;textual&quot;, &quot;curvature&quot;] &lt;- -40
plot(p)</code>
    <p>Other differences between <monospace>tidySEM</monospace> and
    <monospace>nice_tidySEM()</monospace> are that: (a) the latter
    displays standardized coefficients by default (but unstandardized
    coefficients can be specified with
    <monospace>est_std = FALSE</monospace>), (b) if using standardized
    coefficients, the leading zero is omitted (as preferred by many
    researchers); (c) does not plot the variances by default, (d) uses
    full double-headed arrows instead of dashed lines with no arrows for
    covariances, (e) has further arguments for easy customization (e.g.,
    <monospace>reduce_items</monospace>), and (f) allows defining an
    automatic layout in specific cases (as described earlier).</p>
    <p>Finally, the base function,
    <monospace>tidySEM::graph_sem()</monospace>, is difficult to
    customize in depth. For the aesthetics of
    <monospace>nice_tidySEM()</monospace>, for example, we need to rely
    instead on the <monospace>tidySEM</monospace>’s
    <monospace>prepare_graph()</monospace>,
    <monospace>edit_graph()</monospace>, and numerous conditional
    formatting functions. In contrast to
    <monospace>nice_tidySEM()</monospace>, these
    <monospace>tidySEM</monospace> functions act more like a grammar of
    SEM plotting, akin to the popular grammar of graphics,
    <monospace>ggplot2</monospace>
    (<xref alt="Wickham, 2016" rid="ref-ggplot2Package" ref-type="bibr">Wickham,
    2016</xref>). This provides great flexibility, but for the
    occasional user, also comes with an additional burden, as users may
    for example need to skim through almost 400 undocumented functions,
    should they want to conditionally edit the resulting
    <monospace>tidy_sem</monospace> object.</p>
  </sec>
</sec>
<sec id="availability">
  <title>Availability</title>
  <p>The <monospace>lavaanExtra</monospace> package is licensed under
  the MIT License. It is available on CRAN, and can be installed using
  <monospace>install.packages(&quot;lavaanExtra&quot;)</monospace>. The
  full tutorial website can be accessed at:
  <ext-link ext-link-type="uri" xlink:href="https://lavaanExtra.remi-theriault.com/">https://lavaanExtra.remi-theriault.com/</ext-link>.
  All code is open-source and hosted on GitHub, and bugs can be reported
  at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/rempsyc/lavaanExtra/issues/">https://github.com/rempsyc/lavaanExtra/issues/</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>I would like to thank Hugues Leduc, Jany St-Cyr, Andreea Gavrila,
  Patrick Coulombe, Jay Olson, Charles-Étienne Lavoie, and Björn
  Büdenbender for statistical or technical advice that helped inform
  some functions of this package and/or useful feedback on this
  manuscript. I would also like to acknowledge funding from the Social
  Sciences and Humanities Research Council of Canada.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-lavaanPackage">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rosseel</surname><given-names>Yves</given-names></name>
      </person-group>
      <article-title>lavaan: An R package for structural equation modeling</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2012">2012</year>
      <volume>48</volume>
      <issue>2</issue>
      <pub-id pub-id-type="doi">10.18637/jss.v048.i02</pub-id>
      <fpage>1</fpage>
      <lpage>36</lpage>
    </element-citation>
  </ref>
  <ref id="ref-flextablePackage">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Gohel</surname><given-names>David</given-names></name>
        <name><surname>Skintzos</surname><given-names>Panagiotis</given-names></name>
      </person-group>
      <source>flextable: Functions for tabular reporting</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=flextable</uri>
    </element-citation>
  </ref>
  <ref id="ref-rempsycPackage">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Thériault</surname><given-names>Rémi</given-names></name>
      </person-group>
      <article-title>rempsyc: Convenience functions for psychology</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2023">2023</year>
      <volume>8</volume>
      <issue>87</issue>
      <pub-id pub-id-type="doi">10.21105/joss.05466</pub-id>
      <fpage>5466</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-lavaanPlotPackage">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Lishinski</surname><given-names>Alex</given-names></name>
      </person-group>
      <source>lavaanPlot: Path diagrams for ’lavaan’ models via ’DiagrammeR’</source>
      <year iso-8601-date="2021">2021</year>
      <uri>https://CRAN.R-project.org/package=lavaanPlot</uri>
    </element-citation>
  </ref>
  <ref id="ref-tidySEMPackage">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>van Lissa</surname><given-names>Caspar J.</given-names></name>
      </person-group>
      <source>tidySEM: Tidy structural equation modeling</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://CRAN.R-project.org/package=tidySEM</uri>
    </element-citation>
  </ref>
  <ref id="ref-tidySEMWebsite">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>van Lissa</surname><given-names>Caspar J.</given-names></name>
      </person-group>
      <source>Plotting graphs for structural equation models</source>
      <year iso-8601-date="2023">2023</year>
      <uri>https://cjvanlissa.github.io/tidySEM/articles/Plotting_graphs.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-ggplot2Package">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <source>ggplot2: Elegant graphics for data analysis</source>
      <publisher-name>Springer-Verlag New York</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <isbn>978-3-319-24277-4</isbn>
      <uri>https://ggplot2.tidyverse.org</uri>
    </element-citation>
  </ref>
  <ref id="ref-holzinger1939study">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Holzinger</surname><given-names>Karl John</given-names></name>
        <name><surname>Swineford</surname><given-names>Frances</given-names></name>
      </person-group>
      <article-title>A study in factor analysis: The stability of a bi-factor solution</article-title>
      <source>Supplementary educational monographs</source>
      <year iso-8601-date="1939">1939</year>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
