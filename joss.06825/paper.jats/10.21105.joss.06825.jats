<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6825</article-id>
<article-id pub-id-type="doi">10.21105/joss.06825</article-id>
<title-group>
<article-title>An Open-Source Tool for Generating Domain-Specific
Accelerators for Resource-Constrained Computing</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname>Kerns</surname>
<given-names>David T</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Adegbija</surname>
<given-names>Tosiron</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Electrical &amp; Computer Engineering,
University of Arizona, Tucson, Arizona, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2023-12-01">
<day>1</day>
<month>12</month>
<year>2023</year>
</pub-date>
<volume>9</volume>
<issue>102</issue>
<fpage>6825</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Domain-specific accelerators</kwd>
<kwd>computer-aided design</kwd>
<kwd>resource-constrained systems</kwd>
<kwd>energy efficient</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Domain-specific accelerators (DSAs)
  (<xref alt="Hennessy &amp; Patterson, 2019" rid="ref-Hennessy_Patterson_2019" ref-type="bibr">Hennessy
  &amp; Patterson, 2019</xref>) are crucial in modern computer
  architecture as they enable highly efficient processing for
  specialized tasks, significantly improving performance and energy
  efficiency over general-purpose computing systems. Previous work
  (<xref alt="Limaye &amp; Adegbija, 2021" rid="ref-limaye21_dosage" ref-type="bibr">Limaye
  &amp; Adegbija, 2021</xref>) introduced the
  <italic>Superblock</italic> (SB) as a new granularity for designing
  DSAs. The SB provides a middle ground to the existing extreme
  granularities of creating DSAs only from Basic Blocks (BBs) or whole
  functions. This paper describes an Open Source Software (OSS) tool
  called <bold>D2</bold> that implements the SB approach and will enable
  researchers and developers in the DSA community to easily experiment
  with this new granularity towards finding an optimal solution to the
  DSA definition at hand. Our results show that the SB should be taken
  seriously as a candidate for creating DSAs.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The DSA field currently offers few, if any, open-source automation
  tools. An important challenge in the design of DSAs is identifying
  what portions of a set of domain programs should be implemented in
  hardware (i.e., accelerated) to maximize the performance and energy
  benefits of the DSA. Hennessy &amp; Patterson
  (<xref alt="2019" rid="ref-Hennessy_Patterson_2019" ref-type="bibr">2019</xref>)
  even argue for a new domain-specific language. The SB as a new DSA
  granularity offers real benefits for efficiently addressing this
  challenge. However, manually identifying these SBs can be
  prohibitively time-consuming and error-prone. This ground-up re-write
  as open source from conception hopes to bring the SB construct to the
  community at large. The <bold>D2</bold> tool provides an exhaustive
  list of SBs that can be simulated to determine the optimal size.</p>
</sec>
<sec id="key-aspects-of-d2">
  <title>Key aspects of D2</title>
  <p>This is a follow-on work of Limaye &amp; Adegbija
  (<xref alt="2021" rid="ref-limaye21_dosage" ref-type="bibr">2021</xref>),
  re-engineered from the ground up, with special emphasis on making it
  open source. Additionally, the novel parts are:</p>
  <list list-type="bullet">
    <list-item>
      <p>user-controlled constraints</p>
    </list-item>
    <list-item>
      <p>normalization of BBs</p>
    </list-item>
    <list-item>
      <p>ranking at the BB level and then mapping the BB ranking onto
      SBs</p>
    </list-item>
    <list-item>
      <p>maintaining a link back to the source so that the accelerators
      can be generated directly from the C source code rather than the
      LLVM intermediate representation (IR) files</p>
    </list-item>
  </list>
  <fig>
    <caption><p>D2
    Flow<styled-content id="figU003Ad2flow"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="d2_flow.png" />
  </fig>
</sec>
<sec id="d2-overview">
  <title>D2 Overview</title>
  <p><bold>D2</bold>, as depicted in
  <xref alt="[fig:d2flow]" rid="figU003Ad2flow">[fig:d2flow]</xref>, is
  a tool that accepts a system's tree of source code. The user makes
  minor modifications to the makefiles to generate the required LLVM IR
  files. <bold>D2</bold> then evaluates the IR files to create a set of
  metadata files. It then identifies and ranks BBs and SBs as candidates
  for FPGA acceleration to produce an optimal set of accelerators for
  the system. The identified source lines are then given to a synthesis
  tool, such as Xilinx Vivato HLS
  (<xref alt="Xilinx, 2021" rid="ref-xilinx21_vivado_hls" ref-type="bibr">Xilinx,
  2021</xref>) to produce an FPGA accelerator that is integrated back
  into the source code. The resulting system runs faster and more
  efficiently, potentially making the system even viable on a
  resource-constrained target.</p>
  <sec id="target-system-model">
    <title>Target system model</title>
    <p>The target is assumed to be a resource-constrained computing
    system in which the generated DSA can be integrated. For example,
    this could be a CPU+FPGA system, wherein the DSA is implemented on
    the FPGA, while the unaccelerated portions of the target workloads
    are run on the CPU. In this scenario, the FPGA should be addressable
    from the CPU such that the identified code that would normally be
    run by the CPU can be implemented on the FPGA and offloaded from the
    CPU without a significant bottleneck. This model is commonly found
    in resource-constrained computing devices where power constraints
    are a major concern, like human-implanted medical devices
    (<xref alt="Karageorgos et al., 2020" rid="ref-karageorgos20_hwsw_bci" ref-type="bibr">Karageorgos
    et al., 2020</xref>), for example.</p>
  </sec>
  <sec id="d2-implementation-details">
    <title>D2 implementation details</title>
    <p><bold>D2</bold> is a shell script that calls the individual
    programs written in both Python and C++ that process the LLVM files
    generated by the compiler.</p>
    <sec id="the-search-for-superblocks">
      <title>The search for superblocks</title>
      <p>The control flow graph (CFG) is easily generated from the LLVM
      IR
      (<xref alt="LLVM Language Reference Manual, n.d.-a" rid="ref-ref22_llvmwebsiteintro" ref-type="bibr"><italic>LLVM
      Language Reference Manual</italic>, n.d.-a</xref>) files. We use
      Graphviz
      (<xref alt="Gansner et al., 1993" rid="ref-gansner17_graphviz" ref-type="bibr">Gansner
      et al., 1993</xref>) .dot file format to represent the CFG. The
      heart of the overall <bold>D2</bold> package is the
      <monospace>sb</monospace> application (sb.cc) that reads the .dot
      file and iteratively identifies every SB in the CFG file. Using
      the C++ Standard Template Library (STL)
      (<xref alt="Plauger et al., 2000" rid="ref-plauger00_cpp_stl" ref-type="bibr">Plauger
      et al., 2000</xref>), a map is constructed of each BB as a node
      with a vector of connected nodes. Once the graph is parsed into
      the map/tree, it recursively walks the tree identifying SBs by
      adding one adjacent node at a time and checking if the “One In,
      One Out” condition of an SB is satisfied. Once identified, the SB
      is added to a vector of SBs that is output and then ranked in a
      later stage.</p>
    </sec>
    <sec id="identification-of-accelerator-candidates">
      <title>Identification of accelerator candidates</title>
      <p>The key to achieving maximum acceleration is to choose areas of
      the software that are compute-bound. Further, if an accelerator
      can be used by multiple applications, the number of accelerators
      can be reduced. <bold>D2</bold> makes a concerted effort to
      identify common and frequently used code segments for
      acceleration.</p>
    </sec>
    <sec id="constraints">
      <title>Constraints</title>
      <p>One piece of metadata that is captured in the CFG file is all
      functions that the BB calls. These are labeled as constraints; in
      that if the BB is to be realized by an accelerator, any function
      called by the BB must also be incorporated by the accelerator.
      Thus, a BB that calls I/O functions, for example, is not a
      candidate for acceleration. During the <bold>D2</bold> processing
      of the source tree, the user is presented the list of constraints
      or functions called, if any, and given the option to remove any
      functions that could be realized by an accelerator.</p>
    </sec>
    <sec id="normalization-of-basic-blocks">
      <title>Normalization of basic blocks</title>
      <p><bold>D2</bold> finds common accelerators through a process we
      call <italic>normalization</italic>. The normalization process
      strips the code of all data, both variables and constants, and
      replaces them with named registers. This process is greatly
      simplified via LLVM's existing Static Single Assignment (SSA)
      (<xref alt="LLVM Language Reference Manual, n.d.-b" rid="ref-ref22_llvmwebsiteabs" ref-type="bibr"><italic>LLVM
      Language Reference Manual</italic>, n.d.-b</xref>) strategy. Once
      normalized, BBs that perform the same set of instructions on a
      given set of data inputs are identified and consolidated to
      minimize redundancy.</p>
    </sec>
    <sec id="ranking-and-selection">
      <title>Ranking and selection</title>
      <p>Ranking is accomplished by keeping metrics on each BB. Often,
      several SBs are subsets of a larger SB. While the largest SB often
      offers the best candidate for acceleration for a specific
      workload, a smaller SB that is common to multiple workloads may
      offer better overall acceleration to the entire system.
      <bold>D2</bold> makes it easier to iterate through the many
      possibilities to find the optimal solution for the target
      workloads.</p>
    </sec>
    <sec id="back-to-the-source">
      <title>Back to the source</title>
      <p><bold>D2</bold> tracks the original C source files and lines of
      code that comprise each basic block. This allows us to use generic
      high-level synthesis tools like Xilinx Vivado
      (<xref alt="Xilinx, 2021" rid="ref-xilinx21_vivado_hls" ref-type="bibr">Xilinx,
      2021</xref>) to produce the hardware description code (e.g.,
      Verilog, SystemVerilog, VHDL) from the C source. This also
      simplifies modification of the original source.</p>
    </sec>
  </sec>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>We believe there is a future in right-sizing the DSA and that the
  <bold>D2</bold> tool can provide valuable input to that end. Because
  there are very few OSS tools geared towards the automation of DSA
  identification, we hope that the <bold>D2</bold> tool will be utilized
  and expanded upon within the computer architecture community to become
  a valuable resource and additionally, make the concept of the SB more
  accessible to the community as a whole.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-Hennessy_Patterson_2019">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Hennessy</surname><given-names>John</given-names></name>
        <name><surname>Patterson</surname><given-names>David</given-names></name>
      </person-group>
      <source>A new golden age for computer architecture</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>New York</publisher-loc>
      <year iso-8601-date="2019">2019</year>
      <volume>62</volume>
      <issn>0001-0782</issn>
      <pub-id pub-id-type="doi">10.1145/3282307</pub-id>
      <fpage>48</fpage>
      <lpage>60</lpage>
    </element-citation>
  </ref>
  <ref id="ref-xilinx21_vivado_hls">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Xilinx</surname><given-names>I</given-names></name>
      </person-group>
      <article-title>Introduction to FPGA design with vivado high-level synthesis</article-title>
      <publisher-name>Xilinx</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://docs.xilinx.com/v/u/en-US/ug998-vivado-intro-fpga-design-hls</uri>
    </element-citation>
  </ref>
  <ref id="ref-limaye21_dosage">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Limaye</surname><given-names>Ankur</given-names></name>
        <name><surname>Adegbija</surname><given-names>Tosiron</given-names></name>
      </person-group>
      <article-title>DOSAGE: Generating domain-specific accelerators for resource-constrained computing</article-title>
      <source>2021 IEEE/ACM international symposium on low power electronics and design (ISLPED)</source>
      <year iso-8601-date="2021">2021</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ISLPED52811.2021.9502501</pub-id>
      <fpage>1</fpage>
      <lpage>6</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gansner17_graphviz">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gansner</surname><given-names>Emden R.</given-names></name>
        <name><surname>Koutsofios</surname><given-names>Eleftherios</given-names></name>
        <name><surname>North</surname><given-names>Stephen C.</given-names></name>
        <name><surname>Vo</surname><given-names>Kiem-Phong</given-names></name>
      </person-group>
      <article-title>A technique for drawing directed graphs</article-title>
      <source>IEEE Trans. Software Eng.</source>
      <year iso-8601-date="1993">1993</year>
      <volume>19</volume>
      <issue>3</issue>
      <uri>https://doi.org/10.1109/32.221135</uri>
      <pub-id pub-id-type="doi">10.1109/32.221135</pub-id>
      <fpage>214</fpage>
      <lpage>230</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ref22_llvmwebsiteabs">
    <element-citation publication-type="webpage">
      <article-title>LLVM language reference manual</article-title>
      <uri>https://llvm.org/docs/LangRef.html#abstract</uri>
    </element-citation>
  </ref>
  <ref id="ref-ref22_llvmwebsiteintro">
    <element-citation publication-type="webpage">
      <article-title>LLVM language reference manual</article-title>
      <uri>https://llvm.org/docs/LangRef.html#introduction</uri>
    </element-citation>
  </ref>
  <ref id="ref-karageorgos20_hwsw_bci">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Karageorgos</surname><given-names>Ioannis</given-names></name>
        <name><surname>Sriram</surname><given-names>Karthik</given-names></name>
        <name><surname>Veselý</surname><given-names>Ján</given-names></name>
        <name><surname>Wu</surname><given-names>Michael</given-names></name>
        <name><surname>Powell</surname><given-names>Marc</given-names></name>
        <name><surname>Borton</surname><given-names>David</given-names></name>
        <name><surname>Manohar</surname><given-names>Rajit</given-names></name>
        <name><surname>Bhattacharjee</surname><given-names>Abhishek</given-names></name>
      </person-group>
      <article-title>Hardware-software co-design for brain-computer interfaces</article-title>
      <source>2020 ACM/IEEE 47th annual international symposium on computer architecture (ISCA)</source>
      <year iso-8601-date="2020">2020</year>
      <volume></volume>
      <pub-id pub-id-type="doi">10.1109/ISCA45697.2020.00041</pub-id>
      <fpage>391</fpage>
      <lpage>404</lpage>
    </element-citation>
  </ref>
  <ref id="ref-plauger00_cpp_stl">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Plauger</surname><given-names>P. J.</given-names></name>
        <name><surname>Lee</surname><given-names>Meng</given-names></name>
        <name><surname>Musser</surname><given-names>David</given-names></name>
        <name><surname>Stepanov</surname><given-names>Alexander A.</given-names></name>
      </person-group>
      <source>C++ standard template library</source>
      <publisher-name>Prentice Hall PTR</publisher-name>
      <publisher-loc>USA</publisher-loc>
      <year iso-8601-date="2000">2000</year>
      <edition>1st</edition>
      <isbn>0134376331</isbn>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
