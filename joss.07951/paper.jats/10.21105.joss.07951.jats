<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7951</article-id>
<article-id pub-id-type="doi">10.21105/joss.07951</article-id>
<title-group>
<article-title>MontePy: a Python library for reading, editing, and
writing MCNP input files.</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-6451-4818</contrib-id>
<name>
<surname>Gale</surname>
<given-names>Micah D.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-0742-3404</contrib-id>
<name>
<surname>Labossiere-Hickman</surname>
<given-names>Travis J.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Carbno</surname>
<given-names>Brenna A.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0005-6691-5128</contrib-id>
<name>
<surname>Bascom</surname>
<given-names>Andrew J.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Idaho National Laboratory, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-02-01">
<day>1</day>
<month>2</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>108</issue>
<fpage>7951</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>nuclear engineering</kwd>
<kwd>monte carlo methods</kwd>
<kwd>particle transport</kwd>
<kwd>Monte Carlo N-Particle (MCNP)</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The Monte Carlo N-Particle (MCNP) radiation transport code is a
  highly capable and accurate code with a long legacy. MCNP uses the
  Monte Carlo simulation process to simulate the path of particles
  (e.g., neutrons, photons, charged particles, etc.), and their
  interaction with materials. It is widely used in nuclear engineering,
  high-energy physics, and other fields. Its origins in the
  mid-twentieth century predate many modern software conventions. MCNP
  users provide an input file to MCNP, which it then uses to create an
  internal representation of the simulation problem. These input files
  originally had to be stored as punchcard decks, and the user manual
  still uses the terminology of cards and decks, despite moving beyond
  punchcards. MCNP predates nearly all modern human readable markup or
  data serialization languages, such as the extensible Markup Language
  (XML), the Standard Generalized Markup Language (SGML), YAML (YAML
  Ain’t Markup Language), and Javascript Object Notation (JSON). Due to
  this, MCNP uses an entirely custom defined syntax language for its
  input, making off-the-shelf libraries for XML, YAML, and JSON
  impossible to use for scripting various operations on MCNP input files
  (<xref alt="Kulesza et al., 2022" rid="ref-KuleszaU003A2022" ref-type="bibr">Kulesza
  et al., 2022</xref>).</p>
  <fig>
    <caption><p>Diagram of how the different models of MontePy interact
    to form an Object Oriented Programming (OOP)
    interface.<styled-content id="figU003Aoverall"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="overall_diagram.pdf" />
  </fig>
  <p>MCNP simulation problems use three-dimensional constructive solid
  geometry (CSG). The simulation is composed of a series of cells,
  representing spatial regions in the modeled geometry. These cells have
  assigned densities, and are linked to a material definition. These
  materials define the relative amounts of different isotopes in the
  material, and can be shared between cells. The cell geometry in CSG is
  defined by a series of Boolean set operations of geometry primitives,
  which are usually quadratic surfaces. For instance, a cylindrical
  nuclear fuel pellet’s geometry could be defined as the inside of an
  axially infinite cylinder with a specified radius, and above a bottom
  plane, and below a top plane.</p>
  <p>MontePy is a Python library for reading, editing, and writing these
  MCNP input files. It provides an object-oriented programming (OOP)
  interface for interacting with the simulation problems. MontePy does
  not perform any of its own radiation transport, or neutronics
  calculations. MontePy uses a syntax parser built on top of the Python
  package for parsers: SLY
  (<xref alt="Beazly &amp; contributors, 2016" rid="ref-BeazlyU003A2016" ref-type="bibr">Beazly
  &amp; contributors, 2016</xref>). This parser builds a concrete syntax
  tree of the input file. An example syntax tree for defining a cell is
  given in
  <xref alt="[fig:syntax]" rid="figU003Asyntax">[fig:syntax]</xref>.
  This allows MontePy to parse the input file without losing any
  information or formatting. The MontePy objects that represent MCNP
  objects such as: cells, surfaces, materials, etc., crawl through this
  syntax tree and update their internal values to reflect this tree.
  These attributes will then be exposed to the user as properties. Once
  a file has been fully read in, all objects will be linked together.
  The interaction between the components of MontePy are shown in
  <xref alt="[fig:overall]" rid="figU003Aoverall">[fig:overall]</xref>.
  For instance a cell object will be given a “pointer” to the material
  object that it is defined to be filled with. When the user wants to
  write their modified model to file this process will be reversed. The
  objects will crawl their syntax tree as necessary to ensure it has the
  correct value. If a value has changed, MontePy will try to match the
  numerical precision that the user used initially in the input
  file.</p>
  <fig>
    <caption><p>The syntax for defining a cell for MCNP, and the syntax
    tree that MontePy will extract from
    it.<styled-content id="figU003Asyntax"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="syntax_tree_diagram.pdf" />
  </fig>
  <p>MontePy is focused on using good software practices to simplify
  adoption as much as possible. MontePy uses industry standard
  continuous integration and continuous deployment (CI/CD) tools to test
  all changes, and ensure changes meet the standards of MontePy.
  Currently the test suite has over 380 tests, which have over 98% code
  coverage of the source code. This practice significantly reduces the
  risk of regressions and the introduction of new bugs. All software
  changes must be reviewed by at least one person prior to being
  accepted for deployment to users. MontePy is also written only in
  Python and only has two dependencies. This was intentionally done to
  make it as easy as possible for a new user to install it, which they
  can do with a single command. The decision to only use Python was made
  to facilitate the creation of a user community. All end-users should
  know how to write some Python, so any user could, with some guidance,
  become a developer.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>MCNP is a popular Monte Carlo radiation transport code. It has
  nearly unmatched capabilities in its physics modeling, and its support
  for 37 different particle types
  (<xref alt="Kulesza et al., 2022" rid="ref-KuleszaU003A2022" ref-type="bibr">Kulesza
  et al., 2022</xref>). However, due to the fact that MCNP uses a custom
  syntax, it requires referencing other objects (e.g., a cell
  referencing a material) by their number, and tendency of radiation
  transport simulations to be complex, working with MCNP input files can
  be tedious and error-prone. This issue is well suited for
  automation.</p>
  <p>Current packages do exist for automating the generation of new MCNP
  input files. One such package is the Advanced Reactor Modeling
  Interface (ARMI). ARMI is a modular open-source framework for coupling
  multiple simulation codes. A closed-source MCNP plugin for ARMI does
  exist. ARMI is more focused on making its internal model of a nuclear
  reactor fit in an MCNP input file, rather than being able to open and
  parse an arbitrary MCNP model
  (<xref alt="Touran et al., 2017" rid="ref-TouranU003A2017" ref-type="bibr">Touran
  et al., 2017</xref>). This is indicative of the various tools that
  have been created for working with MCNP in the past. They tend to be
  purpose-built for a specific problem, or class of problems, and are
  not easily generalized. MCNP input models could also be created with a
  templating engine, like the Workflow Template and Toolkit System
  (WATTS)
  (<xref alt="Romano et al., 2022" rid="ref-RomanoU003A2022" ref-type="bibr">Romano
  et al., 2022</xref>). This though requires the user to create a
  template from the set of problems they plan to model. This would be
  well suited for a sensitivity study where many very similar
  simulations are run, but not for making large edits to an input file
  or making a single problem from scratch.</p>
  <p>PyNE: the Nuclear Engineering Toolkit offers some similar
  capabilities to WATTS for input generation. PyNE can create MCNP input
  files for specific features and extract some data from MCNP output
  files, but it cannot read MCNP input files. However, its full
  capabilities extend far beyond interfacing with MCNP. PyNE can
  simplify material creations, analyses of cross section data,
  transmutations of complex systems, and interfacing with other common
  nuclear engineering software and data formats
  (<xref alt="Scopatz et al., 2012" rid="ref-ScopatzU003A2012" ref-type="bibr">Scopatz
  et al., 2012</xref>). PyNE is an excellent companion tool to
  MontePy.</p>
  <p>All of these previous solutions were incomplete in one way or
  another. None of these previous solutions are able to read in a
  previous MCNP input file and edit it in a general manner. In addition,
  WATTS does not have any fundamental understanding of what fields are
  for a user provided MCNP template. The same is true for a myriad of
  application-specific industry tools that are tailor-made for specific
  problems. There is a clear need for an object-oriented interface to
  these files that can both “understand” the input, and read and edit
  the files. This sort of model interface has been present for years in
  the Python API for the Monte Carlo code, OpenMC
  (<xref alt="Romano et al., 2015" rid="ref-RomanoU003A2015" ref-type="bibr">Romano
  et al., 2015</xref>). Since its incorporation in the code, this
  interface has become by far the most dominant user interface for that
  code, as opposed to manual editing of the XML input files.</p>
  <p>Ideally this object-oriented interface should be in Python as it is
  such a prolific language, especially among novice and intermediate
  programmers. A few such libraries do exist: MCNPy, mckit, and others
  discussed later. MCNPy is a Python wrapper for a java engine that can
  read, edit, and write MCNP input files. It can “understand” MCNP
  inputs, or as the authors put it, it has a “metamodel” for MCNP
  (<xref alt="Kowal et al., 2023" rid="ref-KowalU003A2023" ref-type="bibr">Kowal
  et al., 2023</xref>). Having a library written in another language
  than what the user is used to, introduces another barrier to
  converting a user into a developer. This could present a serious
  barrier to developing a thriving user and developer community for this
  open source software. It does not appear that MCNPy has any automated
  testing suite at this time, and so there is no guarantee that it will
  actually perform the functions it claims to. In addition it imposes
  additional formatting requirements on an input file that is read,
  beyond what MCNP requires
  (<xref alt="Kulesza et al., 2022" rid="ref-KuleszaU003A2022" ref-type="bibr">Kulesza
  et al., 2022</xref>). Mckit on the other hand is written primarily in
  python, and does use automated testing. Unfortunately the existing
  documentation is difficult to acces, incomplete, and primarily in
  russian, so it is currently difficult to use for those who cannot read
  russian. It was difficult to assess the state of this project due to
  this. It appeared that mckit is more of a functional programming style
  library, rather than an object-oriented programming style
  (<xref alt="Rodionov &amp; Portnov, 2024" rid="ref-rodionov_mckit_2024" ref-type="bibr">Rodionov
  &amp; Portnov, 2024</xref>). MontePy provides all of these listed
  capabilities, while also being written purely in Python, and avoiding
  this barrier to forming a thriving open source community.</p>
  <p>The authors attempted to find as many open-source Python libraries
  which overlapped MontePy’s capabilities as possible. This was not an
  exhaustive seach, but should cover many such libraries. Given the
  number of libraries found the following lists will simply be an
  attempt to categorize these libraries.</p>
  <p>The first group of libraries are those which attempt to have a
  read, edit, write capability for MCNP input files. These all do not
  fully parse the inputs as they do not use context-free parsers, and
  are generally feature limited, and may lack sufficient documentation.
  These libaries are:</p>
  <list list-type="bullet">
    <list-item>
      <p>numjuggler
      (<xref alt="Travleev et al., 2022" rid="ref-travleev_numjuggler_2022" ref-type="bibr">Travleev
      et al., 2022</xref>)</p>
    </list-item>
    <list-item>
      <p>MCNP Input Reader
      (<xref alt="Mariano, 2022" rid="ref-mariano_mcnp_2022" ref-type="bibr">Mariano,
      2022</xref>)</p>
    </list-item>
    <list-item>
      <p>mctools
      (<xref alt="Laghi, 2023" rid="ref-laghi_mctools_2023" ref-type="bibr">Laghi,
      2023</xref>)</p>
    </list-item>
    <list-item>
      <p>mc-tools
      (<xref alt="Batkov et al., 2024" rid="ref-batkov_mc-tools_2024" ref-type="bibr">Batkov
      et al., 2024</xref>)</p>
    </list-item>
    <list-item>
      <p>PyMCNP
      (<xref alt="Persaud et al., 2024" rid="ref-persaud_python-based_2024" ref-type="bibr">Persaud
      et al., 2024</xref>)</p>
    </list-item>
  </list>
  <p>There are even more tools that specialize in input templating and
  generation. These are clearly not complete alternatives as they lack
  the ability to read MCNP input files. These libraries are:</p>
  <list list-type="bullet">
    <list-item>
      <p>CardSharpForMCNP
      (<xref alt="Pacific Northwest National Laboratory, 2025" rid="ref-pacific_northwest_national_laboratory_cardsharpformcnp_2025" ref-type="bibr">Pacific
      Northwest National Laboratory, 2025</xref>)</p>
    </list-item>
    <list-item>
      <p>wig
      (<xref alt="Hagen, 2021" rid="ref-hagen_wig_2021" ref-type="bibr">Hagen,
      2021</xref>)</p>
    </list-item>
    <list-item>
      <p>Plugin-MCNP [for Funz]
      (<xref alt="Richet, 2023" rid="ref-richet_funz_2023" ref-type="bibr">Richet,
      2023</xref>)</p>
    </list-item>
    <list-item>
      <p>GDNP
      (<xref alt="niess, 2018" rid="ref-niess_gdnp_2018" ref-type="bibr">niess,
      2018</xref>)</p>
    </list-item>
    <list-item>
      <p>map-stp
      (<xref alt="Portnov, 2024" rid="ref-portnov_map-stp_2024" ref-type="bibr">Portnov,
      2024</xref>)</p>
    </list-item>
    <list-item>
      <p>MCNP Input Generator
      (<xref alt="ikarino, 2021" rid="ref-ikarino_mcnp_2021" ref-type="bibr">ikarino,
      2021</xref>)</p>
    </list-item>
    <list-item>
      <p>Neutronics Material Maker
      (<xref alt="Shimwell et al., 2024" rid="ref-shimwell_neutronics_2024" ref-type="bibr">Shimwell
      et al., 2024</xref>)</p>
    </list-item>
  </list>
  <p>There are also libraries that specialize in parsing an MCNP input
  file in order to convert the model to be an input for another
  program:</p>
  <list list-type="bullet">
    <list-item>
      <p>MCNP Conversion tools for OpenMC
      (<xref alt="Romano et al., 2024" rid="ref-romano_mcnp_2024" ref-type="bibr">Romano
      et al., 2024</xref>)</p>
    </list-item>
    <list-item>
      <p>t4_geom_convert
      (<xref alt="Mancusi, 2024" rid="ref-mancusi_t4_geom_convert_2024" ref-type="bibr">Mancusi,
      2024</xref>)</p>
    </list-item>
  </list>
  <p>There are also libraries that have to parse MCNP inputs to some
  extent as they provide MCNP syntax highlighting support for various
  text editors:</p>
  <list list-type="bullet">
    <list-item>
      <p>MCNP-syntax-highlighting
      (<xref alt="Turkoglu, 2018" rid="ref-turkoglu_mcnp-syntax-highlighting_2018" ref-type="bibr">Turkoglu,
      2018</xref>)</p>
    </list-item>
    <list-item>
      <p>NPP_MCNP_Plugin
      (<xref alt="Marcinkevicius, 2025" rid="ref-marcinkevicius_npp_mcnp_plugin_2025" ref-type="bibr">Marcinkevicius,
      2025</xref>)</p>
    </list-item>
    <list-item>
      <p>vscode_mcnp
      (<xref alt="Repositony, 2024" rid="ref-repositony_vscode_mcnp_2024" ref-type="bibr">Repositony,
      2024</xref>)</p>
    </list-item>
  </list>
  <p>Finally there are the libraries that have been purpose built for
  working with and automating a specific type of MCNP models:</p>
  <list list-type="bullet">
    <list-item>
      <p>BEMP_Thesis
      (<xref alt="Galdon, 2024" rid="ref-galdon_bemp_thesis_2024" ref-type="bibr">Galdon,
      2024</xref>)</p>
    </list-item>
    <list-item>
      <p>MCNP6-HPGe_Detector_simulation
      (<xref alt="Hung, 2023" rid="ref-hung_mcnp6-hpge_detector_simulation_2023" ref-type="bibr">Hung,
      2023</xref>)</p>
    </list-item>
    <list-item>
      <p>rodcal-mcnp
      (<xref alt="Park, 2021" rid="ref-park_rodcal-mcnp_2021" ref-type="bibr">Park,
      2021</xref>)</p>
    </list-item>
  </list>
  <p>MontePy is currently targeting two primary communities. First,
  Nuclear Engineers with moderate Python experience as a user base. The
  goal is to get these users to use the interface to remove the tedium
  from their work when they need to make some modification to their
  model. In addition, these users can use MontePy to quickly interogate,
  and retrieve information from their models in order to validate them,
  or to just answer some questions they had about them. The other target
  user is the Nuclear Engineer developer, making automation tools. Many
  nuclear engineering departments have a large MCNP model that they need
  to frequently update. For instance, the authors of MontePy use a model
  of the Advanced Test Reactor
  (<xref alt="Campbell et al., 2021" rid="ref-CampbellU003A2021" ref-type="bibr">Campbell
  et al., 2021</xref>) for their work on a daily basis. This large and
  complex model needs to be updated every reactor cycle with the new
  fuel compositions, the specific control element configurations, etc.
  Their department does have an automation tool that relies heavily on
  template-like use of regular expressions. This tool will fail to run
  if the model is modified in a way that is allowed by MCNP, but which
  the tool cannot handle. This tool is a prime example of a real-life
  case where MontePy could be applied to improve the workflow and
  increase robustness.</p>
</sec>
<sec id="status-of-montepy">
  <title>Status of MontePy</title>
  <p>As of MontePy 0.5.4, many of the most commonly used MCNP inputs
  (cards) are supported. These include:</p>
  <list list-type="bullet">
    <list-item>
      <p>Cells, which are the base of an MCNP geometry and contain a
      material and a CSG geometry definition.</p>
      <list list-type="bullet">
        <list-item>
          <p>Cell modifier inputs:</p>
          <list list-type="bullet">
            <list-item>
              <p><monospace>IMP</monospace> inputs which specify a
              cell’s importance for variance reduction, and other
              uses.</p>
            </list-item>
            <list-item>
              <p><monospace>FILL</monospace>,
              <monospace>LAT</monospace>, and <monospace>U</monospace>
              inputs which are used for defining universes, and filling
              cells with those universes.</p>
            </list-item>
            <list-item>
              <p><monospace>VOL</monospace> input which specifies the
              volume for a cell</p>
            </list-item>
          </list>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p>Surface inputs, which are used to define the primitive surfaces
      used. All surfaces are supported at a basic level. The following
      surface types are supported in a semantic way where the constants
      are tied to their geometric meaning:</p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>PX</monospace>, <monospace>PY</monospace>, and
          <monospace>PZ</monospace> surfaces, which are planes
          perpendicular to a specific axis.</p>
        </list-item>
        <list-item>
          <p><monospace>CX</monospace>, <monospace>CY</monospace>, and
          <monospace>CZ</monospace> surfaces, which are cylinders
          parallel to a specific axis and centered at the origin.</p>
        </list-item>
        <list-item>
          <p><monospace>C\X</monospace>, <monospace>C\Y</monospace>, and
          <monospace>C\Z</monospace> surfaces, which are cylinders
          parallel to a specific axis, and not centered at the
          origin.</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p><monospace>M</monospace> inputs, which define the composition
      of a specific material.</p>
    </list-item>
    <list-item>
      <p><monospace>MT</monospace> inputs, which define a thermal
      scattering law to use for a specific material.</p>
    </list-item>
    <list-item>
      <p><monospace>mode</monospace> inputs, which define which particle
      types to run in the simulation.</p>
    </list-item>
    <list-item>
      <p><monospace>TR</monospace> inputs, which define a geometry
      transformation.</p>
    </list-item>
  </list>
  <p>MontePy does not support reading output files, and there are no
  current plans to add such support. First, MCNP is export controlled
  software, with a publicly released manual. MontePy was based solely on
  this manual. It does not document the formatting of the MCNP output
  files, so this feature is not included. Secondly, there is already an
  Open-Source tool available to read some MCNP output files, MCNPtools.
  This is a Python wrapper for a C++ tool to read meshtal, and mctal
  files output by MCNP
  (<xref alt="Bates et al., 2022" rid="ref-BatesU003A2022" ref-type="bibr">Bates
  et al., 2022</xref>). So for the time being, to avoid scope creep, the
  core MontePy developers will not be adding support for output files to
  allow development to focus on supporting more input features.</p>
</sec>
<sec id="future-work">
  <title>Future Work</title>
  <p>MCNP supports over 140 different inputs (cards). For almost all of
  the remaining input types that MontePy doesn’t support the information
  from the input is still available to the user. The next planned
  release at the time of publication is version 1.0.0. This new release
  is significant redesign of the material definition interface, making
  the material interface much more user-friendly. The exceptions are
  those inputs with syntax that conflicts with the rest of MCNP, which
  need to be handled specifically on their own. Adding more
  object-oriented support for all of these inputs is an ongoing project.
  Development is primarily prioritized by most commonly used inputs.
  Finally, MontePy and OpenMC’s Python interface have many similar
  features. Harmonizing MontePy and OpenMC to be intercompatible would
  unlock a whole new set of possibilities. It would then be possible to
  translate OpenMC models to MCNP, and vice versa, which would be ideal
  for code-to-code comparisons.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>Work supported through the Advanced Fuels Campaign (AFC) under DOE
  Idaho Operations Office Contract DE-AC07-05ID14517. The authors wish
  to thank the U.S. Department of Energy Office of Isotope R&amp;D and
  Production for their vital and continued support and funding of the
  Co-60 program at INL under Contract No. DE-AC07-05ID14517. Co-60 is
  sold by the National Isotope Development Center (NIDC). Quotes on
  Co-60 can be obtained from NIDC at
  <ext-link ext-link-type="uri" xlink:href="https://www.isotopes.gov/products/cobalt">www.isotopes.gov/products/cobalt</ext-link>.
  This research made use of Idaho National Laboratory’s High Performance
  Computing systems located at the Collaborative Computing Center and
  supported by the Office of Nuclear Energy of the U.S. Department of
  Energy and the Nuclear Science User Facilities under Contract
  No. DE-AC07-05ID14517.</p>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-KuleszaU003A2022">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Kulesza</surname><given-names>Joel</given-names></name>
        <name><surname>Adams</surname><given-names>Terry</given-names></name>
        <name><surname>Armstrong</surname><given-names>Jerawan Chudoung</given-names></name>
        <name><surname>Bolding</surname><given-names>Simon R.</given-names></name>
        <name><surname>Brown</surname><given-names>Forrest B.</given-names></name>
        <name><surname>Bull</surname><given-names>Jeffrey S.</given-names></name>
        <name><surname>Burke</surname><given-names>Timothy Patrick</given-names></name>
        <name><surname>Clark</surname><given-names>Alexander Rich</given-names></name>
        <name><surname>Forster</surname><given-names>Robert Arthur Iii</given-names></name>
        <name><surname>Giron</surname><given-names>Jesse Frank</given-names></name>
        <name><surname>Grieve</surname><given-names>Tristan Sumner</given-names></name>
        <name><surname>Josey</surname><given-names>Colin James</given-names></name>
        <name><surname>Martz</surname><given-names>Roger L.</given-names></name>
        <name><surname>McKinney</surname><given-names>Gregg W.</given-names></name>
        <name><surname>Pearson</surname><given-names>Eric John</given-names></name>
        <name><surname>Rising</surname><given-names>Michael Evan</given-names></name>
        <name><surname>Solomon</surname><given-names>Clell Jeffrey Jr.</given-names></name>
        <name><surname>Swaminarayan</surname><given-names>Sriram</given-names></name>
        <name><surname>Trahan</surname><given-names>Travis John</given-names></name>
        <name><surname>Wilson</surname><given-names>Stephen Christian</given-names></name>
        <name><surname>Zukaitis</surname><given-names>Anthony J.</given-names></name>
      </person-group>
      <article-title>MCNP code version 6.3.0 theory &amp; user manual</article-title>
      <publisher-name>Los Alamos National Laboratory</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.osti.gov/biblio/1889957</uri>
      <pub-id pub-id-type="doi">10.2172/1889957</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-BeazlyU003A2016">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Beazly</surname><given-names>David</given-names></name>
        <name><surname>contributors</surname><given-names>SLY</given-names></name>
      </person-group>
      <article-title>SLY (sly lex yacc)</article-title>
      <year iso-8601-date="2016">2016</year>
      <uri>https://sly.readthedocs.io/en/latest/</uri>
    </element-citation>
  </ref>
  <ref id="ref-KowalU003A2023">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kowal</surname><given-names>Peter J.</given-names></name>
        <name><surname>Blake</surname><given-names>Camden E.</given-names></name>
        <name><surname>Dominesey</surname><given-names>Kurt A.</given-names></name>
        <name><surname>Lefebvre</surname><given-names>Robert A.</given-names></name>
        <name><surname>Brown</surname><given-names>Forrest B.</given-names></name>
        <name><surname>Ji</surname><given-names>Wei</given-names></name>
      </person-group>
      <article-title>Enhancing monte carlo workflows for nuclear reactor analysis with metamodel-driven modeling</article-title>
      <source>Nuclear Science and Engineering</source>
      <year iso-8601-date="2023">2023</year>
      <volume>197</volume>
      <issue>8</issue>
      <issn>0029-5639</issn>
      <uri>https://www.tandfonline.com/doi/full/10.1080/00295639.2022.2153617</uri>
      <pub-id pub-id-type="doi">10.1080/00295639.2022.2153617</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-TouranU003A2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Touran</surname><given-names>Nicholas</given-names></name>
        <name><surname>Gilleland</surname><given-names>John</given-names></name>
        <name><surname>Malmgren</surname><given-names>Graham</given-names></name>
        <name><surname>Whitmer</surname><given-names>Charles</given-names></name>
        <name><surname>Gates</surname><given-names>William H.</given-names></name>
      </person-group>
      <article-title>Computational tools for the integrated design of advanced nuclear reactors</article-title>
      <source>Engineering</source>
      <year iso-8601-date="2017">2017</year>
      <volume>3</volume>
      <issue>4</issue>
      <issn>2095-8099</issn>
      <uri>https://doi.org/10.1016/J.ENG.2017.04.016</uri>
      <pub-id pub-id-type="doi">10.1016/J.ENG.2017.04.016</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-RomanoU003A2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Romano</surname><given-names>P. K.</given-names></name>
        <name><surname>Stauff</surname><given-names>Nicolas E.</given-names></name>
        <name><surname>Ooi</surname><given-names>Zhiee Jhia</given-names></name>
        <name><surname>Miao</surname><given-names>Yinbin</given-names></name>
        <name><surname>Lund</surname><given-names>Amanda</given-names></name>
        <name><surname>Zou</surname><given-names>Ling</given-names></name>
      </person-group>
      <article-title>WATTS: Workflow and template toolkit for simulation</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2022">2022</year>
      <volume>7</volume>
      <issue>79</issue>
      <issn>2475-9066</issn>
      <uri>https://joss.theoj.org/papers/10.21105/joss.04735</uri>
      <pub-id pub-id-type="doi">10.21105/joss.04735</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-RomanoU003A2015">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Romano</surname><given-names>P. K.</given-names></name>
        <name><surname>Horelik</surname><given-names>Nicholas E.</given-names></name>
        <name><surname>Herman</surname><given-names>Bryan R.</given-names></name>
        <name><surname>Nelson</surname><given-names>Adam G.</given-names></name>
        <name><surname>Forget</surname><given-names>Benoit</given-names></name>
        <name><surname>Smith</surname><given-names>Kord</given-names></name>
      </person-group>
      <article-title>OpenMC: A state-of-the-art monte carlo code for research and development</article-title>
      <source>Annals of Nuclear Energy</source>
      <year iso-8601-date="2015">2015</year>
      <volume>82</volume>
      <issn>0306-4549</issn>
      <uri>https://doi.org/10.1016/j.anucene.2014.07.048</uri>
      <pub-id pub-id-type="doi">10.1016/j.anucene.2014.07.048</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-BatesU003A2022">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Bates</surname><given-names>Cameron R.</given-names></name>
        <name><surname>Bolding</surname><given-names>Simon R.</given-names></name>
        <name><surname>Josey</surname><given-names>Colin J.</given-names></name>
        <name><surname>Kulesza</surname><given-names>Joel A.</given-names></name>
        <name><surname>Solomon</surname><given-names>Clell J.</given-names><suffix>Jr.</suffix></name>
        <name><surname>Zukaitis</surname><given-names>Anthony J.</given-names></name>
      </person-group>
      <article-title>The MCNPTools package: Installation and use</article-title>
      <publisher-name>Los Alamos National Laboratory</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.osti.gov/biblio/1884737</uri>
      <pub-id pub-id-type="doi">10.2172/1884737</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-CampbellU003A2021">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Campbell</surname><given-names>Joseph</given-names></name>
        <name><surname>Marshall</surname><given-names>Frances</given-names></name>
        <name><surname>Longhurst</surname><given-names>Glen</given-names></name>
      </person-group>
      <article-title>Advanced test reactor user guide</article-title>
      <publisher-name>Idaho National Laboratory</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://www.osti.gov/biblio/1826354</uri>
      <pub-id pub-id-type="doi">10.2172/1826354</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-ScopatzU003A2012">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Scopatz</surname><given-names>Anthony</given-names></name>
        <name><surname>Romano</surname><given-names>Paul K.</given-names></name>
        <name><surname>Wilson</surname><given-names>Paul P. H.</given-names></name>
        <name><surname>Huff</surname><given-names>Kathryn D.</given-names></name>
      </person-group>
      <article-title>PyNE: Python for nuclear engineering</article-title>
      <publisher-name>American Nuclear Society</publisher-name>
      <year iso-8601-date="2012">2012</year>
      <volume>107</volume>
      <fpage>985</fpage>
      <lpage>987</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rodionov_mckit_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Rodionov</surname><given-names>Roman</given-names></name>
        <name><surname>Portnov</surname><given-names>Dmitri</given-names></name>
      </person-group>
      <article-title>Mckit</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/MC-kit/mckit</uri>
    </element-citation>
  </ref>
  <ref id="ref-travleev_numjuggler_2022">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Travleev</surname><given-names>Anton</given-names></name>
        <name><surname>Previti</surname><given-names>Alberto</given-names></name>
        <name><surname>Portnov</surname><given-names>Dmitri</given-names></name>
      </person-group>
      <article-title>Numjuggler</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/travleev/numjuggler</uri>
    </element-citation>
  </ref>
  <ref id="ref-mariano_mcnp_2022">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Mariano</surname><given-names>Giovanni</given-names></name>
      </person-group>
      <article-title>MCNP input reader</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/ENEA-Fusion-Neutronics/MCNP-Input-Reader</uri>
    </element-citation>
  </ref>
  <ref id="ref-laghi_mctools_2023">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Laghi</surname><given-names>Davide</given-names></name>
      </person-group>
      <article-title>Mctools</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/dodu94/mctools</uri>
    </element-citation>
  </ref>
  <ref id="ref-batkov_mc-tools_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Batkov</surname><given-names>Konstantin</given-names></name>
        <name><surname>Borghi</surname><given-names>Nicolò</given-names></name>
        <name><surname>Furutaka</surname><given-names>Kazuyoshi</given-names></name>
        <name><surname>Ansell</surname><given-names>Stuart</given-names></name>
        <name><surname>Vezhlev</surname><given-names>Egor</given-names></name>
      </person-group>
      <article-title>Mc-tools</article-title>
      <year iso-8601-date="2024-12-20">2024</year><month>12</month><day>20</day>
      <uri>https://github.com/kbat/mc-tools</uri>
    </element-citation>
  </ref>
  <ref id="ref-pacific_northwest_national_laboratory_cardsharpformcnp_2025">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Pacific Northwest National Laboratory</string-name>
      </person-group>
      <article-title>CardSharpForMCNP</article-title>
      <year iso-8601-date="2025">2025</year>
      <uri>https://github.com/pnnl/CardSharpForMCNP</uri>
    </element-citation>
  </ref>
  <ref id="ref-hagen_wig_2021">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Hagen</surname><given-names>Alex</given-names></name>
      </person-group>
      <article-title>Wig</article-title>
      <year iso-8601-date="2021-04">2021</year><month>04</month>
      <uri>https://github.com/alexhagen/wig</uri>
    </element-citation>
  </ref>
  <ref id="ref-persaud_python-based_2024">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Persaud</surname><given-names>A.</given-names></name>
        <name><surname>Unzueta</surname><given-names>M. Ayllon</given-names></name>
        <name><surname>Surry</surname><given-names>E. K.</given-names></name>
        <name><surname>Parsons</surname><given-names>A. M.</given-names></name>
      </person-group>
      <article-title>Python-based software tools for MCNP</article-title>
      <source>2024 IEEE nuclear science symposium (NSS), medical imaging conference (MIC) and room temperature semiconductor detector conference (RTSD)</source>
      <year iso-8601-date="2024">2024</year>
      <uri>https://doi.org/10.1109/NSS/MIC/RTSD57108.2024.10655039</uri>
      <pub-id pub-id-type="doi">10.1109/NSS/MIC/RTSD57108.2024.10655039</pub-id>
      <fpage>1</fpage>
      <lpage>1</lpage>
    </element-citation>
  </ref>
  <ref id="ref-marcinkevicius_npp_mcnp_plugin_2025">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Marcinkevicius</surname><given-names>Benjaminas</given-names></name>
      </person-group>
      <article-title>NPP_MCNP_plugin</article-title>
      <year iso-8601-date="2025">2025</year>
      <uri>https://github.com/kordusas/npp_mcnp_plugin</uri>
    </element-citation>
  </ref>
  <ref id="ref-romano_mcnp_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Romano</surname><given-names>P. K.</given-names></name>
        <name><surname>Li</surname><given-names>Kaiwen</given-names></name>
        <name><surname>Shriwise</surname><given-names>Patrick</given-names></name>
        <name><surname>Valderrama</surname><given-names>Juan</given-names></name>
      </person-group>
      <article-title>MCNP conversion tools for OpenMC</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/openmc-dev/openmc_mcnp_adapter</uri>
    </element-citation>
  </ref>
  <ref id="ref-shimwell_neutronics_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Shimwell</surname><given-names>Jonathan</given-names></name>
        <name><surname>Billingsley</surname><given-names>John</given-names></name>
        <name><surname>Buendia</surname><given-names>Coronel</given-names></name>
        <string-name>Neutronics Material Material Contributors</string-name>
      </person-group>
      <article-title>Neutronics material maker</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/fusion-energy/neutronics_material_maker</uri>
    </element-citation>
  </ref>
  <ref id="ref-repositony_vscode_mcnp_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>Repositony</string-name>
      </person-group>
      <article-title>Vscode_mcnp</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/repositony/vscode_mcnp</uri>
    </element-citation>
  </ref>
  <ref id="ref-turkoglu_mcnp-syntax-highlighting_2018">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Turkoglu</surname><given-names>Danyal</given-names></name>
      </person-group>
      <article-title>MCNP-syntax-highlighting</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://github.com/danyalturkoglu/MCNP-syntax-highlighting</uri>
    </element-citation>
  </ref>
  <ref id="ref-mancusi_t4_geom_convert_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Mancusi</surname><given-names>Davide</given-names></name>
      </person-group>
      <article-title>t4_geom_convert</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/arekfu/t4_geom_convert</uri>
    </element-citation>
  </ref>
  <ref id="ref-portnov_map-stp_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Portnov</surname><given-names>Dimitri</given-names></name>
      </person-group>
      <article-title>Map-stp</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/MC-kit/map-stp</uri>
    </element-citation>
  </ref>
  <ref id="ref-hung_mcnp6-hpge_detector_simulation_2023">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Hung</surname><given-names>Bui Tien</given-names></name>
      </person-group>
      <article-title>MCNP6-HPGE_detector_simulation</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/hungbt1908/MCNP6-HPGE_Detector_Simulation</uri>
    </element-citation>
  </ref>
  <ref id="ref-galdon_bemp_thesis_2024">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Galdon</surname><given-names>Manuel</given-names></name>
      </person-group>
      <article-title>BEMP_thesis</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/mgaldon17/BEMP_Thesis</uri>
    </element-citation>
  </ref>
  <ref id="ref-niess_gdnp_2018">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>niess</string-name>
      </person-group>
      <article-title>GDNP</article-title>
      <year iso-8601-date="2018">2018</year>
      <uri>https://github.com/niess/gdnp</uri>
    </element-citation>
  </ref>
  <ref id="ref-richet_funz_2023">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Richet</surname><given-names>Yann</given-names></name>
      </person-group>
      <article-title>Funz plugin-MCNP</article-title>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/Funz/plugin-MCNP</uri>
    </element-citation>
  </ref>
  <ref id="ref-ikarino_mcnp_2021">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <string-name>ikarino</string-name>
      </person-group>
      <article-title>MCNP input generator</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/ikarino/mcnp_input_generator</uri>
    </element-citation>
  </ref>
  <ref id="ref-park_rodcal-mcnp_2021">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>Park</surname><given-names>Patrick</given-names></name>
      </person-group>
      <article-title>Rodcal-mcnp</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/patrickpark910/rodcal-mcnp</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
