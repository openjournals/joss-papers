<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4878</article-id>
<article-id pub-id-type="doi">10.21105/joss.04878</article-id>
<title-group>
<article-title>guitarsounds: A Python package to visualize harmonic
sounds for musical instrument design</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3294-2812</contrib-id>
<name>
<surname>Chabot</surname>
<given-names>Olivier</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Brillon</surname>
<given-names>Louis</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>École de lutherie Bruand, Montréal, QC,
Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-09-15">
<day>15</day>
<month>9</month>
<year>2022</year>
</pub-date>
<volume>8</volume>
<issue>82</issue>
<fpage>4878</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>signal processing</kwd>
<kwd>musical instrument</kwd>
<kwd>harmonic sound</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The <monospace>guitarsounds</monospace> Python package can be used
  to efficiently visualize relevant features of harmonic sounds and is
  mainly developed to compare musical instrument design iterations.
  <monospace>guitarsounds</monospace> is wrapped around the
  implementation of common signal processing features, which are mainly
  taken from <monospace>numpy</monospace>
  (<xref alt="Harris et al., 2020" rid="ref-harris_array_2020" ref-type="bibr">Harris
  et al., 2020</xref>) and <monospace>scipy</monospace>
  (<xref alt="Virtanen et al., 2020" rid="ref-virtanen_scipy_2020" ref-type="bibr">Virtanen
  et al., 2020</xref>). The signal processing features are augmented to
  perform the comparative analysis of transient harmonic sounds. Such
  sounds are defined as having a clear onset, and a frequency-amplitude
  distribution clearly concentrated around partials. Consequently, while
  the package is named <monospace>guitarsounds</monospace>, its analysis
  framework can be used with any harmonic sound, such as those produced
  by a piano, or a percussion instrument.</p>
  <p>The <monospace>guitarsounds</monospace> package is divided in two
  main components. First, the package is developed around a convenient
  object-oriented Application Programming Interface (API) that can be
  used to extract features from sounds and visualize them according to
  the user’s needs. Then, a graphical user interface (GUI) makes most of
  the features of <monospace>guitarsounds</monospace> available to users
  less knowledgeable in programming. <monospace>guitarsounds</monospace>
  is meant to be used with the Jupyter Notebook interface to allow
  interactively exploring the sound data, either with the API or the
  GUI.</p>
  <p>The main features of <monospace>guitarsounds</monospace> are
  to:</p>
  <list list-type="bullet">
    <list-item>
      <p>Automate the loading, conditioning and normalization of
      multiple sound files to meaningfully compare their features.</p>
    </list-item>
    <list-item>
      <p>Visualize sounds features relevant to musical instrument
      design, such as:</p>
      <list list-type="bullet">
        <list-item>
          <p>Linear and logarithmic time envelope</p>
        </list-item>
        <list-item>
          <p>Octave bands Fourier transform</p>
        </list-item>
        <list-item>
          <p>Time-dependent damping</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p>Divide sounds in frequency bands to analyze variations in
      temporal behaviour for different frequency ranges.</p>
    </list-item>
    <list-item>
      <p>Extract the Fourier transform peaks of a harmonic signal using
      a custom peak finding algorithm.</p>
    </list-item>
    <list-item>
      <p>Extract numerical values for certain features such as the
      Helmholtz cavity frequency of a guitar.</p>
    </list-item>
    <list-item>
      <p>Provide an easy-to-use signal processing API to compute new
      features meeting specific needs by providing access to lower level
      features and handling the differences between sound files, such as
      the file sample rate.</p>
    </list-item>
  </list>
  <p>Specifically, the API provides four classes nested together:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>Plot</monospace>: Provides low level plotting of
      specific features, such as plotting the Fast Fourier Transform
      (FFT) of a sound file.</p>
    </list-item>
    <list-item>
      <p><monospace>Signal</monospace>: Stores the data of an array
      corresponding to a single signal. For example, if a sound file is
      read and filtered, the array resulting from the filtering
      operation will be stored in a new instance of the
      <monospace>Signal</monospace> class. An instance of the
      <monospace>Plot</monospace> class is constructed for each
      <monospace>Signal</monospace> class instance and stored as an
      attribute of the <monospace>Signal</monospace> class. The
      <monospace>Signal</monospace> class contains all the features
      relying only on the data of a single sound signal, such as the
      computation of the envelope.</p>
    </list-item>
    <list-item>
      <p><monospace>Sound</monospace>: Stores all the information
      corresponding to a single sound file. When a
      <monospace>.wav</monospace> file is read using
      <monospace>guitarsounds</monospace>, all the processing is handled
      by the <monospace>Sound</monospace> class, such as truncating,
      filtering, or normalizing the sound signal. The
      <monospace>Sound</monospace> class provides the features relying
      on more than one <monospace>Signal</monospace> instance, but still
      using the information from a single sound file, such as the power
      distribution of a sound across different frequency bands.</p>
    </list-item>
    <list-item>
      <p><monospace>SoundPack</monospace>: Contains multiple
      <monospace>Sound</monospace> class instances and provides the
      features used to compare the data between different sound files.
      The <monospace>SoundPack</monospace> methods are divided between
      methods developed to compare two sounds and methods developed to
      compare an arbitrary amount of sounds. As an example, the method
      plotting the FFT of two sounds in a mirror configuration can only
      be called if the <monospace>SoundPack</monospace> was constructed
      using exactly two sounds, whereas the method showing a table of
      the different sound fundamental frequencies can be called for a
      <monospace>SoundPack</monospace> instance created using an
      arbitrary number of <monospace>Sounds</monospace>.</p>
    </list-item>
  </list>
  <p>To illustrate the use of <monospace>guitarsounds</monospace>, the
  log-time envelope, a feature representing the amplitude of a sound
  with a higher definition in time at the start of the sound, can be
  computed using <monospace>guitarsounds</monospace>. By plotting this
  feature for the same note played on two instruments, the dynamic
  response of the instruments can be compared for a specific excitation
  frequency. A code snippet comparing the log-time envelope of two
  sounds is presented below with the associated output in
  <xref alt="Figure 1" rid="figU003Alog-comp">Figure 1</xref>. In the
  following code, the <monospace>SoundPack</monospace> object is first
  instantiated from the specified sound files. For each file, a
  <monospace>Sound</monospace> class instance is created and
  conditioned. In the conditioning procedure, the signal is first
  resampled to have a sample rate equal to 22050 Hz. This is important
  to ensure all the features compared between sounds are computed using
  the same sample rate. The sound is then trimmed so that the beginning
  of the onset is at 100 ms, as can be seen on
  <xref alt="Figure 1" rid="figU003Alog-comp">Figure 1</xref>. To ensure
  compared sounds have the same length, the ends of the sounds are
  trimmed so that each sound has the same number of samples as the
  shortest sound. The <monospace>guitarsounds</monospace> package relies
  on <monospace>matplotlib</monospace>
  (<xref alt="Hunter, 2007" rid="ref-hunter_matplotlib_2007" ref-type="bibr">Hunter,
  2007</xref>) for all its vizualisation features. Thus, users familiar
  with <monospace>matplotlib</monospace> objects can tune the figures
  created by <monospace>guitarsounds</monospace> to their needs.</p>
  <code language="python">import guitarsounds
import matplotlib.pyplot as plt

# Use guitarsound to compare the log-time envelope of two sounds
soundfile1 = &quot;example_sounds/Wood_Guitar/Wood_A5.wav&quot;
soundfile2 = &quot;example_sounds/Carbon_Guitar/Carbon_A5.wav&quot;
# Specify names to be used in the legend of the plot
mysounds = guitarsounds.SoundPack(soundfile1, soundfile2, names=[&quot;wood&quot;, &quot;carbon&quot;])
mysounds.plot(&quot;log envelop&quot;)

# Access the matplotlib Figure and Axes objects created by guitarsounds
plt.gca().set_title(&quot;My sound comparison&quot;) # To change the title
plt.gcd().savefig(&quot;log_envelope_compare&quot;) # To save the figure</code>
  <fig>
    <caption><p>Output of the code snippet comparing the log-time
    envelope of two
    sounds.<styled-content id="figU003Alog-comp"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figurelogenv.png" xlink:title="" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>guitarsounds</monospace> was developed to meet the needs
  of the Bruand lutherie school, more precisely as a tool to visualize
  and compare the sounds of different guitar designs using custom sound
  features. The <monospace>guitarsounds</monospace> package was used in
  previous academic work (in press) to investigate the difference
  between two guitars both designed using an innovative numerical
  prototyping method based on topological optimization. In the scope of
  this research, <monospace>guitarsounds</monospace> allowed the
  measurement of specific sound features such as the slope of the peaks
  in the signal Fourier transform, computed using a linear regression.
  This feature is related to the instrument’s tone
  (<xref alt="Sumi &amp; Ono, 2008" rid="ref-sumi_classical_2008" ref-type="bibr">Sumi
  &amp; Ono, 2008</xref>), and was used to study the differences between
  the two guitar designs. <monospace>guitarsounds</monospace> is also
  used in ongoing research at the Bruand lutherie school to manage sound
  data in a project where guitar sounds are generated with random values
  for specific features, to provide data for a psycho-acoustic study.
  The <monospace>guitarsounds</monospace> API is also used to give an
  introduction to programming for data analysis to the school’s students
  and in the teaching activities, as a tool to visualize the physical
  phenomena involved in the sounds produced by guitars, such as the
  Helmholtz cavity frequency of an instrument. The GUI was included in
  the package as knowledge or interest in programming isn’t expected in
  the luthier’s training. A screen capture of the GUI is shown in
  <xref alt="Figure 2" rid="figU003Agui">Figure 2</xref>.</p>
  <p>The features of <monospace>guitarsounds</monospace> differ from
  those of existing packages in their ability to be both used alone to
  produce decent figures with a minimal number of lines of code and as a
  tool in a Python data visualization stack where the sound specific
  needs can be handled by <monospace>guitarsounds</monospace>. There
  exists an overlap between <monospace>guitarsounds</monospace> and the
  <monospace>librosa</monospace>
  (<xref alt="McFee et al., 2015" rid="ref-Librosa" ref-type="bibr">McFee
  et al., 2015</xref>) Python package for music analysis; however,
  <monospace>librosa</monospace> is not a dependency of
  <monospace>guitarsounds</monospace>, and the latter is more focused on
  feature extraction for machine learning applications and lacks
  features tailored to harmonic sound analysis and integrated comparison
  of sounds. The <monospace>librosa</monospace> package is also aimed at
  an audience with a more developed knowledge of Python programming.</p>
  <fig>
    <caption><p>Graphical user interface in the Jupyter Notebook
    environment.<styled-content id="figU003Agui"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/figuregui.png" xlink:title="" />
  </fig>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-Librosa">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>McFee</surname><given-names>B.</given-names></name>
        <name><surname>Raffel</surname><given-names>C.</given-names></name>
        <name><surname>Liang</surname><given-names>D.</given-names></name>
        <name><surname>Ellis</surname><given-names>D.</given-names></name>
        <name><surname>McVicar</surname><given-names>M.</given-names></name>
        <name><surname>Battenberg</surname><given-names>E.</given-names></name>
        <name><surname>Nieto</surname><given-names>O.</given-names></name>
      </person-group>
      <article-title>Librosa: Audio and music signal analysis in Python</article-title>
      <year iso-8601-date="2015">2015</year>
      <uri>https://conference.scipy.org/proceedings/scipy2015/brian_mcfee.html</uri>
      <pub-id pub-id-type="doi">10.25080/Majora-7b98e3ed-003</pub-id>
      <fpage>18</fpage>
      <lpage>24</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sumi_classical_2008">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sumi</surname><given-names>Takeshi</given-names></name>
        <name><surname>Ono</surname><given-names>Teruaki</given-names></name>
      </person-group>
      <article-title>Classical guitar top board design by finite element method modal analysis based on acoustic measurements of guitars of different quality</article-title>
      <source>Acoustical Science and Technology</source>
      <year iso-8601-date="2008">2008</year>
      <volume>29</volume>
      <issue>6</issue>
      <issn>1347-5177</issn>
      <uri>http://joi.jlc.jst.go.jp/JST.JSTAGE/ast/29.381?from=CrossRef</uri>
      <pub-id pub-id-type="doi">10.1250/ast.29.381</pub-id>
      <fpage>381</fpage>
      <lpage>383</lpage>
    </element-citation>
  </ref>
  <ref id="ref-virtanen_scipy_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        <name><surname>Haberland</surname><given-names>Matt</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
        <name><surname>Jones</surname><given-names>Eric</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Larson</surname><given-names>Eric</given-names></name>
        <name><surname>Carey</surname><given-names>C. J.</given-names></name>
        <name><surname>Polat</surname><given-names>Ilhan</given-names></name>
        <name><surname>Feng</surname><given-names>Yu</given-names></name>
        <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
        <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
        <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
        <name><surname>Perktold</surname><given-names>Josef</given-names></name>
        <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
        <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
        <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
        <name><surname>Ribeiro</surname><given-names>Antônio H.</given-names></name>
        <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
        <name><surname>Mulbregt</surname><given-names>Paul van</given-names></name>
      </person-group>
      <article-title>SciPy 1.0: Fundamental algorithms for scientific computing in Python</article-title>
      <source>Nature Methods</source>
      <year iso-8601-date="2020-03">2020</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-26">2021</year><month>11</month><day>26</day></date-in-citation>
      <volume>17</volume>
      <issue>3</issue>
      <issn>1548-7105</issn>
      <uri>https://www.nature.com/articles/s41592-019-0686-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      <fpage>261</fpage>
      <lpage>272</lpage>
    </element-citation>
  </ref>
  <ref id="ref-harris_array_2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
        <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
        <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
        <name><surname>Kern</surname><given-names>Robert</given-names></name>
        <name><surname>Picus</surname><given-names>Matti</given-names></name>
        <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
        <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
        <name><surname>Brett</surname><given-names>Matthew</given-names></name>
        <name><surname>Haldane</surname><given-names>Allan</given-names></name>
        <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
        <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
        <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
        <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
        <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
        <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
        <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
        <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
        <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <year iso-8601-date="2020-09">2020</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-11-26">2021</year><month>11</month><day>26</day></date-in-citation>
      <volume>585</volume>
      <issue>7825</issue>
      <issn>1476-4687</issn>
      <uri>https://www.nature.com/articles/s41586-020-2649-2</uri>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hunter_matplotlib_2007">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>John D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D graphics environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <year iso-8601-date="2007-05">2007</year><month>05</month>
      <volume>9</volume>
      <issue>3</issue>
      <issn>1558-366X</issn>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
