<?xml version="1.0" encoding="UTF-8"?>
<doi_batch xmlns="http://www.crossref.org/schema/4.4.0" xmlns:ai="http://www.crossref.org/AccessIndicators.xsd" xmlns:rel="http://www.crossref.org/relations.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="4.4.0" xsi:schemaLocation="http://www.crossref.org/schema/4.4.0 http://www.crossref.org/schemas/crossref4.4.0.xsd">
  <head>
    <doi_batch_id>fd19ef82c85b0fa88237bae526676669</doi_batch_id>
    <timestamp>20210926170832</timestamp>
    <depositor>
      <depositor_name>JOSS Admin</depositor_name>
      <email_address>admin@theoj.org</email_address>
    </depositor>
    <registrant>The Open Journal</registrant>
  </head>
  <body>
    <journal>
      <journal_metadata>
        <full_title>Journal of Open Source Software</full_title>
        <abbrev_title>JOSS</abbrev_title>
        <issn media_type="electronic">2475-9066</issn>
        <doi_data>
          <doi>10.21105/joss</doi>
          <resource>https://joss.theoj.org</resource>
        </doi_data>
      </journal_metadata>
      <journal_issue>
        <publication_date media_type="online">
          <month>09</month>
          <year>2021</year>
        </publication_date>
        <journal_volume>
          <volume>6</volume>
        </journal_volume>
        <issue>65</issue>
      </journal_issue>
      <journal_article publication_type="full_text">
        <titles>
          <title>funsies: A minimalist, distributed and dynamic workflow engine</title>
        </titles>
        <contributors>
          <person_name sequence="first" contributor_role="author">
            <given_name>Cyrille</given_name>
            <surname>Lavigne</surname>
            <ORCID>http://orcid.org/0000-0003-2778-1866</ORCID>
          </person_name>
          <person_name sequence="additional" contributor_role="author">
            <given_name>Alán</given_name>
            <surname>Aspuru-Guzik</surname>
            <ORCID>http://orcid.org/0000-0002-8277-4434</ORCID>
          </person_name>
        </contributors>
        <publication_date>
          <month>09</month>
          <day>26</day>
          <year>2021</year>
        </publication_date>
        <pages>
          <first_page>3274</first_page>
        </pages>
        <publisher_item>
          <identifier id_type="doi">10.21105/joss.03274</identifier>
        </publisher_item>
        <ai:program name="AccessIndicators">
          <ai:license_ref applies_to="vor">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="am">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="tdm">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
        </ai:program>
        <rel:program>
          <rel:related_item>
            <rel:description>Software archive</rel:description>
            <rel:inter_work_relation relationship-type="references" identifier-type="doi">“https://doi.org/10.5281/zenodo.5528107”</rel:inter_work_relation>
          </rel:related_item>
          <rel:related_item>
            <rel:description>GitHub review issue</rel:description>
            <rel:inter_work_relation relationship-type="hasReview" identifier-type="uri">https://github.com/openjournals/joss-reviews/issues/3274</rel:inter_work_relation>
          </rel:related_item>
        </rel:program>
        <doi_data>
          <doi>10.21105/joss.03274</doi>
          <resource>https://joss.theoj.org/papers/10.21105/joss.03274</resource>
          <collection property="text-mining">
            <item>
              <resource mime_type="application/pdf">https://joss.theoj.org/papers/10.21105/joss.03274.pdf</resource>
            </item>
          </collection>
        </doi_data>
        <citation_list>
          <citation key="ref1">
            <unstructured_citation>Tommaso, Paolo Di, A curated list of awesome pipeline toolkits inspired by Awesome Sysadmin, 2021, GitHub, GitHub repository, https://github.com/pditommaso/awesome-pipeline</unstructured_citation>
          </citation>
          <citation key="ref2">
            <doi>10.26434/chemrxiv.13008500.v2</doi>
          </citation>
          <citation key="ref3">
            <doi>10.1063/5.0006002</doi>
          </citation>
          <citation key="ref4">
            <doi>10.1063/5.0004835</doi>
          </citation>
          <citation key="ref5">
            <doi>10.1063/5.0007045</doi>
          </citation>
          <citation key="ref6">
            <doi>10.1063/5.0004997</doi>
          </citation>
          <citation key="ref7">
            <doi>10.1063/5.0005188</doi>
          </citation>
          <citation key="ref8">
            <doi>10.1063/1.5144261</doi>
          </citation>
          <citation key="ref9">
            <doi>10.1016/j.matt.2021.02.017</doi>
          </citation>
          <citation key="ref10">
            <doi>10.1145/1330017.1330019</doi>
          </citation>
          <citation key="ref11">
            <unstructured_citation>Koji: Automating pipelines with mixed-semantics data sources, http://arxiv.org/abs/1901.01908, Koji, We propose a new result-oriented semantic for de ning data processing work ows that manipulate data in di erent semantic forms ( les or services) in a uni ed manner. is approach enables users to de ne work ows for a vast variety of reproducible data-processing tasks in a simple declarative manner which focuses on applicationlevel results, while automating all control-plane considerations (like failure recovery without loss of progress and computation reuse) behind the scenes., arXiv:1901.01908 [cs], Maymounkov, Petar, 2021-04-20, 2018-12-02, english, arxiv, 1901.01908, Computer Science - Distributed, Parallel, and Cluster Computing</unstructured_citation>
          </citation>
          <citation key="ref12">
            <doi>10.12688/f1000research.29032.2</doi>
          </citation>
          <citation key="ref13">
            <unstructured_citation>Nix: A Safe and Policy-Free System for Software Deployment, Existing systems for software deployment are neither safe nor sufficiently flexible. Primary safety issues are the inability to enforce reliable specification of component dependencies, and the lack of support for multiple versions or variants of a component. This renders deployment operations such as upgrading or deleting components dangerous and unpredictable. A deployment system must also be flexible (i.e., policy-free) enough to support both centralised and local package management, and to allow a variety of mechanisms for transferring components. In this paper we present Nix, a deployment system that addresses these issues through a simple technique of using cryptographic hashes to compute unique paths for component instances., 14, Dolstra, Eelco and de Jonge, Merijn and Visser, Eelco, 2004, english, LISA XVIII: Eighteenth Large Installation System Administration Conference Proceedings, USENIX Association, https://edolstra.github.io/pubs/nspfssd-lisa2004-final.pdf</unstructured_citation>
          </citation>
          <citation key="ref14">
            <unstructured_citation>The Rust Programming Language (Covers Rust 2018), 978-1-71850-044-0, The official book on the Rust programming language, written by the Rust development team at the Mozilla Foundation, fully updated for Rust 2018. The Rust Programming Language is the official book on Rust: an open source systems programming language that helps you write faster, more reliable software. Rust offers control over low-level details (such as memory usage) in combination with high-level ergonomics, eliminating the hassle traditionally associated with low-level languages. The authors of The Rust Programming Language, members of the Rust Core Team, share their knowledge and experience to show you how to take full advantage of Rust’s features–from installation to creating robust and scalable programs. You’ll begin with basics like creating functions, choosing data types, and binding variables and then move on to more advanced concepts, such as: - Ownership and borrowing, lifetimes, and traits - Using Rust’s memory safety guarantees to build fast, safe programs - Testing, error handling, and effective refactoring - Generics, smart pointers, multithreading, trait objects, and advanced pattern matching - Using Cargo, Rust’s built-in package manager, to build, test, and document your code and manage dependencies - How best to use Rust’s advanced compiler with compiler-led programming techniques You’ll find plenty of code examples throughout the book, as well as three chapters dedicated to building complete projects to test your learning: a number guessing game, a Rust implementation of a command line tool, and a multithreaded server. New to this edition: An extended section on Rust macros, an expanded chapter on modules, and appendixes on Rust development tools and editions., 561, No Starch Press, Klabnik, Steve and Nichols, Carol, 2019-08-06, english, Google-Books-ID: 0Vv6DwAAQBAJ, Computers / Programming / Open Source</unstructured_citation>
          </citation>
          <citation key="ref15">
            <unstructured_citation>Pro Git, 978-1-4842-0076-6, Pro Git (Second Edition) is your fully-updated guide to Git and its usage in the modern world. Git has come a long way since it was first developed by Linus Torvalds for Linux kernel development. It has taken the open source world by storm since its inception in 2005, and this book teaches you how to use it like a pro. Effective and well-implemented version control is a necessity for successful web projects, whether large or small. With this book you’ll learn how to master the world of distributed version workflow, use the distributed features of Git to the full, and extend Git to meet your every need. Written by Git pros Scott Chacon and Ben Straub, Pro Git (Second Edition) builds on the hugely successful first edition, and is now fully updated for Git version 2.0, as well as including an indispensable chapter on GitHub. It’s the best book for all your Git needs., 441, Apress, Chacon, Scott and Straub, Ben, 2014-11-18, english, Google-Books-ID: jVYnCgAAQBAJ, Computers / Programming / Open Source, Computers / Information Technology, Computers / Programming / General, Computers / Software Development &amp; Engineering / General</unstructured_citation>
          </citation>
          <citation key="ref16">
            <doi>10.1007/978-3-319-63688-7_19</doi>
          </citation>
          <citation key="ref17">
            <unstructured_citation>San Francisco, CA, MapReduce: Simplified Data Processing on Large Clusters, MapReduce, 137–150, OSDI’04: Sixth Symposium on Operating System Design and Implementation, Dean, Jeffrey and Ghemawat, Sanjay, , 2004</unstructured_citation>
          </citation>
        </citation_list>
      </journal_article>
    </journal>
  </body>
</doi_batch>
