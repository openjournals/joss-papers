<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3968</article-id>
<article-id pub-id-type="doi">10.21105/joss.03968</article-id>
<title-group>
<article-title>rustworkx: A High-Performance Graph Library for
Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9713-2875</contrib-id>
<name>
<surname>Treinish</surname>
<given-names>Matthew</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8257-2103</contrib-id>
<name>
<surname>Carvalho</surname>
<given-names>Ivan</given-names>
</name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6174-0801</contrib-id>
<name>
<surname>Tsilimigkounakis</surname>
<given-names>Georgios</given-names>
</name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3234-8154</contrib-id>
<name>
<surname>Sá</surname>
<given-names>Nahum</given-names>
</name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>IBM Quantum, IBM T.J. Watson Research Center, Yorktown
Heights, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of British Columbia, Kelowna,
Canada</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>National Technical University of Athens, Athens,
Greece</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Centro Brasileiro de Pesquisas Físicas, Rio de Janeiro,
Brazil</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2022-07-27">
<day>27</day>
<month>7</month>
<year>2022</year>
</pub-date>
<volume>7</volume>
<issue>79</issue>
<fpage>3968</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>graph theory</kwd>
<kwd>Python</kwd>
<kwd>Rust</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<disp-quote>
  <disp-quote>
    <p>In
    <italic><ext-link ext-link-type="uri" xlink:href="https://github.com/Qiskit/rustworkx">rustworkx</ext-link></italic>,
    we provide a high-performance, flexible graph library for Python.
    <italic>rustworkx</italic> is inspired by <italic>NetworkX</italic>
    but addresses many performance concerns of the latter.
    <italic>rustworkx</italic> is written in Rust and is particularly
    suited for performance-sensitive applications that use graph
    representations.</p>
  </disp-quote>
</disp-quote>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><italic>rustworkx</italic> is a general-purpose graph theory
  library focused on performance. It wraps low-level Rust code
  (<xref alt="Matsakis &amp; Klock, 2014" rid="ref-Matsakis2014" ref-type="bibr">Matsakis
  &amp; Klock, 2014</xref>) with a flexible Python API, providing fast
  implementations for graph data structures and popular graph
  algorithms.</p>
  <p><italic>rustworkx</italic> is inspired by the
  <italic>NetworkX</italic> library
  (<xref alt="Hagberg et al., 2008" rid="ref-SciPyProceedings_11" ref-type="bibr">Hagberg
  et al., 2008</xref>), but meets the needs of users that also need
  performance. Even though <italic>NetworkX</italic> is the de-facto
  standard graph and network analysis library for Python, it has
  performance concerns. <italic>NetworkX</italic> prefers pure Python
  implementations, which leads to bottlenecks in computationally
  intensive applications that use graph algorithms.</p>
  <p><italic>rustworkx</italic> addresses those performance concerns by
  switching to a Rust implementation. It has support for shortest paths,
  isomorphism, matching, multithreading via rayon
  (<xref alt="Stone &amp; Matsakis, 2021" rid="ref-Stone2021" ref-type="bibr">Stone
  &amp; Matsakis, 2021</xref>), and much more.</p>
</sec>
<sec id="related-work">
  <title>Related work</title>
  <p>The graph and network analysis ecosystem for Python is rich, with
  many libraries available. <italic>igraph</italic>
  (<xref alt="Csardi &amp; Nepusz, 2006" rid="ref-Csardi2006" ref-type="bibr">Csardi
  &amp; Nepusz, 2006</xref>), <italic>graph-tool</italic>
  (<xref alt="Peixoto, 2014" rid="ref-Peixoto2014" ref-type="bibr">Peixoto,
  2014</xref>), <italic>SNAP</italic>
  (<xref alt="Leskovec &amp; Sosič, 2016" rid="ref-Leskovec2016" ref-type="bibr">Leskovec
  &amp; Sosič, 2016</xref>), and <italic>Networkit</italic>
  (<xref alt="Staudt et al., 2016" rid="ref-Staudt2016" ref-type="bibr">Staudt
  et al., 2016</xref>) are Python libraries written in C or C++ that can
  replace <italic>NetworkX</italic> with better performance. We also
  highlight <italic>SageMath</italic>’s graph theory module
  (<xref alt="The Sage Developers, 2020" rid="ref-Sagemath2020" ref-type="bibr">The
  Sage Developers, 2020</xref>), which has a stronger focus in
  mathematics than <italic>NetworkX</italic>.</p>
  <p>However, the authors found that no library matched the flexibility
  that <italic>NetworkX</italic> provided for interacting with graphs.
  <italic>igraph</italic> is efficient for static large graphs, but does
  not handle graph updates as efficiently. <italic>SNAP</italic> and
  <italic>Networkit</italic> do not support associated edge data with
  arbitrary Python types. <italic>graph-tool</italic> supports
  associated edge data at the cost of maintaing the data in a separate
  data structure. Thus, the main contribution of
  <italic>rustworkx</italic> is keeping the ease of use of
  <italic>NetworkX</italic> without sacrificing performance.</p>
  <p>We note that existing code using <italic>NetworkX</italic> needs to
  be modified to use <italic>rustworkx</italic>.
  <italic>rustworkx</italic> is not a drop-in replacement for
  <italic>NetworkX</italic>, which may be a possible limitation for some
  users. The authors provide a <italic>NetworkX</italic> to
  <italic>rustworkx</italic> conversion guide in the documentation to
  aid in those situations.</p>
</sec>
<sec id="graph-data-structures">
  <title>Graph data structures</title>
  <p><italic>rustworkx</italic> provides two core data structures:
  <monospace>PyGraph</monospace> and <monospace>PyDiGraph</monospace>.
  They correspond to undirected and directed graphs, respectively.
  Graphs describe a set of nodes and the edges connecting pairs of those
  nodes. Internally, <italic>rustworkx</italic> leverages the
  <italic>petgraph</italic> library
  (<xref alt="bluss et al., 2021" rid="ref-bluss2021" ref-type="bibr">bluss
  et al., 2021</xref>) to store the graphs using an adjacency list model
  and the <italic>PyO3</italic> library
  (<xref alt="Hewitt et al., 2021" rid="ref-Hewitt2021" ref-type="bibr">Hewitt
  et al., 2021</xref>) for the Python bindings.</p>
  <p>Nodes and edges of the graph may also be associated with data
  payloads. Payloads can contain arbitrary data, such as node labels or
  edge lengths. Common uses of data payloads include representing
  weighted graphs. Any Python object can be a data payload, which makes
  the library flexible because no assumptions are made about the payload
  types.</p>
  <p><italic>rustworkx</italic> operates on payloads with callbacks.
  Callbacks are functions that take payloads and return statically typed
  data. They resemble the named attributes in <italic>NetworkX</italic>.
  Callbacks are beneficial because they bridge the arbitrary stored data
  with the static types <italic>rustworkx</italic> expects.</p>
  <p>A defining characteristic of <italic>rustworkx</italic> graphs is
  that each node maps to a non-negative integer node index, and
  similarly, each edge maps to an edge index. Those indices uniquely
  determine nodes and edges in the graph. Indices are stable, hence the
  index for a node <inline-formula><alternatives>
  <tex-math><![CDATA[v]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>v</mml:mi></mml:math></alternatives></inline-formula>
  does not change even if another node <inline-formula><alternatives>
  <tex-math><![CDATA[u]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>u</mml:mi></mml:math></alternatives></inline-formula>
  is removed. Moreover, indices separate the data representing the
  graph’s structure, which is stored in Rust, from the payloads
  associated with nodes and edges, which are stored in Python.</p>
  <fig>
    <caption><p>A Petersen graph, a hexagonal lattice graph, and a
    binomial tree graph created with
    <bold><monospace>rustworkx.generators</monospace></bold> and
    visualized with the
    <bold><monospace>rustworkx.visualization</monospace></bold>
    module.<styled-content id="figU003Agraphexample"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/paper_img/example_graph.png" xlink:title="" />
  </fig>
</sec>
<sec id="use-cases">
  <title>Use Cases</title>
  <p><italic>rustworkx</italic> is suitable for modeling graphs ranging
  from a few nodes scaling up to 4 billion. The library is particularly
  suited for applications that have core routines executing graph
  algorithms. In those applications, the performance of
  <italic>rustworkx</italic> considerably reduces computation time.
  Examples of applications using <italic>rustworkx</italic> include the
  Qiskit compiler
  (<xref alt="Treinish et al., 2021" rid="ref-Qiskit2021" ref-type="bibr">Treinish
  et al., 2021</xref>), PennyLane
  (<xref alt="Bergholm et al., 2020" rid="ref-Bergholm2020" ref-type="bibr">Bergholm
  et al., 2020</xref>), atompack
  (<xref alt="Ullberg, 2021" rid="ref-Ullberg2021" ref-type="bibr">Ullberg,
  2021</xref>), and qtcodes
  (<xref alt="Jha et al., 2021" rid="ref-Jha2021" ref-type="bibr">Jha et
  al., 2021</xref>).</p>
  <p>For common use cases, <italic>rustworkx</italic> can provide
  speedups ranging from 3x to 100x compared to the same code using
  <italic>NetworkX</italic> while staying competitive with other
  compiled libraries like <italic>igraph</italic> and
  <italic>graph-tool</italic>. The gains in performance are
  application-specific, but as a general rule, the more work that is
  offloaded to <italic>rustworkx</italic> and Rust, the larger are the
  gains.</p>
  <p>We illustrate use cases with examples from the field of quantum
  computing that motivated the development of the library.</p>
  <sec id="graph-creation-manipulation-and-traversal">
    <title>Graph Creation, Manipulation, and Traversal</title>
    <p>The first use case is based on the manipulation of directed
    acyclic graphs (DAGs) by Qiskit using <italic>rustworkx</italic>.
    Qiskit represents quantum circuits as DAGs on which the compiler
    operates to perform analysis and transformations
    (<xref alt="Childs et al., 2019" rid="ref-Childs2019" ref-type="bibr">Childs
    et al., 2019</xref>).</p>
    <fig>
      <caption><p>Quantum circuit and its equivalent representation as a
      DAG of instructions built by
      Qiskit.<styled-content id="figU003Adagexample"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/paper_img/example_dag_circuit.png" xlink:title="" />
    </fig>
    <p>Qiskit creates a DAG with nodes that represent either
    instructions or registers present in the quantum circuit
    (<xref alt="Cross et al., 2021" rid="ref-Cross2021" ref-type="bibr">Cross
    et al., 2021</xref>) and with edges that represent the registers
    each instruction operates on. Qiskit also applies transformations to
    the instructions, which manipulate the graph by adding and removing
    nodes and edges. <italic>rustworkx</italic> brings the graph data
    structure underlying those operations.</p>
    <p>In addition, Qiskit needs to traverse the graph. Some
    transformations, such as greedily merging instructions to reduce
    circuit depth, require graph traversal. <italic>rustworkx</italic>
    offers the methods for traversals such as breadth-first search,
    depth-first search, and topological sorting.</p>
  </sec>
  <sec id="subgraph-isomorphism">
    <title>Subgraph Isomorphism</title>
    <p>The second use case is based on the qubit mapping problem for
    Noisy Intermediate-Scale Quantum (NISQ) devices
    (<xref alt="Bharti et al., 2022" rid="ref-Bharti2021" ref-type="bibr">Bharti
    et al., 2022</xref>;
    <xref alt="Preskill, 2018" rid="ref-Preskill2018" ref-type="bibr">Preskill,
    2018</xref>). NISQ devices do not have full connectivity among
    qubits, hence Qiskit needs to take into account an undirected graph
    representing the connectivity of the device when compiling quantum
    circuits. Qiskit transforms the quantum circuit such that the pairs
    of qubits executing two-qubit gates respect the device’s
    architectural constraints. There are many proposed solutions to the
    qubit mapping problem, including algorithms based on subgraph
    isomorphism
    (<xref alt="Li et al., 2021" rid="ref-Li2021" ref-type="bibr">Li et
    al., 2021</xref>).</p>
    <fig>
      <caption><p>Graph representing the connectivity of the
      <bold><monospace>ibmq_montreal</monospace></bold> device. Qiskit
      can check if the required connectivity by a circuit is subgraph
      isomorphic to the device’s connectivity when solving the qubit
      mapping
      problem.<styled-content id="figU003Aisomorphismexample"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="media/paper_img/example_coupling_map.png" xlink:title="" />
    </fig>
    <p><italic>rustworkx</italic> implements the VF2 algorithm
    (<xref alt="Cordella et al., 2004" rid="ref-Cordella2004" ref-type="bibr">Cordella
    et al., 2004</xref>) and some of the VF2++ heuristics
    (<xref alt="Jüttner &amp; Madarasi, 2018" rid="ref-Juttner2018" ref-type="bibr">Jüttner
    &amp; Madarasi, 2018</xref>) to solve subgraph isomorphism. The
    implementations include both checking if a mapping exists and
    returning a mapping among the nodes. Qiskit leverages
    <italic>rustworkx</italic> to provide an experimental layout method
    based on VF2. Qiskit checks if the graph representing the
    connectvity required by the circuit and the connectivity provided by
    the device are subgraph isomorphic. If they are, Qiskit uses VF2
    mapping to map the qubits without increasing the depth of the
    circuit.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank Kevin Krsulich for his help in getting
  <italic>rustworkx</italic> ready for use by Qiskit, Lauren Capelluto
  and Toshinari Itoko for their continued support and help with code
  review, and all of the <italic>rustworkx</italic> contributors who
  have helped the library improve over time.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-SciPyProceedings_11">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hagberg</surname><given-names>Aric A.</given-names></name>
        <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
        <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
      </person-group>
      <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
      <source>Proceedings of the 7th Python in Science Conference</source>
      <person-group person-group-type="editor">
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Vaught</surname><given-names>Travis</given-names></name>
        <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
      </person-group>
      <publisher-loc>Pasadena, CA USA</publisher-loc>
      <year iso-8601-date="2008">2008</year>
      <uri>http://conference.scipy.org/proceedings/SciPy2008/paper_2/</uri>
      <fpage>11 </fpage>
      <lpage> 15</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Qiskit2021">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Treinish</surname><given-names>Matthew</given-names></name>
        <name><surname>Gambetta</surname><given-names>Jay</given-names></name>
        <name><surname>Rodríguez</surname><given-names>Diego M.</given-names></name>
        <name><surname>Marques</surname><given-names>Manoel</given-names></name>
        <name><surname>Bello</surname><given-names>Luciano</given-names></name>
        <name><surname>Wood</surname><given-names>Christopher J.</given-names></name>
        <name><surname>Gomez</surname><given-names>Juan</given-names></name>
        <name><surname>Nation</surname><given-names>Paul</given-names></name>
        <name><surname>Chen</surname><given-names>Richard</given-names></name>
        <name><surname>Winston</surname><given-names>Erick</given-names></name>
        <name><surname>Gacon</surname><given-names>Julien</given-names></name>
        <name><surname>Cross</surname><given-names>Andrew</given-names></name>
        <name><surname>Krsulich</surname><given-names>Kevin</given-names></name>
        <name><surname>Sertage</surname><given-names>Ismael Faro</given-names></name>
        <name><surname>Wood</surname><given-names>Steve</given-names></name>
        <name><surname>Alexander</surname><given-names>Thomas</given-names></name>
        <name><surname>Capelluto</surname><given-names>Lauren</given-names></name>
        <name><surname>Puente González</surname><given-names>Salvador de la</given-names></name>
        <name><surname>Rubio</surname><given-names>Jesús</given-names></name>
        <name><surname>Kanazawa</surname><given-names>Naoki</given-names></name>
        <name><surname>Navarro</surname><given-names>Edwin</given-names></name>
        <name><surname>Tod</surname><given-names>Maddy</given-names></name>
        <name><surname>Hamamura</surname><given-names>Ikko</given-names></name>
        <name><surname>Mezzacapo</surname><given-names>Antonio</given-names></name>
        <name><surname>Bishop</surname><given-names>Lev</given-names></name>
        <name><surname>Hu</surname><given-names>Shaohan</given-names></name>
        <name><surname>Cross</surname><given-names>Abby</given-names></name>
        <name><surname>Zoufal</surname><given-names>Christa</given-names></name>
        <name><surname>Greenberg</surname><given-names>Donny</given-names></name>
        <name><surname>Woerner</surname><given-names>Stefan</given-names></name>
      </person-group>
      <source>Qiskit/qiskit-terra: Qiskit terra 0.19.1</source>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2021-09">2021</year><month>09</month>
      <uri>https://doi.org/10.5281/zenodo.2583252</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.2583252</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Childs2019">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Childs</surname><given-names>Andrew M.</given-names></name>
        <name><surname>Schoute</surname><given-names>Eddie</given-names></name>
        <name><surname>Unsal</surname><given-names>Cem M.</given-names></name>
      </person-group>
      <article-title>Circuit Transformations for Quantum Architectures</article-title>
      <source>14th Conference on the Theory of Quantum Computation, Communication and Cryptography (TQC 2019)</source>
      <person-group person-group-type="editor">
        <name><surname>Dam</surname><given-names>Wim van</given-names></name>
        <name><surname>Mancinska</surname><given-names>Laura</given-names></name>
      </person-group>
      <publisher-name>Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik</publisher-name>
      <publisher-loc>Dagstuhl, Germany</publisher-loc>
      <year iso-8601-date="2019">2019</year>
      <volume>135</volume>
      <isbn>978-3-95977-112-2</isbn>
      <issn>1868-8969</issn>
      <uri>http://drops.dagstuhl.de/opus/volltexte/2019/10395</uri>
      <pub-id pub-id-type="doi">10.4230/LIPIcs.TQC.2019.3</pub-id>
      <fpage>3:1</fpage>
      <lpage>3:24</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Matsakis2014">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Matsakis</surname><given-names>Nicholas D.</given-names></name>
        <name><surname>Klock</surname><given-names>Felix S.</given-names></name>
      </person-group>
      <article-title>The Rust language</article-title>
      <source>Proceedings of the 2014 ACM SIGAda annual conference on high integrity language technology</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2014">2014</year>
      <isbn>9781450332170</isbn>
      <uri>https://doi.org/10.1145/2663171.2663188</uri>
      <pub-id pub-id-type="doi">10.1145/2663171.2663188</pub-id>
      <fpage>103</fpage>
      <lpage>104</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Leskovec2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Leskovec</surname><given-names>Jure</given-names></name>
        <name><surname>Sosič</surname><given-names>Rok</given-names></name>
      </person-group>
      <article-title>SNAP: A general-purpose network analysis and graph-mining library</article-title>
      <source>ACM Trans. Intell. Syst. Technol.</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2016-07">2016</year><month>07</month>
      <volume>8</volume>
      <issue>1</issue>
      <issn>2157-6904</issn>
      <uri>https://doi.org/10.1145/2898361</uri>
      <pub-id pub-id-type="doi">10.1145/2898361</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Csardi2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Csardi</surname><given-names>Gabor</given-names></name>
        <name><surname>Nepusz</surname><given-names>Tamas</given-names></name>
      </person-group>
      <article-title>The igraph software package for complex network research</article-title>
      <source>InterJournal</source>
      <year iso-8601-date="2006">2006</year>
      <volume>Complex Systems</volume>
      <uri>https://igraph.org</uri>
      <fpage>1695</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-Peixoto2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Peixoto</surname><given-names>Tiago P.</given-names></name>
      </person-group>
      <article-title>The graph-tool Python library</article-title>
      <source>figshare</source>
      <year iso-8601-date="2014">2014</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2014-09-10">2014</year><month>09</month><day>10</day></date-in-citation>
      <uri>http://figshare.com/articles/graph_tool/1164194</uri>
      <pub-id pub-id-type="doi">10.6084/m9.figshare.1164194</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Ullberg2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Ullberg</surname><given-names>Seaton</given-names></name>
      </person-group>
      <article-title>atompack: A flexible Python library for atomic structure generation</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/seatonullberg/atompack</uri>
    </element-citation>
  </ref>
  <ref id="ref-Jha2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Jha</surname><given-names>Shantanu</given-names></name>
        <name><surname>Chen</surname><given-names>Jessie</given-names></name>
        <name><surname>Householder</surname><given-names>Aaron</given-names></name>
        <name><surname>Mi</surname><given-names>Allen</given-names></name>
      </person-group>
      <article-title>Qtcodes</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/yaleqc/qtcodes</uri>
    </element-citation>
  </ref>
  <ref id="ref-bluss2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>bluss</surname></name>
        <name><surname>Comets</surname><given-names>Jean-Marie</given-names></name>
        <name><surname>Borgna</surname><given-names>Agustín</given-names></name>
        <name><surname>Larralde</surname><given-names>Martin</given-names></name>
        <name><surname>Mitchener</surname><given-names>Bruce</given-names></name>
        <name><surname>Kochkov</surname><given-names>Anton</given-names></name>
      </person-group>
      <article-title>Petgraph</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/petgraph/petgraph</uri>
    </element-citation>
  </ref>
  <ref id="ref-Hewitt2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hewitt</surname><given-names>David</given-names></name>
        <name><surname>Kanagawa</surname><given-names>Yuji</given-names></name>
        <name><surname>Kim</surname><given-names>Nikolay</given-names></name>
        <name><surname>Grunwald</surname><given-names>Daniel</given-names></name>
        <name><surname>Niederbühl</surname><given-names>Alexander</given-names></name>
        <name><surname>messense</surname></name>
        <name><surname>Kolenbrander</surname><given-names>Bruno</given-names></name>
        <name><surname>Brandl</surname><given-names>Georg</given-names></name>
        <name><surname>Ganssle</surname><given-names>Paul</given-names></name>
      </person-group>
      <article-title>PyO3</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/PyO3/pyo3</uri>
    </element-citation>
  </ref>
  <ref id="ref-Cordella2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Cordella</surname><given-names>L. P.</given-names></name>
        <name><surname>Foggia</surname><given-names>P.</given-names></name>
        <name><surname>Sansone</surname><given-names>C.</given-names></name>
        <name><surname>Vento</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>A (sub)graph isomorphism algorithm for matching large graphs</article-title>
      <source>IEEE Transactions on Pattern Analysis and Machine Intelligence</source>
      <year iso-8601-date="2004">2004</year>
      <volume>26</volume>
      <issue>10</issue>
      <pub-id pub-id-type="doi">10.1109/TPAMI.2004.75</pub-id>
      <fpage>1367</fpage>
      <lpage>1372</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Juttner2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Jüttner</surname><given-names>Alpár</given-names></name>
        <name><surname>Madarasi</surname><given-names>Péter</given-names></name>
      </person-group>
      <article-title>VF2++—an improved subgraph isomorphism algorithm</article-title>
      <source>Discrete Applied Mathematics</source>
      <year iso-8601-date="2018">2018</year>
      <volume>242</volume>
      <issn>0166-218X</issn>
      <uri>https://www.sciencedirect.com/science/article/pii/S0166218X18300829</uri>
      <pub-id pub-id-type="doi">10.1016/j.dam.2018.02.018</pub-id>
      <fpage>69</fpage>
      <lpage>81</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Staudt2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Staudt</surname><given-names>Christian L.</given-names></name>
        <name><surname>Sazonovs</surname><given-names>Aleksejs</given-names></name>
        <name><surname>Meyerhenke</surname><given-names>Henning</given-names></name>
      </person-group>
      <article-title>NetworKit: A tool suite for large-scale complex network analysis</article-title>
      <source>Network Science</source>
      <publisher-name>Cambridge University Press</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <volume>4</volume>
      <issue>4</issue>
      <pub-id pub-id-type="doi">10.1017/nws.2016.20</pub-id>
      <fpage>508</fpage>
      <lpage>530</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Sagemath2020">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>The Sage Developers</string-name>
      </person-group>
      <source>SageMath, the Sage Mathematics Software System (Version 9.1)</source>
      <year iso-8601-date="2020">2020</year>
      <uri>https://doi.org/10.5281/zenodo.4066866</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.4066866</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Bergholm2020">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bergholm</surname><given-names>Ville</given-names></name>
        <name><surname>Izaac</surname><given-names>Josh</given-names></name>
        <name><surname>Schuld</surname><given-names>Maria</given-names></name>
        <name><surname>Gogolin</surname><given-names>Christian</given-names></name>
        <name><surname>Alam</surname><given-names>M. Sohaib</given-names></name>
        <name><surname>Ahmed</surname><given-names>Shahnawaz</given-names></name>
        <name><surname>Arrazola</surname><given-names>Juan Miguel</given-names></name>
        <name><surname>Blank</surname><given-names>Carsten</given-names></name>
        <name><surname>Delgado</surname><given-names>Alain</given-names></name>
        <name><surname>Jahangiri</surname><given-names>Soran</given-names></name>
        <name><surname>McKiernan</surname><given-names>Keri</given-names></name>
        <name><surname>Meyer</surname><given-names>Johannes Jakob</given-names></name>
        <name><surname>Niu</surname><given-names>Zeyue</given-names></name>
        <name><surname>Száva</surname><given-names>Antal</given-names></name>
        <name><surname>Killoran</surname><given-names>Nathan</given-names></name>
      </person-group>
      <article-title>PennyLane: Automatic differentiation of hybrid quantum-classical computations</article-title>
      <year iso-8601-date="2020">2020</year>
      <uri>https://doi.org/10.48550/arXiv.1811.04968</uri>
      <pub-id pub-id-type="doi">10.48550/ARXIV.1811.04968</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Stone2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Stone</surname><given-names>Josh</given-names></name>
        <name><surname>Matsakis</surname><given-names>Nicholas D.</given-names></name>
      </person-group>
      <article-title>Rayon: A data parallelism library for Rust</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2021">2021</year>
      <uri>https://github.com/rayon-rs/rayon</uri>
    </element-citation>
  </ref>
  <ref id="ref-Cross2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Cross</surname><given-names>Andrew W.</given-names></name>
        <name><surname>Javadi-Abhari</surname><given-names>Ali</given-names></name>
        <name><surname>Alexander</surname><given-names>Thomas</given-names></name>
        <name><surname>Beaudrap</surname><given-names>Niel de</given-names></name>
        <name><surname>Bishop</surname><given-names>Lev S.</given-names></name>
        <name><surname>Heidel</surname><given-names>Steven</given-names></name>
        <name><surname>Ryan</surname><given-names>Colm A.</given-names></name>
        <name><surname>Smolin</surname><given-names>John</given-names></name>
        <name><surname>Gambetta</surname><given-names>Jay M.</given-names></name>
        <name><surname>Johnson</surname><given-names>Blake R.</given-names></name>
      </person-group>
      <article-title>OpenQASM 3: A broader and deeper quantum assembly language</article-title>
      <year iso-8601-date="2021">2021</year>
      <uri>https://doi.org/10.48550/arXiv.2104.14722</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2104.14722</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Li2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Li</surname><given-names>Sanjiang</given-names></name>
        <name><surname>Zhou</surname><given-names>Xiangzhen</given-names></name>
        <name><surname>Feng</surname><given-names>Yuan</given-names></name>
      </person-group>
      <article-title>Qubit mapping based on subgraph isomorphism and filtered depth-limited search</article-title>
      <source>IEEE Transactions on Computers</source>
      <publisher-name>Institute of Electrical; Electronics Engineers (IEEE)</publisher-name>
      <year iso-8601-date="2021-11">2021</year><month>11</month>
      <volume>70</volume>
      <issue>11</issue>
      <issn>2326-3814</issn>
      <uri>http://dx.doi.org/10.1109/TC.2020.3023247</uri>
      <pub-id pub-id-type="doi">10.1109/tc.2020.3023247</pub-id>
      <fpage>1777</fpage>
      <lpage>1788</lpage>
    </element-citation>
  </ref>
  <ref id="ref-Bharti2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bharti</surname><given-names>Kishor</given-names></name>
        <name><surname>Cervera-Lierta</surname><given-names>Alba</given-names></name>
        <name><surname>Kyaw</surname><given-names>Thi Ha</given-names></name>
        <name><surname>Haug</surname><given-names>Tobias</given-names></name>
        <name><surname>Alperin-Lea</surname><given-names>Sumner</given-names></name>
        <name><surname>Anand</surname><given-names>Abhinav</given-names></name>
        <name><surname>Degroote</surname><given-names>Matthias</given-names></name>
        <name><surname>Heimonen</surname><given-names>Hermanni</given-names></name>
        <name><surname>Kottmann</surname><given-names>Jakob S.</given-names></name>
        <name><surname>Menke</surname><given-names>Tim</given-names></name>
        <name><surname>Mok</surname><given-names>Wai-Keong</given-names></name>
        <name><surname>Sim</surname><given-names>Sukin</given-names></name>
        <name><surname>Kwek</surname><given-names>Leong-Chuan</given-names></name>
        <name><surname>Aspuru-Guzik</surname><given-names>Alán</given-names></name>
      </person-group>
      <article-title>Noisy intermediate-scale quantum algorithms</article-title>
      <source>Reviews of Modern Physics</source>
      <publisher-name>American Physical Society (APS)</publisher-name>
      <year iso-8601-date="2022-02">2022</year><month>02</month>
      <volume>94</volume>
      <issue>1</issue>
      <issn>1539-0756</issn>
      <uri>http://dx.doi.org/10.1103/RevModPhys.94.015004</uri>
      <pub-id pub-id-type="doi">10.1103/revmodphys.94.015004</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-Preskill2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Preskill</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>Quantum computing in the NISQ era and beyond</article-title>
      <source>Quantum</source>
      <publisher-name>Verein zur Forderung des Open Access Publizierens in den Quantenwissenschaften</publisher-name>
      <year iso-8601-date="2018-08">2018</year><month>08</month>
      <volume>2</volume>
      <issn>2521-327X</issn>
      <uri>http://dx.doi.org/10.22331/q-2018-08-06-79</uri>
      <pub-id pub-id-type="doi">10.22331/q-2018-08-06-79</pub-id>
      <fpage>79</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
