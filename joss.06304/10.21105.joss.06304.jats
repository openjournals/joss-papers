<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">6304</article-id>
<article-id pub-id-type="doi">10.21105/joss.06304</article-id>
<title-group>
<article-title><monospace>plotastic</monospace>: Bridging Plotting and
Statistics in Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0009-0009-7292-7714</contrib-id>
<name>
<surname>Kuric</surname>
<given-names>Martin</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-8192-869X</contrib-id>
<name>
<surname>Ebert</surname>
<given-names>Regina</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Musculoskeletal Tissue Regeneration,
University of Würzburg, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<volume>9</volume>
<issue>95</issue>
<fpage>6304</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>plotting</kwd>
<kwd>statistics</kwd>
<kwd>seaborn</kwd>
<kwd>pingouin</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>plotastic</monospace> addresses the challenges of
  transitioning from exploratory data analysis to hypothesis testing in
  Python’s data science ecosystem. Bridging the gap between
  <monospace>seaborn</monospace> and <monospace>pingouin</monospace>,
  this library offers a unified environment for plotting and statistical
  analysis. It simplifies the workflow with user-friendly syntax and
  seamless integration with familiar <monospace>seaborn</monospace>
  parameters (y, x, hue, row, col). Inspired by
  <monospace>seaborn</monospace>’s consistency,
  <monospace>plotastic</monospace> utilizes a
  <monospace>DataAnalysis</monospace> object to intelligently pass
  parameters to <monospace>pingouin</monospace> statistical functions.
  Hence, statistics and plotting are performed on the same set of
  parameters, so that the strength of <monospace>seaborn</monospace> in
  visualizing multidimensional data is extended onto statistical
  analysis. In essence, <monospace>plotastic</monospace> translates
  <monospace>seaborn</monospace> parameters into statistical terms,
  configures statistical protocols based on intuitive plotting syntax
  and returns a <monospace>matplotlib</monospace> figure with known
  customization options and more. This approach streamlines data
  analysis, allowing researchers to focus on correct statistical testing
  and less about specific syntax and implementations.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Python’s data science ecosystem provides powerful tools for both
  visualization and statistical testing. However, the transition from
  exploratory data analysis to hypothesis testing can be cumbersome,
  requiring users to switch between libraries and adapt to different
  syntaxes. <monospace>seaborn</monospace> has become a popular choice
  for plotting in Python, offering an intuitive interface. Its
  statistical functionality focuses on descriptive plots and
  bootstrapped confidence intervals
  (<xref alt="Waskom, 2021" rid="ref-waskomSeabornStatisticalData2021" ref-type="bibr">Waskom,
  2021</xref>). The library <monospace>pingouin</monospace> offers an
  extensive set of statistical tests, but it lacks integration with
  common plotting capabilities
  (<xref alt="Vallat, 2018" rid="ref-vallatPingouinStatisticsPython2018" ref-type="bibr">Vallat,
  2018</xref>). <monospace>statannotations</monospace> integrates
  statistical testing with plot annotations, but uses a complex
  interface and is limited to pairwise comparisons
  (<xref alt="Charlier et al., 2022" rid="ref-charlierTrevismdStatannotationsV02022" ref-type="bibr">Charlier
  et al., 2022</xref>).</p>
  <p><monospace>plotastic</monospace> addresses this gap by offering a
  unified environment for plotting and statistical analysis. With an
  emphasis on user-friendly syntax and integration of familiar
  <monospace>seaborn</monospace> parameters, it simplifies the process
  for users already comfortable with <monospace>seaborn</monospace>. The
  library ensures a smooth workflow, from data import to hypothesis
  testing and visualization.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>The following code demonstrates how
  <monospace>plotastic</monospace> analyzes the example dataset “fmri”,
  similar to Waskom
  (<xref alt="2021" rid="ref-waskomSeabornStatisticalData2021" ref-type="bibr">2021</xref>)
  (<xref alt="[fig:examplefmri]" rid="figU003Aexamplefmri">[fig:examplefmri]</xref>).</p>
  <code language="python">### IMPORT PLOTASTIC
import plotastic as plst

# IMPORT EXAMPLE DATA
DF, _dims = plst.load_dataset(&quot;fmri&quot;, verbose = False)

# EXPLICITLY DEFINE DIMENSIONS TO FACET BY
dims = dict(
    y = &quot;signal&quot;,    # y-axis, dependent variable
    x = &quot;timepoint&quot;, # x-axis, independent variable (within-subject factor)
    hue = &quot;event&quot;,   # color,  independent variable (within-subject factor)
    col = &quot;region&quot;   # axes,   grouping variable
)

# INITIALIZE DATAANALYSIS OBJECT
DA = plst.DataAnalysis(
    data=DF,           # Dataframe, long format
    dims=dims,         # Dictionary with y, x, hue, col, row 
    subject=&quot;subject&quot;, # Datapoints are paired by subject (optional)
    verbose=False,     # Print out info about the Data (optional)
)

# STATISTICAL TESTS
DA.check_normality()   # Check Normality
DA.check_sphericity()  # Check Sphericity
DA.omnibus_rm_anova()  # Perform RM-ANOVA
DA.test_pairwise()     # Perform Posthoc Analysis

# PLOTTING
(DA
 .plot_box_strip()   # Pre-built plotting function initializes plot
 .annotate_pairwise( # Annotate results from DA.test_pairwise()
     include=&quot;__HUE&quot; # Use only significant pairs across each hue
     ) 
)</code>
  <fig>
    <caption><p>Example figure of <monospace>plotastic</monospace>
    (version 0.1). Image style was set by
    <monospace>plt.style.use(&quot;ggplot&quot;)</monospace>
    <styled-content id="figU003Aexamplefmri"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="media/EXAMPLES/fmri2.png" />
  </fig>
  <table-wrap>
    <caption>
      <p>Results from <monospace>DA.check_sphericity()</monospace>.
      <monospace>plotastic</monospace> assesses sphericity after
      grouping the data by all grouping dimensions (hue, row, col). For
      example, <monospace>DA.check_sphericity()</monospace> grouped the
      ‘fmri’ dataset by “region” (col) and “event” (hue), performing
      four subsequent sphericity tests for four datasets.
      <styled-content id="tabU003Asphericity"></styled-content></p>
    </caption>
    <table>
      <colgroup>
        <col width="28%" />
        <col width="8%" />
        <col width="11%" />
        <col width="11%" />
        <col width="6%" />
        <col width="7%" />
        <col width="12%" />
        <col width="18%" />
      </colgroup>
      <thead>
        <tr>
          <th align="left">‘region’, ‘event’</th>
          <th align="left">spher</th>
          <th align="right">W</th>
          <th align="right">chi2</th>
          <th align="right">dof</th>
          <th align="right">pval</th>
          <th align="right">group count</th>
          <th align="left">n per group</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="left">‘frontal’, ‘cue’</td>
          <td align="left">True</td>
          <td align="right">3.26e+20</td>
          <td align="right">-462.7</td>
          <td align="right">44</td>
          <td align="right">1</td>
          <td align="right">10</td>
          <td align="left">[14]</td>
        </tr>
        <tr>
          <td align="left">‘frontal’, ‘stim’</td>
          <td align="left">True</td>
          <td align="right">2.45e+17</td>
          <td align="right">-392.2</td>
          <td align="right">44</td>
          <td align="right">1</td>
          <td align="right">10</td>
          <td align="left">[14]</td>
        </tr>
        <tr>
          <td align="left">‘parietal’, ‘cue’</td>
          <td align="left">True</td>
          <td align="right">1.20e+20</td>
          <td align="right">-452.9</td>
          <td align="right">44</td>
          <td align="right">1</td>
          <td align="right">10</td>
          <td align="left">[14]</td>
        </tr>
        <tr>
          <td align="left">‘parietal’, ‘stim’</td>
          <td align="left">True</td>
          <td align="right">2.44e+13</td>
          <td align="right">-301.9</td>
          <td align="right">44</td>
          <td align="right">1</td>
          <td align="right">10</td>
          <td align="left">[14]</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <table-wrap>
    <caption>
      <p>Results of <monospace>DA.omnibus_rm_anova()</monospace>.
      <monospace>plotastic</monospace> performs one two-factor RM-ANOVA
      per axis (grouping the data by row and col dimensions) using x and
      hue as the within-factors. For this example,
      <monospace>DA.omnibus_rm_anova()</monospace> grouped the ‘fmri’
      dataset by “region” (col), performing two subsequent two-factor
      RM-ANOVAs. Within-factors are “timepoint” (x) and “event” (hue).
      For conciceness, GG-Correction and effect sizes are not shown.
      <styled-content id="tabU003ARMANOVA"></styled-content></p>
    </caption>
    <table>
      <colgroup>
        <col width="19%" />
        <col width="21%" />
        <col width="8%" />
        <col width="6%" />
        <col width="6%" />
        <col width="9%" />
        <col width="7%" />
        <col width="14%" />
        <col width="10%" />
      </colgroup>
      <thead>
        <tr>
          <th align="left">‘region’</th>
          <th align="left">Source</th>
          <th align="right">SS</th>
          <th align="right">ddof1</th>
          <th align="right">ddof2</th>
          <th align="right">MS</th>
          <th align="right">F</th>
          <th align="right">p-unc</th>
          <th align="left">stars</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td align="left">‘parietal’</td>
          <td align="left">timepoint</td>
          <td align="right">1.583</td>
          <td align="right">9</td>
          <td align="right">117</td>
          <td align="right">0.175</td>
          <td align="right">26.20</td>
          <td align="right">3.40e-24</td>
          <td align="left">****</td>
        </tr>
        <tr>
          <td align="left">‘parietal’</td>
          <td align="left">event</td>
          <td align="right">0.770</td>
          <td align="right">1</td>
          <td align="right">13</td>
          <td align="right">0.770</td>
          <td align="right">85.31</td>
          <td align="right">4.48e-07</td>
          <td align="left">****</td>
        </tr>
        <tr>
          <td align="left">‘parietal’</td>
          <td align="left">timepoint * event</td>
          <td align="right">0.623</td>
          <td align="right">9</td>
          <td align="right">117</td>
          <td align="right">0.069</td>
          <td align="right">29.54</td>
          <td align="right">3.26e-26</td>
          <td align="left">****</td>
        </tr>
        <tr>
          <td align="left">‘frontal’</td>
          <td align="left">timepoint</td>
          <td align="right">0.686</td>
          <td align="right">9</td>
          <td align="right">117</td>
          <td align="right">0.076</td>
          <td align="right">15.98</td>
          <td align="right">8.28e-17</td>
          <td align="left">****</td>
        </tr>
        <tr>
          <td align="left">‘frontal’</td>
          <td align="left">event</td>
          <td align="right">0.240</td>
          <td align="right">1</td>
          <td align="right">13</td>
          <td align="right">0.240</td>
          <td align="right">23.44</td>
          <td align="right">3.21e-4</td>
          <td align="left">***</td>
        </tr>
        <tr>
          <td align="left">‘frontal’</td>
          <td align="left">timepoint * event</td>
          <td align="right">0.242</td>
          <td align="right">9</td>
          <td align="right">117</td>
          <td align="right">0.026</td>
          <td align="right">13.031</td>
          <td align="right">3.23e-14</td>
          <td align="left">****</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
</sec>
<sec id="overview">
  <title>Overview</title>
  <p>The functionality of <monospace>plotastic</monospace> revolves
  around a seamless integration of statistical analysis and plotting,
  leveraging the capabilities of <monospace>pingouin</monospace>,
  <monospace>seaborn</monospace>, <monospace>matplotlib</monospace> and
  <monospace>statannotations</monospace>
  (<xref alt="Charlier et al., 2022" rid="ref-charlierTrevismdStatannotationsV02022" ref-type="bibr">Charlier
  et al., 2022</xref>;
  <xref alt="Hunter, 2007" rid="ref-hunterMatplotlib2DGraphics2007" ref-type="bibr">Hunter,
  2007</xref>;
  <xref alt="Vallat, 2018" rid="ref-vallatPingouinStatisticsPython2018" ref-type="bibr">Vallat,
  2018</xref>;
  <xref alt="Waskom, 2021" rid="ref-waskomSeabornStatisticalData2021" ref-type="bibr">Waskom,
  2021</xref>). It utilizes long-format <monospace>pandas</monospace>
  <monospace>DataFrames</monospace> as its primary input, aligning with
  the conventions of <monospace>seaborn</monospace> and ensuring
  compatibility with existing data structures
  (<xref alt="McKinney, 2010" rid="ref-mckinneyDataStructuresStatistical2010" ref-type="bibr">McKinney,
  2010</xref>;
  <xref alt="Team, 2020" rid="ref-reback2020pandas" ref-type="bibr">Team,
  2020</xref>;
  <xref alt="Wickham, 2014" rid="ref-wickhamTidyData2014a" ref-type="bibr">Wickham,
  2014</xref>).</p>
  <p><monospace>plotastic</monospace> was inspired by
  <monospace>seaborn</monospace> using the same set of intuitive and
  consistent parameters (y, x, hue, row, col) found in each of its
  plotting functions
  (<xref alt="Waskom, 2021" rid="ref-waskomSeabornStatisticalData2021" ref-type="bibr">Waskom,
  2021</xref>). These parameters intuitively delineate the data
  dimensions plotted, yielding ‘facetted’ subplots, each presenting y
  against x. This allows for rapid and insightful exploration of
  multidimensional relationships. <monospace>plotastic</monospace>
  extends this principle to statistical analysis by storing these
  <monospace>seaborn</monospace> parameters (referred to as dimensions)
  in a <monospace>DataAnalysis</monospace> object and intelligently
  passing them to statistical functions of the
  <monospace>pingouin</monospace> library. This approach is based on the
  impression that most decisions during statistical analysis can be
  derived from how the user decides to arrange the data in a plot. This
  approach also prevents code repetition and streamlines statistical
  analysis. For example, the subject keyword is specified only once
  during <monospace>DataAnalysis</monospace> initialisation, and
  <monospace>plotastic</monospace> selects the appropriate paired or
  unpaired version of the test. Using <monospace>pingouin</monospace>
  alone requires the user to manually pick the correct test and to
  repeatedly specify the subject keyword in each testing function.</p>
  <p>In essence, <monospace>plotastic</monospace> translates plotting
  parameters into their statistical counterparts. This translation
  minimizes user input and also ensures a coherent and logical
  connection between plotting and statistical analysis. The goal is to
  allow the user to focus on choosing the correct statistical test
  (e.g. parametric vs. non-parametric) and worry less about specific
  implementations.</p>
  <p>At its core, <monospace>plotastic</monospace> employs iterators to
  systematically group data based on various dimensions, aligning the
  analysis with the distinct requirements of tests and plots. Normality
  testing is performed on each individual sample, which is achieved by
  splitting the data by all grouping dimensions and also the x-axis
  (hue, row, col, x). Sphericity and homoscedasticity testing is
  performed on a complete sampleset listed on the x-axis, which is
  achieved by splitting the data by all grouping dimensions (hue, row,
  col) (<xref alt="Table 1" rid="tabU003Asphericity">Table 1</xref>).
  For omnibus and posthoc analyses, data is grouped by the row and col
  dimensions in parallel to the <monospace>matplotlib</monospace> axes,
  before performing one two-factor analysis per axis using x and hue as
  the within/between-factors.
  (<xref alt="Table 2" rid="tabU003ARMANOVA">Table 2</xref>).</p>
  <p><monospace>DataAnalysis</monospace> visualizes data through
  predefined plotting functions designed for drawing multi-layered
  plots. A notable emphasis within <monospace>plotastic</monospace> is
  placed on showcasing individual datapoints alongside aggregated means
  or medians. In detail, each plotting function initializes a
  <monospace>matplotlib</monospace> figure and axes using
  <monospace>plt.subplots()</monospace> while returning a
  <monospace>DataAnalysis</monospace> object for method chaining. Axes
  are populated by <monospace>seaborn</monospace> plotting functions
  (e.g., <monospace>sns.boxplot()</monospace>), leveraging automated
  aggregation and error bar displays. Keyword arguments are passed to
  these <monospace>seaborn</monospace> functions, ensuring the same
  degree of customization. Users can further customize plots by chaining
  <monospace>DataAnalysis</monospace> methods or by applying common
  <monospace>matplotlib</monospace> code to override
  <monospace>plotastic</monospace> settings. Figures are exported using
  <monospace>plt.savefig()</monospace>.</p>
  <p><monospace>plotastic</monospace> also focuses on annotating
  statistical information within plots, seamlessly incorporating
  p-values from pairwise comparisons using
  <monospace>statannotations</monospace>
  (<xref alt="Charlier et al., 2022" rid="ref-charlierTrevismdStatannotationsV02022" ref-type="bibr">Charlier
  et al., 2022</xref>). This integration simplifies the interface and
  enables options for pair selection in multidimensional plots,
  enhancing both user experience and interpretability.</p>
  <p>For statistics, <monospace>plotastic</monospace> integrates with
  the <monospace>pingouin</monospace> library to support classical
  assumption and hypothesis testing, covering parametric/non-parametric
  and paired/non-paired variants. Assumptions such as normality,
  homoscedasticity, and sphericity are tested. Omnibus tests include
  two-factor RM-ANOVA, ANOVA, Friedman, and Kruskal-Wallis. Posthoc
  tests are implemented through
  <monospace>pingouin.pairwise_tests()</monospace>, offering (paired)
  t-tests, Wilcoxon, and Mann-Whitney-U.</p>
  <p>To sum up, <monospace>plotastic</monospace> stands as a unified and
  user-friendly solution catering to the needs of researchers and data
  scientists, seamlessly integrating statistical analysis with the power
  of plotting in Python. It streamlines the workflow, translates
  <monospace>seaborn</monospace> parameters into statistical terms, and
  supports extensive customization options for both analysis and
  visualization.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>This work was supported by the Deutsche Forschungsgemeinschaft
  (DFG) SPP microBONE grants EB 447/10-1 (491715122), JA 504/17-1, HO
  4462/1-1 (401358321), We thank the Elite Netzwerk Bayern and the
  Graduate School of Life Sciences of the University of Würzburg.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-charlierTrevismdStatannotationsV02022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Charlier</surname><given-names>Florian</given-names></name>
        <name><surname>Weber</surname><given-names>Marc</given-names></name>
        <name><surname>Izak</surname><given-names>Dariusz</given-names></name>
        <name><surname>Harkin</surname><given-names>Emerson</given-names></name>
        <name><surname>Magnus</surname><given-names>Marcin</given-names></name>
        <name><surname>Lalli</surname><given-names>Joseph</given-names></name>
        <name><surname>Fresnais</surname><given-names>Louison</given-names></name>
        <name><surname>Chan</surname><given-names>Matt</given-names></name>
        <name><surname>Markov</surname><given-names>Nikolay</given-names></name>
        <name><surname>Amsalem</surname><given-names>Oren</given-names></name>
        <name><surname>Proost</surname><given-names>Sebastian</given-names></name>
        <string-name>Agamemnon Krasoulis</string-name>
        <string-name>Getzze</string-name>
        <name><surname>Repplinger</surname><given-names>Stefan</given-names></name>
      </person-group>
      <article-title>Trevismd/statannotations: V0.5</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2022-10">2022</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-11-16">2023</year><month>11</month><day>16</day></date-in-citation>
      <uri>https://zenodo.org/record/7213391</uri>
      <pub-id pub-id-type="doi">10.5281/ZENODO.7213391</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hunterMatplotlib2DGraphics2007">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hunter</surname><given-names>John D.</given-names></name>
      </person-group>
      <article-title>Matplotlib: A 2D Graphics Environment</article-title>
      <source>Computing in Science &amp; Engineering</source>
      <year iso-8601-date="2007-05">2007</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-11-15">2023</year><month>11</month><day>15</day></date-in-citation>
      <volume>9</volume>
      <issue>3</issue>
      <issn>1558-366X</issn>
      <uri>https://ieeexplore.ieee.org/document/4160265</uri>
      <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      <fpage>90</fpage>
      <lpage>95</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mckinneyDataStructuresStatistical2010">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>McKinney</surname><given-names>Wes</given-names></name>
      </person-group>
      <article-title>Data Structures for Statistical Computing in Python</article-title>
      <year iso-8601-date="2010-01">2010</year><month>01</month>
      <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id>
      <fpage>56</fpage>
      <lpage>61</lpage>
    </element-citation>
  </ref>
  <ref id="ref-reback2020pandas">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Team</surname><given-names>The Pandas Development</given-names></name>
      </person-group>
      <article-title>Pandas-dev/pandas: Pandas</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2020-02">2020</year><month>02</month>
      <uri>https://doi.org/10.5281/zenodo.3509134</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.3509134</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-vallatPingouinStatisticsPython2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vallat</surname><given-names>Raphael</given-names></name>
      </person-group>
      <article-title>Pingouin: Statistics in Python</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2018-11">2018</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-05-29">2023</year><month>05</month><day>29</day></date-in-citation>
      <volume>3</volume>
      <issue>31</issue>
      <issn>2475-9066</issn>
      <uri>https://joss.theoj.org/papers/10.21105/joss.01026</uri>
      <pub-id pub-id-type="doi">10.21105/joss.01026</pub-id>
      <fpage>1026</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-waskomSeabornStatisticalData2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Waskom</surname><given-names>Michael L.</given-names></name>
      </person-group>
      <article-title>Seaborn: Statistical data visualization</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2021-04">2021</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-03-26">2023</year><month>03</month><day>26</day></date-in-citation>
      <volume>6</volume>
      <issue>60</issue>
      <issn>2475-9066</issn>
      <uri>https://joss.theoj.org/papers/10.21105/joss.03021</uri>
      <pub-id pub-id-type="doi">10.21105/joss.03021</pub-id>
      <fpage>3021</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-wickhamTidyData2014a">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <article-title>Tidy Data</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2014-09">2014</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2023-11-15">2023</year><month>11</month><day>15</day></date-in-citation>
      <volume>59</volume>
      <issn>1548-7660</issn>
      <uri>https://doi.org/10.18637/jss.v059.i10</uri>
      <pub-id pub-id-type="doi">10.18637/jss.v059.i10</pub-id>
      <fpage>1</fpage>
      <lpage>23</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
