<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">4680</article-id>
<article-id pub-id-type="doi">10.21105/joss.04680</article-id>
<title-group>
<article-title>CMinx: A CMake Documentation Generator</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes">
<name>
<surname>Butler</surname>
<given-names>Branden</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0003-4235-5179</contrib-id>
<name>
<surname>Richard</surname>
<given-names>Ryan M.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Ames National Laboratory, Ames, IA, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Iowa State University, Ames, IA, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<volume>7</volume>
<issue>77</issue>
<fpage>4680</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2022</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>CMake</kwd>
<kwd>Documentation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>This manuscript introduces CMinx, a program for generating
  application programming interface (API) documentation written in the
  CMake language, and CMake modules in particular. Since most of CMinx’s
  intended audience is comprised of C/C++ developers, CMinx is designed
  to operate similar to Doxygen
  (<xref alt="Heesch, 2022" rid="ref-doxygen" ref-type="bibr">Heesch,
  2022</xref>), the <italic>de facto</italic> C/C++ API documentation
  tool. Specifically, developers annotate their CMake source with
  “documentation” comments, which are traditional CMake block comments
  starting with an extra “<monospace>[</monospace>” character. The
  documentation comments, written in reST
  (<xref alt="reStructuredText, 2022" rid="ref-rest" ref-type="bibr"><italic>reStructuredText</italic>,
  2022</xref>), describe to the reader how the functions, parameters,
  and variables should be used. Running CMinx on the annotated source
  code generates reST files containing the API documentation. The reST
  files can then be converted into static websites with tools such as
  Sphinx
  (<xref alt="Sphinx, 2022" rid="ref-sphinx" ref-type="bibr"><italic>Sphinx</italic>,
  2022</xref>) or easily converted to another format via Pandoc
  (<xref alt="Pandoc, 2022" rid="ref-pandoc" ref-type="bibr"><italic>Pandoc</italic>,
  2022</xref>).</p>
  <p>Unlike other solutions for documenting CMake modules, CMinx knows
  the CMake language’s grammar. This enables CMinx to automatically
  extract function/macro signatures, even when functions are not
  documented. CMinx also integrates seamlessly into existing CMake build
  systems. CMinx’s output is highly customizable and easily controlled
  via a YAML
  (<xref alt="YAML, 2022" rid="ref-yaml" ref-type="bibr"><italic>YAML</italic>,
  2022</xref>) configuration file. CMinx has already proved to be an
  invaluable productivity tool in the authors’ other projects, and,
  given that other scientific software projects also rely heavily on
  source code written in CMake, we anticipate CMinx will prove
  invaluable to many additional projects as well.</p>
  <p>Concurrent with the submission of this manuscript, we have also
  released the first production version of CMinx, version 1.0.0. CMinx
  can be obtained from the Python Packaging Index via
  “<monospace>pip install CMinx</monospace>”. Alternatively, CMinx can
  be used as a CMake module via CMake’s
  “<monospace>FetchContent</monospace>” command. Despite only just
  releasing 1.0.0, the CMinx GitHub organization has already started to
  see attention and interest from developers not affiliated with the
  authors. We anticipate CMinx will be a useful productivity tool for
  the large swath of research software that uses CMake as their build
  system.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The process of building a software package written in a compiled
  language (e.g., C, C++, Fortran) has always been complicated. Over the
  years, various build system solutions have evolved to ease the
  process. Historically, there has been a propensity to treat each build
  system as a one-off use case. This is understandable since build
  systems have tended to be relatively small and tightly coupled to the
  structure and purpose of the package. With build system complexity at
  an all-time high
  (<xref alt="Bartlett et al., 2017" rid="ref-xSDK" ref-type="bibr">Bartlett
  et al., 2017</xref>;
  <xref alt="Snir et al., 2014" rid="ref-snir2014" ref-type="bibr">Snir
  et al., 2014</xref>), there is an increasing need to treat the
  underlying build system infrastructure as code. This means that the
  build system should be modularized, and those modules should be
  documented, tested, and reusable. With the popularity of C/C++ for
  high-performance computing, “build system” is increasingly becoming
  synonymous with CMake: there is a desperate need for a robust CMake
  development ecosystem.</p>
  <p>CMake already contains a number of tools and features that
  facilitate development of the target software package. For example,
  CMake’s <monospace>find_package</monospace> module simplifies
  dependency management, and the <monospace>CTest</monospace> package
  eases the process of testing the resulting software. Additional CMake
  tools can be created by writing CMake modules. While the CMake
  language is flexible and relatively simple, it is not without its
  pitfalls. Unfortunately, tools to facilitate the development of CMake
  modules are relatively sparse. Here we introduce CMinx, a tool for
  generating API documentation for CMake modules. API documentation is
  arguably one of the most basic elements of a software development
  ecosystem, and it is our hope that CMinx will serve as the foundation
  for a robust CMake development ecosystem.</p>
  <p>Anecdotal evidence
  (<xref alt="tjwrona1992, 2019" rid="ref-official_solution" ref-type="bibr">tjwrona1992,
  2019</xref>) indicates that Kitware, the developers of the CMake
  language, internally write their API documentation using reST and
  Sphinx. Following best practices, this reST documentation resides next
  to the described CMake code. Kitware has also written a Sphinx plugin
  that makes it easy to extract the API documentation as part of a
  normal Sphinx workflow. This Sphinx plugin is distributed with the
  source code for the CMake interpreter and is also available in a
  GitHub repository mirror
  (<xref alt="Kitware, 2022" rid="ref-sphinx_plugin" ref-type="bibr">Kitware,
  2022</xref>). For completeness, we note that similar Sphinx plugins
  (<xref alt="Koch, 2020" rid="ref-marco_koch" ref-type="bibr">Koch,
  2020</xref>;
  <xref alt="Lorenz, 2013" rid="ref-official_sphinx_domain" ref-type="bibr">Lorenz,
  2013</xref>) have been independently developed but appear to now be
  abandoned.</p>
  <p>To our knowledge, all of the aforementioned Sphinx plugins simply
  extract the reST API documentation verbatim. Notably, this means the
  developer is responsible for manually adding the function/macro
  signatures to the documentation, listing the function’s parameters,
  and the overall formatting. For build system developers maintaining
  one or two CMake modules, these are admittedly pretty minor
  inconveniences; however, for organizations maintaining a substantial
  CMake code base (such as those for exascale programs), these “minor
  inconveniences” can impact productivity, particularly when ensuring
  consistency. CMinx differs from previous solutions primarily in three
  ways. First, CMinx understands the grammar of the CMake language,
  meaning CMinx can automatically generate some of the documentation by
  “reading” the source code. Second, CMinx generates static reST files;
  this decreases the number of stub files developers need to maintain
  and makes it easier for the resulting documentation to be used in
  workflows that do not rely on Sphinx. Finally, CMinx has a CMake API
  to integrate more easily into existing CMake workflows.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This research was supported by the Exascale Computing Project
  (17-SC-20-SC), a collaborative effort of the U.S. Department of Energy
  Office of Science and the National Nuclear Security
  Administration.</p>
  <p>The authors would also like to acknowledge GitHub users dschiller,
  ni-dschiller, ni-fgenois, peanutfun, robertodr, and zachcran for
  suggestions, discussions, bug reports, and bug fixes.</p>
</sec>
</body>
<back>
<ref-list>
  <ref id="ref-official_solution">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>tjwrona1992</surname></name>
      </person-group>
      <article-title>What is the proper way to document a cmake module</article-title>
      <source>Stack Overflow Forum</source>
      <publisher-name>StackOverflow</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <uri>https://stackoverflow.com/a/54671996</uri>
    </element-citation>
  </ref>
  <ref id="ref-sphinx_plugin">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Kitware</surname></name>
      </person-group>
      <article-title>Sphinx domain for modern CMake</article-title>
      <publisher-name>GitHub Repository</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/scikit-build/moderncmakedomain</uri>
    </element-citation>
  </ref>
  <ref id="ref-official_sphinx_domain">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lorenz</surname><given-names>Kay-Uwe</given-names></name>
      </person-group>
      <article-title>GNU make domain</article-title>
      <source>GitHub Repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2013">2013</year>
      <uri>https://github.com/sphinx-contrib/cmakedomain</uri>
    </element-citation>
  </ref>
  <ref id="ref-marco_koch">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Koch</surname><given-names>Marco</given-names></name>
      </person-group>
      <article-title>Sphinx-cmake_domain</article-title>
      <source>GitHub Repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2020">2020</year>
      <uri>https://github.com/MarcoKoch/sphinx-cmake_domain</uri>
    </element-citation>
  </ref>
  <ref id="ref-doxygen">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Heesch</surname><given-names>Dimitri van</given-names></name>
      </person-group>
      <article-title>Doxygen</article-title>
      <source>GitHub Repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2022">2022</year>
      <uri>https://github.com/doxygen/doxygen</uri>
    </element-citation>
  </ref>
  <ref id="ref-rest">
    <element-citation>
      <article-title>reStructuredText: Markup syntax and parser component of docutils</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://docutils.sourceforge.io/rst.html</uri>
    </element-citation>
  </ref>
  <ref id="ref-yaml">
    <element-citation>
      <article-title>YAML: YAML ain’t markup language</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://yaml.org</uri>
    </element-citation>
  </ref>
  <ref id="ref-sphinx">
    <element-citation>
      <article-title>Sphinx: Python documentation generator</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://www.sphinx-doc.org/en/master/</uri>
    </element-citation>
  </ref>
  <ref id="ref-pandoc">
    <element-citation>
      <article-title>Pandoc: A universal document converter</article-title>
      <year iso-8601-date="2022">2022</year>
      <uri>https://pandoc.org/</uri>
    </element-citation>
  </ref>
  <ref id="ref-xSDK">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bartlett</surname><given-names>Roscoe</given-names></name>
        <name><surname>Demeshko</surname><given-names>Irina</given-names></name>
        <name><surname>Gamblin</surname><given-names>Todd</given-names></name>
        <name><surname>Hammond</surname><given-names>Glenn</given-names></name>
        <name><surname>Heroux</surname><given-names>Michael</given-names></name>
        <name><surname>Johnson</surname><given-names>Jeffrey</given-names></name>
        <name><surname>Klinvex</surname><given-names>Alicia</given-names></name>
        <name><surname>Li</surname><given-names>Xiaoye</given-names></name>
        <name><surname>McInnes</surname><given-names>Lois Curfman</given-names></name>
        <name><surname>Moulton</surname><given-names>J. David</given-names></name>
        <name><surname>Osei-Kuffuor</surname><given-names>Daniel</given-names></name>
        <name><surname>Sarich</surname><given-names>Jason</given-names></name>
        <name><surname>Smith</surname><given-names>Barry</given-names></name>
        <name><surname>Willenbring</surname><given-names>Jim</given-names></name>
        <name><surname>Yang</surname><given-names>Ulrike Meier</given-names></name>
      </person-group>
      <article-title>xSDK foundations: Toward an extreme-scale scientific software development kit</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2017">2017</year>
      <pub-id pub-id-type="doi">10.48550/arXiv.1702.08425</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-snir2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Snir</surname><given-names>Marc</given-names></name>
        <name><surname>Wisniewski</surname><given-names>Robert W</given-names></name>
        <name><surname>Abraham</surname><given-names>Jacob A</given-names></name>
        <name><surname>Adve</surname><given-names>Sarita V</given-names></name>
        <name><surname>Bagchi</surname><given-names>Saurabh</given-names></name>
        <name><surname>Balaji</surname><given-names>Pavan</given-names></name>
        <name><surname>Belak</surname><given-names>Jim</given-names></name>
        <name><surname>Bose</surname><given-names>Pradip</given-names></name>
        <name><surname>Cappello</surname><given-names>Franck</given-names></name>
        <name><surname>Carlson</surname><given-names>Bill</given-names></name>
        <name><surname>Chien</surname><given-names>Andrew A</given-names></name>
        <name><surname>Coteus</surname><given-names>Paul</given-names></name>
        <name><surname>DeBardeleben</surname><given-names>Nathan A</given-names></name>
        <name><surname>Diniz</surname><given-names>Pedro C</given-names></name>
        <name><surname>Engelmann</surname><given-names>Christian</given-names></name>
        <name><surname>Erez</surname><given-names>Mattan</given-names></name>
        <name><surname>Fazzari</surname><given-names>Saverio</given-names></name>
        <name><surname>Geist</surname><given-names>Al</given-names></name>
        <name><surname>Gupta</surname><given-names>Rinku</given-names></name>
        <name><surname>Johnson</surname><given-names>Fred</given-names></name>
        <name><surname>Krishnamoorthy</surname><given-names>Sriram</given-names></name>
        <name><surname>Leyffer</surname><given-names>Sven</given-names></name>
        <name><surname>Liberty</surname><given-names>Dean</given-names></name>
        <name><surname>Mitra</surname><given-names>Subhasish</given-names></name>
        <name><surname>Munson</surname><given-names>Todd</given-names></name>
        <name><surname>Schreiber</surname><given-names>Rob</given-names></name>
        <name><surname>Stearley</surname><given-names>Jon</given-names></name>
        <name><surname>Hensbergen</surname><given-names>Eric Van</given-names></name>
      </person-group>
      <article-title>Addressing failures in exascale computing</article-title>
      <source>The International Journal of High Performance Computing Applications</source>
      <year iso-8601-date="2014">2014</year>
      <volume>28</volume>
      <pub-id pub-id-type="doi">10.1177/1094342014522573</pub-id>
      <fpage>129</fpage>
      <lpage>173</lpage>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
