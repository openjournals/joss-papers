<?xml version="1.0" encoding="UTF-8"?>
<doi_batch xmlns="http://www.crossref.org/schema/5.3.1"
           xmlns:ai="http://www.crossref.org/AccessIndicators.xsd"
           xmlns:rel="http://www.crossref.org/relations.xsd"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           version="5.3.1"
           xsi:schemaLocation="http://www.crossref.org/schema/5.3.1 http://www.crossref.org/schemas/crossref5.3.1.xsd">
  <head>
    <doi_batch_id>20220927T143759-bc33828ec90440298e270ddfd36a19c3dc5b5b04</doi_batch_id>
    <timestamp>20220927143759</timestamp>
    <depositor>
      <depositor_name>JOSS Admin</depositor_name>
      <email_address>admin@theoj.org</email_address>
    </depositor>
    <registrant>The Open Journal</registrant>
  </head>
  <body>
    <journal>
      <journal_metadata>
        <full_title>Journal of Open Source Software</full_title>
        <abbrev_title>JOSS</abbrev_title>
        <issn media_type="electronic">2475-9066</issn>
        <doi_data>
          <doi>10.21105/joss</doi>
          <resource>https://joss.theoj.org/</resource>
        </doi_data>
      </journal_metadata>
      <journal_issue>
        <publication_date media_type="online">
          <month>09</month>
          <year>2022</year>
        </publication_date>
        <journal_volume>
          <volume>7</volume>
        </journal_volume>
        <issue>77</issue>
      </journal_issue>
      <journal_article publication_type="full_text">
        <titles>
          <title>CMinx: A CMake Documentation Generator</title>
        </titles>
        <contributors>
          <person_name sequence="first" contributor_role="author">
            <given_name>Branden</given_name>
            <surname>Butler</surname>
          </person_name>
          <person_name sequence="additional"
                       contributor_role="author">
            <given_name>Ryan M.</given_name>
            <surname>Richard</surname>
            <ORCID>https://orcid.org/0000-0003-4235-5179</ORCID>
          </person_name>
        </contributors>
        <publication_date>
          <month>09</month>
          <day>27</day>
          <year>2022</year>
        </publication_date>
        <pages>
          <first_page>4680</first_page>
        </pages>
        <publisher_item>
          <identifier id_type="doi">10.21105/joss.04680</identifier>
        </publisher_item>
        <ai:program name="AccessIndicators">
          <ai:license_ref applies_to="vor">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="am">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
          <ai:license_ref applies_to="tdm">http://creativecommons.org/licenses/by/4.0/</ai:license_ref>
        </ai:program>
        <rel:program>
          <rel:related_item>
            <rel:description>Software archive</rel:description>
            <rel:inter_work_relation relationship-type="references" identifier-type="doi">10.5281/zenodo.7116609</rel:inter_work_relation>
          </rel:related_item>
          <rel:related_item>
            <rel:description>GitHub review issue</rel:description>
            <rel:inter_work_relation relationship-type="hasReview" identifier-type="uri">https://github.com/openjournals/joss-reviews/issues/4680</rel:inter_work_relation>
          </rel:related_item>
        </rel:program>
        <doi_data>
          <doi>10.21105/joss.04680</doi>
          <resource>https://joss.theoj.org/papers/10.21105/joss.04680</resource>
          <collection property="text-mining">
            <item>
              <resource mime_type="application/pdf">https://joss.theoj.org/papers/10.21105/joss.04680.pdf</resource>
            </item>
          </collection>
        </doi_data>
        <citation_list>
          <citation key="official_solution">
            <article_title>What is the proper way to document a cmake
module</article_title>
            <author>tjwrona1992</author>
            <journal_title>Stack Overflow Forum</journal_title>
            <cYear>2019</cYear>
            <unstructured_citation>tjwrona1992. (2019). What is the
proper way to document a cmake module. In Stack Overflow Forum.
StackOverflow.
https://stackoverflow.com/a/54671996</unstructured_citation>
          </citation>
          <citation key="sphinx_plugin">
            <article_title>Sphinx domain for modern
CMake</article_title>
            <author>Kitware</author>
            <cYear>2022</cYear>
            <unstructured_citation>Kitware. (2022). Sphinx domain for
modern CMake. GitHub Repository.
https://github.com/scikit-build/moderncmakedomain</unstructured_citation>
          </citation>
          <citation key="official_sphinx_domain">
            <article_title>GNU make domain</article_title>
            <author>Lorenz</author>
            <journal_title>GitHub Repository</journal_title>
            <cYear>2013</cYear>
            <unstructured_citation>Lorenz, K.-U. (2013). GNU make
domain. In GitHub Repository. GitHub.
https://github.com/sphinx-contrib/cmakedomain</unstructured_citation>
          </citation>
          <citation key="marco_koch">
            <article_title>Sphinx-cmake_domain</article_title>
            <author>Koch</author>
            <journal_title>GitHub Repository</journal_title>
            <cYear>2020</cYear>
            <unstructured_citation>Koch, M. (2020). Sphinx-cmake_domain.
In GitHub Repository. GitHub.
https://github.com/MarcoKoch/sphinx-cmake_domain</unstructured_citation>
          </citation>
          <citation key="doxygen">
            <article_title>Doxygen</article_title>
            <author>Heesch</author>
            <journal_title>GitHub Repository</journal_title>
            <cYear>2022</cYear>
            <unstructured_citation>Heesch, D. van. (2022). Doxygen. In
GitHub Repository. GitHub.
https://github.com/doxygen/doxygen</unstructured_citation>
          </citation>
          <citation key="rest">
            <article_title>reStructuredText: Markup syntax and parser
component of docutils</article_title>
            <cYear>2022</cYear>
            <unstructured_citation>reStructuredText: Markup syntax and
parser component of docutils. (2022).
https://docutils.sourceforge.io/rst.html</unstructured_citation>
          </citation>
          <citation key="yaml">
            <article_title>YAML: YAML ain’t markup
language</article_title>
            <cYear>2022</cYear>
            <unstructured_citation>YAML: YAML ain’t markup language.
(2022). https://yaml.org</unstructured_citation>
          </citation>
          <citation key="sphinx">
            <article_title>Sphinx: Python documentation
generator</article_title>
            <cYear>2022</cYear>
            <unstructured_citation>Sphinx: Python documentation
generator. (2022).
https://www.sphinx-doc.org/en/master/</unstructured_citation>
          </citation>
          <citation key="pandoc">
            <article_title>Pandoc: A universal document
converter</article_title>
            <cYear>2022</cYear>
            <unstructured_citation>Pandoc: A universal document
converter. (2022). https://pandoc.org/</unstructured_citation>
          </citation>
          <citation key="xSDK">
            <article_title>xSDK foundations: Toward an extreme-scale
scientific software development kit</article_title>
            <author>Bartlett</author>
            <doi>10.48550/arXiv.1702.08425</doi>
            <cYear>2017</cYear>
            <unstructured_citation>Bartlett, R., Demeshko, I., Gamblin,
T., Hammond, G., Heroux, M., Johnson, J., Klinvex, A., Li, X., McInnes,
L. C., Moulton, J. D., Osei-Kuffuor, D., Sarich, J., Smith, B.,
Willenbring, J., &amp; Yang, U. M. (2017). xSDK foundations: Toward an
extreme-scale scientific software development kit. arXiv.
https://doi.org/10.48550/arXiv.1702.08425</unstructured_citation>
          </citation>
          <citation key="snir2014">
            <article_title>Addressing failures in exascale
computing</article_title>
            <author>Snir</author>
            <journal_title>The International Journal of High Performance
Computing Applications</journal_title>
            <volume>28</volume>
            <doi>10.1177/1094342014522573</doi>
            <cYear>2014</cYear>
            <unstructured_citation>Snir, M., Wisniewski, R. W., Abraham,
J. A., Adve, S. V., Bagchi, S., Balaji, P., Belak, J., Bose, P.,
Cappello, F., Carlson, B., Chien, A. A., Coteus, P., DeBardeleben, N.
A., Diniz, P. C., Engelmann, C., Erez, M., Fazzari, S., Geist, A.,
Gupta, R., … Hensbergen, E. V. (2014). Addressing failures in exascale
computing. The International Journal of High Performance Computing
Applications, 28, 129–173.
https://doi.org/10.1177/1094342014522573</unstructured_citation>
          </citation>
        </citation_list>
      </journal_article>
    </journal>
  </body>
</doi_batch>
