<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">7633</article-id>
<article-id pub-id-type="doi">10.21105/joss.07633</article-id>
<title-group>
<article-title>foamlib: A modern Python package for working with
OpenFOAM</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5138-0328</contrib-id>
<name>
<surname>Gerlero</surname>
<given-names>Gabriel S.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4217-698X</contrib-id>
<name>
<surname>Kler</surname>
<given-names>Pablo A.</given-names>
</name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Centro de Investigación en Métodos Computacionales (CIMEC),
UNL-CONICET, Argentina</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Universidad Nacional de Rafaela (UNRaf),
Argentina</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Departamento de Ingeniería en Sistemas de Información,
Universidad Tecnológica Nacional (UTN), Facultad Regional Santa Fe,
Argentina</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2024-11-13">
<day>13</day>
<month>11</month>
<year>2024</year>
</pub-date>
<volume>10</volume>
<issue>109</issue>
<fpage>7633</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2025</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>OpenFOAM</kwd>
<kwd>parsing</kwd>
<kwd>asyncio</kwd>
<kwd>Slurm</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>foamlib</monospace> is an open-source Python package
  that provides a high-level, modern, object-oriented programming
  interface for working with OpenFOAM cases and their files. It is
  designed to simplify the development of workflows that involve running
  OpenFOAM simulations, as well as pre- and post-processing steps.
  <monospace>foamlib</monospace> understands OpenFOAM’s file formats and
  case structures, and provides an ergonomic, Pythonic API for
  manipulating cases and files, including a full parser and in-place
  editor for the latter. It also includes support for running OpenFOAM
  cases asynchronously and on Slurm-based HPC clusters.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p><monospace>foamlib</monospace> is a Python package that offers a
  high-level programming interface for manipulating OpenFOAM cases and
  files, including a full standalone parser and in-place editor for the
  latter. It is not a thin wrapper library around existing OpenFOAM
  commands, nor does it provide Python bindings for OpenFOAM’s C++-based
  code. Except for workflows that specifically involve running OpenFOAM
  solvers or utilities, <monospace>foamlib</monospace> can be used by
  itself without requiring an installation of OpenFOAM, e.g., allowing
  for pre- or post-processing steps to be performed on a different
  system than is used to run the simulations.</p>
  <p>Dealing with OpenFOAM simulations from Python can be challenging,
  as (i) OpenFOAM uses its own non-standard file format that is not
  trivial to parse, and (ii) actually running OpenFOAM cases
  programmatically can require substantial boilerplate code for
  determining the correct commands to use, and then invoking said
  commands while accounting for other relevant considerations such as
  avoiding oversubscription of CPU resources when executing multiple
  cases at the same time. <monospace>foamlib</monospace> aims to address
  these challenges by providing a modern Python interface for
  interacting with OpenFOAM cases and files. By abstracting away the
  details of OpenFOAM’s file formats, case structures, and recipes for
  execution, <monospace>foamlib</monospace> makes it easier to create
  Python-based workflows that involve running OpenFOAM simulations, as
  well as their pre- and post-processing steps. The ultimate goal of
  <monospace>foamlib</monospace> is that code for common OpenFOAM
  workflows, such as running parallel or HPC-based optimization loops,
  can be easily written in a concise, readable, and composable
  manner.</p>
  <p>The closest existing software to <monospace>foamlib</monospace> is
  PyFoam
  (<xref alt="Gschaider, 2023" rid="ref-pyfoam" ref-type="bibr">Gschaider,
  2023</xref>), which is an established package that provides an
  alternative approach for working with OpenFOAM from Python. We believe
  that <monospace>foamlib</monospace> offers several advantages over it,
  notably including compatibility with current versions of Python,
  transparent support for fields stored in binary format, a more
  Pythonic fully type-hinted API with PEP 8–compliant naming, as well as
  support for other modern Python features such as asynchronous
  operations. We would also like to mention here other Python packages
  with similar functionality—most notably including the ability to parse
  OpenFOAM output files—: <monospace>fluidfoam</monospace>
  (<xref alt="CyrilleBonamy et al., 2025" rid="ref-fluidfoam" ref-type="bibr">CyrilleBonamy
  et al., 2025</xref>), <monospace>fluidsimfoam</monospace>
  (<xref alt="Augier &amp; Danaeifar, 2025" rid="ref-fluidsimfoam" ref-type="bibr">Augier
  &amp; Danaeifar, 2025</xref>) and <monospace>Ofpp</monospace>
  (<xref alt="Xianghua, 2023" rid="ref-ofpp" ref-type="bibr">Xianghua,
  2023</xref>).</p>
</sec>
<sec id="features">
  <title>Features</title>
  <sec id="requirements-and-installation">
    <title>Requirements and installation</title>
    <p><monospace>foamlib</monospace> is published on PyPI and
    conda-forge, meaning that it can be easily installed using either
    <monospace>pip</monospace> or <monospace>conda</monospace>. The only
    prerequisite is having an installation of Python 3.7 and later, with
    3.7 being chosen due to the fact that many high-performance
    computing (HPC) environments do not provide more up-to-date Python
    versions. However, in contrast with PyFoam, which is not currently
    compatible with Python releases newer than 3.11,
    <monospace>foamlib</monospace> works and is tested with all
    supported Python versions up to the current Python 3.13.</p>
    <p>Besides the recommended packaged installs, official Docker images
    are also made available (with variants with or without OpenFOAM
    provided).</p>
    <sec id="rationale-for-building-a-standalone-library">
      <title>Rationale for building a standalone library</title>
      <p><monospace>foamlib</monospace> is designed to be a standalone
      library that can be used independently of OpenFOAM itself.
      Notably, it does not expose or use the OpenFOAM C++ API itself.
      This allows <monospace>foamlib</monospace> to avoid any kind of
      dependence on any version or distribution of OpenFOAM, which is
      especially relevant considering that OpenFOAM is available in two
      major, incrementally diverging distributions. This design choice
      also allows for the development of workflows that involve OpenFOAM
      simulations to be performed on a different system than the one
      used to run the simulations. The major disadvantage of this
      approach is that <monospace>foamlib</monospace> needs to maintain
      its own implementation of an OpenFOAM file parser. However, this
      is mitigated by the fact that OpenFOAM’s file formats are not
      expected to change frequently, and that
      <monospace>foamlib</monospace>’s parser is designed to be flexible
      and easily extensible.</p>
    </sec>
    <sec id="openfoam-distribution-support">
      <title>OpenFOAM distribution support</title>
      <p><monospace>foamlib</monospace> is tested with both newer and
      older OpenFOAM versions from both major distributions (i.e.,
      <ext-link ext-link-type="uri" xlink:href="https://www.openfoam.com">openfoam.com</ext-link>
      and
      <ext-link ext-link-type="uri" xlink:href="https://www.openfoam.org">openfoam.org</ext-link>).
      Nevertheless, as mentioned before, OpenFOAM itself is not a
      required dependency of <monospace>foamlib</monospace>, being only
      necessary for actually running OpenFOAM solvers and utilities.</p>
    </sec>
  </sec>
  <sec id="openfoam-case-manipulation">
    <title>OpenFOAM case manipulation</title>
    <p><monospace>foamlib</monospace> provides an object-oriented
    interface for interacting with OpenFOAM cases. The main classes for
    this purpose are <monospace>FoamCaseBase</monospace>,
    <monospace>FoamCase</monospace>,
    <monospace>AsyncFoamCase</monospace>, and
    <monospace>AsyncSlurmFoamCase</monospace>; all of which are
    presented below.</p>
    <sec id="foamcasebase-class">
      <title><monospace>FoamCaseBase</monospace> class</title>
      <p>The <monospace>FoamCaseBase</monospace> class is the base class
      for all OpenFOAM case manipulation classes in
      <monospace>foamlib</monospace>. It takes the path to an OpenFOAM
      case on construction, and provides methods for inspecting and
      manipulating the case structure, whether before, during or after
      running the case. <monospace>FoamCaseBase</monospace> behaves as a
      sequence of <monospace>FoamCaseBase.TimeDirectory</monospace>
      objects, each representing a time directory in the case.
      <monospace>FoamCaseBase.TimeDirectory</monospace> objects
      themselves are mapping objects that provide access to the field
      files present in each time directory (as
      <monospace>FoamFieldFile</monospace>s—read below for information
      on file manipulation). Note, as of now, even in the case of a
      decomposed case, the <monospace>TimeDirectory</monospace> object
      will iterate over the reconstructed time directories.</p>
    </sec>
    <sec id="foamcase-class">
      <title><monospace>FoamCase</monospace> class</title>
      <p>The <monospace>FoamCase</monospace> class is a subclass of
      <monospace>FoamCaseBase</monospace> that adds functionality for
      running OpenFOAM cases. It is meant to be the default class used
      for interacting with OpenFOAM cases in
      <monospace>foamlib</monospace>. The following methods are present
      in <monospace>FoamCase</monospace> objects:</p>
      <list list-type="bullet">
        <list-item>
          <p><monospace>run()</monospace>: runs an OpenFOAM case</p>
        </list-item>
        <list-item>
          <p><monospace>clean()</monospace>: removes files generated
          during the case run</p>
        </list-item>
        <list-item>
          <p><monospace>copy()</monospace>: copies the case to a new
          location</p>
        </list-item>
        <list-item>
          <p><monospace>clone()</monospace>: makes a clean copy of the
          case (equivalent to <monospace>copy()</monospace> followed by
          <monospace>clean()</monospace>—but may be more efficient)</p>
        </list-item>
      </list>
      <p>Notably, the <monospace>run()</monospace> method can
      automatically determine how to run a case based on inspecting its
      contents and applying some heuristics. If a
      <monospace>run</monospace> or <monospace>Allrun</monospace> (or
      <monospace>Allrun-parallel</monospace>) script is present in the
      case directory, it will be used to run the case. Otherwise, the
      <monospace>run()</monospace> method can execute
      <monospace>blockMesh</monospace>, invoke an
      <monospace>Allrun.pre</monospace> script, restore the “0”
      directory from a backup, run <monospace>decomposePar</monospace>,
      and/or run the required solver (as set in the case’s
      <monospace>controlDict</monospace>) in serial or parallel mode, as
      required by the case. The behavior can be customized by passing
      specific arguments to the <monospace>run()</monospace> method.</p>
      <p>By default, the <monospace>run()</monospace> method creates log
      files in the case directory that capture the output of the invoked
      commands. Besides being included within the log files, the
      contents of the standard error stream
      (<monospace>stderr</monospace>) are also stored in memory so that
      they can be shown in the exception message if a command fails, for
      easier debugging.</p>
      <p>The <monospace>clean()</monospace> method removes all files
      generated during the case run. It uses a
      <monospace>clean</monospace> or <monospace>Allclean</monospace>
      script if present, or otherwise invokes logic that removes files
      and directories that can be re-created by running the case.</p>
      <p><monospace>foamlib</monospace> is also designed in a way that
      it can be directly used within Python-based
      <monospace>(All)run</monospace> and
      <monospace>(All)clean</monospace> scripts, without risk of calls
      to <monospace>run()</monospace> and <monospace>clean()</monospace>
      causing infinite recursion.</p>
      <p>Besides being usable as regular methods, both
      <monospace>copy()</monospace> and <monospace>clone()</monospace>
      also permit usage as context managers (i.e., with Python’s
      <monospace>with</monospace> statement), which can be used to
      create temporary copies of a case, e.g., for testing or
      optimization runs. Cases created this way are automatically
      deleted when exiting the relevant code block.</p>
    </sec>
    <sec id="asyncfoamcase-class">
      <title><monospace>AsyncFoamCase</monospace> class</title>
      <p><monospace>AsyncFoamCase</monospace> is an alternative subclass
      of <monospace>FoamCaseBase</monospace> that provides an
      asynchronous interface for running OpenFOAM cases. It is designed
      to work with Python’s <monospace>asyncio</monospace> library,
      allowing for the execution of multiple OpenFOAM cases concurrently
      in a single Python process.</p>
      <p>In <monospace>AsyncFoamCase</monospace>, all of the
      <monospace>run()</monospace>, <monospace>clean()</monospace>,
      <monospace>copy()</monospace>, and <monospace>clone()</monospace>
      methods are asynchronous coroutines, which can be simply awaited
      from other asynchronous code. These methods otherwise retain the
      same semantics as their synchronous counterparts in
      <monospace>FoamCase</monospace>.</p>
      <p>In order to avoid oversubscription of the available
      computational resources, <monospace>AsyncFoamCase</monospace>
      defines a mutable class attribute named
      <monospace>max_cpus</monospace> (defaulting to the number of
      available CPUs) that limits how many cases can be run
      concurrently. If a <monospace>run()</monospace> call being awaited
      requires more CPUs than are available, the case will not be
      executed immediately but will rather wait until enough CPUs are
      freed up by the completion of other <monospace>run()</monospace>
      calls.</p>
      <p>Besides its obvious use to orchestrate parallel optimization
      loops, <monospace>AsyncFoamCase</monospace> can also be used to
      speed up testing workflows that involve running multiple OpenFOAM
      cases by running them concurrently. For instance, it can be used
      in conjunction with the pytest
      (<xref alt="Krekel et al., 2004" rid="ref-pytest" ref-type="bibr">Krekel
      et al., 2004</xref>) framework and the
      <monospace>pytest-asyncio-cooperative</monospace>
      (<xref alt="Thiart, 2024" rid="ref-pytest-asyncio-cooperative" ref-type="bibr">Thiart,
      2024</xref>) plugin, as the authors of this paper currently do to
      test several OpenFOAM-based projects
      (<xref alt="Gerlero et al., 2021" rid="ref-electromicrotransport" ref-type="bibr">Gerlero
      et al., 2021</xref>,
      <xref alt="2024" rid="ref-porousmicrotransport" ref-type="bibr">2024</xref>;
      <xref alt="Gerlero, 2024" rid="ref-openfoam-app" ref-type="bibr">Gerlero,
      2024</xref>;
      <xref alt="Gerlero &amp; Kler, 2024" rid="ref-reagency" ref-type="bibr">Gerlero
      &amp; Kler, 2024</xref>).</p>
    </sec>
    <sec id="asyncslurmfoamcase-class">
      <title><monospace>AsyncSlurmFoamCase</monospace> class</title>
      <p><monospace>AsyncSlurmFoamCase</monospace> is a direct subclass
      of <monospace>AsyncFoamCase</monospace> that adds support for
      running OpenFOAM cases on Slurm-based HPC clusters. When using
      this class, every call to <monospace>run()</monospace> by default
      will run the case by submitting one or more Slurm jobs to the
      cluster. An optional <monospace>fallback</monospace> keyword
      argument can be set to <monospace>True</monospace> to run the case
      locally if Slurm is not available, allowing for seamless local and
      cluster-based execution.</p>
    </sec>
  </sec>
  <sec id="openfoam-file-manipulation">
    <title>OpenFOAM file manipulation</title>
    <p><monospace>foamlib</monospace> also provides an object-oriented
    interface for reading from and writing to OpenFOAM files. The main
    classes for this purpose are <monospace>FoamFile</monospace> and
    <monospace>FoamFieldFile</monospace>, which are described below.</p>
    <sec id="foamfile-class">
      <title><monospace>FoamFile</monospace> class</title>
      <p>The <monospace>FoamFile</monospace> class offers high-level
      facilities for reading and writing OpenFOAM files, providing an
      interface similar to that of a Python <monospace>dict</monospace>.
      <monospace>FoamFile</monospace> understands OpenFOAM’s common
      input/output file formats, and is able to edit file contents in
      place without disrupting formatting and comments. Most types of
      OpenFOAM “FoamFile” files are supported, meaning that
      <monospace>FoamFile</monospace> can be used for both pre- and
      post-processing tasks.</p>
      <p>OpenFOAM data types stored in files are mapped to built-in
      Python or NumPy
      (<xref alt="Harris et al., 2020" rid="ref-numpy" ref-type="bibr">Harris
      et al., 2020</xref>) types as much as possible, making it easy to
      work with OpenFOAM data in Python.
      <xref alt="Table 1" rid="datatypes">Table 1</xref> shows the
      mapping of OpenFOAM data types to Python data types with
      <monospace>foamlib</monospace>. Also, disambiguation between
      Python data types that may represent different OpenFOAM data types
      (e.g., a scalar value and a uniform scalar field) is resolved by
      <monospace>foamlib</monospace> at the time of writing by
      considering their contextual location within the file. The major
      exception to this preference for built-ins is posed by the
      <monospace>FoamFile.SubDict</monospace> class, which is returned
      for sub-dictionaries contained in
      <monospace>FoamFile</monospace>s, and allows for one-step
      modification of entries in nested dictionary structures—as is
      commonly required when configuring OpenFOAM cases.</p>
      <p>For clarity and additional efficiency,
      <monospace>FoamFile</monospace> objects can be used as context
      managers to make multiple reads and writes to the same file while
      minimizing the number of filesystem and parsing operations
      required.</p>
      <p>Finally, we note that all OpenFOAM file formats are
      transparently supported by <monospace>foamlib</monospace>,
      including ASCII, double- and single-precision binary formats, as
      well as compressed files.</p>
      <table-wrap>
        <caption>
          <p>Mapping of OpenFOAM data types to Python data types with
          <monospace>foamlib</monospace>.
          <styled-content id="datatypes"></styled-content></p>
        </caption>
        <table>
          <colgroup>
            <col width="18%" />
            <col width="33%" />
            <col width="49%" />
          </colgroup>
          <thead>
            <tr>
              <th align="center">OpenFOAM</th>
              <th align="center"><monospace>foamlib</monospace> (accepts
              and returns)</th>
              <th align="center"><monospace>foamlib</monospace> (also
              accepts)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">scalar</td>
              <td align="center"><monospace>float</monospace></td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">vector/tensor</td>
              <td align="center"><monospace>numpy.ndarray</monospace> |
              <monospace>list[float]</monospace></td>
              <td align="center"><monospace>Sequence[float]</monospace></td>
            </tr>
            <tr>
              <td align="center">label</td>
              <td align="center"><monospace>int</monospace></td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">switch</td>
              <td align="center"><monospace>bool</monospace></td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">word</td>
              <td align="center"><monospace>str</monospace></td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">string</td>
              <td align="center"><monospace>str</monospace>
              (quoted)</td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">multiple tokens</td>
              <td align="center"><monospace>tuple</monospace></td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">list</td>
              <td align="center"><monospace>list</monospace></td>
              <td align="center"><monospace>Sequence</monospace></td>
            </tr>
            <tr>
              <td align="center">dictionary</td>
              <td align="center"><monospace>FoamFile.SubDict</monospace>
              | <monospace>dict</monospace></td>
              <td align="center"><monospace>Mapping</monospace></td>
            </tr>
            <tr>
              <td align="center">dictionary entry</td>
              <td align="center"><monospace>tuple</monospace></td>
              <td align="center"></td>
            </tr>
            <tr>
              <td align="center">uniform field</td>
              <td align="center"><monospace>float</monospace> |
              <monospace>numpy.ndarray</monospace></td>
              <td align="center"><monospace>Sequence[float]</monospace></td>
            </tr>
            <tr>
              <td align="center">non-uniform field</td>
              <td align="center"><monospace>numpy.ndarray</monospace></td>
              <td align="center"><monospace>Sequence[float]</monospace>
              | <monospace>Sequence[Sequence[float]]</monospace></td>
            </tr>
            <tr>
              <td align="center">dimension set</td>
              <td align="center"><monospace>FoamFile.DimensionSet</monospace></td>
              <td align="center"><monospace>Sequence[float]</monospace>
              | <monospace>numpy.ndarray</monospace></td>
            </tr>
            <tr>
              <td align="center">dimensioned</td>
              <td align="center"><monospace>FoamFile.Dimensioned</monospace></td>
              <td align="center"></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </sec>
    <sec id="foamfieldfile-class">
      <title><monospace>FoamFieldFile</monospace> class</title>
      <p><monospace>FoamFieldFile</monospace> is a convenience subclass
      of <monospace>FoamFile</monospace> that simply adds properties for
      accessing data expected to be present in files that represent
      OpenFOAM fields, such as <monospace>internal_field</monospace>,
      <monospace>dimensions</monospace>, and
      <monospace>boundary_field</monospace>.</p>
    </sec>
  </sec>
  <sec id="documentation-and-examples">
    <title>Documentation and examples</title>
    <p>Examples of <monospace>foamlib</monospace> usage are provided in
    the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/gerlero/foamlib">README
    file</ext-link> of the project. Additionally, Sphinx-based
    documentation covering the entirety of the public API is available
    at
    <ext-link ext-link-type="uri" xlink:href="https://foamlib.readthedocs.io">foamlib.readthedocs.io</ext-link>.</p>
  </sec>
</sec>
<sec id="implementation-details">
  <title>Implementation details</title>
  <sec id="type-hints">
    <title>Type hints</title>
    <p><monospace>foamlib</monospace> is fully typed using Python’s type
    hints, which makes it easier to understand and use the library, as
    well as enabling automatic checks for type errors using tools like
    mypy
    (<xref alt="Lehtosalo, 2024" rid="ref-mypy" ref-type="bibr">Lehtosalo,
    2024</xref>).</p>
  </sec>
  <sec id="parsing">
    <title>Parsing</title>
    <p><monospace>foamlib</monospace> contains a full parser for
    OpenFOAM files, which is able to understand and write to the
    different types of files used by OpenFOAM. The parser is implemented
    using the <monospace>pyparsing</monospace>
    (<xref alt="McGuire, 2024" rid="ref-pyparsing" ref-type="bibr">McGuire,
    2024</xref>) library, which provides a powerful and flexible way to
    define parsing grammars.</p>
    <p>A special case parser is internally used for non-uniform OpenFOAM
    fields, which can commonly contain very large amounts of data in
    either ASCII or binary formats. The specialized parser uses regular
    expressions to extract these data, which results in greatly improved
    parsing performance—a more than 25x speedup versus PyFoam, as
    measured on a MacBook Air (Apple Inc., Cupertino, Calif., USA) with
    an M1 processor and 8 GB of system RAM—, while not sacrificing any
    of the generality of the parsing grammar. For extra efficiency and
    convenience, these fields map to NumPy arrays in Python.</p>
  </sec>
  <sec id="asynchronous-support">
    <title>Asynchronous support</title>
    <p>Methods of <monospace>FoamCase</monospace> and
    <monospace>AsyncFoamCase</monospace> have been carefully implemented
    in a way that greatly avoids duplication of code between the
    synchronous and asynchronous versions by factoring out the common
    logic into a helper intermediate class.</p>
  </sec>
  <sec id="continuous-integration">
    <title>Continuous integration</title>
    <p>Continuous integration of <monospace>foamlib</monospace> is
    performed automatically using GitHub Actions, and includes:</p>
    <list list-type="bullet">
      <list-item>
        <p>Testing with all supported Python versions (currently 3.7 to
        3.13)</p>
      </list-item>
      <list-item>
        <p>Testing with multiple OpenFOAM distributions and versions
        (currently 9, 12, 2006 and 2406)</p>
      </list-item>
      <list-item>
        <p>Testing on a Slurm environment</p>
      </list-item>
      <list-item>
        <p>Code coverage tracking with Codecov</p>
      </list-item>
      <list-item>
        <p>Type checking with mypy</p>
      </list-item>
      <list-item>
        <p>Code linting and formatting with Ruff</p>
      </list-item>
      <list-item>
        <p>Package building with uv</p>
      </list-item>
    </list>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <title></title>
  <ref id="ref-electromicrotransport">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gerlero</surname><given-names>Gabriel S.</given-names></name>
        <name><surname>Márquez Damián</surname><given-names>Santiago</given-names></name>
        <name><surname>Kler</surname><given-names>Pablo A.</given-names></name>
      </person-group>
      <article-title>electroMicroTransport v2107: Open-source toolbox for paper-based electromigrative separations</article-title>
      <source>Computer Physics Communications</source>
      <year iso-8601-date="2021">2021</year>
      <volume>269</volume>
      <pub-id pub-id-type="doi">10.1016/j.cpc.2021.108143</pub-id>
      <fpage>108143</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-fluidfoam">
    <element-citation publication-type="software">
      <person-group person-group-type="author">
        <name><surname>CyrilleBonamy</surname></name>
        <name><surname>jchauchat</surname></name>
        <name><surname>QuentinClemencot</surname></name>
        <name><surname>Montellà</surname><given-names>Eduard Puig</given-names></name>
        <name><surname>Höhn</surname><given-names>Patrick</given-names></name>
        <name><surname>mathieu7an</surname></name>
        <name><surname>AlixBernard</surname></name>
        <name><surname>Gonçalves</surname><given-names>Gabriel</given-names></name>
        <name><surname>MarieSkorlic</surname></name>
        <name><surname>gnikit</surname></name>
        <name><surname>remichassagne</surname></name>
      </person-group>
      <article-title>Fluiddyn/fluidfoam: v0.2.9</article-title>
      <publisher-name>Zenodo</publisher-name>
      <year iso-8601-date="2025-02">2025</year><month>02</month>
      <uri>https://doi.org/10.5281/zenodo.14893673</uri>
      <pub-id pub-id-type="doi">10.5281/zenodo.14893673</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-fluidsimfoam">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Augier</surname><given-names>Pierre</given-names></name>
        <name><surname>Danaeifar</surname><given-names>Pooria</given-names></name>
      </person-group>
      <article-title>fluidsimfoam: Python framework for OpenFOAM</article-title>
      <source>Heptapod repository</source>
      <publisher-name>Heptapod</publisher-name>
      <year iso-8601-date="2025">2025</year>
      <uri>https://foss.heptapod.net/fluiddyn/fluidsimfoam</uri>
    </element-citation>
  </ref>
  <ref id="ref-mypy">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lehtosalo</surname><given-names>Jukka</given-names></name>
      </person-group>
      <article-title>mypy: Optional static typing for python</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/python/mypy</uri>
    </element-citation>
  </ref>
  <ref id="ref-numpy">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Harris</surname><given-names>Charles R</given-names></name>
        <name><surname>Millman</surname><given-names>K Jarrod</given-names></name>
        <name><surname>Van Der Walt</surname><given-names>Stéfan J</given-names></name>
        <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
        <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
        <name><surname>Cournapeau</surname><given-names>David</given-names></name>
        <name><surname>Wieser</surname><given-names>Eric</given-names></name>
        <name><surname>Taylor</surname><given-names>Julian</given-names></name>
        <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
        <name><surname>Smith</surname><given-names>Nathaniel J</given-names></name>
        <name><surname>others</surname></name>
      </person-group>
      <article-title>Array programming with NumPy</article-title>
      <source>Nature</source>
      <year iso-8601-date="2020">2020</year>
      <volume>585</volume>
      <issue>7825</issue>
      <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      <fpage>357</fpage>
      <lpage>362</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ofpp">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Xianghua</surname><given-names>Xu</given-names></name>
      </person-group>
      <article-title>Ofpp: OpenFOAM Python Parser</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://github.com/xu-xianghua/ofpp</uri>
    </element-citation>
  </ref>
  <ref id="ref-openfoam-app">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gerlero</surname><given-names>Gabriel S.</given-names></name>
      </person-group>
      <article-title>OpenFOAM.app: Native OpenFOAM for macOS</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/gerlero/openfoam-app</uri>
    </element-citation>
  </ref>
  <ref id="ref-porousmicrotransport">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gerlero</surname><given-names>Gabriel S.</given-names></name>
        <name><surname>Guerenstein</surname><given-names>Zahar I.</given-names></name>
        <name><surname>Franck</surname><given-names>Nicolás</given-names></name>
        <name><surname>Berli</surname><given-names>Claudio L. A.</given-names></name>
        <name><surname>Kler</surname><given-names>Pablo A.</given-names></name>
      </person-group>
      <article-title>Comprehensive numerical prototyping of paper-based microfluidic devices using open-source tools</article-title>
      <source>Talanta Open</source>
      <year iso-8601-date="2024">2024</year>
      <volume>10</volume>
      <pub-id pub-id-type="doi">10.1016/j.talo.2024.100350</pub-id>
      <fpage>100350</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-pyfoam">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gschaider</surname><given-names>Bernhard</given-names></name>
      </person-group>
      <article-title>PyFoam: Python utilities for OpenFOAM</article-title>
      <source>PyPI project</source>
      <publisher-name>Python Package Index</publisher-name>
      <year iso-8601-date="2023">2023</year>
      <uri>https://pypi.org/project/PyFoam/</uri>
    </element-citation>
  </ref>
  <ref id="ref-pyparsing">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>McGuire</surname><given-names>Paul</given-names></name>
      </person-group>
      <article-title>pyparsing: Python library for creating PEG parsers</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/pyparsing/pyparsing</uri>
    </element-citation>
  </ref>
  <ref id="ref-pytest">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Krekel</surname><given-names>Holger</given-names></name>
        <name><surname>Oliveira</surname><given-names>Bruno</given-names></name>
        <name><surname>Pfannschmidt</surname><given-names>Ronny</given-names></name>
        <name><surname>Bruynooghe</surname><given-names>Floris</given-names></name>
        <name><surname>Laugher</surname><given-names>Brianna</given-names></name>
        <name><surname>Bruhin</surname><given-names>Florian</given-names></name>
      </person-group>
      <article-title>pytest 8.3</article-title>
      <year iso-8601-date="2004">2004</year>
      <uri>https://github.com/pytest-dev/pytest</uri>
    </element-citation>
  </ref>
  <ref id="ref-pytest-asyncio-cooperative">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Thiart</surname><given-names>Willem</given-names></name>
      </person-group>
      <article-title>pytest-asyncio-cooperative: Run all your asynchronous tests cooperatively</article-title>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/willemt/pytest-asyncio-cooperative</uri>
    </element-citation>
  </ref>
  <ref id="ref-reagency">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gerlero</surname><given-names>Gabriel S.</given-names></name>
        <name><surname>Kler</surname><given-names>Pablo A.</given-names></name>
      </person-group>
      <article-title>reagency: A simple, extensible reaction model for OpenFOAM</article-title>
      <source>GitHub repository</source>
      <publisher-name>GitHub</publisher-name>
      <year iso-8601-date="2024">2024</year>
      <uri>https://github.com/gerlero/reagency</uri>
    </element-citation>
  </ref>
</ref-list>
</back>
</article>
